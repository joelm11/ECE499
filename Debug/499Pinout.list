
499Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b9c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007d70  08007d70  00017d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800819c  0800819c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080081a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004284  200001e0  08008384  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004464  08008384  00024464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b12  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7f  00000000  00000000  00037d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001620  00000000  00000000  0003b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  0003cdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000542b  00000000  00000000  0003e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019afb  00000000  00000000  00043663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d890  00000000  00000000  0005d15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be8  00000000  00000000  000eaa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007d54 	.word	0x08007d54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08007d54 	.word	0x08007d54

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8000efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <vApplicationGetIdleTaskMemory+0x30>)
 8000f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	200002b4 	.word	0x200002b4

08000f20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b088      	sub	sp, #32
 8000f24:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_FREERTOS_Init+0x30>)
 8000f28:	1d3c      	adds	r4, r7, #4
 8000f2a:	461d      	mov	r5, r3
 8000f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 fefc 	bl	8003d3a <osThreadCreate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <MX_FREERTOS_Init+0x34>)
 8000f46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f50:	08007d7c 	.word	0x08007d7c
 8000f54:	200001fc 	.word	0x200001fc

08000f58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f002 ff36 	bl	8003dd2 <osDelay>
 8000f66:	e7fb      	b.n	8000f60 <StartDefaultTask+0x8>

08000f68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x114>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a3d      	ldr	r2, [pc, #244]	; (800107c <MX_GPIO_Init+0x114>)
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x114>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	613b      	str	r3, [r7, #16]
 8000f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <MX_GPIO_Init+0x114>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <MX_GPIO_Init+0x114>)
 8000fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b34      	ldr	r3, [pc, #208]	; (800107c <MX_GPIO_Init+0x114>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0x114>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	; (800107c <MX_GPIO_Init+0x114>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0x114>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_GPIO_Init+0x114>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <MX_GPIO_Init+0x114>)
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_GPIO_Init+0x114>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f242 31b0 	movw	r1, #9136	; 0x23b0
 8000ff4:	4822      	ldr	r0, [pc, #136]	; (8001080 <MX_GPIO_Init+0x118>)
 8000ff6:	f001 f927 	bl	8002248 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2158      	movs	r1, #88	; 0x58
 8000ffe:	4821      	ldr	r0, [pc, #132]	; (8001084 <MX_GPIO_Init+0x11c>)
 8001000:	f001 f922 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8001004:	f242 33b0 	movw	r3, #9136	; 0x23b0
 8001008:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	4818      	ldr	r0, [pc, #96]	; (8001080 <MX_GPIO_Init+0x118>)
 800101e:	f000 ff9f 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001022:	2358      	movs	r3, #88	; 0x58
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4812      	ldr	r0, [pc, #72]	; (8001084 <MX_GPIO_Init+0x11c>)
 800103a:	f000 ff91 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin|IMU_INT1_Pin|IMU_INT2_Pin|DEB_B_Pin
 800103e:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001042:	617b      	str	r3, [r7, #20]
                          |DEB_A_Pin|ROT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001044:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_GPIO_Init+0x120>)
 8001056:	f000 ff83 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEL_0_Pin|SEL_1_Pin|PG_3V3_Pin;
 800105a:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_GPIO_Init+0x11c>)
 8001070:	f000 ff76 	bl	8001f60 <HAL_GPIO_Init>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40023800 	.word	0x40023800
 8001080:	40020800 	.word	0x40020800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400

0800108c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_I2C1_Init+0x50>)
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <MX_I2C1_Init+0x54>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_I2C1_Init+0x50>)
 8001098:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_I2C1_Init+0x58>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_I2C1_Init+0x50>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_I2C1_Init+0x50>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_I2C1_Init+0x50>)
 80010aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_I2C1_Init+0x50>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MX_I2C1_Init+0x50>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_I2C1_Init+0x50>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <MX_I2C1_Init+0x50>)
 80010ca:	f001 f8d7 	bl	800227c <HAL_I2C_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010d4:	f000 f964 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200004b4 	.word	0x200004b4
 80010e0:	40005400 	.word	0x40005400
 80010e4:	000186a0 	.word	0x000186a0

080010e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a19      	ldr	r2, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x84>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d12b      	bne.n	8001162 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a17      	ldr	r2, [pc, #92]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001114:	f043 0302 	orr.w	r3, r3, #2
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800112a:	2312      	movs	r3, #18
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001136:	2304      	movs	r3, #4
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <HAL_I2C_MspInit+0x8c>)
 8001142:	f000 ff0d 	bl	8001f60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_I2C_MspInit+0x88>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001150:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_I2C_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40005400 	.word	0x40005400
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400

08001178 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <MX_LPTIM1_Init+0x50>)
 8001180:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80011a8:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 80011aa:	f001 f9ab 	bl	8002504 <HAL_LPTIM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 80011b4:	f000 f8f4 	bl	80013a0 <Error_Handler>
  }
  __HAL_LPTIM_OPTR_CONFIG(&hlptim1, LPTIM_OP_PAD_AF);
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <MX_LPTIM1_Init+0x4c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000508 	.word	0x20000508
 80011c8:	40002400 	.word	0x40002400

080011cc <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	; 0x40
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
  if(lptimHandle->Instance==LPTIM1)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a20      	ldr	r2, [pc, #128]	; (800127c <HAL_LPTIM_MspInit+0xb0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d139      	bne.n	8001274 <HAL_LPTIM_MspInit+0xa8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001200:	2310      	movs	r3, #16
 8001202:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4618      	mov	r0, r3
 800120e:	f001 fc03 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8001218:	f000 f8c2 	bl	80013a0 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a16      	ldr	r2, [pc, #88]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	; 0x30
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_LPTIM_MspInit+0xb4>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC1     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001254:	2302      	movs	r3, #2
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001258:	2302      	movs	r3, #2
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001260:	2300      	movs	r3, #0
 8001262:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001264:	2301      	movs	r3, #1
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <HAL_LPTIM_MspInit+0xb8>)
 8001270:	f000 fe76 	bl	8001f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001274:	bf00      	nop
 8001276:	3740      	adds	r7, #64	; 0x40
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40002400 	.word	0x40002400
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f000 fd44 	bl	8001d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 f816 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f7ff fe68 	bl	8000f68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001298:	f7ff fef8 	bl	800108c <MX_I2C1_Init>
  MX_TIM5_Init();
 800129c:	f000 fb04 	bl	80018a8 <MX_TIM5_Init>
  MX_SPI1_Init();
 80012a0:	f000 f884 	bl	80013ac <MX_SPI1_Init>
  MX_TIM9_Init();
 80012a4:	f000 fb5a 	bl	800195c <MX_TIM9_Init>
  MX_LPTIM1_Init();
 80012a8:	f7ff ff66 	bl	8001178 <MX_LPTIM1_Init>
  MX_TIM1_Init();
 80012ac:	f000 fa78 	bl	80017a0 <MX_TIM1_Init>
  MX_TIM11_Init();
 80012b0:	f000 fb9a 	bl	80019e8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80012b4:	f7ff fe34 	bl	8000f20 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012b8:	f002 fd38 	bl	8003d2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <main+0x34>
	...

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2234      	movs	r2, #52	; 0x34
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f004 f8c6 	bl	8005460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <SystemClock_Config+0xb4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <SystemClock_Config+0xb4>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <SystemClock_Config+0xb4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <SystemClock_Config+0xb8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <SystemClock_Config+0xb8>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <SystemClock_Config+0xb8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	2301      	movs	r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001324:	2310      	movs	r3, #16
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fc4d 	bl	8002bd0 <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800133c:	f000 f830 	bl	80013a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f95e 	bl	800261c <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001366:	f000 f81b 	bl	80013a0 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	; 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d101      	bne.n	8001392 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138e:	f000 fce5 	bl	8001d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40001000 	.word	0x40001000

080013a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <Error_Handler+0x8>
	...

080013ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	; (8001414 <MX_SPI1_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI1_Init+0x64>)
 80013b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI1_Init+0x64>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI1_Init+0x64>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI1_Init+0x64>)
 80013f8:	220f      	movs	r2, #15
 80013fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_SPI1_Init+0x64>)
 80013fe:	f001 fe6b 	bl	80030d8 <HAL_SPI_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001408:	f7ff ffca 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000538 	.word	0x20000538
 8001414:	40013000 	.word	0x40013000

08001418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_SPI_MspInit+0x84>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12b      	bne.n	8001492 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a17      	ldr	r2, [pc, #92]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_SPI_MspInit+0x88>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001472:	23a0      	movs	r3, #160	; 0xa0
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001482:	2305      	movs	r3, #5
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <HAL_SPI_MspInit+0x8c>)
 800148e:	f000 fd67 	bl	8001f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001492:	bf00      	nop
 8001494:	3728      	adds	r7, #40	; 0x28
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40013000 	.word	0x40013000
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40020000 	.word	0x40020000

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_MspInit+0x54>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a11      	ldr	r2, [pc, #68]	; (80014fc <HAL_MspInit+0x54>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x54>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_MspInit+0x54>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_MspInit+0x54>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_MspInit+0x54>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210f      	movs	r1, #15
 80014ea:	f06f 0001 	mvn.w	r0, #1
 80014ee:	f000 fd0d 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2036      	movs	r0, #54	; 0x36
 8001516:	f000 fcf9 	bl	8001f0c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151a:	2036      	movs	r0, #54	; 0x36
 800151c:	f000 fd12 	bl	8001f44 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <HAL_InitTick+0xa0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_InitTick+0xa0>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6413      	str	r3, [r2, #64]	; 0x40
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_InitTick+0xa0>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153c:	f107 0210 	add.w	r2, r7, #16
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f001 fa34 	bl	80029b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800154c:	f001 fa1e 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8001550:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_InitTick+0xa4>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0c9b      	lsrs	r3, r3, #18
 800155c:	3b01      	subs	r3, #1
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <HAL_InitTick+0xa8>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_InitTick+0xac>)
 8001564:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_InitTick+0xa8>)
 8001568:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_InitTick+0xa8>)
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_InitTick+0xa8>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_InitTick+0xa8>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <HAL_InitTick+0xa8>)
 8001582:	f001 fe32 	bl	80031ea <HAL_TIM_Base_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d104      	bne.n	8001596 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800158c:	4806      	ldr	r0, [pc, #24]	; (80015a8 <HAL_InitTick+0xa8>)
 800158e:	f001 fe7b 	bl	8003288 <HAL_TIM_Base_Start_IT>
 8001592:	4603      	mov	r3, r0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3730      	adds	r7, #48	; 0x30
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	431bde83 	.word	0x431bde83
 80015a8:	20000590 	.word	0x20000590
 80015ac:	40001000 	.word	0x40001000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM6_DAC_IRQHandler+0x10>)
 80015e2:	f001 feee 	bl	80033c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000590 	.word	0x20000590

080015f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_kill>:

int _kill(int pid, int sig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800160a:	f003 fdef 	bl	80051ec <__errno>
 800160e:	4603      	mov	r3, r0
 8001610:	2216      	movs	r2, #22
 8001612:	601a      	str	r2, [r3, #0]
	return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_exit>:

void _exit (int status)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe7 	bl	8001600 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001632:	e7fe      	b.n	8001632 <_exit+0x12>

08001634 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	e00a      	b.n	800165c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001646:	f3af 8000 	nop.w
 800164a:	4601      	mov	r1, r0
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	1c5a      	adds	r2, r3, #1
 8001650:	60ba      	str	r2, [r7, #8]
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3301      	adds	r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	dbf0      	blt.n	8001646 <_read+0x12>
	}

return len;
 8001664:	687b      	ldr	r3, [r7, #4]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e009      	b.n	8001694 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	60ba      	str	r2, [r7, #8]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4618      	mov	r0, r3
 800168a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf1      	blt.n	8001680 <_write+0x12>
	}
	return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_close>:

int _close(int file)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
	return -1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	605a      	str	r2, [r3, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <_isatty>:

int _isatty(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
	return 1;
 80016e6:	2301      	movs	r3, #1
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
	return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	; (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f003 fd54 	bl	80051ec <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	; (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20008000 	.word	0x20008000
 8001770:	00000400 	.word	0x00000400
 8001774:	200005d8 	.word	0x200005d8
 8001778:	20004468 	.word	0x20004468

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b092      	sub	sp, #72	; 0x48
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2220      	movs	r2, #32
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f003 fe48 	bl	8005460 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017d2:	4a34      	ldr	r2, [pc, #208]	; (80018a4 <MX_TIM1_Init+0x104>)
 80017d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017d6:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017dc:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017e2:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017fc:	4828      	ldr	r0, [pc, #160]	; (80018a0 <MX_TIM1_Init+0x100>)
 80017fe:	f001 fd91 	bl	8003324 <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001808:	f7ff fdca 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001818:	4619      	mov	r1, r3
 800181a:	4821      	ldr	r0, [pc, #132]	; (80018a0 <MX_TIM1_Init+0x100>)
 800181c:	f002 f9ae 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001826:	f7ff fdbb 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	; 0x60
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800183e:	2300      	movs	r3, #0
 8001840:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184a:	2200      	movs	r2, #0
 800184c:	4619      	mov	r1, r3
 800184e:	4814      	ldr	r0, [pc, #80]	; (80018a0 <MX_TIM1_Init+0x100>)
 8001850:	f001 fec0 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800185a:	f7ff fda1 	bl	80013a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001876:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	4619      	mov	r1, r3
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <MX_TIM1_Init+0x100>)
 8001882:	f002 f9d5 	bl	8003c30 <HAL_TIMEx_ConfigBreakDeadTime>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800188c:	f7ff fd88 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001890:	4803      	ldr	r0, [pc, #12]	; (80018a0 <MX_TIM1_Init+0x100>)
 8001892:	f000 f967 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001896:	bf00      	nop
 8001898:	3748      	adds	r7, #72	; 0x48
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200005dc 	.word	0x200005dc
 80018a4:	40010000 	.word	0x40010000

080018a8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08a      	sub	sp, #40	; 0x28
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <MX_TIM5_Init+0xac>)
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <MX_TIM5_Init+0xb0>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018d0:	4b20      	ldr	r3, [pc, #128]	; (8001954 <MX_TIM5_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <MX_TIM5_Init+0xac>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <MX_TIM5_Init+0xac>)
 80018de:	f04f 32ff 	mov.w	r2, #4294967295
 80018e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_TIM5_Init+0xac>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_TIM5_Init+0xac>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018f0:	4818      	ldr	r0, [pc, #96]	; (8001954 <MX_TIM5_Init+0xac>)
 80018f2:	f001 fd17 	bl	8003324 <HAL_TIM_PWM_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80018fc:	f7ff fd50 	bl	80013a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	4619      	mov	r1, r3
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <MX_TIM5_Init+0xac>)
 8001910:	f002 f934 	bl	8003b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800191a:	f7ff fd41 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191e:	2360      	movs	r3, #96	; 0x60
 8001920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <MX_TIM5_Init+0xac>)
 8001936:	f001 fe4d 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001940:	f7ff fd2e 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <MX_TIM5_Init+0xac>)
 8001946:	f000 f90d 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000624 	.word	0x20000624
 8001958:	40000c00 	.word	0x40000c00

0800195c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
 8001970:	615a      	str	r2, [r3, #20]
 8001972:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001974:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <MX_TIM9_Init+0x84>)
 8001976:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <MX_TIM9_Init+0x88>)
 8001978:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <MX_TIM9_Init+0x84>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <MX_TIM9_Init+0x84>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <MX_TIM9_Init+0x84>)
 8001988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800198c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <MX_TIM9_Init+0x84>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <MX_TIM9_Init+0x84>)
 8001996:	2200      	movs	r2, #0
 8001998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800199a:	4811      	ldr	r0, [pc, #68]	; (80019e0 <MX_TIM9_Init+0x84>)
 800199c:	f001 fcc2 	bl	8003324 <HAL_TIM_PWM_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80019a6:	f7ff fcfb 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	2360      	movs	r3, #96	; 0x60
 80019ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	4619      	mov	r1, r3
 80019c0:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM9_Init+0x84>)
 80019c2:	f001 fe07 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80019cc:	f7ff fce8 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM9_Init+0x84>)
 80019d2:	f000 f8c7 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000066c 	.word	0x2000066c
 80019e4:	40014000 	.word	0x40014000

080019e8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a00:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a02:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <MX_TIM11_Init+0x98>)
 8001a04:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a26:	4815      	ldr	r0, [pc, #84]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a28:	f001 fbdf 	bl	80031ea <HAL_TIM_Base_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001a32:	f7ff fcb5 	bl	80013a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001a36:	4811      	ldr	r0, [pc, #68]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a38:	f001 fc74 	bl	8003324 <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001a42:	f7ff fcad 	bl	80013a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a46:	2360      	movs	r3, #96	; 0x60
 8001a48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a5e:	f001 fdb9 	bl	80035d4 <HAL_TIM_PWM_ConfigChannel>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001a68:	f7ff fc9a 	bl	80013a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001a6c:	4803      	ldr	r0, [pc, #12]	; (8001a7c <MX_TIM11_Init+0x94>)
 8001a6e:	f000 f879 	bl	8001b64 <HAL_TIM_MspPostInit>

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200006b4 	.word	0x200006b4
 8001a80:	40014800 	.word	0x40014800

08001a84 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <HAL_TIM_PWM_MspInit+0x8c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d10e      	bne.n	8001ab4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a1d      	ldr	r2, [pc, #116]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001ab2:	e026      	b.n	8001b02 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a17      	ldr	r2, [pc, #92]	; (8001b18 <HAL_TIM_PWM_MspInit+0x94>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10e      	bne.n	8001adc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
}
 8001ada:	e012      	b.n	8001b02 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0e      	ldr	r2, [pc, #56]	; (8001b1c <HAL_TIM_PWM_MspInit+0x98>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10d      	bne.n	8001b02 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	4a09      	ldr	r2, [pc, #36]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6453      	str	r3, [r2, #68]	; 0x44
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_TIM_PWM_MspInit+0x90>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
}
 8001b02:	bf00      	nop
 8001b04:	371c      	adds	r7, #28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40000c00 	.word	0x40000c00
 8001b1c:	40014000 	.word	0x40014000

08001b20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	; (8001b5c <HAL_TIM_Base_MspInit+0x3c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d10d      	bne.n	8001b4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_TIM_Base_MspInit+0x40>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x40>)
 8001b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <HAL_TIM_Base_MspInit+0x40>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40014800 	.word	0x40014800
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a49      	ldr	r2, [pc, #292]	; (8001ca8 <HAL_TIM_MspPostInit+0x144>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d11f      	bne.n	8001bc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a47      	ldr	r2, [pc, #284]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PLATE_PWM_Pin;
 8001ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	483c      	ldr	r0, [pc, #240]	; (8001cb0 <HAL_TIM_MspPostInit+0x14c>)
 8001bc0:	f000 f9ce 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001bc4:	e06b      	b.n	8001c9e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM5)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3a      	ldr	r2, [pc, #232]	; (8001cb4 <HAL_TIM_MspPostInit+0x150>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d11e      	bne.n	8001c0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	4b35      	ldr	r3, [pc, #212]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	4a34      	ldr	r2, [pc, #208]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6313      	str	r3, [r2, #48]	; 0x30
 8001be0:	4b32      	ldr	r3, [pc, #200]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_PWM_Pin;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUCK_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <HAL_TIM_MspPostInit+0x14c>)
 8001c08:	f000 f9aa 	bl	8001f60 <HAL_GPIO_Init>
}
 8001c0c:	e047      	b.n	8001c9e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM9)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_TIM_MspPostInit+0x154>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d11e      	bne.n	8001c56 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8001c34:	2304      	movs	r3, #4
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001c44:	2303      	movs	r3, #3
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4818      	ldr	r0, [pc, #96]	; (8001cb0 <HAL_TIM_MspPostInit+0x14c>)
 8001c50:	f000 f986 	bl	8001f60 <HAL_GPIO_Init>
}
 8001c54:	e023      	b.n	8001c9e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_TIM_MspPostInit+0x158>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d11e      	bne.n	8001c9e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_TIM_MspPostInit+0x148>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 8001c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 031c 	add.w	r3, r7, #28
 8001c96:	4619      	mov	r1, r3
 8001c98:	4809      	ldr	r0, [pc, #36]	; (8001cc0 <HAL_TIM_MspPostInit+0x15c>)
 8001c9a:	f000 f961 	bl	8001f60 <HAL_GPIO_Init>
}
 8001c9e:	bf00      	nop
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40014000 	.word	0x40014000
 8001cbc:	40014800 	.word	0x40014800
 8001cc0:	40020800 	.word	0x40020800

08001cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cc8:	480d      	ldr	r0, [pc, #52]	; (8001d00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cca:	490e      	ldr	r1, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cd0:	e002      	b.n	8001cd8 <LoopCopyDataInit>

08001cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd6:	3304      	adds	r3, #4

08001cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cdc:	d3f9      	bcc.n	8001cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ce0:	4c0b      	ldr	r4, [pc, #44]	; (8001d10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce4:	e001      	b.n	8001cea <LoopFillZerobss>

08001ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce8:	3204      	adds	r2, #4

08001cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cec:	d3fb      	bcc.n	8001ce6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cee:	f7ff fd45 	bl	800177c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cf2:	f003 fb77 	bl	80053e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf6:	f7ff fac7 	bl	8001288 <main>
  bx  lr    
 8001cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d04:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d08:	080081a4 	.word	0x080081a4
  ldr r2, =_sbss
 8001d0c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d10:	20004464 	.word	0x20004464

08001d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d14:	e7fe      	b.n	8001d14 <ADC_IRQHandler>
	...

08001d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_Init+0x40>)
 8001d22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <HAL_Init+0x40>)
 8001d2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_Init+0x40>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_Init+0x40>)
 8001d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d40:	2003      	movs	r0, #3
 8001d42:	f000 f8d8 	bl	8001ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f7ff fbda 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d4c:	f7ff fbac 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40023c00 	.word	0x40023c00

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	200006fc 	.word	0x200006fc

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	200006fc 	.word	0x200006fc

08001d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de8:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <__NVIC_GetPriorityGrouping+0x18>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	f003 0307 	and.w	r3, r3, #7
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db0b      	blt.n	8001e2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	4907      	ldr	r1, [pc, #28]	; (8001e38 <__NVIC_EnableIRQ+0x38>)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	095b      	lsrs	r3, r3, #5
 8001e20:	2001      	movs	r0, #1
 8001e22:	fa00 f202 	lsl.w	r2, r0, r2
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000e100 	.word	0xe000e100

08001e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0a      	blt.n	8001e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	490c      	ldr	r1, [pc, #48]	; (8001e88 <__NVIC_SetPriority+0x4c>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	0112      	lsls	r2, r2, #4
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	440b      	add	r3, r1
 8001e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e64:	e00a      	b.n	8001e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4908      	ldr	r1, [pc, #32]	; (8001e8c <__NVIC_SetPriority+0x50>)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	3b04      	subs	r3, #4
 8001e74:	0112      	lsls	r2, r2, #4
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	440b      	add	r3, r1
 8001e7a:	761a      	strb	r2, [r3, #24]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000e100 	.word	0xe000e100
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b089      	sub	sp, #36	; 0x24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f1c3 0307 	rsb	r3, r3, #7
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	bf28      	it	cs
 8001eae:	2304      	movcs	r3, #4
 8001eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d902      	bls.n	8001ec0 <NVIC_EncodePriority+0x30>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3b03      	subs	r3, #3
 8001ebe:	e000      	b.n	8001ec2 <NVIC_EncodePriority+0x32>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43d9      	mvns	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	4313      	orrs	r3, r2
         );
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff4c 	bl	8001d9c <__NVIC_SetPriorityGrouping>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f1e:	f7ff ff61 	bl	8001de4 <__NVIC_GetPriorityGrouping>
 8001f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	6978      	ldr	r0, [r7, #20]
 8001f2a:	f7ff ffb1 	bl	8001e90 <NVIC_EncodePriority>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff80 	bl	8001e3c <__NVIC_SetPriority>
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff ff54 	bl	8001e00 <__NVIC_EnableIRQ>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e14d      	b.n	8002218 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 813c 	bne.w	8002212 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d005      	beq.n	8001fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8096 	beq.w	8002212 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a50      	ldr	r2, [pc, #320]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <HAL_GPIO_Init+0x2d0>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_GPIO_Init+0x2d4>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a43      	ldr	r2, [pc, #268]	; (8002238 <HAL_GPIO_Init+0x2d8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00d      	beq.n	800214a <HAL_GPIO_Init+0x1ea>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a42      	ldr	r2, [pc, #264]	; (800223c <HAL_GPIO_Init+0x2dc>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x1e6>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a41      	ldr	r2, [pc, #260]	; (8002240 <HAL_GPIO_Init+0x2e0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_GPIO_Init+0x1e2>
 800213e:	2302      	movs	r3, #2
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x1ec>
 8002142:	2307      	movs	r3, #7
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x1ec>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x1ec>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x2d4>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218e:	4a2d      	ldr	r2, [pc, #180]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e2:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e8:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_GPIO_Init+0x2e4>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f aeae 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe ff20 	bl	80010e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f000 fb54 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	; (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e07c      	b.n	8002610 <HAL_LPTIM_Init+0x10c>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d106      	bne.n	8002536 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fe4b 	bl	80011cc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d004      	beq.n	8002558 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002556:	d103      	bne.n	8002560 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 031e 	bic.w	r3, r3, #30
 800255e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002568:	4293      	cmp	r3, r2
 800256a:	d005      	beq.n	8002578 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002572:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4b27      	ldr	r3, [pc, #156]	; (8002618 <HAL_LPTIM_Init+0x114>)
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002588:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800258e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002594:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800259a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d004      	beq.n	80025cc <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ca:	d107      	bne.n	80025dc <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80025d4:	4313      	orrs	r3, r2
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00a      	beq.n	80025fe <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80025f0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80025f6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	ff19f1fe 	.word	0xff19f1fe

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fb3a 	bl	8001d84 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff fb36 	bl	8001d84 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fe9c 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08007da0 	.word	0x08007da0
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000004 	.word	0x20000004

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027ec:	b090      	sub	sp, #64	; 0x40
 80027ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
 80027f4:	2300      	movs	r3, #0
 80027f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d00d      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x40>
 800280c:	2b08      	cmp	r3, #8
 800280e:	f200 80a1 	bhi.w	8002954 <HAL_RCC_GetSysClockFreq+0x16c>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x3a>
 800281a:	e09b      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_GetSysClockFreq+0x184>)
 800281e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002820:	e09b      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002822:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002824:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002826:	e098      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4b4f      	ldr	r3, [pc, #316]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002832:	4b4d      	ldr	r3, [pc, #308]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d028      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b4a      	ldr	r3, [pc, #296]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	2200      	movs	r2, #0
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	627a      	str	r2, [r7, #36]	; 0x24
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002850:	2100      	movs	r1, #0
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002854:	fb03 f201 	mul.w	r2, r3, r1
 8002858:	2300      	movs	r3, #0
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	4413      	add	r3, r2
 8002860:	4a43      	ldr	r2, [pc, #268]	; (8002970 <HAL_RCC_GetSysClockFreq+0x188>)
 8002862:	fba0 1202 	umull	r1, r2, r0, r2
 8002866:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002868:	460a      	mov	r2, r1
 800286a:	62ba      	str	r2, [r7, #40]	; 0x28
 800286c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286e:	4413      	add	r3, r2
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002874:	2200      	movs	r2, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	61fa      	str	r2, [r7, #28]
 800287a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800287e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002882:	f7fe f9b1 	bl	8000be8 <__aeabi_uldivmod>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4613      	mov	r3, r2
 800288c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288e:	e053      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	099b      	lsrs	r3, r3, #6
 8002896:	2200      	movs	r2, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	617a      	str	r2, [r7, #20]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028a2:	f04f 0b00 	mov.w	fp, #0
 80028a6:	4652      	mov	r2, sl
 80028a8:	465b      	mov	r3, fp
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b8:	0150      	lsls	r0, r2, #5
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	ebb2 080a 	subs.w	r8, r2, sl
 80028c2:	eb63 090b 	sbc.w	r9, r3, fp
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028da:	ebb2 0408 	subs.w	r4, r2, r8
 80028de:	eb63 0509 	sbc.w	r5, r3, r9
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	00eb      	lsls	r3, r5, #3
 80028ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028f0:	00e2      	lsls	r2, r4, #3
 80028f2:	4614      	mov	r4, r2
 80028f4:	461d      	mov	r5, r3
 80028f6:	eb14 030a 	adds.w	r3, r4, sl
 80028fa:	603b      	str	r3, [r7, #0]
 80028fc:	eb45 030b 	adc.w	r3, r5, fp
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800290e:	4629      	mov	r1, r5
 8002910:	028b      	lsls	r3, r1, #10
 8002912:	4621      	mov	r1, r4
 8002914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002918:	4621      	mov	r1, r4
 800291a:	028a      	lsls	r2, r1, #10
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002922:	2200      	movs	r2, #0
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	60fa      	str	r2, [r7, #12]
 8002928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800292c:	f7fe f95c 	bl	8000be8 <__aeabi_uldivmod>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4613      	mov	r3, r2
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_GetSysClockFreq+0x180>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002952:	e002      	b.n	800295a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCC_GetSysClockFreq+0x184>)
 8002956:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002958:	bf00      	nop
    }
  }
  return sysclockfreq;
 800295a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800295c:	4618      	mov	r0, r3
 800295e:	3740      	adds	r7, #64	; 0x40
 8002960:	46bd      	mov	sp, r7
 8002962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	00f42400 	.word	0x00f42400
 8002970:	017d7840 	.word	0x017d7840

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_GetHCLKFreq+0x14>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000000 	.word	0x20000000

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff0 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	0a9b      	lsrs	r3, r3, #10
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08007db0 	.word	0x08007db0

080029b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	220f      	movs	r2, #15
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c4:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80029e8:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029f6:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_RCC_GetClockConfig+0x60>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40023c00 	.word	0x40023c00

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8083 	beq.w	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a44:	6413      	str	r3, [r2, #64]	; 0x40
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a52:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5b      	ldr	r2, [pc, #364]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a5e:	f7ff f991 	bl	8001d84 <HAL_GetTick>
 8002a62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a66:	f7ff f98d 	bl	8001d84 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e09f      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a78:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a84:	4b4e      	ldr	r3, [pc, #312]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa2:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab2:	4b45      	ldr	r3, [pc, #276]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ab8:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002abe:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d114      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff f95b 	bl	8001d84 <HAL_GetTick>
 8002ace:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	e00a      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f7ff f957 	bl	8001d84 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e067      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ee      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b00:	d10d      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b16:	492a      	ldr	r1, [pc, #168]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
 8002b1c:	e005      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b24:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b28:	6093      	str	r3, [r2, #8]
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b36:	4922      	ldr	r1, [pc, #136]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7d1a      	ldrb	r2, [r3, #20]
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002b4e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4915      	ldr	r1, [pc, #84]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b7e:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b84:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	490c      	ldr	r1, [pc, #48]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4904      	ldr	r1, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	42470e40 	.word	0x42470e40
 8002bcc:	424711e0 	.word	0x424711e0

08002bd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e273      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bee:	4b88      	ldr	r3, [pc, #544]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e24e      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6f      	ldr	r2, [pc, #444]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6c      	ldr	r2, [pc, #432]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b69      	ldr	r3, [pc, #420]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff f87c 	bl	8001d84 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff f878 	bl	8001d84 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e213      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f868 	bl	8001d84 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff f864 	bl	8001d84 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1ff      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b51      	ldr	r3, [pc, #324]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b44      	ldr	r3, [pc, #272]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b41      	ldr	r3, [pc, #260]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1d3      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4937      	ldr	r1, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b34      	ldr	r3, [pc, #208]	; (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7ff f81d 	bl	8001d84 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff f819 	bl	8001d84 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1b4      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4925      	ldr	r1, [pc, #148]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fffc 	bl	8001d84 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe fff8 	bl	8001d84 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e193      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe ffdc 	bl	8001d84 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe ffd8 	bl	8001d84 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e173      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe ffc5 	bl	8001d84 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fe ffc1 	bl	8001d84 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d907      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e15c      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470000 	.word	0x42470000
 8002e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b8a      	ldr	r3, [pc, #552]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ea      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	; 0x40
 8002e56:	4b7c      	ldr	r3, [pc, #496]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b79      	ldr	r3, [pc, #484]	; (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b76      	ldr	r3, [pc, #472]	; (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7fe ff81 	bl	8001d84 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fe ff7d 	bl	8001d84 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e118      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b6c      	ldr	r3, [pc, #432]	; (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ea>
 8002eac:	4b66      	ldr	r3, [pc, #408]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb0:	4a65      	ldr	r2, [pc, #404]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x30c>
 8002ec2:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec6:	4a60      	ldr	r2, [pc, #384]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ece:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a5d      	ldr	r2, [pc, #372]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002edc:	4b5a      	ldr	r3, [pc, #360]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a59      	ldr	r2, [pc, #356]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a56      	ldr	r2, [pc, #344]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe ff42 	bl	8001d84 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe ff3e 	bl	8001d84 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0d7      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ee      	beq.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7fe ff2c 	bl	8001d84 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fe ff28 	bl	8001d84 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0c1      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	4b40      	ldr	r3, [pc, #256]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80ad 	beq.w	80030c8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d060      	beq.n	800303c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d145      	bne.n	800300e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b33      	ldr	r3, [pc, #204]	; (8003050 <HAL_RCC_OscConfig+0x480>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fefc 	bl	8001d84 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fef8 	bl	8001d84 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e093      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	491b      	ldr	r1, [pc, #108]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	; (8003050 <HAL_RCC_OscConfig+0x480>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fecd 	bl	8001d84 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe fec9 	bl	8001d84 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e064      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x41e>
 800300c:	e05c      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_RCC_OscConfig+0x480>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe feb6 	bl	8001d84 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe feb2 	bl	8001d84 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e04d      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_OscConfig+0x478>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x44c>
 800303a:	e045      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e040      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003054:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <HAL_RCC_OscConfig+0x504>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d030      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d129      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d122      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800308a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d119      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d10f      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07b      	b.n	80031e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030fa:	d009      	beq.n	8003110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
 8003102:	e005      	b.n	8003110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe f974 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	ea42 0103 	orr.w	r1, r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0104 	and.w	r1, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f003 0210 	and.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e041      	b.n	8003280 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7fe fc85 	bl	8001b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2202      	movs	r2, #2
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f000 fabd 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e035      	b.n	800330c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a16      	ldr	r2, [pc, #88]	; (8003318 <HAL_TIM_Base_Start_IT+0x90>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x4e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <HAL_TIM_Base_Start_IT+0x94>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x4e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a13      	ldr	r2, [pc, #76]	; (8003320 <HAL_TIM_Base_Start_IT+0x98>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d111      	bne.n	80032fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d010      	beq.n	800330a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0201 	orr.w	r2, r2, #1
 80032f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	e007      	b.n	800330a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0201 	orr.w	r2, r2, #1
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40010000 	.word	0x40010000
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40014000 	.word	0x40014000

08003324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e041      	b.n	80033ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fb9a 	bl	8001a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f000 fa20 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d122      	bne.n	800341e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0202 	mvn.w	r2, #2
 80033ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9b1 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f9a3 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f9b4 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d122      	bne.n	8003472 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b04      	cmp	r3, #4
 8003438:	d11b      	bne.n	8003472 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0204 	mvn.w	r2, #4
 8003442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f987 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 800345e:	e005      	b.n	800346c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f979 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f98a 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d122      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b08      	cmp	r3, #8
 800348c:	d11b      	bne.n	80034c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0208 	mvn.w	r2, #8
 8003496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2204      	movs	r2, #4
 800349c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f95d 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 80034b2:	e005      	b.n	80034c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f94f 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f960 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d122      	bne.n	800351a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d11b      	bne.n	800351a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0210 	mvn.w	r2, #16
 80034ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2208      	movs	r2, #8
 80034f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f933 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 8003506:	e005      	b.n	8003514 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f925 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f936 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10e      	bne.n	8003546 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b01      	cmp	r3, #1
 8003534:	d107      	bne.n	8003546 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f06f 0201 	mvn.w	r2, #1
 800353e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd ff1b 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d10e      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355e:	2b80      	cmp	r3, #128	; 0x80
 8003560:	d107      	bne.n	8003572 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800356a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fbbb 	bl	8003ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d10e      	bne.n	800359e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b40      	cmp	r3, #64	; 0x40
 800358c:	d107      	bne.n	800359e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f8fb 	bl	8003794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d10e      	bne.n	80035ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f06f 0220 	mvn.w	r2, #32
 80035c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fb85 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0ae      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	f200 809f 	bhi.w	8003740 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	0800363d 	.word	0x0800363d
 800360c:	08003741 	.word	0x08003741
 8003610:	08003741 	.word	0x08003741
 8003614:	08003741 	.word	0x08003741
 8003618:	0800367d 	.word	0x0800367d
 800361c:	08003741 	.word	0x08003741
 8003620:	08003741 	.word	0x08003741
 8003624:	08003741 	.word	0x08003741
 8003628:	080036bf 	.word	0x080036bf
 800362c:	08003741 	.word	0x08003741
 8003630:	08003741 	.word	0x08003741
 8003634:	08003741 	.word	0x08003741
 8003638:	080036ff 	.word	0x080036ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f90e 	bl	8003864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0208 	orr.w	r2, r2, #8
 8003656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	619a      	str	r2, [r3, #24]
      break;
 800367a:	e064      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f954 	bl	8003930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6999      	ldr	r1, [r3, #24]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	021a      	lsls	r2, r3, #8
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	619a      	str	r2, [r3, #24]
      break;
 80036bc:	e043      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f99f 	bl	8003a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0208 	orr.w	r2, r2, #8
 80036d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0204 	bic.w	r2, r2, #4
 80036e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	61da      	str	r2, [r3, #28]
      break;
 80036fc:	e023      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f9e9 	bl	8003adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69da      	ldr	r2, [r3, #28]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69d9      	ldr	r1, [r3, #28]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	021a      	lsls	r2, r3, #8
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	61da      	str	r2, [r3, #28]
      break;
 800373e:	e002      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
      break;
 8003744:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <TIM_Base_SetConfig+0xac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_Base_SetConfig+0x20>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a25      	ldr	r2, [pc, #148]	; (8003858 <TIM_Base_SetConfig+0xb0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <TIM_Base_SetConfig+0xac>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d00b      	beq.n	80037fa <TIM_Base_SetConfig+0x52>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_Base_SetConfig+0xb0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <TIM_Base_SetConfig+0x52>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1b      	ldr	r2, [pc, #108]	; (800385c <TIM_Base_SetConfig+0xb4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d003      	beq.n	80037fa <TIM_Base_SetConfig+0x52>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1a      	ldr	r2, [pc, #104]	; (8003860 <TIM_Base_SetConfig+0xb8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d108      	bne.n	800380c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a08      	ldr	r2, [pc, #32]	; (8003854 <TIM_Base_SetConfig+0xac>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	615a      	str	r2, [r3, #20]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000
 8003860:	40014800 	.word	0x40014800

08003864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <TIM_OC1_SetConfig+0xc8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10c      	bne.n	80038da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f023 0308 	bic.w	r3, r3, #8
 80038c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a13      	ldr	r2, [pc, #76]	; (800392c <TIM_OC1_SetConfig+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d111      	bne.n	8003906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	621a      	str	r2, [r3, #32]
}
 8003920:	bf00      	nop
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40010000 	.word	0x40010000

08003930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0210 	bic.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a1e      	ldr	r2, [pc, #120]	; (8003a04 <TIM_OC2_SetConfig+0xd4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <TIM_OC2_SetConfig+0xd4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d113      	bne.n	80039dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	621a      	str	r2, [r3, #32]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40010000 	.word	0x40010000

08003a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <TIM_OC3_SetConfig+0xd0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <TIM_OC3_SetConfig+0xd0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d113      	bne.n	8003ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	621a      	str	r2, [r3, #32]
}
 8003acc:	bf00      	nop
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	40010000 	.word	0x40010000

08003adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	031b      	lsls	r3, r3, #12
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <TIM_OC4_SetConfig+0x9c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d109      	bne.n	8003b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	019b      	lsls	r3, r3, #6
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	40010000 	.word	0x40010000

08003b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e041      	b.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a14      	ldr	r2, [pc, #80]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d009      	beq.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d004      	beq.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d10c      	bne.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000

08003c30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	e03d      	b.n	8003cc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d0e:	2b84      	cmp	r3, #132	; 0x84
 8003d10:	d005      	beq.n	8003d1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003d12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	3303      	adds	r3, #3
 8003d1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d30:	f000 faf6 	bl	8004320 <vTaskStartScheduler>
  
  return osOK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3c:	b089      	sub	sp, #36	; 0x24
 8003d3e:	af04      	add	r7, sp, #16
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <osThreadCreate+0x54>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01c      	beq.n	8003d8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685c      	ldr	r4, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681d      	ldr	r5, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691e      	ldr	r6, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff ffc8 	bl	8003cfc <makeFreeRtosPriority>
 8003d6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d76:	9202      	str	r2, [sp, #8]
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	9100      	str	r1, [sp, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4632      	mov	r2, r6
 8003d80:	4629      	mov	r1, r5
 8003d82:	4620      	mov	r0, r4
 8003d84:	f000 f8ed 	bl	8003f62 <xTaskCreateStatic>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e01c      	b.n	8003dc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685c      	ldr	r4, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d9a:	b29e      	uxth	r6, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ffaa 	bl	8003cfc <makeFreeRtosPriority>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f107 030c 	add.w	r3, r7, #12
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	9200      	str	r2, [sp, #0]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	4632      	mov	r2, r6
 8003db6:	4629      	mov	r1, r5
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 f92f 	bl	800401c <xTaskCreate>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d001      	beq.n	8003dc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e000      	b.n	8003dca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <osDelay+0x16>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	e000      	b.n	8003dea <osDelay+0x18>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fa64 	bl	80042b8 <vTaskDelay>
  
  return osOK;
 8003df0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f103 0208 	add.w	r2, r3, #8
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f103 0208 	add.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f103 0208 	add.w	r2, r3, #8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e00c      	b.n	8003ed6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e002      	b.n	8003eca <vListInsert+0x2e>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d2f6      	bcs.n	8003ec4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6892      	ldr	r2, [r2, #8]
 8003f24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6852      	ldr	r2, [r2, #4]
 8003f2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d103      	bne.n	8003f42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08e      	sub	sp, #56	; 0x38
 8003f66:	af04      	add	r7, sp, #16
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <xTaskCreateStatic+0x46>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	61fb      	str	r3, [r7, #28]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fa8:	23b4      	movs	r3, #180	; 0xb4
 8003faa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2bb4      	cmp	r3, #180	; 0xb4
 8003fb0:	d00a      	beq.n	8003fc8 <xTaskCreateStatic+0x66>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61bb      	str	r3, [r7, #24]
}
 8003fc4:	bf00      	nop
 8003fc6:	e7fe      	b.n	8003fc6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01e      	beq.n	800400e <xTaskCreateStatic+0xac>
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d01b      	beq.n	800400e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9303      	str	r3, [sp, #12]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	9302      	str	r3, [sp, #8]
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f851 	bl	80040a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004008:	f000 f8ec 	bl	80041e4 <prvAddNewTaskToReadyList>
 800400c:	e001      	b.n	8004012 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004012:	697b      	ldr	r3, [r7, #20]
	}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	; 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	; 0x30
 8004020:	af04      	add	r7, sp, #16
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fef1 	bl	8004e18 <pvPortMalloc>
 8004036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00e      	beq.n	800405c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800403e:	20b4      	movs	r0, #180	; 0xb4
 8004040:	f000 feea 	bl	8004e18 <pvPortMalloc>
 8004044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
 8004052:	e005      	b.n	8004060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004054:	6978      	ldr	r0, [r7, #20]
 8004056:	f000 ffab 	bl	8004fb0 <vPortFree>
 800405a:	e001      	b.n	8004060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d017      	beq.n	8004096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	2300      	movs	r3, #0
 8004072:	9303      	str	r3, [sp, #12]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	9302      	str	r3, [sp, #8]
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68b9      	ldr	r1, [r7, #8]
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f80f 	bl	80040a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800408a:	69f8      	ldr	r0, [r7, #28]
 800408c:	f000 f8aa 	bl	80041e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004090:	2301      	movs	r3, #1
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e002      	b.n	800409c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800409c:	69bb      	ldr	r3, [r7, #24]
	}
 800409e:	4618      	mov	r0, r3
 80040a0:	3720      	adds	r7, #32
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040c0:	3b01      	subs	r3, #1
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	617b      	str	r3, [r7, #20]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d01f      	beq.n	8004136 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040f6:	2300      	movs	r3, #0
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e012      	b.n	8004122 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	4413      	add	r3, r2
 8004102:	7819      	ldrb	r1, [r3, #0]
 8004104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4413      	add	r3, r2
 800410a:	3334      	adds	r3, #52	; 0x34
 800410c:	460a      	mov	r2, r1
 800410e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d006      	beq.n	800412a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	3301      	adds	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d9e9      	bls.n	80040fc <prvInitialiseNewTask+0x54>
 8004128:	e000      	b.n	800412c <prvInitialiseNewTask+0x84>
			{
				break;
 800412a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004134:	e003      	b.n	800413e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800413e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004140:	2b06      	cmp	r3, #6
 8004142:	d901      	bls.n	8004148 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004144:	2306      	movs	r3, #6
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	3304      	adds	r3, #4
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fe6b 	bl	8003e3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	3318      	adds	r3, #24
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fe66 	bl	8003e3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004172:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004176:	f1c3 0207 	rsb	r2, r3, #7
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004182:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	2200      	movs	r2, #0
 8004190:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	334c      	adds	r3, #76	; 0x4c
 8004198:	2260      	movs	r2, #96	; 0x60
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f95f 	bl	8005460 <memset>
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	4a0c      	ldr	r2, [pc, #48]	; (80041d8 <prvInitialiseNewTask+0x130>)
 80041a6:	651a      	str	r2, [r3, #80]	; 0x50
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	4a0c      	ldr	r2, [pc, #48]	; (80041dc <prvInitialiseNewTask+0x134>)
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <prvInitialiseNewTask+0x138>)
 80041b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	68f9      	ldr	r1, [r7, #12]
 80041b8:	69b8      	ldr	r0, [r7, #24]
 80041ba:	f000 fc1f 	bl	80049fc <pxPortInitialiseStack>
 80041be:	4602      	mov	r2, r0
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d002      	beq.n	80041d0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	08007dd8 	.word	0x08007dd8
 80041dc:	08007df8 	.word	0x08007df8
 80041e0:	08007db8 	.word	0x08007db8

080041e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041ec:	f000 fd32 	bl	8004c54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3301      	adds	r3, #1
 80041f6:	4a29      	ldr	r2, [pc, #164]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 80041f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004202:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <prvAddNewTaskToReadyList+0xb8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d110      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004210:	f000 facc 	bl	80047ac <prvInitialiseTaskLists>
 8004214:	e00d      	b.n	8004232 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d109      	bne.n	8004232 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	429a      	cmp	r2, r3
 800422a:	d802      	bhi.n	8004232 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004232:	4b1d      	ldr	r3, [pc, #116]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004240:	2201      	movs	r2, #1
 8004242:	409a      	lsls	r2, r3
 8004244:	4b19      	ldr	r3, [pc, #100]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4313      	orrs	r3, r2
 800424a:	4a18      	ldr	r2, [pc, #96]	; (80042ac <prvAddNewTaskToReadyList+0xc8>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <prvAddNewTaskToReadyList+0xcc>)
 800425c:	441a      	add	r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3304      	adds	r3, #4
 8004262:	4619      	mov	r1, r3
 8004264:	4610      	mov	r0, r2
 8004266:	f7ff fdf5 	bl	8003e54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800426a:	f000 fd23 	bl	8004cb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <prvAddNewTaskToReadyList+0xc0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00e      	beq.n	8004294 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004276:	4b0a      	ldr	r3, [pc, #40]	; (80042a0 <prvAddNewTaskToReadyList+0xbc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <prvAddNewTaskToReadyList+0xd0>)
 8004286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004294:	bf00      	nop
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000800 	.word	0x20000800
 80042a0:	20000700 	.word	0x20000700
 80042a4:	2000080c 	.word	0x2000080c
 80042a8:	2000081c 	.word	0x2000081c
 80042ac:	20000808 	.word	0x20000808
 80042b0:	20000704 	.word	0x20000704
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d017      	beq.n	80042fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ca:	4b13      	ldr	r3, [pc, #76]	; (8004318 <vTaskDelay+0x60>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <vTaskDelay+0x30>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60bb      	str	r3, [r7, #8]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042e8:	f000 f884 	bl	80043f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042ec:	2100      	movs	r1, #0
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fb1e 	bl	8004930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f4:	f000 f88c 	bl	8004410 <xTaskResumeAll>
 80042f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <vTaskDelay+0x64>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000828 	.word	0x20000828
 800431c:	e000ed04 	.word	0xe000ed04

08004320 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	; 0x28
 8004324:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800432e:	463a      	mov	r2, r7
 8004330:	1d39      	adds	r1, r7, #4
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f7fc fdd8 	bl	8000eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	9202      	str	r2, [sp, #8]
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	2300      	movs	r3, #0
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	2300      	movs	r3, #0
 800434c:	460a      	mov	r2, r1
 800434e:	4921      	ldr	r1, [pc, #132]	; (80043d4 <vTaskStartScheduler+0xb4>)
 8004350:	4821      	ldr	r0, [pc, #132]	; (80043d8 <vTaskStartScheduler+0xb8>)
 8004352:	f7ff fe06 	bl	8003f62 <xTaskCreateStatic>
 8004356:	4603      	mov	r3, r0
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <vTaskStartScheduler+0xbc>)
 800435a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800435c:	4b1f      	ldr	r3, [pc, #124]	; (80043dc <vTaskStartScheduler+0xbc>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004364:	2301      	movs	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	e001      	b.n	800436e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d11b      	bne.n	80043ac <vTaskStartScheduler+0x8c>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	613b      	str	r3, [r7, #16]
}
 8004386:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004388:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <vTaskStartScheduler+0xc0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	334c      	adds	r3, #76	; 0x4c
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <vTaskStartScheduler+0xc4>)
 8004390:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <vTaskStartScheduler+0xc8>)
 8004394:	f04f 32ff 	mov.w	r2, #4294967295
 8004398:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <vTaskStartScheduler+0xcc>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043a0:	4b13      	ldr	r3, [pc, #76]	; (80043f0 <vTaskStartScheduler+0xd0>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043a6:	f000 fbb3 	bl	8004b10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043aa:	e00e      	b.n	80043ca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b2:	d10a      	bne.n	80043ca <vTaskStartScheduler+0xaa>
	__asm volatile
 80043b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	60fb      	str	r3, [r7, #12]
}
 80043c6:	bf00      	nop
 80043c8:	e7fe      	b.n	80043c8 <vTaskStartScheduler+0xa8>
}
 80043ca:	bf00      	nop
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	08007d98 	.word	0x08007d98
 80043d8:	0800477d 	.word	0x0800477d
 80043dc:	20000824 	.word	0x20000824
 80043e0:	20000700 	.word	0x20000700
 80043e4:	20000010 	.word	0x20000010
 80043e8:	20000820 	.word	0x20000820
 80043ec:	2000080c 	.word	0x2000080c
 80043f0:	20000804 	.word	0x20000804

080043f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <vTaskSuspendAll+0x18>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3301      	adds	r3, #1
 80043fe:	4a03      	ldr	r2, [pc, #12]	; (800440c <vTaskSuspendAll+0x18>)
 8004400:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000828 	.word	0x20000828

08004410 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <xTaskResumeAll+0x114>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <xTaskResumeAll+0x2c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	603b      	str	r3, [r7, #0]
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800443c:	f000 fc0a 	bl	8004c54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004440:	4b38      	ldr	r3, [pc, #224]	; (8004524 <xTaskResumeAll+0x114>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	4a37      	ldr	r2, [pc, #220]	; (8004524 <xTaskResumeAll+0x114>)
 8004448:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800444a:	4b36      	ldr	r3, [pc, #216]	; (8004524 <xTaskResumeAll+0x114>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d161      	bne.n	8004516 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004452:	4b35      	ldr	r3, [pc, #212]	; (8004528 <xTaskResumeAll+0x118>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d05d      	beq.n	8004516 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800445a:	e02e      	b.n	80044ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800445c:	4b33      	ldr	r3, [pc, #204]	; (800452c <xTaskResumeAll+0x11c>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3318      	adds	r3, #24
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fd50 	bl	8003f0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3304      	adds	r3, #4
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fd4b 	bl	8003f0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <xTaskResumeAll+0x120>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <xTaskResumeAll+0x120>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4a27      	ldr	r2, [pc, #156]	; (8004534 <xTaskResumeAll+0x124>)
 8004498:	441a      	add	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7ff fcd7 	bl	8003e54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044aa:	4b23      	ldr	r3, [pc, #140]	; (8004538 <xTaskResumeAll+0x128>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d302      	bcc.n	80044ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044b4:	4b21      	ldr	r3, [pc, #132]	; (800453c <xTaskResumeAll+0x12c>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <xTaskResumeAll+0x11c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1cc      	bne.n	800445c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044c8:	f000 fa12 	bl	80048f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044cc:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <xTaskResumeAll+0x130>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044d8:	f000 f836 	bl	8004548 <xTaskIncrementTick>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044e2:	4b16      	ldr	r3, [pc, #88]	; (800453c <xTaskResumeAll+0x12c>)
 80044e4:	2201      	movs	r2, #1
 80044e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f1      	bne.n	80044d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044f4:	4b12      	ldr	r3, [pc, #72]	; (8004540 <xTaskResumeAll+0x130>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <xTaskResumeAll+0x12c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d009      	beq.n	8004516 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <xTaskResumeAll+0x134>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004516:	f000 fbcd 	bl	8004cb4 <vPortExitCritical>

	return xAlreadyYielded;
 800451a:	68bb      	ldr	r3, [r7, #8]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000828 	.word	0x20000828
 8004528:	20000800 	.word	0x20000800
 800452c:	200007c0 	.word	0x200007c0
 8004530:	20000808 	.word	0x20000808
 8004534:	20000704 	.word	0x20000704
 8004538:	20000700 	.word	0x20000700
 800453c:	20000814 	.word	0x20000814
 8004540:	20000810 	.word	0x20000810
 8004544:	e000ed04 	.word	0xe000ed04

08004548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004552:	4b4e      	ldr	r3, [pc, #312]	; (800468c <xTaskIncrementTick+0x144>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 808e 	bne.w	8004678 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800455c:	4b4c      	ldr	r3, [pc, #304]	; (8004690 <xTaskIncrementTick+0x148>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004564:	4a4a      	ldr	r2, [pc, #296]	; (8004690 <xTaskIncrementTick+0x148>)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d120      	bne.n	80045b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004570:	4b48      	ldr	r3, [pc, #288]	; (8004694 <xTaskIncrementTick+0x14c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <xTaskIncrementTick+0x48>
	__asm volatile
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	603b      	str	r3, [r7, #0]
}
 800458c:	bf00      	nop
 800458e:	e7fe      	b.n	800458e <xTaskIncrementTick+0x46>
 8004590:	4b40      	ldr	r3, [pc, #256]	; (8004694 <xTaskIncrementTick+0x14c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	4b40      	ldr	r3, [pc, #256]	; (8004698 <xTaskIncrementTick+0x150>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3e      	ldr	r2, [pc, #248]	; (8004694 <xTaskIncrementTick+0x14c>)
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4a3e      	ldr	r2, [pc, #248]	; (8004698 <xTaskIncrementTick+0x150>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b3d      	ldr	r3, [pc, #244]	; (800469c <xTaskIncrementTick+0x154>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a3c      	ldr	r2, [pc, #240]	; (800469c <xTaskIncrementTick+0x154>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	f000 f99f 	bl	80048f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045b2:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <xTaskIncrementTick+0x158>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d348      	bcc.n	800464e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <xTaskIncrementTick+0x14c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <xTaskIncrementTick+0x158>)
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295
 80045cc:	601a      	str	r2, [r3, #0]
					break;
 80045ce:	e03e      	b.n	800464e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045d0:	4b30      	ldr	r3, [pc, #192]	; (8004694 <xTaskIncrementTick+0x14c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d203      	bcs.n	80045f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045e8:	4a2d      	ldr	r2, [pc, #180]	; (80046a0 <xTaskIncrementTick+0x158>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045ee:	e02e      	b.n	800464e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3304      	adds	r3, #4
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fc8a 	bl	8003f0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d004      	beq.n	800460c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3318      	adds	r3, #24
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fc81 	bl	8003f0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <xTaskIncrementTick+0x15c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4313      	orrs	r3, r2
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <xTaskIncrementTick+0x15c>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <xTaskIncrementTick+0x160>)
 800462c:	441a      	add	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7ff fc0d 	bl	8003e54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <xTaskIncrementTick+0x164>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d3b9      	bcc.n	80045bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464c:	e7b6      	b.n	80045bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800464e:	4b17      	ldr	r3, [pc, #92]	; (80046ac <xTaskIncrementTick+0x164>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004654:	4914      	ldr	r1, [pc, #80]	; (80046a8 <xTaskIncrementTick+0x160>)
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d901      	bls.n	800466a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800466a:	4b11      	ldr	r3, [pc, #68]	; (80046b0 <xTaskIncrementTick+0x168>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004672:	2301      	movs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e004      	b.n	8004682 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004678:	4b0e      	ldr	r3, [pc, #56]	; (80046b4 <xTaskIncrementTick+0x16c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	4a0d      	ldr	r2, [pc, #52]	; (80046b4 <xTaskIncrementTick+0x16c>)
 8004680:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004682:	697b      	ldr	r3, [r7, #20]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20000828 	.word	0x20000828
 8004690:	20000804 	.word	0x20000804
 8004694:	200007b8 	.word	0x200007b8
 8004698:	200007bc 	.word	0x200007bc
 800469c:	20000818 	.word	0x20000818
 80046a0:	20000820 	.word	0x20000820
 80046a4:	20000808 	.word	0x20000808
 80046a8:	20000704 	.word	0x20000704
 80046ac:	20000700 	.word	0x20000700
 80046b0:	20000814 	.word	0x20000814
 80046b4:	20000810 	.word	0x20000810

080046b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <vTaskSwitchContext+0xac>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046c6:	4b28      	ldr	r3, [pc, #160]	; (8004768 <vTaskSwitchContext+0xb0>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046cc:	e044      	b.n	8004758 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <vTaskSwitchContext+0xb0>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d4:	4b25      	ldr	r3, [pc, #148]	; (800476c <vTaskSwitchContext+0xb4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	f1c3 031f 	rsb	r3, r3, #31
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	4921      	ldr	r1, [pc, #132]	; (8004770 <vTaskSwitchContext+0xb8>)
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
 8004712:	e7fe      	b.n	8004712 <vTaskSwitchContext+0x5a>
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a14      	ldr	r2, [pc, #80]	; (8004770 <vTaskSwitchContext+0xb8>)
 8004720:	4413      	add	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	3308      	adds	r3, #8
 8004736:	429a      	cmp	r2, r3
 8004738:	d104      	bne.n	8004744 <vTaskSwitchContext+0x8c>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <vTaskSwitchContext+0xbc>)
 800474c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <vTaskSwitchContext+0xbc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	334c      	adds	r3, #76	; 0x4c
 8004754:	4a08      	ldr	r2, [pc, #32]	; (8004778 <vTaskSwitchContext+0xc0>)
 8004756:	6013      	str	r3, [r2, #0]
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	20000828 	.word	0x20000828
 8004768:	20000814 	.word	0x20000814
 800476c:	20000808 	.word	0x20000808
 8004770:	20000704 	.word	0x20000704
 8004774:	20000700 	.word	0x20000700
 8004778:	20000010 	.word	0x20000010

0800477c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004784:	f000 f852 	bl	800482c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <prvIdleTask+0x28>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d9f9      	bls.n	8004784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <prvIdleTask+0x2c>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047a0:	e7f0      	b.n	8004784 <prvIdleTask+0x8>
 80047a2:	bf00      	nop
 80047a4:	20000704 	.word	0x20000704
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	e00c      	b.n	80047d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a12      	ldr	r2, [pc, #72]	; (800480c <prvInitialiseTaskLists+0x60>)
 80047c4:	4413      	add	r3, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fb17 	bl	8003dfa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d9ef      	bls.n	80047b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047d8:	480d      	ldr	r0, [pc, #52]	; (8004810 <prvInitialiseTaskLists+0x64>)
 80047da:	f7ff fb0e 	bl	8003dfa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047de:	480d      	ldr	r0, [pc, #52]	; (8004814 <prvInitialiseTaskLists+0x68>)
 80047e0:	f7ff fb0b 	bl	8003dfa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047e4:	480c      	ldr	r0, [pc, #48]	; (8004818 <prvInitialiseTaskLists+0x6c>)
 80047e6:	f7ff fb08 	bl	8003dfa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ea:	480c      	ldr	r0, [pc, #48]	; (800481c <prvInitialiseTaskLists+0x70>)
 80047ec:	f7ff fb05 	bl	8003dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047f0:	480b      	ldr	r0, [pc, #44]	; (8004820 <prvInitialiseTaskLists+0x74>)
 80047f2:	f7ff fb02 	bl	8003dfa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <prvInitialiseTaskLists+0x78>)
 80047f8:	4a05      	ldr	r2, [pc, #20]	; (8004810 <prvInitialiseTaskLists+0x64>)
 80047fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvInitialiseTaskLists+0x7c>)
 80047fe:	4a05      	ldr	r2, [pc, #20]	; (8004814 <prvInitialiseTaskLists+0x68>)
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000704 	.word	0x20000704
 8004810:	20000790 	.word	0x20000790
 8004814:	200007a4 	.word	0x200007a4
 8004818:	200007c0 	.word	0x200007c0
 800481c:	200007d4 	.word	0x200007d4
 8004820:	200007ec 	.word	0x200007ec
 8004824:	200007b8 	.word	0x200007b8
 8004828:	200007bc 	.word	0x200007bc

0800482c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004832:	e019      	b.n	8004868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004834:	f000 fa0e 	bl	8004c54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	4b10      	ldr	r3, [pc, #64]	; (800487c <prvCheckTasksWaitingTermination+0x50>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fb62 	bl	8003f0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <prvCheckTasksWaitingTermination+0x54>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <prvCheckTasksWaitingTermination+0x54>)
 8004852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <prvCheckTasksWaitingTermination+0x58>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <prvCheckTasksWaitingTermination+0x58>)
 800485c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800485e:	f000 fa29 	bl	8004cb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f810 	bl	8004888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004868:	4b06      	ldr	r3, [pc, #24]	; (8004884 <prvCheckTasksWaitingTermination+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e1      	bne.n	8004834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200007d4 	.word	0x200007d4
 8004880:	20000800 	.word	0x20000800
 8004884:	200007e8 	.word	0x200007e8

08004888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	334c      	adds	r3, #76	; 0x4c
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fb43 	bl	8005f20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fb81 	bl	8004fb0 <vPortFree>
				vPortFree( pxTCB );
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb7e 	bl	8004fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048b4:	e018      	b.n	80048e8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d103      	bne.n	80048c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb75 	bl	8004fb0 <vPortFree>
	}
 80048c6:	e00f      	b.n	80048e8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d00a      	beq.n	80048e8 <prvDeleteTCB+0x60>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <prvDeleteTCB+0x5e>
	}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f6:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <prvResetNextTaskUnblockTime+0x38>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d104      	bne.n	800490a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <prvResetNextTaskUnblockTime+0x3c>)
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004908:	e008      	b.n	800491c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490a:	4b07      	ldr	r3, [pc, #28]	; (8004928 <prvResetNextTaskUnblockTime+0x38>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4a04      	ldr	r2, [pc, #16]	; (800492c <prvResetNextTaskUnblockTime+0x3c>)
 800491a:	6013      	str	r3, [r2, #0]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	200007b8 	.word	0x200007b8
 800492c:	20000820 	.word	0x20000820

08004930 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800493a:	4b29      	ldr	r3, [pc, #164]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004940:	4b28      	ldr	r3, [pc, #160]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3304      	adds	r3, #4
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fae1 	bl	8003f0e <uxListRemove>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004952:	4b24      	ldr	r3, [pc, #144]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	2201      	movs	r2, #1
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	4b21      	ldr	r3, [pc, #132]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4013      	ands	r3, r2
 8004966:	4a20      	ldr	r2, [pc, #128]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004968:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d10a      	bne.n	8004988 <prvAddCurrentTaskToDelayedList+0x58>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d007      	beq.n	8004988 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	481a      	ldr	r0, [pc, #104]	; (80049ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8004982:	f7ff fa67 	bl	8003e54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004986:	e026      	b.n	80049d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	429a      	cmp	r2, r3
 800499e:	d209      	bcs.n	80049b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a0:	4b13      	ldr	r3, [pc, #76]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7ff fa75 	bl	8003e9c <vListInsert>
}
 80049b2:	e010      	b.n	80049d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b0a      	ldr	r3, [pc, #40]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3304      	adds	r3, #4
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7ff fa6b 	bl	8003e9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d202      	bcs.n	80049d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049d0:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6013      	str	r3, [r2, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000804 	.word	0x20000804
 80049e4:	20000700 	.word	0x20000700
 80049e8:	20000808 	.word	0x20000808
 80049ec:	200007ec 	.word	0x200007ec
 80049f0:	200007bc 	.word	0x200007bc
 80049f4:	200007b8 	.word	0x200007b8
 80049f8:	20000820 	.word	0x20000820

080049fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3b04      	subs	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	3b04      	subs	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f023 0201 	bic.w	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b04      	subs	r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a2c:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <pxPortInitialiseStack+0x64>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3b14      	subs	r3, #20
 8004a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f06f 0202 	mvn.w	r2, #2
 8004a4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	3b20      	subs	r3, #32
 8004a50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a52:	68fb      	ldr	r3, [r7, #12]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	08004a65 	.word	0x08004a65

08004a64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a6e:	4b12      	ldr	r3, [pc, #72]	; (8004ab8 <prvTaskExitError+0x54>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a76:	d00a      	beq.n	8004a8e <prvTaskExitError+0x2a>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	60fb      	str	r3, [r7, #12]
}
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <prvTaskExitError+0x28>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	60bb      	str	r3, [r7, #8]
}
 8004aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aa2:	bf00      	nop
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0fc      	beq.n	8004aa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004aaa:	bf00      	nop
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	2000000c 	.word	0x2000000c
 8004abc:	00000000 	.word	0x00000000

08004ac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <pxCurrentTCBConst2>)
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	6808      	ldr	r0, [r1, #0]
 8004ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f380 8809 	msr	PSP, r0
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8811 	msr	BASEPRI, r0
 8004ada:	4770      	bx	lr
 8004adc:	f3af 8000 	nop.w

08004ae0 <pxCurrentTCBConst2>:
 8004ae0:	20000700 	.word	0x20000700
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop

08004ae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <prvPortStartFirstTask+0x24>)
 8004aea:	6800      	ldr	r0, [r0, #0]
 8004aec:	6800      	ldr	r0, [r0, #0]
 8004aee:	f380 8808 	msr	MSP, r0
 8004af2:	f04f 0000 	mov.w	r0, #0
 8004af6:	f380 8814 	msr	CONTROL, r0
 8004afa:	b662      	cpsie	i
 8004afc:	b661      	cpsie	f
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	df00      	svc	0
 8004b08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b0a:	bf00      	nop
 8004b0c:	e000ed08 	.word	0xe000ed08

08004b10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b16:	4b46      	ldr	r3, [pc, #280]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a46      	ldr	r2, [pc, #280]	; (8004c34 <xPortStartScheduler+0x124>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10a      	bne.n	8004b36 <xPortStartScheduler+0x26>
	__asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	613b      	str	r3, [r7, #16]
}
 8004b32:	bf00      	nop
 8004b34:	e7fe      	b.n	8004b34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b36:	4b3e      	ldr	r3, [pc, #248]	; (8004c30 <xPortStartScheduler+0x120>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3f      	ldr	r2, [pc, #252]	; (8004c38 <xPortStartScheduler+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d10a      	bne.n	8004b56 <xPortStartScheduler+0x46>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60fb      	str	r3, [r7, #12]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b56:	4b39      	ldr	r3, [pc, #228]	; (8004c3c <xPortStartScheduler+0x12c>)
 8004b58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	22ff      	movs	r2, #255	; 0xff
 8004b66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b31      	ldr	r3, [pc, #196]	; (8004c40 <xPortStartScheduler+0x130>)
 8004b7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b7e:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b80:	2207      	movs	r2, #7
 8004b82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b84:	e009      	b.n	8004b9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b86:	4b2f      	ldr	r3, [pc, #188]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <xPortStartScheduler+0x134>)
 8004b8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d0ef      	beq.n	8004b86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <xPortStartScheduler+0x134>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1c3 0307 	rsb	r3, r3, #7
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00a      	beq.n	8004bc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	60bb      	str	r3, [r7, #8]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <xPortStartScheduler+0x134>)
 8004bdc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004be6:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <xPortStartScheduler+0x138>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a17      	ldr	r2, [pc, #92]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bf2:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <xPortStartScheduler+0x138>)
 8004bf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bfe:	f000 f8dd 	bl	8004dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <xPortStartScheduler+0x13c>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c08:	f000 f8fc 	bl	8004e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a0f      	ldr	r2, [pc, #60]	; (8004c50 <xPortStartScheduler+0x140>)
 8004c12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c18:	f7ff ff66 	bl	8004ae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c1c:	f7ff fd4c 	bl	80046b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004c20:	f7ff ff20 	bl	8004a64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	e000ed00 	.word	0xe000ed00
 8004c34:	410fc271 	.word	0x410fc271
 8004c38:	410fc270 	.word	0x410fc270
 8004c3c:	e000e400 	.word	0xe000e400
 8004c40:	2000082c 	.word	0x2000082c
 8004c44:	20000830 	.word	0x20000830
 8004c48:	e000ed20 	.word	0xe000ed20
 8004c4c:	2000000c 	.word	0x2000000c
 8004c50:	e000ef34 	.word	0xe000ef34

08004c54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <vPortEnterCritical+0x58>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	4a0d      	ldr	r2, [pc, #52]	; (8004cac <vPortEnterCritical+0x58>)
 8004c76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <vPortEnterCritical+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10f      	bne.n	8004ca0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <vPortEnterCritical+0x5c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	603b      	str	r3, [r7, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <vPortEnterCritical+0x4a>
	}
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	2000000c 	.word	0x2000000c
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <vPortExitCritical+0x50>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <vPortExitCritical+0x24>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	607b      	str	r3, [r7, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cd8:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <vPortExitCritical+0x50>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <vPortExitCritical+0x50>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <vPortExitCritical+0x42>
 8004cea:	2300      	movs	r3, #0
 8004cec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000000c 	.word	0x2000000c
	...

08004d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d10:	f3ef 8009 	mrs	r0, PSP
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <pxCurrentTCBConst>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	f01e 0f10 	tst.w	lr, #16
 8004d20:	bf08      	it	eq
 8004d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	6010      	str	r0, [r2, #0]
 8004d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d34:	f380 8811 	msr	BASEPRI, r0
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f7ff fcba 	bl	80046b8 <vTaskSwitchContext>
 8004d44:	f04f 0000 	mov.w	r0, #0
 8004d48:	f380 8811 	msr	BASEPRI, r0
 8004d4c:	bc09      	pop	{r0, r3}
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6808      	ldr	r0, [r1, #0]
 8004d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	f01e 0f10 	tst.w	lr, #16
 8004d5a:	bf08      	it	eq
 8004d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d60:	f380 8809 	msr	PSP, r0
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	f3af 8000 	nop.w

08004d70 <pxCurrentTCBConst>:
 8004d70:	20000700 	.word	0x20000700
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop

08004d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	607b      	str	r3, [r7, #4]
}
 8004d90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d92:	f7ff fbd9 	bl	8004548 <xTaskIncrementTick>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <SysTick_Handler+0x40>)
 8004d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	f383 8811 	msr	BASEPRI, r3
}
 8004dae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	e000ed04 	.word	0xe000ed04

08004dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dc6:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <vPortSetupTimerInterrupt+0x38>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004dcc:	4b0a      	ldr	r3, [pc, #40]	; (8004df8 <vPortSetupTimerInterrupt+0x3c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vPortSetupTimerInterrupt+0x40>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	099b      	lsrs	r3, r3, #6
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortSetupTimerInterrupt+0x44>)
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <vPortSetupTimerInterrupt+0x34>)
 8004de0:	2207      	movs	r2, #7
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	e000e010 	.word	0xe000e010
 8004df4:	e000e018 	.word	0xe000e018
 8004df8:	20000000 	.word	0x20000000
 8004dfc:	10624dd3 	.word	0x10624dd3
 8004e00:	e000e014 	.word	0xe000e014

08004e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e14 <vPortEnableVFP+0x10>
 8004e08:	6801      	ldr	r1, [r0, #0]
 8004e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e0e:	6001      	str	r1, [r0, #0]
 8004e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e12:	bf00      	nop
 8004e14:	e000ed88 	.word	0xe000ed88

08004e18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e24:	f7ff fae6 	bl	80043f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e28:	4b5b      	ldr	r3, [pc, #364]	; (8004f98 <pvPortMalloc+0x180>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e30:	f000 f920 	bl	8005074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <pvPortMalloc+0x184>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f040 8093 	bne.w	8004f68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01d      	beq.n	8004e84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e48:	2208      	movs	r2, #8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d014      	beq.n	8004e84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f023 0307 	bic.w	r3, r3, #7
 8004e60:	3308      	adds	r3, #8
 8004e62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <pvPortMalloc+0x6c>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	617b      	str	r3, [r7, #20]
}
 8004e80:	bf00      	nop
 8004e82:	e7fe      	b.n	8004e82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d06e      	beq.n	8004f68 <pvPortMalloc+0x150>
 8004e8a:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <pvPortMalloc+0x188>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d869      	bhi.n	8004f68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <pvPortMalloc+0x18c>)
 8004e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e98:	4b42      	ldr	r3, [pc, #264]	; (8004fa4 <pvPortMalloc+0x18c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e9e:	e004      	b.n	8004eaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d903      	bls.n	8004ebc <pvPortMalloc+0xa4>
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1f1      	bne.n	8004ea0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ebc:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <pvPortMalloc+0x180>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d050      	beq.n	8004f68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2208      	movs	r2, #8
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	1ad2      	subs	r2, r2, r3
 8004ee0:	2308      	movs	r3, #8
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d91f      	bls.n	8004f28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <pvPortMalloc+0xf8>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	613b      	str	r3, [r7, #16]
}
 8004f0c:	bf00      	nop
 8004f0e:	e7fe      	b.n	8004f0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f22:	69b8      	ldr	r0, [r7, #24]
 8004f24:	f000 f908 	bl	8005138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f36:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <pvPortMalloc+0x190>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d203      	bcs.n	8004f4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f42:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <pvPortMalloc+0x188>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a18      	ldr	r2, [pc, #96]	; (8004fa8 <pvPortMalloc+0x190>)
 8004f48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <pvPortMalloc+0x184>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f5e:	4b13      	ldr	r3, [pc, #76]	; (8004fac <pvPortMalloc+0x194>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a11      	ldr	r2, [pc, #68]	; (8004fac <pvPortMalloc+0x194>)
 8004f66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f68:	f7ff fa52 	bl	8004410 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <pvPortMalloc+0x174>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60fb      	str	r3, [r7, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	e7fe      	b.n	8004f8a <pvPortMalloc+0x172>
	return pvReturn;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	2000443c 	.word	0x2000443c
 8004f9c:	20004450 	.word	0x20004450
 8004fa0:	20004440 	.word	0x20004440
 8004fa4:	20004434 	.word	0x20004434
 8004fa8:	20004444 	.word	0x20004444
 8004fac:	20004448 	.word	0x20004448

08004fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04d      	beq.n	800505e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fc2:	2308      	movs	r3, #8
 8004fc4:	425b      	negs	r3, r3
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <vPortFree+0xb8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <vPortFree+0x44>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60fb      	str	r3, [r7, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	e7fe      	b.n	8004ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <vPortFree+0x62>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	60bb      	str	r3, [r7, #8]
}
 800500e:	bf00      	nop
 8005010:	e7fe      	b.n	8005010 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <vPortFree+0xb8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d01e      	beq.n	800505e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11a      	bne.n	800505e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	4b0e      	ldr	r3, [pc, #56]	; (8005068 <vPortFree+0xb8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	43db      	mvns	r3, r3
 8005032:	401a      	ands	r2, r3
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005038:	f7ff f9dc 	bl	80043f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <vPortFree+0xbc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4413      	add	r3, r2
 8005046:	4a09      	ldr	r2, [pc, #36]	; (800506c <vPortFree+0xbc>)
 8005048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800504a:	6938      	ldr	r0, [r7, #16]
 800504c:	f000 f874 	bl	8005138 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <vPortFree+0xc0>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3301      	adds	r3, #1
 8005056:	4a06      	ldr	r2, [pc, #24]	; (8005070 <vPortFree+0xc0>)
 8005058:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800505a:	f7ff f9d9 	bl	8004410 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800505e:	bf00      	nop
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20004450 	.word	0x20004450
 800506c:	20004440 	.word	0x20004440
 8005070:	2000444c 	.word	0x2000444c

08005074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800507a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800507e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005080:	4b27      	ldr	r3, [pc, #156]	; (8005120 <prvHeapInit+0xac>)
 8005082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3307      	adds	r3, #7
 8005092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0307 	bic.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <prvHeapInit+0xac>)
 80050a4:	4413      	add	r3, r2
 80050a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050ac:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <prvHeapInit+0xb0>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <prvHeapInit+0xb0>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050c0:	2208      	movs	r2, #8
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0307 	bic.w	r3, r3, #7
 80050ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <prvHeapInit+0xb4>)
 80050d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <prvHeapInit+0xb4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2200      	movs	r2, #0
 80050dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <prvHeapInit+0xb4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <prvHeapInit+0xb4>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <prvHeapInit+0xb8>)
 8005102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <prvHeapInit+0xbc>)
 800510a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800510c:	4b09      	ldr	r3, [pc, #36]	; (8005134 <prvHeapInit+0xc0>)
 800510e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	20000834 	.word	0x20000834
 8005124:	20004434 	.word	0x20004434
 8005128:	2000443c 	.word	0x2000443c
 800512c:	20004444 	.word	0x20004444
 8005130:	20004440 	.word	0x20004440
 8005134:	20004450 	.word	0x20004450

08005138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <prvInsertBlockIntoFreeList+0xac>)
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e002      	b.n	800514c <prvInsertBlockIntoFreeList+0x14>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d8f7      	bhi.n	8005146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	4413      	add	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d108      	bne.n	800517a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	441a      	add	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	441a      	add	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d118      	bne.n	80051c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <prvInsertBlockIntoFreeList+0xb0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d00d      	beq.n	80051b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	441a      	add	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e008      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051b6:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <prvInsertBlockIntoFreeList+0xb0>)
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e003      	b.n	80051c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d002      	beq.n	80051d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20004434 	.word	0x20004434
 80051e8:	2000443c 	.word	0x2000443c

080051ec <__errno>:
 80051ec:	4b01      	ldr	r3, [pc, #4]	; (80051f4 <__errno+0x8>)
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000010 	.word	0x20000010

080051f8 <std>:
 80051f8:	2300      	movs	r3, #0
 80051fa:	b510      	push	{r4, lr}
 80051fc:	4604      	mov	r4, r0
 80051fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005206:	6083      	str	r3, [r0, #8]
 8005208:	8181      	strh	r1, [r0, #12]
 800520a:	6643      	str	r3, [r0, #100]	; 0x64
 800520c:	81c2      	strh	r2, [r0, #14]
 800520e:	6183      	str	r3, [r0, #24]
 8005210:	4619      	mov	r1, r3
 8005212:	2208      	movs	r2, #8
 8005214:	305c      	adds	r0, #92	; 0x5c
 8005216:	f000 f923 	bl	8005460 <memset>
 800521a:	4b05      	ldr	r3, [pc, #20]	; (8005230 <std+0x38>)
 800521c:	6263      	str	r3, [r4, #36]	; 0x24
 800521e:	4b05      	ldr	r3, [pc, #20]	; (8005234 <std+0x3c>)
 8005220:	62a3      	str	r3, [r4, #40]	; 0x28
 8005222:	4b05      	ldr	r3, [pc, #20]	; (8005238 <std+0x40>)
 8005224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005226:	4b05      	ldr	r3, [pc, #20]	; (800523c <std+0x44>)
 8005228:	6224      	str	r4, [r4, #32]
 800522a:	6323      	str	r3, [r4, #48]	; 0x30
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	08005ff9 	.word	0x08005ff9
 8005234:	0800601b 	.word	0x0800601b
 8005238:	08006053 	.word	0x08006053
 800523c:	08006077 	.word	0x08006077

08005240 <_cleanup_r>:
 8005240:	4901      	ldr	r1, [pc, #4]	; (8005248 <_cleanup_r+0x8>)
 8005242:	f000 b8af 	b.w	80053a4 <_fwalk_reent>
 8005246:	bf00      	nop
 8005248:	08007049 	.word	0x08007049

0800524c <__sfmoreglue>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	2268      	movs	r2, #104	; 0x68
 8005250:	1e4d      	subs	r5, r1, #1
 8005252:	4355      	muls	r5, r2
 8005254:	460e      	mov	r6, r1
 8005256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800525a:	f000 f975 	bl	8005548 <_malloc_r>
 800525e:	4604      	mov	r4, r0
 8005260:	b140      	cbz	r0, 8005274 <__sfmoreglue+0x28>
 8005262:	2100      	movs	r1, #0
 8005264:	e9c0 1600 	strd	r1, r6, [r0]
 8005268:	300c      	adds	r0, #12
 800526a:	60a0      	str	r0, [r4, #8]
 800526c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005270:	f000 f8f6 	bl	8005460 <memset>
 8005274:	4620      	mov	r0, r4
 8005276:	bd70      	pop	{r4, r5, r6, pc}

08005278 <__sfp_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sfp_lock_acquire+0x8>)
 800527a:	f000 b8d8 	b.w	800542e <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	20004455 	.word	0x20004455

08005284 <__sfp_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sfp_lock_release+0x8>)
 8005286:	f000 b8d3 	b.w	8005430 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	20004455 	.word	0x20004455

08005290 <__sinit_lock_acquire>:
 8005290:	4801      	ldr	r0, [pc, #4]	; (8005298 <__sinit_lock_acquire+0x8>)
 8005292:	f000 b8cc 	b.w	800542e <__retarget_lock_acquire_recursive>
 8005296:	bf00      	nop
 8005298:	20004456 	.word	0x20004456

0800529c <__sinit_lock_release>:
 800529c:	4801      	ldr	r0, [pc, #4]	; (80052a4 <__sinit_lock_release+0x8>)
 800529e:	f000 b8c7 	b.w	8005430 <__retarget_lock_release_recursive>
 80052a2:	bf00      	nop
 80052a4:	20004456 	.word	0x20004456

080052a8 <__sinit>:
 80052a8:	b510      	push	{r4, lr}
 80052aa:	4604      	mov	r4, r0
 80052ac:	f7ff fff0 	bl	8005290 <__sinit_lock_acquire>
 80052b0:	69a3      	ldr	r3, [r4, #24]
 80052b2:	b11b      	cbz	r3, 80052bc <__sinit+0x14>
 80052b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b8:	f7ff bff0 	b.w	800529c <__sinit_lock_release>
 80052bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80052c0:	6523      	str	r3, [r4, #80]	; 0x50
 80052c2:	4b13      	ldr	r3, [pc, #76]	; (8005310 <__sinit+0x68>)
 80052c4:	4a13      	ldr	r2, [pc, #76]	; (8005314 <__sinit+0x6c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80052ca:	42a3      	cmp	r3, r4
 80052cc:	bf04      	itt	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	61a3      	streq	r3, [r4, #24]
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f820 	bl	8005318 <__sfp>
 80052d8:	6060      	str	r0, [r4, #4]
 80052da:	4620      	mov	r0, r4
 80052dc:	f000 f81c 	bl	8005318 <__sfp>
 80052e0:	60a0      	str	r0, [r4, #8]
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 f818 	bl	8005318 <__sfp>
 80052e8:	2200      	movs	r2, #0
 80052ea:	60e0      	str	r0, [r4, #12]
 80052ec:	2104      	movs	r1, #4
 80052ee:	6860      	ldr	r0, [r4, #4]
 80052f0:	f7ff ff82 	bl	80051f8 <std>
 80052f4:	68a0      	ldr	r0, [r4, #8]
 80052f6:	2201      	movs	r2, #1
 80052f8:	2109      	movs	r1, #9
 80052fa:	f7ff ff7d 	bl	80051f8 <std>
 80052fe:	68e0      	ldr	r0, [r4, #12]
 8005300:	2202      	movs	r2, #2
 8005302:	2112      	movs	r1, #18
 8005304:	f7ff ff78 	bl	80051f8 <std>
 8005308:	2301      	movs	r3, #1
 800530a:	61a3      	str	r3, [r4, #24]
 800530c:	e7d2      	b.n	80052b4 <__sinit+0xc>
 800530e:	bf00      	nop
 8005310:	08007e18 	.word	0x08007e18
 8005314:	08005241 	.word	0x08005241

08005318 <__sfp>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	4607      	mov	r7, r0
 800531c:	f7ff ffac 	bl	8005278 <__sfp_lock_acquire>
 8005320:	4b1e      	ldr	r3, [pc, #120]	; (800539c <__sfp+0x84>)
 8005322:	681e      	ldr	r6, [r3, #0]
 8005324:	69b3      	ldr	r3, [r6, #24]
 8005326:	b913      	cbnz	r3, 800532e <__sfp+0x16>
 8005328:	4630      	mov	r0, r6
 800532a:	f7ff ffbd 	bl	80052a8 <__sinit>
 800532e:	3648      	adds	r6, #72	; 0x48
 8005330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005334:	3b01      	subs	r3, #1
 8005336:	d503      	bpl.n	8005340 <__sfp+0x28>
 8005338:	6833      	ldr	r3, [r6, #0]
 800533a:	b30b      	cbz	r3, 8005380 <__sfp+0x68>
 800533c:	6836      	ldr	r6, [r6, #0]
 800533e:	e7f7      	b.n	8005330 <__sfp+0x18>
 8005340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005344:	b9d5      	cbnz	r5, 800537c <__sfp+0x64>
 8005346:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <__sfp+0x88>)
 8005348:	60e3      	str	r3, [r4, #12]
 800534a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800534e:	6665      	str	r5, [r4, #100]	; 0x64
 8005350:	f000 f86c 	bl	800542c <__retarget_lock_init_recursive>
 8005354:	f7ff ff96 	bl	8005284 <__sfp_lock_release>
 8005358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800535c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005360:	6025      	str	r5, [r4, #0]
 8005362:	61a5      	str	r5, [r4, #24]
 8005364:	2208      	movs	r2, #8
 8005366:	4629      	mov	r1, r5
 8005368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800536c:	f000 f878 	bl	8005460 <memset>
 8005370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005378:	4620      	mov	r0, r4
 800537a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800537c:	3468      	adds	r4, #104	; 0x68
 800537e:	e7d9      	b.n	8005334 <__sfp+0x1c>
 8005380:	2104      	movs	r1, #4
 8005382:	4638      	mov	r0, r7
 8005384:	f7ff ff62 	bl	800524c <__sfmoreglue>
 8005388:	4604      	mov	r4, r0
 800538a:	6030      	str	r0, [r6, #0]
 800538c:	2800      	cmp	r0, #0
 800538e:	d1d5      	bne.n	800533c <__sfp+0x24>
 8005390:	f7ff ff78 	bl	8005284 <__sfp_lock_release>
 8005394:	230c      	movs	r3, #12
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	e7ee      	b.n	8005378 <__sfp+0x60>
 800539a:	bf00      	nop
 800539c:	08007e18 	.word	0x08007e18
 80053a0:	ffff0001 	.word	0xffff0001

080053a4 <_fwalk_reent>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4606      	mov	r6, r0
 80053aa:	4688      	mov	r8, r1
 80053ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80053b0:	2700      	movs	r7, #0
 80053b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053b6:	f1b9 0901 	subs.w	r9, r9, #1
 80053ba:	d505      	bpl.n	80053c8 <_fwalk_reent+0x24>
 80053bc:	6824      	ldr	r4, [r4, #0]
 80053be:	2c00      	cmp	r4, #0
 80053c0:	d1f7      	bne.n	80053b2 <_fwalk_reent+0xe>
 80053c2:	4638      	mov	r0, r7
 80053c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053c8:	89ab      	ldrh	r3, [r5, #12]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d907      	bls.n	80053de <_fwalk_reent+0x3a>
 80053ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053d2:	3301      	adds	r3, #1
 80053d4:	d003      	beq.n	80053de <_fwalk_reent+0x3a>
 80053d6:	4629      	mov	r1, r5
 80053d8:	4630      	mov	r0, r6
 80053da:	47c0      	blx	r8
 80053dc:	4307      	orrs	r7, r0
 80053de:	3568      	adds	r5, #104	; 0x68
 80053e0:	e7e9      	b.n	80053b6 <_fwalk_reent+0x12>
	...

080053e4 <__libc_init_array>:
 80053e4:	b570      	push	{r4, r5, r6, lr}
 80053e6:	4d0d      	ldr	r5, [pc, #52]	; (800541c <__libc_init_array+0x38>)
 80053e8:	4c0d      	ldr	r4, [pc, #52]	; (8005420 <__libc_init_array+0x3c>)
 80053ea:	1b64      	subs	r4, r4, r5
 80053ec:	10a4      	asrs	r4, r4, #2
 80053ee:	2600      	movs	r6, #0
 80053f0:	42a6      	cmp	r6, r4
 80053f2:	d109      	bne.n	8005408 <__libc_init_array+0x24>
 80053f4:	4d0b      	ldr	r5, [pc, #44]	; (8005424 <__libc_init_array+0x40>)
 80053f6:	4c0c      	ldr	r4, [pc, #48]	; (8005428 <__libc_init_array+0x44>)
 80053f8:	f002 fcac 	bl	8007d54 <_init>
 80053fc:	1b64      	subs	r4, r4, r5
 80053fe:	10a4      	asrs	r4, r4, #2
 8005400:	2600      	movs	r6, #0
 8005402:	42a6      	cmp	r6, r4
 8005404:	d105      	bne.n	8005412 <__libc_init_array+0x2e>
 8005406:	bd70      	pop	{r4, r5, r6, pc}
 8005408:	f855 3b04 	ldr.w	r3, [r5], #4
 800540c:	4798      	blx	r3
 800540e:	3601      	adds	r6, #1
 8005410:	e7ee      	b.n	80053f0 <__libc_init_array+0xc>
 8005412:	f855 3b04 	ldr.w	r3, [r5], #4
 8005416:	4798      	blx	r3
 8005418:	3601      	adds	r6, #1
 800541a:	e7f2      	b.n	8005402 <__libc_init_array+0x1e>
 800541c:	0800819c 	.word	0x0800819c
 8005420:	0800819c 	.word	0x0800819c
 8005424:	0800819c 	.word	0x0800819c
 8005428:	080081a0 	.word	0x080081a0

0800542c <__retarget_lock_init_recursive>:
 800542c:	4770      	bx	lr

0800542e <__retarget_lock_acquire_recursive>:
 800542e:	4770      	bx	lr

08005430 <__retarget_lock_release_recursive>:
 8005430:	4770      	bx	lr
	...

08005434 <malloc>:
 8005434:	4b02      	ldr	r3, [pc, #8]	; (8005440 <malloc+0xc>)
 8005436:	4601      	mov	r1, r0
 8005438:	6818      	ldr	r0, [r3, #0]
 800543a:	f000 b885 	b.w	8005548 <_malloc_r>
 800543e:	bf00      	nop
 8005440:	20000010 	.word	0x20000010

08005444 <memcpy>:
 8005444:	440a      	add	r2, r1
 8005446:	4291      	cmp	r1, r2
 8005448:	f100 33ff 	add.w	r3, r0, #4294967295
 800544c:	d100      	bne.n	8005450 <memcpy+0xc>
 800544e:	4770      	bx	lr
 8005450:	b510      	push	{r4, lr}
 8005452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800545a:	4291      	cmp	r1, r2
 800545c:	d1f9      	bne.n	8005452 <memcpy+0xe>
 800545e:	bd10      	pop	{r4, pc}

08005460 <memset>:
 8005460:	4402      	add	r2, r0
 8005462:	4603      	mov	r3, r0
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	f803 1b01 	strb.w	r1, [r3], #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <_free_r>:
 8005470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005472:	2900      	cmp	r1, #0
 8005474:	d044      	beq.n	8005500 <_free_r+0x90>
 8005476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800547a:	9001      	str	r0, [sp, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	f1a1 0404 	sub.w	r4, r1, #4
 8005482:	bfb8      	it	lt
 8005484:	18e4      	addlt	r4, r4, r3
 8005486:	f001 fe97 	bl	80071b8 <__malloc_lock>
 800548a:	4a1e      	ldr	r2, [pc, #120]	; (8005504 <_free_r+0x94>)
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	b933      	cbnz	r3, 80054a0 <_free_r+0x30>
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6014      	str	r4, [r2, #0]
 8005496:	b003      	add	sp, #12
 8005498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800549c:	f001 be92 	b.w	80071c4 <__malloc_unlock>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d908      	bls.n	80054b6 <_free_r+0x46>
 80054a4:	6825      	ldr	r5, [r4, #0]
 80054a6:	1961      	adds	r1, r4, r5
 80054a8:	428b      	cmp	r3, r1
 80054aa:	bf01      	itttt	eq
 80054ac:	6819      	ldreq	r1, [r3, #0]
 80054ae:	685b      	ldreq	r3, [r3, #4]
 80054b0:	1949      	addeq	r1, r1, r5
 80054b2:	6021      	streq	r1, [r4, #0]
 80054b4:	e7ed      	b.n	8005492 <_free_r+0x22>
 80054b6:	461a      	mov	r2, r3
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	b10b      	cbz	r3, 80054c0 <_free_r+0x50>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d9fa      	bls.n	80054b6 <_free_r+0x46>
 80054c0:	6811      	ldr	r1, [r2, #0]
 80054c2:	1855      	adds	r5, r2, r1
 80054c4:	42a5      	cmp	r5, r4
 80054c6:	d10b      	bne.n	80054e0 <_free_r+0x70>
 80054c8:	6824      	ldr	r4, [r4, #0]
 80054ca:	4421      	add	r1, r4
 80054cc:	1854      	adds	r4, r2, r1
 80054ce:	42a3      	cmp	r3, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	d1e0      	bne.n	8005496 <_free_r+0x26>
 80054d4:	681c      	ldr	r4, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6053      	str	r3, [r2, #4]
 80054da:	4421      	add	r1, r4
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	e7da      	b.n	8005496 <_free_r+0x26>
 80054e0:	d902      	bls.n	80054e8 <_free_r+0x78>
 80054e2:	230c      	movs	r3, #12
 80054e4:	6003      	str	r3, [r0, #0]
 80054e6:	e7d6      	b.n	8005496 <_free_r+0x26>
 80054e8:	6825      	ldr	r5, [r4, #0]
 80054ea:	1961      	adds	r1, r4, r5
 80054ec:	428b      	cmp	r3, r1
 80054ee:	bf04      	itt	eq
 80054f0:	6819      	ldreq	r1, [r3, #0]
 80054f2:	685b      	ldreq	r3, [r3, #4]
 80054f4:	6063      	str	r3, [r4, #4]
 80054f6:	bf04      	itt	eq
 80054f8:	1949      	addeq	r1, r1, r5
 80054fa:	6021      	streq	r1, [r4, #0]
 80054fc:	6054      	str	r4, [r2, #4]
 80054fe:	e7ca      	b.n	8005496 <_free_r+0x26>
 8005500:	b003      	add	sp, #12
 8005502:	bd30      	pop	{r4, r5, pc}
 8005504:	20004458 	.word	0x20004458

08005508 <sbrk_aligned>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4e0e      	ldr	r6, [pc, #56]	; (8005544 <sbrk_aligned+0x3c>)
 800550c:	460c      	mov	r4, r1
 800550e:	6831      	ldr	r1, [r6, #0]
 8005510:	4605      	mov	r5, r0
 8005512:	b911      	cbnz	r1, 800551a <sbrk_aligned+0x12>
 8005514:	f000 fd60 	bl	8005fd8 <_sbrk_r>
 8005518:	6030      	str	r0, [r6, #0]
 800551a:	4621      	mov	r1, r4
 800551c:	4628      	mov	r0, r5
 800551e:	f000 fd5b 	bl	8005fd8 <_sbrk_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	d00a      	beq.n	800553c <sbrk_aligned+0x34>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d007      	beq.n	8005540 <sbrk_aligned+0x38>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4628      	mov	r0, r5
 8005534:	f000 fd50 	bl	8005fd8 <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d101      	bne.n	8005540 <sbrk_aligned+0x38>
 800553c:	f04f 34ff 	mov.w	r4, #4294967295
 8005540:	4620      	mov	r0, r4
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	2000445c 	.word	0x2000445c

08005548 <_malloc_r>:
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	1ccd      	adds	r5, r1, #3
 800554e:	f025 0503 	bic.w	r5, r5, #3
 8005552:	3508      	adds	r5, #8
 8005554:	2d0c      	cmp	r5, #12
 8005556:	bf38      	it	cc
 8005558:	250c      	movcc	r5, #12
 800555a:	2d00      	cmp	r5, #0
 800555c:	4607      	mov	r7, r0
 800555e:	db01      	blt.n	8005564 <_malloc_r+0x1c>
 8005560:	42a9      	cmp	r1, r5
 8005562:	d905      	bls.n	8005570 <_malloc_r+0x28>
 8005564:	230c      	movs	r3, #12
 8005566:	603b      	str	r3, [r7, #0]
 8005568:	2600      	movs	r6, #0
 800556a:	4630      	mov	r0, r6
 800556c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005570:	4e2e      	ldr	r6, [pc, #184]	; (800562c <_malloc_r+0xe4>)
 8005572:	f001 fe21 	bl	80071b8 <__malloc_lock>
 8005576:	6833      	ldr	r3, [r6, #0]
 8005578:	461c      	mov	r4, r3
 800557a:	bb34      	cbnz	r4, 80055ca <_malloc_r+0x82>
 800557c:	4629      	mov	r1, r5
 800557e:	4638      	mov	r0, r7
 8005580:	f7ff ffc2 	bl	8005508 <sbrk_aligned>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	4604      	mov	r4, r0
 8005588:	d14d      	bne.n	8005626 <_malloc_r+0xde>
 800558a:	6834      	ldr	r4, [r6, #0]
 800558c:	4626      	mov	r6, r4
 800558e:	2e00      	cmp	r6, #0
 8005590:	d140      	bne.n	8005614 <_malloc_r+0xcc>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	4631      	mov	r1, r6
 8005596:	4638      	mov	r0, r7
 8005598:	eb04 0803 	add.w	r8, r4, r3
 800559c:	f000 fd1c 	bl	8005fd8 <_sbrk_r>
 80055a0:	4580      	cmp	r8, r0
 80055a2:	d13a      	bne.n	800561a <_malloc_r+0xd2>
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	3503      	adds	r5, #3
 80055a8:	1a6d      	subs	r5, r5, r1
 80055aa:	f025 0503 	bic.w	r5, r5, #3
 80055ae:	3508      	adds	r5, #8
 80055b0:	2d0c      	cmp	r5, #12
 80055b2:	bf38      	it	cc
 80055b4:	250c      	movcc	r5, #12
 80055b6:	4629      	mov	r1, r5
 80055b8:	4638      	mov	r0, r7
 80055ba:	f7ff ffa5 	bl	8005508 <sbrk_aligned>
 80055be:	3001      	adds	r0, #1
 80055c0:	d02b      	beq.n	800561a <_malloc_r+0xd2>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	442b      	add	r3, r5
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	e00e      	b.n	80055e8 <_malloc_r+0xa0>
 80055ca:	6822      	ldr	r2, [r4, #0]
 80055cc:	1b52      	subs	r2, r2, r5
 80055ce:	d41e      	bmi.n	800560e <_malloc_r+0xc6>
 80055d0:	2a0b      	cmp	r2, #11
 80055d2:	d916      	bls.n	8005602 <_malloc_r+0xba>
 80055d4:	1961      	adds	r1, r4, r5
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	6025      	str	r5, [r4, #0]
 80055da:	bf18      	it	ne
 80055dc:	6059      	strne	r1, [r3, #4]
 80055de:	6863      	ldr	r3, [r4, #4]
 80055e0:	bf08      	it	eq
 80055e2:	6031      	streq	r1, [r6, #0]
 80055e4:	5162      	str	r2, [r4, r5]
 80055e6:	604b      	str	r3, [r1, #4]
 80055e8:	4638      	mov	r0, r7
 80055ea:	f104 060b 	add.w	r6, r4, #11
 80055ee:	f001 fde9 	bl	80071c4 <__malloc_unlock>
 80055f2:	f026 0607 	bic.w	r6, r6, #7
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	1af2      	subs	r2, r6, r3
 80055fa:	d0b6      	beq.n	800556a <_malloc_r+0x22>
 80055fc:	1b9b      	subs	r3, r3, r6
 80055fe:	50a3      	str	r3, [r4, r2]
 8005600:	e7b3      	b.n	800556a <_malloc_r+0x22>
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	42a3      	cmp	r3, r4
 8005606:	bf0c      	ite	eq
 8005608:	6032      	streq	r2, [r6, #0]
 800560a:	605a      	strne	r2, [r3, #4]
 800560c:	e7ec      	b.n	80055e8 <_malloc_r+0xa0>
 800560e:	4623      	mov	r3, r4
 8005610:	6864      	ldr	r4, [r4, #4]
 8005612:	e7b2      	b.n	800557a <_malloc_r+0x32>
 8005614:	4634      	mov	r4, r6
 8005616:	6876      	ldr	r6, [r6, #4]
 8005618:	e7b9      	b.n	800558e <_malloc_r+0x46>
 800561a:	230c      	movs	r3, #12
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4638      	mov	r0, r7
 8005620:	f001 fdd0 	bl	80071c4 <__malloc_unlock>
 8005624:	e7a1      	b.n	800556a <_malloc_r+0x22>
 8005626:	6025      	str	r5, [r4, #0]
 8005628:	e7de      	b.n	80055e8 <_malloc_r+0xa0>
 800562a:	bf00      	nop
 800562c:	20004458 	.word	0x20004458

08005630 <__cvt>:
 8005630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	ec55 4b10 	vmov	r4, r5, d0
 8005638:	2d00      	cmp	r5, #0
 800563a:	460e      	mov	r6, r1
 800563c:	4619      	mov	r1, r3
 800563e:	462b      	mov	r3, r5
 8005640:	bfbb      	ittet	lt
 8005642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005646:	461d      	movlt	r5, r3
 8005648:	2300      	movge	r3, #0
 800564a:	232d      	movlt	r3, #45	; 0x2d
 800564c:	700b      	strb	r3, [r1, #0]
 800564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005654:	4691      	mov	r9, r2
 8005656:	f023 0820 	bic.w	r8, r3, #32
 800565a:	bfbc      	itt	lt
 800565c:	4622      	movlt	r2, r4
 800565e:	4614      	movlt	r4, r2
 8005660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005664:	d005      	beq.n	8005672 <__cvt+0x42>
 8005666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800566a:	d100      	bne.n	800566e <__cvt+0x3e>
 800566c:	3601      	adds	r6, #1
 800566e:	2102      	movs	r1, #2
 8005670:	e000      	b.n	8005674 <__cvt+0x44>
 8005672:	2103      	movs	r1, #3
 8005674:	ab03      	add	r3, sp, #12
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	ab02      	add	r3, sp, #8
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	ec45 4b10 	vmov	d0, r4, r5
 8005680:	4653      	mov	r3, sl
 8005682:	4632      	mov	r2, r6
 8005684:	f000 fe6c 	bl	8006360 <_dtoa_r>
 8005688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800568c:	4607      	mov	r7, r0
 800568e:	d102      	bne.n	8005696 <__cvt+0x66>
 8005690:	f019 0f01 	tst.w	r9, #1
 8005694:	d022      	beq.n	80056dc <__cvt+0xac>
 8005696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800569a:	eb07 0906 	add.w	r9, r7, r6
 800569e:	d110      	bne.n	80056c2 <__cvt+0x92>
 80056a0:	783b      	ldrb	r3, [r7, #0]
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	d10a      	bne.n	80056bc <__cvt+0x8c>
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fb fa2b 	bl	8000b08 <__aeabi_dcmpeq>
 80056b2:	b918      	cbnz	r0, 80056bc <__cvt+0x8c>
 80056b4:	f1c6 0601 	rsb	r6, r6, #1
 80056b8:	f8ca 6000 	str.w	r6, [sl]
 80056bc:	f8da 3000 	ldr.w	r3, [sl]
 80056c0:	4499      	add	r9, r3
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb fa1d 	bl	8000b08 <__aeabi_dcmpeq>
 80056ce:	b108      	cbz	r0, 80056d4 <__cvt+0xa4>
 80056d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056d4:	2230      	movs	r2, #48	; 0x30
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	454b      	cmp	r3, r9
 80056da:	d307      	bcc.n	80056ec <__cvt+0xbc>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e0:	1bdb      	subs	r3, r3, r7
 80056e2:	4638      	mov	r0, r7
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	b004      	add	sp, #16
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	9103      	str	r1, [sp, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e7f0      	b.n	80056d6 <__cvt+0xa6>

080056f4 <__exponent>:
 80056f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f6:	4603      	mov	r3, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	bfb8      	it	lt
 80056fc:	4249      	neglt	r1, r1
 80056fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005702:	bfb4      	ite	lt
 8005704:	222d      	movlt	r2, #45	; 0x2d
 8005706:	222b      	movge	r2, #43	; 0x2b
 8005708:	2909      	cmp	r1, #9
 800570a:	7042      	strb	r2, [r0, #1]
 800570c:	dd2a      	ble.n	8005764 <__exponent+0x70>
 800570e:	f10d 0407 	add.w	r4, sp, #7
 8005712:	46a4      	mov	ip, r4
 8005714:	270a      	movs	r7, #10
 8005716:	46a6      	mov	lr, r4
 8005718:	460a      	mov	r2, r1
 800571a:	fb91 f6f7 	sdiv	r6, r1, r7
 800571e:	fb07 1516 	mls	r5, r7, r6, r1
 8005722:	3530      	adds	r5, #48	; 0x30
 8005724:	2a63      	cmp	r2, #99	; 0x63
 8005726:	f104 34ff 	add.w	r4, r4, #4294967295
 800572a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800572e:	4631      	mov	r1, r6
 8005730:	dcf1      	bgt.n	8005716 <__exponent+0x22>
 8005732:	3130      	adds	r1, #48	; 0x30
 8005734:	f1ae 0502 	sub.w	r5, lr, #2
 8005738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800573c:	1c44      	adds	r4, r0, #1
 800573e:	4629      	mov	r1, r5
 8005740:	4561      	cmp	r1, ip
 8005742:	d30a      	bcc.n	800575a <__exponent+0x66>
 8005744:	f10d 0209 	add.w	r2, sp, #9
 8005748:	eba2 020e 	sub.w	r2, r2, lr
 800574c:	4565      	cmp	r5, ip
 800574e:	bf88      	it	hi
 8005750:	2200      	movhi	r2, #0
 8005752:	4413      	add	r3, r2
 8005754:	1a18      	subs	r0, r3, r0
 8005756:	b003      	add	sp, #12
 8005758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800575e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005762:	e7ed      	b.n	8005740 <__exponent+0x4c>
 8005764:	2330      	movs	r3, #48	; 0x30
 8005766:	3130      	adds	r1, #48	; 0x30
 8005768:	7083      	strb	r3, [r0, #2]
 800576a:	70c1      	strb	r1, [r0, #3]
 800576c:	1d03      	adds	r3, r0, #4
 800576e:	e7f1      	b.n	8005754 <__exponent+0x60>

08005770 <_printf_float>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	b08d      	sub	sp, #52	; 0x34
 800577a:	460c      	mov	r4, r1
 800577c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005780:	4616      	mov	r6, r2
 8005782:	461f      	mov	r7, r3
 8005784:	4605      	mov	r5, r0
 8005786:	f001 fc9b 	bl	80070c0 <_localeconv_r>
 800578a:	f8d0 a000 	ldr.w	sl, [r0]
 800578e:	4650      	mov	r0, sl
 8005790:	f7fa fd3e 	bl	8000210 <strlen>
 8005794:	2300      	movs	r3, #0
 8005796:	930a      	str	r3, [sp, #40]	; 0x28
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	9305      	str	r3, [sp, #20]
 800579c:	f8d8 3000 	ldr.w	r3, [r8]
 80057a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057a4:	3307      	adds	r3, #7
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	f103 0208 	add.w	r2, r3, #8
 80057ae:	f8c8 2000 	str.w	r2, [r8]
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057c2:	9307      	str	r3, [sp, #28]
 80057c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057c8:	ee08 0a10 	vmov	s16, r0
 80057cc:	4b9f      	ldr	r3, [pc, #636]	; (8005a4c <_printf_float+0x2dc>)
 80057ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	f7fb f9c9 	bl	8000b6c <__aeabi_dcmpun>
 80057da:	bb88      	cbnz	r0, 8005840 <_printf_float+0xd0>
 80057dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e0:	4b9a      	ldr	r3, [pc, #616]	; (8005a4c <_printf_float+0x2dc>)
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295
 80057e6:	f7fb f9a3 	bl	8000b30 <__aeabi_dcmple>
 80057ea:	bb48      	cbnz	r0, 8005840 <_printf_float+0xd0>
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fb f992 	bl	8000b1c <__aeabi_dcmplt>
 80057f8:	b110      	cbz	r0, 8005800 <_printf_float+0x90>
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005800:	4b93      	ldr	r3, [pc, #588]	; (8005a50 <_printf_float+0x2e0>)
 8005802:	4894      	ldr	r0, [pc, #592]	; (8005a54 <_printf_float+0x2e4>)
 8005804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005808:	bf94      	ite	ls
 800580a:	4698      	movls	r8, r3
 800580c:	4680      	movhi	r8, r0
 800580e:	2303      	movs	r3, #3
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	9b05      	ldr	r3, [sp, #20]
 8005814:	f023 0204 	bic.w	r2, r3, #4
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	f04f 0900 	mov.w	r9, #0
 800581e:	9700      	str	r7, [sp, #0]
 8005820:	4633      	mov	r3, r6
 8005822:	aa0b      	add	r2, sp, #44	; 0x2c
 8005824:	4621      	mov	r1, r4
 8005826:	4628      	mov	r0, r5
 8005828:	f000 f9d8 	bl	8005bdc <_printf_common>
 800582c:	3001      	adds	r0, #1
 800582e:	f040 8090 	bne.w	8005952 <_printf_float+0x1e2>
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	b00d      	add	sp, #52	; 0x34
 8005838:	ecbd 8b02 	vpop	{d8}
 800583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fb f990 	bl	8000b6c <__aeabi_dcmpun>
 800584c:	b140      	cbz	r0, 8005860 <_printf_float+0xf0>
 800584e:	464b      	mov	r3, r9
 8005850:	2b00      	cmp	r3, #0
 8005852:	bfbc      	itt	lt
 8005854:	232d      	movlt	r3, #45	; 0x2d
 8005856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800585a:	487f      	ldr	r0, [pc, #508]	; (8005a58 <_printf_float+0x2e8>)
 800585c:	4b7f      	ldr	r3, [pc, #508]	; (8005a5c <_printf_float+0x2ec>)
 800585e:	e7d1      	b.n	8005804 <_printf_float+0x94>
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005866:	9206      	str	r2, [sp, #24]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	d13f      	bne.n	80058ec <_printf_float+0x17c>
 800586c:	2306      	movs	r3, #6
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	6861      	ldr	r1, [r4, #4]
 8005874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005878:	2300      	movs	r3, #0
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	ab0a      	add	r3, sp, #40	; 0x28
 800587e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005882:	ab09      	add	r3, sp, #36	; 0x24
 8005884:	ec49 8b10 	vmov	d0, r8, r9
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fecd 	bl	8005630 <__cvt>
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800589a:	2b47      	cmp	r3, #71	; 0x47
 800589c:	4680      	mov	r8, r0
 800589e:	d108      	bne.n	80058b2 <_printf_float+0x142>
 80058a0:	1cc8      	adds	r0, r1, #3
 80058a2:	db02      	blt.n	80058aa <_printf_float+0x13a>
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	4299      	cmp	r1, r3
 80058a8:	dd41      	ble.n	800592e <_printf_float+0x1be>
 80058aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80058ae:	fa5f fb8b 	uxtb.w	fp, fp
 80058b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058b6:	d820      	bhi.n	80058fa <_printf_float+0x18a>
 80058b8:	3901      	subs	r1, #1
 80058ba:	465a      	mov	r2, fp
 80058bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058c0:	9109      	str	r1, [sp, #36]	; 0x24
 80058c2:	f7ff ff17 	bl	80056f4 <__exponent>
 80058c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c8:	1813      	adds	r3, r2, r0
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	4681      	mov	r9, r0
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	dc02      	bgt.n	80058d8 <_printf_float+0x168>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	07d2      	lsls	r2, r2, #31
 80058d6:	d501      	bpl.n	80058dc <_printf_float+0x16c>
 80058d8:	3301      	adds	r3, #1
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d09c      	beq.n	800581e <_printf_float+0xae>
 80058e4:	232d      	movs	r3, #45	; 0x2d
 80058e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ea:	e798      	b.n	800581e <_printf_float+0xae>
 80058ec:	9a06      	ldr	r2, [sp, #24]
 80058ee:	2a47      	cmp	r2, #71	; 0x47
 80058f0:	d1be      	bne.n	8005870 <_printf_float+0x100>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1bc      	bne.n	8005870 <_printf_float+0x100>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e7b9      	b.n	800586e <_printf_float+0xfe>
 80058fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058fe:	d118      	bne.n	8005932 <_printf_float+0x1c2>
 8005900:	2900      	cmp	r1, #0
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	dd0b      	ble.n	800591e <_printf_float+0x1ae>
 8005906:	6121      	str	r1, [r4, #16]
 8005908:	b913      	cbnz	r3, 8005910 <_printf_float+0x1a0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	07d0      	lsls	r0, r2, #31
 800590e:	d502      	bpl.n	8005916 <_printf_float+0x1a6>
 8005910:	3301      	adds	r3, #1
 8005912:	440b      	add	r3, r1
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	65a1      	str	r1, [r4, #88]	; 0x58
 8005918:	f04f 0900 	mov.w	r9, #0
 800591c:	e7de      	b.n	80058dc <_printf_float+0x16c>
 800591e:	b913      	cbnz	r3, 8005926 <_printf_float+0x1b6>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	07d2      	lsls	r2, r2, #31
 8005924:	d501      	bpl.n	800592a <_printf_float+0x1ba>
 8005926:	3302      	adds	r3, #2
 8005928:	e7f4      	b.n	8005914 <_printf_float+0x1a4>
 800592a:	2301      	movs	r3, #1
 800592c:	e7f2      	b.n	8005914 <_printf_float+0x1a4>
 800592e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005934:	4299      	cmp	r1, r3
 8005936:	db05      	blt.n	8005944 <_printf_float+0x1d4>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	6121      	str	r1, [r4, #16]
 800593c:	07d8      	lsls	r0, r3, #31
 800593e:	d5ea      	bpl.n	8005916 <_printf_float+0x1a6>
 8005940:	1c4b      	adds	r3, r1, #1
 8005942:	e7e7      	b.n	8005914 <_printf_float+0x1a4>
 8005944:	2900      	cmp	r1, #0
 8005946:	bfd4      	ite	le
 8005948:	f1c1 0202 	rsble	r2, r1, #2
 800594c:	2201      	movgt	r2, #1
 800594e:	4413      	add	r3, r2
 8005950:	e7e0      	b.n	8005914 <_printf_float+0x1a4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	055a      	lsls	r2, r3, #21
 8005956:	d407      	bmi.n	8005968 <_printf_float+0x1f8>
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	4642      	mov	r2, r8
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	d12c      	bne.n	80059c0 <_printf_float+0x250>
 8005966:	e764      	b.n	8005832 <_printf_float+0xc2>
 8005968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800596c:	f240 80e0 	bls.w	8005b30 <_printf_float+0x3c0>
 8005970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	f7fb f8c6 	bl	8000b08 <__aeabi_dcmpeq>
 800597c:	2800      	cmp	r0, #0
 800597e:	d034      	beq.n	80059ea <_printf_float+0x27a>
 8005980:	4a37      	ldr	r2, [pc, #220]	; (8005a60 <_printf_float+0x2f0>)
 8005982:	2301      	movs	r3, #1
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f af51 	beq.w	8005832 <_printf_float+0xc2>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	db02      	blt.n	800599e <_printf_float+0x22e>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07d8      	lsls	r0, r3, #31
 800599c:	d510      	bpl.n	80059c0 <_printf_float+0x250>
 800599e:	ee18 3a10 	vmov	r3, s16
 80059a2:	4652      	mov	r2, sl
 80059a4:	4631      	mov	r1, r6
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	3001      	adds	r0, #1
 80059ac:	f43f af41 	beq.w	8005832 <_printf_float+0xc2>
 80059b0:	f04f 0800 	mov.w	r8, #0
 80059b4:	f104 091a 	add.w	r9, r4, #26
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	3b01      	subs	r3, #1
 80059bc:	4543      	cmp	r3, r8
 80059be:	dc09      	bgt.n	80059d4 <_printf_float+0x264>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	079b      	lsls	r3, r3, #30
 80059c4:	f100 8105 	bmi.w	8005bd2 <_printf_float+0x462>
 80059c8:	68e0      	ldr	r0, [r4, #12]
 80059ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059cc:	4298      	cmp	r0, r3
 80059ce:	bfb8      	it	lt
 80059d0:	4618      	movlt	r0, r3
 80059d2:	e730      	b.n	8005836 <_printf_float+0xc6>
 80059d4:	2301      	movs	r3, #1
 80059d6:	464a      	mov	r2, r9
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af27 	beq.w	8005832 <_printf_float+0xc2>
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	e7e6      	b.n	80059b8 <_printf_float+0x248>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dc39      	bgt.n	8005a64 <_printf_float+0x2f4>
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <_printf_float+0x2f0>)
 80059f2:	2301      	movs	r3, #1
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af19 	beq.w	8005832 <_printf_float+0xc2>
 8005a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d102      	bne.n	8005a0e <_printf_float+0x29e>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	d5d8      	bpl.n	80059c0 <_printf_float+0x250>
 8005a0e:	ee18 3a10 	vmov	r3, s16
 8005a12:	4652      	mov	r2, sl
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af09 	beq.w	8005832 <_printf_float+0xc2>
 8005a20:	f04f 0900 	mov.w	r9, #0
 8005a24:	f104 0a1a 	add.w	sl, r4, #26
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	454b      	cmp	r3, r9
 8005a2e:	dc01      	bgt.n	8005a34 <_printf_float+0x2c4>
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	e792      	b.n	800595a <_printf_float+0x1ea>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4652      	mov	r2, sl
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f43f aef7 	beq.w	8005832 <_printf_float+0xc2>
 8005a44:	f109 0901 	add.w	r9, r9, #1
 8005a48:	e7ee      	b.n	8005a28 <_printf_float+0x2b8>
 8005a4a:	bf00      	nop
 8005a4c:	7fefffff 	.word	0x7fefffff
 8005a50:	08007e1c 	.word	0x08007e1c
 8005a54:	08007e20 	.word	0x08007e20
 8005a58:	08007e28 	.word	0x08007e28
 8005a5c:	08007e24 	.word	0x08007e24
 8005a60:	08007e2c 	.word	0x08007e2c
 8005a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	bfa8      	it	ge
 8005a6c:	461a      	movge	r2, r3
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	4691      	mov	r9, r2
 8005a72:	dc37      	bgt.n	8005ae4 <_printf_float+0x374>
 8005a74:	f04f 0b00 	mov.w	fp, #0
 8005a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a7c:	f104 021a 	add.w	r2, r4, #26
 8005a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	eba3 0309 	sub.w	r3, r3, r9
 8005a88:	455b      	cmp	r3, fp
 8005a8a:	dc33      	bgt.n	8005af4 <_printf_float+0x384>
 8005a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a90:	429a      	cmp	r2, r3
 8005a92:	db3b      	blt.n	8005b0c <_printf_float+0x39c>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07da      	lsls	r2, r3, #31
 8005a98:	d438      	bmi.n	8005b0c <_printf_float+0x39c>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	9a05      	ldr	r2, [sp, #20]
 8005a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aa0:	1a9a      	subs	r2, r3, r2
 8005aa2:	eba3 0901 	sub.w	r9, r3, r1
 8005aa6:	4591      	cmp	r9, r2
 8005aa8:	bfa8      	it	ge
 8005aaa:	4691      	movge	r9, r2
 8005aac:	f1b9 0f00 	cmp.w	r9, #0
 8005ab0:	dc35      	bgt.n	8005b1e <_printf_float+0x3ae>
 8005ab2:	f04f 0800 	mov.w	r8, #0
 8005ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aba:	f104 0a1a 	add.w	sl, r4, #26
 8005abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	eba3 0309 	sub.w	r3, r3, r9
 8005ac8:	4543      	cmp	r3, r8
 8005aca:	f77f af79 	ble.w	80059c0 <_printf_float+0x250>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f aeaa 	beq.w	8005832 <_printf_float+0xc2>
 8005ade:	f108 0801 	add.w	r8, r8, #1
 8005ae2:	e7ec      	b.n	8005abe <_printf_float+0x34e>
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4642      	mov	r2, r8
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	d1c0      	bne.n	8005a74 <_printf_float+0x304>
 8005af2:	e69e      	b.n	8005832 <_printf_float+0xc2>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	9205      	str	r2, [sp, #20]
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f ae97 	beq.w	8005832 <_printf_float+0xc2>
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	f10b 0b01 	add.w	fp, fp, #1
 8005b0a:	e7b9      	b.n	8005a80 <_printf_float+0x310>
 8005b0c:	ee18 3a10 	vmov	r3, s16
 8005b10:	4652      	mov	r2, sl
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d1be      	bne.n	8005a9a <_printf_float+0x32a>
 8005b1c:	e689      	b.n	8005832 <_printf_float+0xc2>
 8005b1e:	9a05      	ldr	r2, [sp, #20]
 8005b20:	464b      	mov	r3, r9
 8005b22:	4442      	add	r2, r8
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d1c1      	bne.n	8005ab2 <_printf_float+0x342>
 8005b2e:	e680      	b.n	8005832 <_printf_float+0xc2>
 8005b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b32:	2a01      	cmp	r2, #1
 8005b34:	dc01      	bgt.n	8005b3a <_printf_float+0x3ca>
 8005b36:	07db      	lsls	r3, r3, #31
 8005b38:	d538      	bpl.n	8005bac <_printf_float+0x43c>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae74 	beq.w	8005832 <_printf_float+0xc2>
 8005b4a:	ee18 3a10 	vmov	r3, s16
 8005b4e:	4652      	mov	r2, sl
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f ae6b 	beq.w	8005832 <_printf_float+0xc2>
 8005b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ffd0 	bl	8000b08 <__aeabi_dcmpeq>
 8005b68:	b9d8      	cbnz	r0, 8005ba2 <_printf_float+0x432>
 8005b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6c:	f108 0201 	add.w	r2, r8, #1
 8005b70:	3b01      	subs	r3, #1
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d10e      	bne.n	8005b9a <_printf_float+0x42a>
 8005b7c:	e659      	b.n	8005832 <_printf_float+0xc2>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f ae52 	beq.w	8005832 <_printf_float+0xc2>
 8005b8e:	f108 0801 	add.w	r8, r8, #1
 8005b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4543      	cmp	r3, r8
 8005b98:	dcf1      	bgt.n	8005b7e <_printf_float+0x40e>
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ba0:	e6dc      	b.n	800595c <_printf_float+0x1ec>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	f104 0a1a 	add.w	sl, r4, #26
 8005baa:	e7f2      	b.n	8005b92 <_printf_float+0x422>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4642      	mov	r2, r8
 8005bb0:	e7df      	b.n	8005b72 <_printf_float+0x402>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	464a      	mov	r2, r9
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae38 	beq.w	8005832 <_printf_float+0xc2>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bca:	1a5b      	subs	r3, r3, r1
 8005bcc:	4543      	cmp	r3, r8
 8005bce:	dcf0      	bgt.n	8005bb2 <_printf_float+0x442>
 8005bd0:	e6fa      	b.n	80059c8 <_printf_float+0x258>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	f104 0919 	add.w	r9, r4, #25
 8005bda:	e7f4      	b.n	8005bc6 <_printf_float+0x456>

08005bdc <_printf_common>:
 8005bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	4616      	mov	r6, r2
 8005be2:	4699      	mov	r9, r3
 8005be4:	688a      	ldr	r2, [r1, #8]
 8005be6:	690b      	ldr	r3, [r1, #16]
 8005be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bfb8      	it	lt
 8005bf0:	4613      	movlt	r3, r2
 8005bf2:	6033      	str	r3, [r6, #0]
 8005bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	b10a      	cbz	r2, 8005c02 <_printf_common+0x26>
 8005bfe:	3301      	adds	r3, #1
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	0699      	lsls	r1, r3, #26
 8005c06:	bf42      	ittt	mi
 8005c08:	6833      	ldrmi	r3, [r6, #0]
 8005c0a:	3302      	addmi	r3, #2
 8005c0c:	6033      	strmi	r3, [r6, #0]
 8005c0e:	6825      	ldr	r5, [r4, #0]
 8005c10:	f015 0506 	ands.w	r5, r5, #6
 8005c14:	d106      	bne.n	8005c24 <_printf_common+0x48>
 8005c16:	f104 0a19 	add.w	sl, r4, #25
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	6832      	ldr	r2, [r6, #0]
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	dc26      	bgt.n	8005c72 <_printf_common+0x96>
 8005c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c28:	1e13      	subs	r3, r2, #0
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	0692      	lsls	r2, r2, #26
 8005c32:	d42b      	bmi.n	8005c8c <_printf_common+0xb0>
 8005c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d01e      	beq.n	8005c80 <_printf_common+0xa4>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	68e5      	ldr	r5, [r4, #12]
 8005c46:	6832      	ldr	r2, [r6, #0]
 8005c48:	f003 0306 	and.w	r3, r3, #6
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	bf08      	it	eq
 8005c50:	1aad      	subeq	r5, r5, r2
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	6922      	ldr	r2, [r4, #16]
 8005c56:	bf0c      	ite	eq
 8005c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c5c:	2500      	movne	r5, #0
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	bfc4      	itt	gt
 8005c62:	1a9b      	subgt	r3, r3, r2
 8005c64:	18ed      	addgt	r5, r5, r3
 8005c66:	2600      	movs	r6, #0
 8005c68:	341a      	adds	r4, #26
 8005c6a:	42b5      	cmp	r5, r6
 8005c6c:	d11a      	bne.n	8005ca4 <_printf_common+0xc8>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e008      	b.n	8005c84 <_printf_common+0xa8>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4652      	mov	r2, sl
 8005c76:	4649      	mov	r1, r9
 8005c78:	4638      	mov	r0, r7
 8005c7a:	47c0      	blx	r8
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d103      	bne.n	8005c88 <_printf_common+0xac>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	3501      	adds	r5, #1
 8005c8a:	e7c6      	b.n	8005c1a <_printf_common+0x3e>
 8005c8c:	18e1      	adds	r1, r4, r3
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	2030      	movs	r0, #48	; 0x30
 8005c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c96:	4422      	add	r2, r4
 8005c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	e7c7      	b.n	8005c34 <_printf_common+0x58>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4638      	mov	r0, r7
 8005cac:	47c0      	blx	r8
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d0e6      	beq.n	8005c80 <_printf_common+0xa4>
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7d9      	b.n	8005c6a <_printf_common+0x8e>
	...

08005cb8 <_printf_i>:
 8005cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	7e0f      	ldrb	r7, [r1, #24]
 8005cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc0:	2f78      	cmp	r7, #120	; 0x78
 8005cc2:	4691      	mov	r9, r2
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	469a      	mov	sl, r3
 8005cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cce:	d807      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cd0:	2f62      	cmp	r7, #98	; 0x62
 8005cd2:	d80a      	bhi.n	8005cea <_printf_i+0x32>
 8005cd4:	2f00      	cmp	r7, #0
 8005cd6:	f000 80d8 	beq.w	8005e8a <_printf_i+0x1d2>
 8005cda:	2f58      	cmp	r7, #88	; 0x58
 8005cdc:	f000 80a3 	beq.w	8005e26 <_printf_i+0x16e>
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce8:	e03a      	b.n	8005d60 <_printf_i+0xa8>
 8005cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cee:	2b15      	cmp	r3, #21
 8005cf0:	d8f6      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cf2:	a101      	add	r1, pc, #4	; (adr r1, 8005cf8 <_printf_i+0x40>)
 8005cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005ce1 	.word	0x08005ce1
 8005d04:	08005ce1 	.word	0x08005ce1
 8005d08:	08005ce1 	.word	0x08005ce1
 8005d0c:	08005ce1 	.word	0x08005ce1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005ce1 	.word	0x08005ce1
 8005d18:	08005ce1 	.word	0x08005ce1
 8005d1c:	08005ce1 	.word	0x08005ce1
 8005d20:	08005ce1 	.word	0x08005ce1
 8005d24:	08005e71 	.word	0x08005e71
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005e53 	.word	0x08005e53
 8005d30:	08005ce1 	.word	0x08005ce1
 8005d34:	08005ce1 	.word	0x08005ce1
 8005d38:	08005e93 	.word	0x08005e93
 8005d3c:	08005ce1 	.word	0x08005ce1
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005ce1 	.word	0x08005ce1
 8005d48:	08005ce1 	.word	0x08005ce1
 8005d4c:	08005e5b 	.word	0x08005e5b
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0a3      	b.n	8005eac <_printf_i+0x1f4>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	6829      	ldr	r1, [r5, #0]
 8005d68:	0606      	lsls	r6, r0, #24
 8005d6a:	f101 0304 	add.w	r3, r1, #4
 8005d6e:	d50a      	bpl.n	8005d86 <_printf_i+0xce>
 8005d70:	680e      	ldr	r6, [r1, #0]
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	2e00      	cmp	r6, #0
 8005d76:	da03      	bge.n	8005d80 <_printf_i+0xc8>
 8005d78:	232d      	movs	r3, #45	; 0x2d
 8005d7a:	4276      	negs	r6, r6
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d80:	485e      	ldr	r0, [pc, #376]	; (8005efc <_printf_i+0x244>)
 8005d82:	230a      	movs	r3, #10
 8005d84:	e019      	b.n	8005dba <_printf_i+0x102>
 8005d86:	680e      	ldr	r6, [r1, #0]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d8e:	bf18      	it	ne
 8005d90:	b236      	sxthne	r6, r6
 8005d92:	e7ef      	b.n	8005d74 <_printf_i+0xbc>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	6029      	str	r1, [r5, #0]
 8005d9c:	0601      	lsls	r1, r0, #24
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0xec>
 8005da0:	681e      	ldr	r6, [r3, #0]
 8005da2:	e002      	b.n	8005daa <_printf_i+0xf2>
 8005da4:	0646      	lsls	r6, r0, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0xe8>
 8005da8:	881e      	ldrh	r6, [r3, #0]
 8005daa:	4854      	ldr	r0, [pc, #336]	; (8005efc <_printf_i+0x244>)
 8005dac:	2f6f      	cmp	r7, #111	; 0x6f
 8005dae:	bf0c      	ite	eq
 8005db0:	2308      	moveq	r3, #8
 8005db2:	230a      	movne	r3, #10
 8005db4:	2100      	movs	r1, #0
 8005db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dba:	6865      	ldr	r5, [r4, #4]
 8005dbc:	60a5      	str	r5, [r4, #8]
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	bfa2      	ittt	ge
 8005dc2:	6821      	ldrge	r1, [r4, #0]
 8005dc4:	f021 0104 	bicge.w	r1, r1, #4
 8005dc8:	6021      	strge	r1, [r4, #0]
 8005dca:	b90e      	cbnz	r6, 8005dd0 <_printf_i+0x118>
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	d04d      	beq.n	8005e6c <_printf_i+0x1b4>
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dda:	5dc7      	ldrb	r7, [r0, r7]
 8005ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de0:	4637      	mov	r7, r6
 8005de2:	42bb      	cmp	r3, r7
 8005de4:	460e      	mov	r6, r1
 8005de6:	d9f4      	bls.n	8005dd2 <_printf_i+0x11a>
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d10b      	bne.n	8005e04 <_printf_i+0x14c>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07de      	lsls	r6, r3, #31
 8005df0:	d508      	bpl.n	8005e04 <_printf_i+0x14c>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	6861      	ldr	r1, [r4, #4]
 8005df6:	4299      	cmp	r1, r3
 8005df8:	bfde      	ittt	le
 8005dfa:	2330      	movle	r3, #48	; 0x30
 8005dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e04:	1b52      	subs	r2, r2, r5
 8005e06:	6122      	str	r2, [r4, #16]
 8005e08:	f8cd a000 	str.w	sl, [sp]
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	aa03      	add	r2, sp, #12
 8005e10:	4621      	mov	r1, r4
 8005e12:	4640      	mov	r0, r8
 8005e14:	f7ff fee2 	bl	8005bdc <_printf_common>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d14c      	bne.n	8005eb6 <_printf_i+0x1fe>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	b004      	add	sp, #16
 8005e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e26:	4835      	ldr	r0, [pc, #212]	; (8005efc <_printf_i+0x244>)
 8005e28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e2c:	6829      	ldr	r1, [r5, #0]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e34:	6029      	str	r1, [r5, #0]
 8005e36:	061d      	lsls	r5, r3, #24
 8005e38:	d514      	bpl.n	8005e64 <_printf_i+0x1ac>
 8005e3a:	07df      	lsls	r7, r3, #31
 8005e3c:	bf44      	itt	mi
 8005e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e42:	6023      	strmi	r3, [r4, #0]
 8005e44:	b91e      	cbnz	r6, 8005e4e <_printf_i+0x196>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f023 0320 	bic.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2310      	movs	r3, #16
 8005e50:	e7b0      	b.n	8005db4 <_printf_i+0xfc>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f043 0320 	orr.w	r3, r3, #32
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	2378      	movs	r3, #120	; 0x78
 8005e5c:	4828      	ldr	r0, [pc, #160]	; (8005f00 <_printf_i+0x248>)
 8005e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e62:	e7e3      	b.n	8005e2c <_printf_i+0x174>
 8005e64:	0659      	lsls	r1, r3, #25
 8005e66:	bf48      	it	mi
 8005e68:	b2b6      	uxthmi	r6, r6
 8005e6a:	e7e6      	b.n	8005e3a <_printf_i+0x182>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	e7bb      	b.n	8005de8 <_printf_i+0x130>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	6826      	ldr	r6, [r4, #0]
 8005e74:	6961      	ldr	r1, [r4, #20]
 8005e76:	1d18      	adds	r0, r3, #4
 8005e78:	6028      	str	r0, [r5, #0]
 8005e7a:	0635      	lsls	r5, r6, #24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	d501      	bpl.n	8005e84 <_printf_i+0x1cc>
 8005e80:	6019      	str	r1, [r3, #0]
 8005e82:	e002      	b.n	8005e8a <_printf_i+0x1d2>
 8005e84:	0670      	lsls	r0, r6, #25
 8005e86:	d5fb      	bpl.n	8005e80 <_printf_i+0x1c8>
 8005e88:	8019      	strh	r1, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	4615      	mov	r5, r2
 8005e90:	e7ba      	b.n	8005e08 <_printf_i+0x150>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	602a      	str	r2, [r5, #0]
 8005e98:	681d      	ldr	r5, [r3, #0]
 8005e9a:	6862      	ldr	r2, [r4, #4]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7fa f9be 	bl	8000220 <memchr>
 8005ea4:	b108      	cbz	r0, 8005eaa <_printf_i+0x1f2>
 8005ea6:	1b40      	subs	r0, r0, r5
 8005ea8:	6060      	str	r0, [r4, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb4:	e7a8      	b.n	8005e08 <_printf_i+0x150>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d0ab      	beq.n	8005e1c <_printf_i+0x164>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	079b      	lsls	r3, r3, #30
 8005ec8:	d413      	bmi.n	8005ef2 <_printf_i+0x23a>
 8005eca:	68e0      	ldr	r0, [r4, #12]
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	bfb8      	it	lt
 8005ed2:	4618      	movlt	r0, r3
 8005ed4:	e7a4      	b.n	8005e20 <_printf_i+0x168>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d09b      	beq.n	8005e1c <_printf_i+0x164>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	1a5b      	subs	r3, r3, r1
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf2      	bgt.n	8005ed6 <_printf_i+0x21e>
 8005ef0:	e7eb      	b.n	8005eca <_printf_i+0x212>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	f104 0619 	add.w	r6, r4, #25
 8005ef8:	e7f5      	b.n	8005ee6 <_printf_i+0x22e>
 8005efa:	bf00      	nop
 8005efc:	08007e2e 	.word	0x08007e2e
 8005f00:	08007e3f 	.word	0x08007e3f

08005f04 <cleanup_glue>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	6809      	ldr	r1, [r1, #0]
 8005f0a:	4605      	mov	r5, r0
 8005f0c:	b109      	cbz	r1, 8005f12 <cleanup_glue+0xe>
 8005f0e:	f7ff fff9 	bl	8005f04 <cleanup_glue>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1a:	f7ff baa9 	b.w	8005470 <_free_r>
	...

08005f20 <_reclaim_reent>:
 8005f20:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <_reclaim_reent+0xb4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4283      	cmp	r3, r0
 8005f26:	b570      	push	{r4, r5, r6, lr}
 8005f28:	4604      	mov	r4, r0
 8005f2a:	d051      	beq.n	8005fd0 <_reclaim_reent+0xb0>
 8005f2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f2e:	b143      	cbz	r3, 8005f42 <_reclaim_reent+0x22>
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d14a      	bne.n	8005fcc <_reclaim_reent+0xac>
 8005f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f38:	6819      	ldr	r1, [r3, #0]
 8005f3a:	b111      	cbz	r1, 8005f42 <_reclaim_reent+0x22>
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f7ff fa97 	bl	8005470 <_free_r>
 8005f42:	6961      	ldr	r1, [r4, #20]
 8005f44:	b111      	cbz	r1, 8005f4c <_reclaim_reent+0x2c>
 8005f46:	4620      	mov	r0, r4
 8005f48:	f7ff fa92 	bl	8005470 <_free_r>
 8005f4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f4e:	b111      	cbz	r1, 8005f56 <_reclaim_reent+0x36>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff fa8d 	bl	8005470 <_free_r>
 8005f56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005f58:	b111      	cbz	r1, 8005f60 <_reclaim_reent+0x40>
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fa88 	bl	8005470 <_free_r>
 8005f60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f62:	b111      	cbz	r1, 8005f6a <_reclaim_reent+0x4a>
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff fa83 	bl	8005470 <_free_r>
 8005f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005f6c:	b111      	cbz	r1, 8005f74 <_reclaim_reent+0x54>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	f7ff fa7e 	bl	8005470 <_free_r>
 8005f74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f76:	b111      	cbz	r1, 8005f7e <_reclaim_reent+0x5e>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f7ff fa79 	bl	8005470 <_free_r>
 8005f7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005f80:	b111      	cbz	r1, 8005f88 <_reclaim_reent+0x68>
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff fa74 	bl	8005470 <_free_r>
 8005f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f8a:	b111      	cbz	r1, 8005f92 <_reclaim_reent+0x72>
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fa6f 	bl	8005470 <_free_r>
 8005f92:	69a3      	ldr	r3, [r4, #24]
 8005f94:	b1e3      	cbz	r3, 8005fd0 <_reclaim_reent+0xb0>
 8005f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f98:	4620      	mov	r0, r4
 8005f9a:	4798      	blx	r3
 8005f9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005f9e:	b1b9      	cbz	r1, 8005fd0 <_reclaim_reent+0xb0>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fa6:	f7ff bfad 	b.w	8005f04 <cleanup_glue>
 8005faa:	5949      	ldr	r1, [r1, r5]
 8005fac:	b941      	cbnz	r1, 8005fc0 <_reclaim_reent+0xa0>
 8005fae:	3504      	adds	r5, #4
 8005fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fb2:	2d80      	cmp	r5, #128	; 0x80
 8005fb4:	68d9      	ldr	r1, [r3, #12]
 8005fb6:	d1f8      	bne.n	8005faa <_reclaim_reent+0x8a>
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f7ff fa59 	bl	8005470 <_free_r>
 8005fbe:	e7ba      	b.n	8005f36 <_reclaim_reent+0x16>
 8005fc0:	680e      	ldr	r6, [r1, #0]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7ff fa54 	bl	8005470 <_free_r>
 8005fc8:	4631      	mov	r1, r6
 8005fca:	e7ef      	b.n	8005fac <_reclaim_reent+0x8c>
 8005fcc:	2500      	movs	r5, #0
 8005fce:	e7ef      	b.n	8005fb0 <_reclaim_reent+0x90>
 8005fd0:	bd70      	pop	{r4, r5, r6, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000010 	.word	0x20000010

08005fd8 <_sbrk_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4d06      	ldr	r5, [pc, #24]	; (8005ff4 <_sbrk_r+0x1c>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	4604      	mov	r4, r0
 8005fe0:	4608      	mov	r0, r1
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	f7fb fb94 	bl	8001710 <_sbrk>
 8005fe8:	1c43      	adds	r3, r0, #1
 8005fea:	d102      	bne.n	8005ff2 <_sbrk_r+0x1a>
 8005fec:	682b      	ldr	r3, [r5, #0]
 8005fee:	b103      	cbz	r3, 8005ff2 <_sbrk_r+0x1a>
 8005ff0:	6023      	str	r3, [r4, #0]
 8005ff2:	bd38      	pop	{r3, r4, r5, pc}
 8005ff4:	20004460 	.word	0x20004460

08005ff8 <__sread>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006000:	f001 fdda 	bl	8007bb8 <_read_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	bfab      	itete	ge
 8006008:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800600a:	89a3      	ldrhlt	r3, [r4, #12]
 800600c:	181b      	addge	r3, r3, r0
 800600e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006012:	bfac      	ite	ge
 8006014:	6563      	strge	r3, [r4, #84]	; 0x54
 8006016:	81a3      	strhlt	r3, [r4, #12]
 8006018:	bd10      	pop	{r4, pc}

0800601a <__swrite>:
 800601a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800601e:	461f      	mov	r7, r3
 8006020:	898b      	ldrh	r3, [r1, #12]
 8006022:	05db      	lsls	r3, r3, #23
 8006024:	4605      	mov	r5, r0
 8006026:	460c      	mov	r4, r1
 8006028:	4616      	mov	r6, r2
 800602a:	d505      	bpl.n	8006038 <__swrite+0x1e>
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	2302      	movs	r3, #2
 8006032:	2200      	movs	r2, #0
 8006034:	f001 f848 	bl	80070c8 <_lseek_r>
 8006038:	89a3      	ldrh	r3, [r4, #12]
 800603a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800603e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	4632      	mov	r2, r6
 8006046:	463b      	mov	r3, r7
 8006048:	4628      	mov	r0, r5
 800604a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	f000 b869 	b.w	8006124 <_write_r>

08006052 <__sseek>:
 8006052:	b510      	push	{r4, lr}
 8006054:	460c      	mov	r4, r1
 8006056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605a:	f001 f835 	bl	80070c8 <_lseek_r>
 800605e:	1c43      	adds	r3, r0, #1
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	bf15      	itete	ne
 8006064:	6560      	strne	r0, [r4, #84]	; 0x54
 8006066:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800606a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800606e:	81a3      	strheq	r3, [r4, #12]
 8006070:	bf18      	it	ne
 8006072:	81a3      	strhne	r3, [r4, #12]
 8006074:	bd10      	pop	{r4, pc}

08006076 <__sclose>:
 8006076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607a:	f000 b8d3 	b.w	8006224 <_close_r>
	...

08006080 <__swbuf_r>:
 8006080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006082:	460e      	mov	r6, r1
 8006084:	4614      	mov	r4, r2
 8006086:	4605      	mov	r5, r0
 8006088:	b118      	cbz	r0, 8006092 <__swbuf_r+0x12>
 800608a:	6983      	ldr	r3, [r0, #24]
 800608c:	b90b      	cbnz	r3, 8006092 <__swbuf_r+0x12>
 800608e:	f7ff f90b 	bl	80052a8 <__sinit>
 8006092:	4b21      	ldr	r3, [pc, #132]	; (8006118 <__swbuf_r+0x98>)
 8006094:	429c      	cmp	r4, r3
 8006096:	d12b      	bne.n	80060f0 <__swbuf_r+0x70>
 8006098:	686c      	ldr	r4, [r5, #4]
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	071a      	lsls	r2, r3, #28
 80060a2:	d52f      	bpl.n	8006104 <__swbuf_r+0x84>
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	b36b      	cbz	r3, 8006104 <__swbuf_r+0x84>
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	6820      	ldr	r0, [r4, #0]
 80060ac:	1ac0      	subs	r0, r0, r3
 80060ae:	6963      	ldr	r3, [r4, #20]
 80060b0:	b2f6      	uxtb	r6, r6
 80060b2:	4283      	cmp	r3, r0
 80060b4:	4637      	mov	r7, r6
 80060b6:	dc04      	bgt.n	80060c2 <__swbuf_r+0x42>
 80060b8:	4621      	mov	r1, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 ffc4 	bl	8007048 <_fflush_r>
 80060c0:	bb30      	cbnz	r0, 8006110 <__swbuf_r+0x90>
 80060c2:	68a3      	ldr	r3, [r4, #8]
 80060c4:	3b01      	subs	r3, #1
 80060c6:	60a3      	str	r3, [r4, #8]
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	6022      	str	r2, [r4, #0]
 80060ce:	701e      	strb	r6, [r3, #0]
 80060d0:	6963      	ldr	r3, [r4, #20]
 80060d2:	3001      	adds	r0, #1
 80060d4:	4283      	cmp	r3, r0
 80060d6:	d004      	beq.n	80060e2 <__swbuf_r+0x62>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	07db      	lsls	r3, r3, #31
 80060dc:	d506      	bpl.n	80060ec <__swbuf_r+0x6c>
 80060de:	2e0a      	cmp	r6, #10
 80060e0:	d104      	bne.n	80060ec <__swbuf_r+0x6c>
 80060e2:	4621      	mov	r1, r4
 80060e4:	4628      	mov	r0, r5
 80060e6:	f000 ffaf 	bl	8007048 <_fflush_r>
 80060ea:	b988      	cbnz	r0, 8006110 <__swbuf_r+0x90>
 80060ec:	4638      	mov	r0, r7
 80060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060f0:	4b0a      	ldr	r3, [pc, #40]	; (800611c <__swbuf_r+0x9c>)
 80060f2:	429c      	cmp	r4, r3
 80060f4:	d101      	bne.n	80060fa <__swbuf_r+0x7a>
 80060f6:	68ac      	ldr	r4, [r5, #8]
 80060f8:	e7cf      	b.n	800609a <__swbuf_r+0x1a>
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <__swbuf_r+0xa0>)
 80060fc:	429c      	cmp	r4, r3
 80060fe:	bf08      	it	eq
 8006100:	68ec      	ldreq	r4, [r5, #12]
 8006102:	e7ca      	b.n	800609a <__swbuf_r+0x1a>
 8006104:	4621      	mov	r1, r4
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f81e 	bl	8006148 <__swsetup_r>
 800610c:	2800      	cmp	r0, #0
 800610e:	d0cb      	beq.n	80060a8 <__swbuf_r+0x28>
 8006110:	f04f 37ff 	mov.w	r7, #4294967295
 8006114:	e7ea      	b.n	80060ec <__swbuf_r+0x6c>
 8006116:	bf00      	nop
 8006118:	08007dd8 	.word	0x08007dd8
 800611c:	08007df8 	.word	0x08007df8
 8006120:	08007db8 	.word	0x08007db8

08006124 <_write_r>:
 8006124:	b538      	push	{r3, r4, r5, lr}
 8006126:	4d07      	ldr	r5, [pc, #28]	; (8006144 <_write_r+0x20>)
 8006128:	4604      	mov	r4, r0
 800612a:	4608      	mov	r0, r1
 800612c:	4611      	mov	r1, r2
 800612e:	2200      	movs	r2, #0
 8006130:	602a      	str	r2, [r5, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	f7fb fa9b 	bl	800166e <_write>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_write_r+0x1e>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_write_r+0x1e>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20004460 	.word	0x20004460

08006148 <__swsetup_r>:
 8006148:	4b32      	ldr	r3, [pc, #200]	; (8006214 <__swsetup_r+0xcc>)
 800614a:	b570      	push	{r4, r5, r6, lr}
 800614c:	681d      	ldr	r5, [r3, #0]
 800614e:	4606      	mov	r6, r0
 8006150:	460c      	mov	r4, r1
 8006152:	b125      	cbz	r5, 800615e <__swsetup_r+0x16>
 8006154:	69ab      	ldr	r3, [r5, #24]
 8006156:	b913      	cbnz	r3, 800615e <__swsetup_r+0x16>
 8006158:	4628      	mov	r0, r5
 800615a:	f7ff f8a5 	bl	80052a8 <__sinit>
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <__swsetup_r+0xd0>)
 8006160:	429c      	cmp	r4, r3
 8006162:	d10f      	bne.n	8006184 <__swsetup_r+0x3c>
 8006164:	686c      	ldr	r4, [r5, #4]
 8006166:	89a3      	ldrh	r3, [r4, #12]
 8006168:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800616c:	0719      	lsls	r1, r3, #28
 800616e:	d42c      	bmi.n	80061ca <__swsetup_r+0x82>
 8006170:	06dd      	lsls	r5, r3, #27
 8006172:	d411      	bmi.n	8006198 <__swsetup_r+0x50>
 8006174:	2309      	movs	r3, #9
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	f04f 30ff 	mov.w	r0, #4294967295
 8006182:	e03e      	b.n	8006202 <__swsetup_r+0xba>
 8006184:	4b25      	ldr	r3, [pc, #148]	; (800621c <__swsetup_r+0xd4>)
 8006186:	429c      	cmp	r4, r3
 8006188:	d101      	bne.n	800618e <__swsetup_r+0x46>
 800618a:	68ac      	ldr	r4, [r5, #8]
 800618c:	e7eb      	b.n	8006166 <__swsetup_r+0x1e>
 800618e:	4b24      	ldr	r3, [pc, #144]	; (8006220 <__swsetup_r+0xd8>)
 8006190:	429c      	cmp	r4, r3
 8006192:	bf08      	it	eq
 8006194:	68ec      	ldreq	r4, [r5, #12]
 8006196:	e7e6      	b.n	8006166 <__swsetup_r+0x1e>
 8006198:	0758      	lsls	r0, r3, #29
 800619a:	d512      	bpl.n	80061c2 <__swsetup_r+0x7a>
 800619c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800619e:	b141      	cbz	r1, 80061b2 <__swsetup_r+0x6a>
 80061a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061a4:	4299      	cmp	r1, r3
 80061a6:	d002      	beq.n	80061ae <__swsetup_r+0x66>
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7ff f961 	bl	8005470 <_free_r>
 80061ae:	2300      	movs	r3, #0
 80061b0:	6363      	str	r3, [r4, #52]	; 0x34
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061b8:	81a3      	strh	r3, [r4, #12]
 80061ba:	2300      	movs	r3, #0
 80061bc:	6063      	str	r3, [r4, #4]
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	f043 0308 	orr.w	r3, r3, #8
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	b94b      	cbnz	r3, 80061e2 <__swsetup_r+0x9a>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d8:	d003      	beq.n	80061e2 <__swsetup_r+0x9a>
 80061da:	4621      	mov	r1, r4
 80061dc:	4630      	mov	r0, r6
 80061de:	f000 ffab 	bl	8007138 <__smakebuf_r>
 80061e2:	89a0      	ldrh	r0, [r4, #12]
 80061e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061e8:	f010 0301 	ands.w	r3, r0, #1
 80061ec:	d00a      	beq.n	8006204 <__swsetup_r+0xbc>
 80061ee:	2300      	movs	r3, #0
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	6963      	ldr	r3, [r4, #20]
 80061f4:	425b      	negs	r3, r3
 80061f6:	61a3      	str	r3, [r4, #24]
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	b943      	cbnz	r3, 800620e <__swsetup_r+0xc6>
 80061fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006200:	d1ba      	bne.n	8006178 <__swsetup_r+0x30>
 8006202:	bd70      	pop	{r4, r5, r6, pc}
 8006204:	0781      	lsls	r1, r0, #30
 8006206:	bf58      	it	pl
 8006208:	6963      	ldrpl	r3, [r4, #20]
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	e7f4      	b.n	80061f8 <__swsetup_r+0xb0>
 800620e:	2000      	movs	r0, #0
 8006210:	e7f7      	b.n	8006202 <__swsetup_r+0xba>
 8006212:	bf00      	nop
 8006214:	20000010 	.word	0x20000010
 8006218:	08007dd8 	.word	0x08007dd8
 800621c:	08007df8 	.word	0x08007df8
 8006220:	08007db8 	.word	0x08007db8

08006224 <_close_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d06      	ldr	r5, [pc, #24]	; (8006240 <_close_r+0x1c>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fb fa39 	bl	80016a6 <_close>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_close_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_close_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	20004460 	.word	0x20004460

08006244 <quorem>:
 8006244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	6903      	ldr	r3, [r0, #16]
 800624a:	690c      	ldr	r4, [r1, #16]
 800624c:	42a3      	cmp	r3, r4
 800624e:	4607      	mov	r7, r0
 8006250:	f2c0 8081 	blt.w	8006356 <quorem+0x112>
 8006254:	3c01      	subs	r4, #1
 8006256:	f101 0814 	add.w	r8, r1, #20
 800625a:	f100 0514 	add.w	r5, r0, #20
 800625e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800626c:	3301      	adds	r3, #1
 800626e:	429a      	cmp	r2, r3
 8006270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006278:	fbb2 f6f3 	udiv	r6, r2, r3
 800627c:	d331      	bcc.n	80062e2 <quorem+0x9e>
 800627e:	f04f 0e00 	mov.w	lr, #0
 8006282:	4640      	mov	r0, r8
 8006284:	46ac      	mov	ip, r5
 8006286:	46f2      	mov	sl, lr
 8006288:	f850 2b04 	ldr.w	r2, [r0], #4
 800628c:	b293      	uxth	r3, r2
 800628e:	fb06 e303 	mla	r3, r6, r3, lr
 8006292:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006296:	b29b      	uxth	r3, r3
 8006298:	ebaa 0303 	sub.w	r3, sl, r3
 800629c:	f8dc a000 	ldr.w	sl, [ip]
 80062a0:	0c12      	lsrs	r2, r2, #16
 80062a2:	fa13 f38a 	uxtah	r3, r3, sl
 80062a6:	fb06 e202 	mla	r2, r6, r2, lr
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	9b00      	ldr	r3, [sp, #0]
 80062ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062b2:	b292      	uxth	r2, r2
 80062b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062bc:	f8bd 3000 	ldrh.w	r3, [sp]
 80062c0:	4581      	cmp	r9, r0
 80062c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c6:	f84c 3b04 	str.w	r3, [ip], #4
 80062ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062ce:	d2db      	bcs.n	8006288 <quorem+0x44>
 80062d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80062d4:	b92b      	cbnz	r3, 80062e2 <quorem+0x9e>
 80062d6:	9b01      	ldr	r3, [sp, #4]
 80062d8:	3b04      	subs	r3, #4
 80062da:	429d      	cmp	r5, r3
 80062dc:	461a      	mov	r2, r3
 80062de:	d32e      	bcc.n	800633e <quorem+0xfa>
 80062e0:	613c      	str	r4, [r7, #16]
 80062e2:	4638      	mov	r0, r7
 80062e4:	f001 f9f6 	bl	80076d4 <__mcmp>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	db24      	blt.n	8006336 <quorem+0xf2>
 80062ec:	3601      	adds	r6, #1
 80062ee:	4628      	mov	r0, r5
 80062f0:	f04f 0c00 	mov.w	ip, #0
 80062f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80062f8:	f8d0 e000 	ldr.w	lr, [r0]
 80062fc:	b293      	uxth	r3, r2
 80062fe:	ebac 0303 	sub.w	r3, ip, r3
 8006302:	0c12      	lsrs	r2, r2, #16
 8006304:	fa13 f38e 	uxtah	r3, r3, lr
 8006308:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800630c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006310:	b29b      	uxth	r3, r3
 8006312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006316:	45c1      	cmp	r9, r8
 8006318:	f840 3b04 	str.w	r3, [r0], #4
 800631c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006320:	d2e8      	bcs.n	80062f4 <quorem+0xb0>
 8006322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800632a:	b922      	cbnz	r2, 8006336 <quorem+0xf2>
 800632c:	3b04      	subs	r3, #4
 800632e:	429d      	cmp	r5, r3
 8006330:	461a      	mov	r2, r3
 8006332:	d30a      	bcc.n	800634a <quorem+0x106>
 8006334:	613c      	str	r4, [r7, #16]
 8006336:	4630      	mov	r0, r6
 8006338:	b003      	add	sp, #12
 800633a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	3b04      	subs	r3, #4
 8006342:	2a00      	cmp	r2, #0
 8006344:	d1cc      	bne.n	80062e0 <quorem+0x9c>
 8006346:	3c01      	subs	r4, #1
 8006348:	e7c7      	b.n	80062da <quorem+0x96>
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	3b04      	subs	r3, #4
 800634e:	2a00      	cmp	r2, #0
 8006350:	d1f0      	bne.n	8006334 <quorem+0xf0>
 8006352:	3c01      	subs	r4, #1
 8006354:	e7eb      	b.n	800632e <quorem+0xea>
 8006356:	2000      	movs	r0, #0
 8006358:	e7ee      	b.n	8006338 <quorem+0xf4>
 800635a:	0000      	movs	r0, r0
 800635c:	0000      	movs	r0, r0
	...

08006360 <_dtoa_r>:
 8006360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006364:	ed2d 8b04 	vpush	{d8-d9}
 8006368:	ec57 6b10 	vmov	r6, r7, d0
 800636c:	b093      	sub	sp, #76	; 0x4c
 800636e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006370:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006374:	9106      	str	r1, [sp, #24]
 8006376:	ee10 aa10 	vmov	sl, s0
 800637a:	4604      	mov	r4, r0
 800637c:	9209      	str	r2, [sp, #36]	; 0x24
 800637e:	930c      	str	r3, [sp, #48]	; 0x30
 8006380:	46bb      	mov	fp, r7
 8006382:	b975      	cbnz	r5, 80063a2 <_dtoa_r+0x42>
 8006384:	2010      	movs	r0, #16
 8006386:	f7ff f855 	bl	8005434 <malloc>
 800638a:	4602      	mov	r2, r0
 800638c:	6260      	str	r0, [r4, #36]	; 0x24
 800638e:	b920      	cbnz	r0, 800639a <_dtoa_r+0x3a>
 8006390:	4ba7      	ldr	r3, [pc, #668]	; (8006630 <_dtoa_r+0x2d0>)
 8006392:	21ea      	movs	r1, #234	; 0xea
 8006394:	48a7      	ldr	r0, [pc, #668]	; (8006634 <_dtoa_r+0x2d4>)
 8006396:	f001 fc21 	bl	8007bdc <__assert_func>
 800639a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800639e:	6005      	str	r5, [r0, #0]
 80063a0:	60c5      	str	r5, [r0, #12]
 80063a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	b151      	cbz	r1, 80063be <_dtoa_r+0x5e>
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	604a      	str	r2, [r1, #4]
 80063ac:	2301      	movs	r3, #1
 80063ae:	4093      	lsls	r3, r2
 80063b0:	608b      	str	r3, [r1, #8]
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 ff4c 	bl	8007250 <_Bfree>
 80063b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	1e3b      	subs	r3, r7, #0
 80063c0:	bfaa      	itet	ge
 80063c2:	2300      	movge	r3, #0
 80063c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80063c8:	f8c8 3000 	strge.w	r3, [r8]
 80063cc:	4b9a      	ldr	r3, [pc, #616]	; (8006638 <_dtoa_r+0x2d8>)
 80063ce:	bfbc      	itt	lt
 80063d0:	2201      	movlt	r2, #1
 80063d2:	f8c8 2000 	strlt.w	r2, [r8]
 80063d6:	ea33 030b 	bics.w	r3, r3, fp
 80063da:	d11b      	bne.n	8006414 <_dtoa_r+0xb4>
 80063dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063de:	f242 730f 	movw	r3, #9999	; 0x270f
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063e8:	4333      	orrs	r3, r6
 80063ea:	f000 8592 	beq.w	8006f12 <_dtoa_r+0xbb2>
 80063ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063f0:	b963      	cbnz	r3, 800640c <_dtoa_r+0xac>
 80063f2:	4b92      	ldr	r3, [pc, #584]	; (800663c <_dtoa_r+0x2dc>)
 80063f4:	e022      	b.n	800643c <_dtoa_r+0xdc>
 80063f6:	4b92      	ldr	r3, [pc, #584]	; (8006640 <_dtoa_r+0x2e0>)
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	3308      	adds	r3, #8
 80063fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	9801      	ldr	r0, [sp, #4]
 8006402:	b013      	add	sp, #76	; 0x4c
 8006404:	ecbd 8b04 	vpop	{d8-d9}
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	4b8b      	ldr	r3, [pc, #556]	; (800663c <_dtoa_r+0x2dc>)
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	3303      	adds	r3, #3
 8006412:	e7f3      	b.n	80063fc <_dtoa_r+0x9c>
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	4650      	mov	r0, sl
 800641a:	4659      	mov	r1, fp
 800641c:	f7fa fb74 	bl	8000b08 <__aeabi_dcmpeq>
 8006420:	ec4b ab19 	vmov	d9, sl, fp
 8006424:	4680      	mov	r8, r0
 8006426:	b158      	cbz	r0, 8006440 <_dtoa_r+0xe0>
 8006428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800642a:	2301      	movs	r3, #1
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 856b 	beq.w	8006f0c <_dtoa_r+0xbac>
 8006436:	4883      	ldr	r0, [pc, #524]	; (8006644 <_dtoa_r+0x2e4>)
 8006438:	6018      	str	r0, [r3, #0]
 800643a:	1e43      	subs	r3, r0, #1
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	e7df      	b.n	8006400 <_dtoa_r+0xa0>
 8006440:	ec4b ab10 	vmov	d0, sl, fp
 8006444:	aa10      	add	r2, sp, #64	; 0x40
 8006446:	a911      	add	r1, sp, #68	; 0x44
 8006448:	4620      	mov	r0, r4
 800644a:	f001 f9e9 	bl	8007820 <__d2b>
 800644e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006452:	ee08 0a10 	vmov	s16, r0
 8006456:	2d00      	cmp	r5, #0
 8006458:	f000 8084 	beq.w	8006564 <_dtoa_r+0x204>
 800645c:	ee19 3a90 	vmov	r3, s19
 8006460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006464:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006468:	4656      	mov	r6, sl
 800646a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800646e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006472:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006476:	4b74      	ldr	r3, [pc, #464]	; (8006648 <_dtoa_r+0x2e8>)
 8006478:	2200      	movs	r2, #0
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7f9 ff23 	bl	80002c8 <__aeabi_dsub>
 8006482:	a365      	add	r3, pc, #404	; (adr r3, 8006618 <_dtoa_r+0x2b8>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7fa f8d6 	bl	8000638 <__aeabi_dmul>
 800648c:	a364      	add	r3, pc, #400	; (adr r3, 8006620 <_dtoa_r+0x2c0>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 ff1b 	bl	80002cc <__adddf3>
 8006496:	4606      	mov	r6, r0
 8006498:	4628      	mov	r0, r5
 800649a:	460f      	mov	r7, r1
 800649c:	f7fa f862 	bl	8000564 <__aeabi_i2d>
 80064a0:	a361      	add	r3, pc, #388	; (adr r3, 8006628 <_dtoa_r+0x2c8>)
 80064a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a6:	f7fa f8c7 	bl	8000638 <__aeabi_dmul>
 80064aa:	4602      	mov	r2, r0
 80064ac:	460b      	mov	r3, r1
 80064ae:	4630      	mov	r0, r6
 80064b0:	4639      	mov	r1, r7
 80064b2:	f7f9 ff0b 	bl	80002cc <__adddf3>
 80064b6:	4606      	mov	r6, r0
 80064b8:	460f      	mov	r7, r1
 80064ba:	f7fa fb6d 	bl	8000b98 <__aeabi_d2iz>
 80064be:	2200      	movs	r2, #0
 80064c0:	9000      	str	r0, [sp, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	4630      	mov	r0, r6
 80064c6:	4639      	mov	r1, r7
 80064c8:	f7fa fb28 	bl	8000b1c <__aeabi_dcmplt>
 80064cc:	b150      	cbz	r0, 80064e4 <_dtoa_r+0x184>
 80064ce:	9800      	ldr	r0, [sp, #0]
 80064d0:	f7fa f848 	bl	8000564 <__aeabi_i2d>
 80064d4:	4632      	mov	r2, r6
 80064d6:	463b      	mov	r3, r7
 80064d8:	f7fa fb16 	bl	8000b08 <__aeabi_dcmpeq>
 80064dc:	b910      	cbnz	r0, 80064e4 <_dtoa_r+0x184>
 80064de:	9b00      	ldr	r3, [sp, #0]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	9b00      	ldr	r3, [sp, #0]
 80064e6:	2b16      	cmp	r3, #22
 80064e8:	d85a      	bhi.n	80065a0 <_dtoa_r+0x240>
 80064ea:	9a00      	ldr	r2, [sp, #0]
 80064ec:	4b57      	ldr	r3, [pc, #348]	; (800664c <_dtoa_r+0x2ec>)
 80064ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	ec51 0b19 	vmov	r0, r1, d9
 80064fa:	f7fa fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d050      	beq.n	80065a4 <_dtoa_r+0x244>
 8006502:	9b00      	ldr	r3, [sp, #0]
 8006504:	3b01      	subs	r3, #1
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	930b      	str	r3, [sp, #44]	; 0x2c
 800650c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800650e:	1b5d      	subs	r5, r3, r5
 8006510:	1e6b      	subs	r3, r5, #1
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	bf45      	ittet	mi
 8006516:	f1c5 0301 	rsbmi	r3, r5, #1
 800651a:	9304      	strmi	r3, [sp, #16]
 800651c:	2300      	movpl	r3, #0
 800651e:	2300      	movmi	r3, #0
 8006520:	bf4c      	ite	mi
 8006522:	9305      	strmi	r3, [sp, #20]
 8006524:	9304      	strpl	r3, [sp, #16]
 8006526:	9b00      	ldr	r3, [sp, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	db3d      	blt.n	80065a8 <_dtoa_r+0x248>
 800652c:	9b05      	ldr	r3, [sp, #20]
 800652e:	9a00      	ldr	r2, [sp, #0]
 8006530:	920a      	str	r2, [sp, #40]	; 0x28
 8006532:	4413      	add	r3, r2
 8006534:	9305      	str	r3, [sp, #20]
 8006536:	2300      	movs	r3, #0
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	9b06      	ldr	r3, [sp, #24]
 800653c:	2b09      	cmp	r3, #9
 800653e:	f200 8089 	bhi.w	8006654 <_dtoa_r+0x2f4>
 8006542:	2b05      	cmp	r3, #5
 8006544:	bfc4      	itt	gt
 8006546:	3b04      	subgt	r3, #4
 8006548:	9306      	strgt	r3, [sp, #24]
 800654a:	9b06      	ldr	r3, [sp, #24]
 800654c:	f1a3 0302 	sub.w	r3, r3, #2
 8006550:	bfcc      	ite	gt
 8006552:	2500      	movgt	r5, #0
 8006554:	2501      	movle	r5, #1
 8006556:	2b03      	cmp	r3, #3
 8006558:	f200 8087 	bhi.w	800666a <_dtoa_r+0x30a>
 800655c:	e8df f003 	tbb	[pc, r3]
 8006560:	59383a2d 	.word	0x59383a2d
 8006564:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006568:	441d      	add	r5, r3
 800656a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800656e:	2b20      	cmp	r3, #32
 8006570:	bfc1      	itttt	gt
 8006572:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006576:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800657a:	fa0b f303 	lslgt.w	r3, fp, r3
 800657e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006582:	bfda      	itte	le
 8006584:	f1c3 0320 	rsble	r3, r3, #32
 8006588:	fa06 f003 	lslle.w	r0, r6, r3
 800658c:	4318      	orrgt	r0, r3
 800658e:	f7f9 ffd9 	bl	8000544 <__aeabi_ui2d>
 8006592:	2301      	movs	r3, #1
 8006594:	4606      	mov	r6, r0
 8006596:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800659a:	3d01      	subs	r5, #1
 800659c:	930e      	str	r3, [sp, #56]	; 0x38
 800659e:	e76a      	b.n	8006476 <_dtoa_r+0x116>
 80065a0:	2301      	movs	r3, #1
 80065a2:	e7b2      	b.n	800650a <_dtoa_r+0x1aa>
 80065a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80065a6:	e7b1      	b.n	800650c <_dtoa_r+0x1ac>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	9a00      	ldr	r2, [sp, #0]
 80065ac:	1a9b      	subs	r3, r3, r2
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	4253      	negs	r3, r2
 80065b2:	9307      	str	r3, [sp, #28]
 80065b4:	2300      	movs	r3, #0
 80065b6:	930a      	str	r3, [sp, #40]	; 0x28
 80065b8:	e7bf      	b.n	800653a <_dtoa_r+0x1da>
 80065ba:	2300      	movs	r3, #0
 80065bc:	9308      	str	r3, [sp, #32]
 80065be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dc55      	bgt.n	8006670 <_dtoa_r+0x310>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80065ca:	461a      	mov	r2, r3
 80065cc:	9209      	str	r2, [sp, #36]	; 0x24
 80065ce:	e00c      	b.n	80065ea <_dtoa_r+0x28a>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e7f3      	b.n	80065bc <_dtoa_r+0x25c>
 80065d4:	2300      	movs	r3, #0
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	9308      	str	r3, [sp, #32]
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	4413      	add	r3, r2
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	9303      	str	r3, [sp, #12]
 80065e6:	bfb8      	it	lt
 80065e8:	2301      	movlt	r3, #1
 80065ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80065ec:	2200      	movs	r2, #0
 80065ee:	6042      	str	r2, [r0, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	f102 0614 	add.w	r6, r2, #20
 80065f6:	429e      	cmp	r6, r3
 80065f8:	6841      	ldr	r1, [r0, #4]
 80065fa:	d93d      	bls.n	8006678 <_dtoa_r+0x318>
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 fde7 	bl	80071d0 <_Balloc>
 8006602:	9001      	str	r0, [sp, #4]
 8006604:	2800      	cmp	r0, #0
 8006606:	d13b      	bne.n	8006680 <_dtoa_r+0x320>
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <_dtoa_r+0x2f0>)
 800660a:	4602      	mov	r2, r0
 800660c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006610:	e6c0      	b.n	8006394 <_dtoa_r+0x34>
 8006612:	2301      	movs	r3, #1
 8006614:	e7df      	b.n	80065d6 <_dtoa_r+0x276>
 8006616:	bf00      	nop
 8006618:	636f4361 	.word	0x636f4361
 800661c:	3fd287a7 	.word	0x3fd287a7
 8006620:	8b60c8b3 	.word	0x8b60c8b3
 8006624:	3fc68a28 	.word	0x3fc68a28
 8006628:	509f79fb 	.word	0x509f79fb
 800662c:	3fd34413 	.word	0x3fd34413
 8006630:	08007e5d 	.word	0x08007e5d
 8006634:	08007e74 	.word	0x08007e74
 8006638:	7ff00000 	.word	0x7ff00000
 800663c:	08007e59 	.word	0x08007e59
 8006640:	08007e50 	.word	0x08007e50
 8006644:	08007e2d 	.word	0x08007e2d
 8006648:	3ff80000 	.word	0x3ff80000
 800664c:	08007f68 	.word	0x08007f68
 8006650:	08007ecf 	.word	0x08007ecf
 8006654:	2501      	movs	r5, #1
 8006656:	2300      	movs	r3, #0
 8006658:	9306      	str	r3, [sp, #24]
 800665a:	9508      	str	r5, [sp, #32]
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	2312      	movs	r3, #18
 8006668:	e7b0      	b.n	80065cc <_dtoa_r+0x26c>
 800666a:	2301      	movs	r3, #1
 800666c:	9308      	str	r3, [sp, #32]
 800666e:	e7f5      	b.n	800665c <_dtoa_r+0x2fc>
 8006670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006672:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006676:	e7b8      	b.n	80065ea <_dtoa_r+0x28a>
 8006678:	3101      	adds	r1, #1
 800667a:	6041      	str	r1, [r0, #4]
 800667c:	0052      	lsls	r2, r2, #1
 800667e:	e7b8      	b.n	80065f2 <_dtoa_r+0x292>
 8006680:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	2b0e      	cmp	r3, #14
 800668a:	f200 809d 	bhi.w	80067c8 <_dtoa_r+0x468>
 800668e:	2d00      	cmp	r5, #0
 8006690:	f000 809a 	beq.w	80067c8 <_dtoa_r+0x468>
 8006694:	9b00      	ldr	r3, [sp, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd32      	ble.n	8006700 <_dtoa_r+0x3a0>
 800669a:	4ab7      	ldr	r2, [pc, #732]	; (8006978 <_dtoa_r+0x618>)
 800669c:	f003 030f 	and.w	r3, r3, #15
 80066a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80066a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066a8:	9b00      	ldr	r3, [sp, #0]
 80066aa:	05d8      	lsls	r0, r3, #23
 80066ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80066b0:	d516      	bpl.n	80066e0 <_dtoa_r+0x380>
 80066b2:	4bb2      	ldr	r3, [pc, #712]	; (800697c <_dtoa_r+0x61c>)
 80066b4:	ec51 0b19 	vmov	r0, r1, d9
 80066b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066bc:	f7fa f8e6 	bl	800088c <__aeabi_ddiv>
 80066c0:	f007 070f 	and.w	r7, r7, #15
 80066c4:	4682      	mov	sl, r0
 80066c6:	468b      	mov	fp, r1
 80066c8:	2503      	movs	r5, #3
 80066ca:	4eac      	ldr	r6, [pc, #688]	; (800697c <_dtoa_r+0x61c>)
 80066cc:	b957      	cbnz	r7, 80066e4 <_dtoa_r+0x384>
 80066ce:	4642      	mov	r2, r8
 80066d0:	464b      	mov	r3, r9
 80066d2:	4650      	mov	r0, sl
 80066d4:	4659      	mov	r1, fp
 80066d6:	f7fa f8d9 	bl	800088c <__aeabi_ddiv>
 80066da:	4682      	mov	sl, r0
 80066dc:	468b      	mov	fp, r1
 80066de:	e028      	b.n	8006732 <_dtoa_r+0x3d2>
 80066e0:	2502      	movs	r5, #2
 80066e2:	e7f2      	b.n	80066ca <_dtoa_r+0x36a>
 80066e4:	07f9      	lsls	r1, r7, #31
 80066e6:	d508      	bpl.n	80066fa <_dtoa_r+0x39a>
 80066e8:	4640      	mov	r0, r8
 80066ea:	4649      	mov	r1, r9
 80066ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066f0:	f7f9 ffa2 	bl	8000638 <__aeabi_dmul>
 80066f4:	3501      	adds	r5, #1
 80066f6:	4680      	mov	r8, r0
 80066f8:	4689      	mov	r9, r1
 80066fa:	107f      	asrs	r7, r7, #1
 80066fc:	3608      	adds	r6, #8
 80066fe:	e7e5      	b.n	80066cc <_dtoa_r+0x36c>
 8006700:	f000 809b 	beq.w	800683a <_dtoa_r+0x4da>
 8006704:	9b00      	ldr	r3, [sp, #0]
 8006706:	4f9d      	ldr	r7, [pc, #628]	; (800697c <_dtoa_r+0x61c>)
 8006708:	425e      	negs	r6, r3
 800670a:	4b9b      	ldr	r3, [pc, #620]	; (8006978 <_dtoa_r+0x618>)
 800670c:	f006 020f 	and.w	r2, r6, #15
 8006710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	ec51 0b19 	vmov	r0, r1, d9
 800671c:	f7f9 ff8c 	bl	8000638 <__aeabi_dmul>
 8006720:	1136      	asrs	r6, r6, #4
 8006722:	4682      	mov	sl, r0
 8006724:	468b      	mov	fp, r1
 8006726:	2300      	movs	r3, #0
 8006728:	2502      	movs	r5, #2
 800672a:	2e00      	cmp	r6, #0
 800672c:	d17a      	bne.n	8006824 <_dtoa_r+0x4c4>
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1d3      	bne.n	80066da <_dtoa_r+0x37a>
 8006732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8082 	beq.w	800683e <_dtoa_r+0x4de>
 800673a:	4b91      	ldr	r3, [pc, #580]	; (8006980 <_dtoa_r+0x620>)
 800673c:	2200      	movs	r2, #0
 800673e:	4650      	mov	r0, sl
 8006740:	4659      	mov	r1, fp
 8006742:	f7fa f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d079      	beq.n	800683e <_dtoa_r+0x4de>
 800674a:	9b03      	ldr	r3, [sp, #12]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d076      	beq.n	800683e <_dtoa_r+0x4de>
 8006750:	9b02      	ldr	r3, [sp, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	dd36      	ble.n	80067c4 <_dtoa_r+0x464>
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	4650      	mov	r0, sl
 800675a:	4659      	mov	r1, fp
 800675c:	1e5f      	subs	r7, r3, #1
 800675e:	2200      	movs	r2, #0
 8006760:	4b88      	ldr	r3, [pc, #544]	; (8006984 <_dtoa_r+0x624>)
 8006762:	f7f9 ff69 	bl	8000638 <__aeabi_dmul>
 8006766:	9e02      	ldr	r6, [sp, #8]
 8006768:	4682      	mov	sl, r0
 800676a:	468b      	mov	fp, r1
 800676c:	3501      	adds	r5, #1
 800676e:	4628      	mov	r0, r5
 8006770:	f7f9 fef8 	bl	8000564 <__aeabi_i2d>
 8006774:	4652      	mov	r2, sl
 8006776:	465b      	mov	r3, fp
 8006778:	f7f9 ff5e 	bl	8000638 <__aeabi_dmul>
 800677c:	4b82      	ldr	r3, [pc, #520]	; (8006988 <_dtoa_r+0x628>)
 800677e:	2200      	movs	r2, #0
 8006780:	f7f9 fda4 	bl	80002cc <__adddf3>
 8006784:	46d0      	mov	r8, sl
 8006786:	46d9      	mov	r9, fp
 8006788:	4682      	mov	sl, r0
 800678a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800678e:	2e00      	cmp	r6, #0
 8006790:	d158      	bne.n	8006844 <_dtoa_r+0x4e4>
 8006792:	4b7e      	ldr	r3, [pc, #504]	; (800698c <_dtoa_r+0x62c>)
 8006794:	2200      	movs	r2, #0
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 fd95 	bl	80002c8 <__aeabi_dsub>
 800679e:	4652      	mov	r2, sl
 80067a0:	465b      	mov	r3, fp
 80067a2:	4680      	mov	r8, r0
 80067a4:	4689      	mov	r9, r1
 80067a6:	f7fa f9d7 	bl	8000b58 <__aeabi_dcmpgt>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f040 8295 	bne.w	8006cda <_dtoa_r+0x97a>
 80067b0:	4652      	mov	r2, sl
 80067b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7fa f9af 	bl	8000b1c <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	f040 8289 	bne.w	8006cd6 <_dtoa_r+0x976>
 80067c4:	ec5b ab19 	vmov	sl, fp, d9
 80067c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	f2c0 8148 	blt.w	8006a60 <_dtoa_r+0x700>
 80067d0:	9a00      	ldr	r2, [sp, #0]
 80067d2:	2a0e      	cmp	r2, #14
 80067d4:	f300 8144 	bgt.w	8006a60 <_dtoa_r+0x700>
 80067d8:	4b67      	ldr	r3, [pc, #412]	; (8006978 <_dtoa_r+0x618>)
 80067da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f280 80d5 	bge.w	8006994 <_dtoa_r+0x634>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f300 80d1 	bgt.w	8006994 <_dtoa_r+0x634>
 80067f2:	f040 826f 	bne.w	8006cd4 <_dtoa_r+0x974>
 80067f6:	4b65      	ldr	r3, [pc, #404]	; (800698c <_dtoa_r+0x62c>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	4640      	mov	r0, r8
 80067fc:	4649      	mov	r1, r9
 80067fe:	f7f9 ff1b 	bl	8000638 <__aeabi_dmul>
 8006802:	4652      	mov	r2, sl
 8006804:	465b      	mov	r3, fp
 8006806:	f7fa f99d 	bl	8000b44 <__aeabi_dcmpge>
 800680a:	9e03      	ldr	r6, [sp, #12]
 800680c:	4637      	mov	r7, r6
 800680e:	2800      	cmp	r0, #0
 8006810:	f040 8245 	bne.w	8006c9e <_dtoa_r+0x93e>
 8006814:	9d01      	ldr	r5, [sp, #4]
 8006816:	2331      	movs	r3, #49	; 0x31
 8006818:	f805 3b01 	strb.w	r3, [r5], #1
 800681c:	9b00      	ldr	r3, [sp, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	e240      	b.n	8006ca6 <_dtoa_r+0x946>
 8006824:	07f2      	lsls	r2, r6, #31
 8006826:	d505      	bpl.n	8006834 <_dtoa_r+0x4d4>
 8006828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800682c:	f7f9 ff04 	bl	8000638 <__aeabi_dmul>
 8006830:	3501      	adds	r5, #1
 8006832:	2301      	movs	r3, #1
 8006834:	1076      	asrs	r6, r6, #1
 8006836:	3708      	adds	r7, #8
 8006838:	e777      	b.n	800672a <_dtoa_r+0x3ca>
 800683a:	2502      	movs	r5, #2
 800683c:	e779      	b.n	8006732 <_dtoa_r+0x3d2>
 800683e:	9f00      	ldr	r7, [sp, #0]
 8006840:	9e03      	ldr	r6, [sp, #12]
 8006842:	e794      	b.n	800676e <_dtoa_r+0x40e>
 8006844:	9901      	ldr	r1, [sp, #4]
 8006846:	4b4c      	ldr	r3, [pc, #304]	; (8006978 <_dtoa_r+0x618>)
 8006848:	4431      	add	r1, r6
 800684a:	910d      	str	r1, [sp, #52]	; 0x34
 800684c:	9908      	ldr	r1, [sp, #32]
 800684e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006852:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006856:	2900      	cmp	r1, #0
 8006858:	d043      	beq.n	80068e2 <_dtoa_r+0x582>
 800685a:	494d      	ldr	r1, [pc, #308]	; (8006990 <_dtoa_r+0x630>)
 800685c:	2000      	movs	r0, #0
 800685e:	f7fa f815 	bl	800088c <__aeabi_ddiv>
 8006862:	4652      	mov	r2, sl
 8006864:	465b      	mov	r3, fp
 8006866:	f7f9 fd2f 	bl	80002c8 <__aeabi_dsub>
 800686a:	9d01      	ldr	r5, [sp, #4]
 800686c:	4682      	mov	sl, r0
 800686e:	468b      	mov	fp, r1
 8006870:	4649      	mov	r1, r9
 8006872:	4640      	mov	r0, r8
 8006874:	f7fa f990 	bl	8000b98 <__aeabi_d2iz>
 8006878:	4606      	mov	r6, r0
 800687a:	f7f9 fe73 	bl	8000564 <__aeabi_i2d>
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	4640      	mov	r0, r8
 8006884:	4649      	mov	r1, r9
 8006886:	f7f9 fd1f 	bl	80002c8 <__aeabi_dsub>
 800688a:	3630      	adds	r6, #48	; 0x30
 800688c:	f805 6b01 	strb.w	r6, [r5], #1
 8006890:	4652      	mov	r2, sl
 8006892:	465b      	mov	r3, fp
 8006894:	4680      	mov	r8, r0
 8006896:	4689      	mov	r9, r1
 8006898:	f7fa f940 	bl	8000b1c <__aeabi_dcmplt>
 800689c:	2800      	cmp	r0, #0
 800689e:	d163      	bne.n	8006968 <_dtoa_r+0x608>
 80068a0:	4642      	mov	r2, r8
 80068a2:	464b      	mov	r3, r9
 80068a4:	4936      	ldr	r1, [pc, #216]	; (8006980 <_dtoa_r+0x620>)
 80068a6:	2000      	movs	r0, #0
 80068a8:	f7f9 fd0e 	bl	80002c8 <__aeabi_dsub>
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	f7fa f934 	bl	8000b1c <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 80b5 	bne.w	8006a24 <_dtoa_r+0x6c4>
 80068ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068bc:	429d      	cmp	r5, r3
 80068be:	d081      	beq.n	80067c4 <_dtoa_r+0x464>
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <_dtoa_r+0x624>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	4650      	mov	r0, sl
 80068c6:	4659      	mov	r1, fp
 80068c8:	f7f9 feb6 	bl	8000638 <__aeabi_dmul>
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <_dtoa_r+0x624>)
 80068ce:	4682      	mov	sl, r0
 80068d0:	468b      	mov	fp, r1
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	2200      	movs	r2, #0
 80068d8:	f7f9 feae 	bl	8000638 <__aeabi_dmul>
 80068dc:	4680      	mov	r8, r0
 80068de:	4689      	mov	r9, r1
 80068e0:	e7c6      	b.n	8006870 <_dtoa_r+0x510>
 80068e2:	4650      	mov	r0, sl
 80068e4:	4659      	mov	r1, fp
 80068e6:	f7f9 fea7 	bl	8000638 <__aeabi_dmul>
 80068ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ec:	9d01      	ldr	r5, [sp, #4]
 80068ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	4649      	mov	r1, r9
 80068f6:	4640      	mov	r0, r8
 80068f8:	f7fa f94e 	bl	8000b98 <__aeabi_d2iz>
 80068fc:	4606      	mov	r6, r0
 80068fe:	f7f9 fe31 	bl	8000564 <__aeabi_i2d>
 8006902:	3630      	adds	r6, #48	; 0x30
 8006904:	4602      	mov	r2, r0
 8006906:	460b      	mov	r3, r1
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7f9 fcdc 	bl	80002c8 <__aeabi_dsub>
 8006910:	f805 6b01 	strb.w	r6, [r5], #1
 8006914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006916:	429d      	cmp	r5, r3
 8006918:	4680      	mov	r8, r0
 800691a:	4689      	mov	r9, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	d124      	bne.n	800696c <_dtoa_r+0x60c>
 8006922:	4b1b      	ldr	r3, [pc, #108]	; (8006990 <_dtoa_r+0x630>)
 8006924:	4650      	mov	r0, sl
 8006926:	4659      	mov	r1, fp
 8006928:	f7f9 fcd0 	bl	80002cc <__adddf3>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7fa f910 	bl	8000b58 <__aeabi_dcmpgt>
 8006938:	2800      	cmp	r0, #0
 800693a:	d173      	bne.n	8006a24 <_dtoa_r+0x6c4>
 800693c:	4652      	mov	r2, sl
 800693e:	465b      	mov	r3, fp
 8006940:	4913      	ldr	r1, [pc, #76]	; (8006990 <_dtoa_r+0x630>)
 8006942:	2000      	movs	r0, #0
 8006944:	f7f9 fcc0 	bl	80002c8 <__aeabi_dsub>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7fa f8e4 	bl	8000b1c <__aeabi_dcmplt>
 8006954:	2800      	cmp	r0, #0
 8006956:	f43f af35 	beq.w	80067c4 <_dtoa_r+0x464>
 800695a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800695c:	1e6b      	subs	r3, r5, #1
 800695e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006960:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d0f8      	beq.n	800695a <_dtoa_r+0x5fa>
 8006968:	9700      	str	r7, [sp, #0]
 800696a:	e049      	b.n	8006a00 <_dtoa_r+0x6a0>
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <_dtoa_r+0x624>)
 800696e:	f7f9 fe63 	bl	8000638 <__aeabi_dmul>
 8006972:	4680      	mov	r8, r0
 8006974:	4689      	mov	r9, r1
 8006976:	e7bd      	b.n	80068f4 <_dtoa_r+0x594>
 8006978:	08007f68 	.word	0x08007f68
 800697c:	08007f40 	.word	0x08007f40
 8006980:	3ff00000 	.word	0x3ff00000
 8006984:	40240000 	.word	0x40240000
 8006988:	401c0000 	.word	0x401c0000
 800698c:	40140000 	.word	0x40140000
 8006990:	3fe00000 	.word	0x3fe00000
 8006994:	9d01      	ldr	r5, [sp, #4]
 8006996:	4656      	mov	r6, sl
 8006998:	465f      	mov	r7, fp
 800699a:	4642      	mov	r2, r8
 800699c:	464b      	mov	r3, r9
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 ff73 	bl	800088c <__aeabi_ddiv>
 80069a6:	f7fa f8f7 	bl	8000b98 <__aeabi_d2iz>
 80069aa:	4682      	mov	sl, r0
 80069ac:	f7f9 fdda 	bl	8000564 <__aeabi_i2d>
 80069b0:	4642      	mov	r2, r8
 80069b2:	464b      	mov	r3, r9
 80069b4:	f7f9 fe40 	bl	8000638 <__aeabi_dmul>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4630      	mov	r0, r6
 80069be:	4639      	mov	r1, r7
 80069c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80069c4:	f7f9 fc80 	bl	80002c8 <__aeabi_dsub>
 80069c8:	f805 6b01 	strb.w	r6, [r5], #1
 80069cc:	9e01      	ldr	r6, [sp, #4]
 80069ce:	9f03      	ldr	r7, [sp, #12]
 80069d0:	1bae      	subs	r6, r5, r6
 80069d2:	42b7      	cmp	r7, r6
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	d135      	bne.n	8006a46 <_dtoa_r+0x6e6>
 80069da:	f7f9 fc77 	bl	80002cc <__adddf3>
 80069de:	4642      	mov	r2, r8
 80069e0:	464b      	mov	r3, r9
 80069e2:	4606      	mov	r6, r0
 80069e4:	460f      	mov	r7, r1
 80069e6:	f7fa f8b7 	bl	8000b58 <__aeabi_dcmpgt>
 80069ea:	b9d0      	cbnz	r0, 8006a22 <_dtoa_r+0x6c2>
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7fa f888 	bl	8000b08 <__aeabi_dcmpeq>
 80069f8:	b110      	cbz	r0, 8006a00 <_dtoa_r+0x6a0>
 80069fa:	f01a 0f01 	tst.w	sl, #1
 80069fe:	d110      	bne.n	8006a22 <_dtoa_r+0x6c2>
 8006a00:	4620      	mov	r0, r4
 8006a02:	ee18 1a10 	vmov	r1, s16
 8006a06:	f000 fc23 	bl	8007250 <_Bfree>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9800      	ldr	r0, [sp, #0]
 8006a0e:	702b      	strb	r3, [r5, #0]
 8006a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a12:	3001      	adds	r0, #1
 8006a14:	6018      	str	r0, [r3, #0]
 8006a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f43f acf1 	beq.w	8006400 <_dtoa_r+0xa0>
 8006a1e:	601d      	str	r5, [r3, #0]
 8006a20:	e4ee      	b.n	8006400 <_dtoa_r+0xa0>
 8006a22:	9f00      	ldr	r7, [sp, #0]
 8006a24:	462b      	mov	r3, r5
 8006a26:	461d      	mov	r5, r3
 8006a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a2c:	2a39      	cmp	r2, #57	; 0x39
 8006a2e:	d106      	bne.n	8006a3e <_dtoa_r+0x6de>
 8006a30:	9a01      	ldr	r2, [sp, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d1f7      	bne.n	8006a26 <_dtoa_r+0x6c6>
 8006a36:	9901      	ldr	r1, [sp, #4]
 8006a38:	2230      	movs	r2, #48	; 0x30
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	700a      	strb	r2, [r1, #0]
 8006a3e:	781a      	ldrb	r2, [r3, #0]
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e790      	b.n	8006968 <_dtoa_r+0x608>
 8006a46:	4ba6      	ldr	r3, [pc, #664]	; (8006ce0 <_dtoa_r+0x980>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f7f9 fdf5 	bl	8000638 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2300      	movs	r3, #0
 8006a52:	4606      	mov	r6, r0
 8006a54:	460f      	mov	r7, r1
 8006a56:	f7fa f857 	bl	8000b08 <__aeabi_dcmpeq>
 8006a5a:	2800      	cmp	r0, #0
 8006a5c:	d09d      	beq.n	800699a <_dtoa_r+0x63a>
 8006a5e:	e7cf      	b.n	8006a00 <_dtoa_r+0x6a0>
 8006a60:	9a08      	ldr	r2, [sp, #32]
 8006a62:	2a00      	cmp	r2, #0
 8006a64:	f000 80d7 	beq.w	8006c16 <_dtoa_r+0x8b6>
 8006a68:	9a06      	ldr	r2, [sp, #24]
 8006a6a:	2a01      	cmp	r2, #1
 8006a6c:	f300 80ba 	bgt.w	8006be4 <_dtoa_r+0x884>
 8006a70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a72:	2a00      	cmp	r2, #0
 8006a74:	f000 80b2 	beq.w	8006bdc <_dtoa_r+0x87c>
 8006a78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a7c:	9e07      	ldr	r6, [sp, #28]
 8006a7e:	9d04      	ldr	r5, [sp, #16]
 8006a80:	9a04      	ldr	r2, [sp, #16]
 8006a82:	441a      	add	r2, r3
 8006a84:	9204      	str	r2, [sp, #16]
 8006a86:	9a05      	ldr	r2, [sp, #20]
 8006a88:	2101      	movs	r1, #1
 8006a8a:	441a      	add	r2, r3
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	9205      	str	r2, [sp, #20]
 8006a90:	f000 fc96 	bl	80073c0 <__i2b>
 8006a94:	4607      	mov	r7, r0
 8006a96:	2d00      	cmp	r5, #0
 8006a98:	dd0c      	ble.n	8006ab4 <_dtoa_r+0x754>
 8006a9a:	9b05      	ldr	r3, [sp, #20]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	dd09      	ble.n	8006ab4 <_dtoa_r+0x754>
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	9a04      	ldr	r2, [sp, #16]
 8006aa4:	bfa8      	it	ge
 8006aa6:	462b      	movge	r3, r5
 8006aa8:	1ad2      	subs	r2, r2, r3
 8006aaa:	9204      	str	r2, [sp, #16]
 8006aac:	9a05      	ldr	r2, [sp, #20]
 8006aae:	1aed      	subs	r5, r5, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	9305      	str	r3, [sp, #20]
 8006ab4:	9b07      	ldr	r3, [sp, #28]
 8006ab6:	b31b      	cbz	r3, 8006b00 <_dtoa_r+0x7a0>
 8006ab8:	9b08      	ldr	r3, [sp, #32]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80af 	beq.w	8006c1e <_dtoa_r+0x8be>
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	dd13      	ble.n	8006aec <_dtoa_r+0x78c>
 8006ac4:	4639      	mov	r1, r7
 8006ac6:	4632      	mov	r2, r6
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fd39 	bl	8007540 <__pow5mult>
 8006ace:	ee18 2a10 	vmov	r2, s16
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	4607      	mov	r7, r0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fc88 	bl	80073ec <__multiply>
 8006adc:	ee18 1a10 	vmov	r1, s16
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4620      	mov	r0, r4
 8006ae4:	f000 fbb4 	bl	8007250 <_Bfree>
 8006ae8:	ee08 8a10 	vmov	s16, r8
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	1b9a      	subs	r2, r3, r6
 8006af0:	d006      	beq.n	8006b00 <_dtoa_r+0x7a0>
 8006af2:	ee18 1a10 	vmov	r1, s16
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fd22 	bl	8007540 <__pow5mult>
 8006afc:	ee08 0a10 	vmov	s16, r0
 8006b00:	2101      	movs	r1, #1
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 fc5c 	bl	80073c0 <__i2b>
 8006b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	4606      	mov	r6, r0
 8006b0e:	f340 8088 	ble.w	8006c22 <_dtoa_r+0x8c2>
 8006b12:	461a      	mov	r2, r3
 8006b14:	4601      	mov	r1, r0
 8006b16:	4620      	mov	r0, r4
 8006b18:	f000 fd12 	bl	8007540 <__pow5mult>
 8006b1c:	9b06      	ldr	r3, [sp, #24]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	4606      	mov	r6, r0
 8006b22:	f340 8081 	ble.w	8006c28 <_dtoa_r+0x8c8>
 8006b26:	f04f 0800 	mov.w	r8, #0
 8006b2a:	6933      	ldr	r3, [r6, #16]
 8006b2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b30:	6918      	ldr	r0, [r3, #16]
 8006b32:	f000 fbf5 	bl	8007320 <__hi0bits>
 8006b36:	f1c0 0020 	rsb	r0, r0, #32
 8006b3a:	9b05      	ldr	r3, [sp, #20]
 8006b3c:	4418      	add	r0, r3
 8006b3e:	f010 001f 	ands.w	r0, r0, #31
 8006b42:	f000 8092 	beq.w	8006c6a <_dtoa_r+0x90a>
 8006b46:	f1c0 0320 	rsb	r3, r0, #32
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	f340 808a 	ble.w	8006c64 <_dtoa_r+0x904>
 8006b50:	f1c0 001c 	rsb	r0, r0, #28
 8006b54:	9b04      	ldr	r3, [sp, #16]
 8006b56:	4403      	add	r3, r0
 8006b58:	9304      	str	r3, [sp, #16]
 8006b5a:	9b05      	ldr	r3, [sp, #20]
 8006b5c:	4403      	add	r3, r0
 8006b5e:	4405      	add	r5, r0
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	9b04      	ldr	r3, [sp, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	dd07      	ble.n	8006b78 <_dtoa_r+0x818>
 8006b68:	ee18 1a10 	vmov	r1, s16
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fd40 	bl	80075f4 <__lshift>
 8006b74:	ee08 0a10 	vmov	s16, r0
 8006b78:	9b05      	ldr	r3, [sp, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd05      	ble.n	8006b8a <_dtoa_r+0x82a>
 8006b7e:	4631      	mov	r1, r6
 8006b80:	461a      	mov	r2, r3
 8006b82:	4620      	mov	r0, r4
 8006b84:	f000 fd36 	bl	80075f4 <__lshift>
 8006b88:	4606      	mov	r6, r0
 8006b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d06e      	beq.n	8006c6e <_dtoa_r+0x90e>
 8006b90:	ee18 0a10 	vmov	r0, s16
 8006b94:	4631      	mov	r1, r6
 8006b96:	f000 fd9d 	bl	80076d4 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	da67      	bge.n	8006c6e <_dtoa_r+0x90e>
 8006b9e:	9b00      	ldr	r3, [sp, #0]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	9300      	str	r3, [sp, #0]
 8006ba8:	220a      	movs	r2, #10
 8006baa:	2300      	movs	r3, #0
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fb71 	bl	8007294 <__multadd>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	ee08 0a10 	vmov	s16, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 81b1 	beq.w	8006f20 <_dtoa_r+0xbc0>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	220a      	movs	r2, #10
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fb65 	bl	8007294 <__multadd>
 8006bca:	9b02      	ldr	r3, [sp, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	4607      	mov	r7, r0
 8006bd0:	f300 808e 	bgt.w	8006cf0 <_dtoa_r+0x990>
 8006bd4:	9b06      	ldr	r3, [sp, #24]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	dc51      	bgt.n	8006c7e <_dtoa_r+0x91e>
 8006bda:	e089      	b.n	8006cf0 <_dtoa_r+0x990>
 8006bdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006be2:	e74b      	b.n	8006a7c <_dtoa_r+0x71c>
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1e5e      	subs	r6, r3, #1
 8006be8:	9b07      	ldr	r3, [sp, #28]
 8006bea:	42b3      	cmp	r3, r6
 8006bec:	bfbf      	itttt	lt
 8006bee:	9b07      	ldrlt	r3, [sp, #28]
 8006bf0:	9607      	strlt	r6, [sp, #28]
 8006bf2:	1af2      	sublt	r2, r6, r3
 8006bf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bf6:	bfb6      	itet	lt
 8006bf8:	189b      	addlt	r3, r3, r2
 8006bfa:	1b9e      	subge	r6, r3, r6
 8006bfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	bfb8      	it	lt
 8006c02:	2600      	movlt	r6, #0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	bfb7      	itett	lt
 8006c08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006c10:	1a9d      	sublt	r5, r3, r2
 8006c12:	2300      	movlt	r3, #0
 8006c14:	e734      	b.n	8006a80 <_dtoa_r+0x720>
 8006c16:	9e07      	ldr	r6, [sp, #28]
 8006c18:	9d04      	ldr	r5, [sp, #16]
 8006c1a:	9f08      	ldr	r7, [sp, #32]
 8006c1c:	e73b      	b.n	8006a96 <_dtoa_r+0x736>
 8006c1e:	9a07      	ldr	r2, [sp, #28]
 8006c20:	e767      	b.n	8006af2 <_dtoa_r+0x792>
 8006c22:	9b06      	ldr	r3, [sp, #24]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	dc18      	bgt.n	8006c5a <_dtoa_r+0x8fa>
 8006c28:	f1ba 0f00 	cmp.w	sl, #0
 8006c2c:	d115      	bne.n	8006c5a <_dtoa_r+0x8fa>
 8006c2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c32:	b993      	cbnz	r3, 8006c5a <_dtoa_r+0x8fa>
 8006c34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c38:	0d1b      	lsrs	r3, r3, #20
 8006c3a:	051b      	lsls	r3, r3, #20
 8006c3c:	b183      	cbz	r3, 8006c60 <_dtoa_r+0x900>
 8006c3e:	9b04      	ldr	r3, [sp, #16]
 8006c40:	3301      	adds	r3, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9b05      	ldr	r3, [sp, #20]
 8006c46:	3301      	adds	r3, #1
 8006c48:	9305      	str	r3, [sp, #20]
 8006c4a:	f04f 0801 	mov.w	r8, #1
 8006c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f47f af6a 	bne.w	8006b2a <_dtoa_r+0x7ca>
 8006c56:	2001      	movs	r0, #1
 8006c58:	e76f      	b.n	8006b3a <_dtoa_r+0x7da>
 8006c5a:	f04f 0800 	mov.w	r8, #0
 8006c5e:	e7f6      	b.n	8006c4e <_dtoa_r+0x8ee>
 8006c60:	4698      	mov	r8, r3
 8006c62:	e7f4      	b.n	8006c4e <_dtoa_r+0x8ee>
 8006c64:	f43f af7d 	beq.w	8006b62 <_dtoa_r+0x802>
 8006c68:	4618      	mov	r0, r3
 8006c6a:	301c      	adds	r0, #28
 8006c6c:	e772      	b.n	8006b54 <_dtoa_r+0x7f4>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	dc37      	bgt.n	8006ce4 <_dtoa_r+0x984>
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	dd34      	ble.n	8006ce4 <_dtoa_r+0x984>
 8006c7a:	9b03      	ldr	r3, [sp, #12]
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	b96b      	cbnz	r3, 8006c9e <_dtoa_r+0x93e>
 8006c82:	4631      	mov	r1, r6
 8006c84:	2205      	movs	r2, #5
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 fb04 	bl	8007294 <__multadd>
 8006c8c:	4601      	mov	r1, r0
 8006c8e:	4606      	mov	r6, r0
 8006c90:	ee18 0a10 	vmov	r0, s16
 8006c94:	f000 fd1e 	bl	80076d4 <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	f73f adbb 	bgt.w	8006814 <_dtoa_r+0x4b4>
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	9d01      	ldr	r5, [sp, #4]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	f04f 0800 	mov.w	r8, #0
 8006caa:	4631      	mov	r1, r6
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 facf 	bl	8007250 <_Bfree>
 8006cb2:	2f00      	cmp	r7, #0
 8006cb4:	f43f aea4 	beq.w	8006a00 <_dtoa_r+0x6a0>
 8006cb8:	f1b8 0f00 	cmp.w	r8, #0
 8006cbc:	d005      	beq.n	8006cca <_dtoa_r+0x96a>
 8006cbe:	45b8      	cmp	r8, r7
 8006cc0:	d003      	beq.n	8006cca <_dtoa_r+0x96a>
 8006cc2:	4641      	mov	r1, r8
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 fac3 	bl	8007250 <_Bfree>
 8006cca:	4639      	mov	r1, r7
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 fabf 	bl	8007250 <_Bfree>
 8006cd2:	e695      	b.n	8006a00 <_dtoa_r+0x6a0>
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	4637      	mov	r7, r6
 8006cd8:	e7e1      	b.n	8006c9e <_dtoa_r+0x93e>
 8006cda:	9700      	str	r7, [sp, #0]
 8006cdc:	4637      	mov	r7, r6
 8006cde:	e599      	b.n	8006814 <_dtoa_r+0x4b4>
 8006ce0:	40240000 	.word	0x40240000
 8006ce4:	9b08      	ldr	r3, [sp, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 80ca 	beq.w	8006e80 <_dtoa_r+0xb20>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	9302      	str	r3, [sp, #8]
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	dd05      	ble.n	8006d00 <_dtoa_r+0x9a0>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fc7b 	bl	80075f4 <__lshift>
 8006cfe:	4607      	mov	r7, r0
 8006d00:	f1b8 0f00 	cmp.w	r8, #0
 8006d04:	d05b      	beq.n	8006dbe <_dtoa_r+0xa5e>
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fa61 	bl	80071d0 <_Balloc>
 8006d0e:	4605      	mov	r5, r0
 8006d10:	b928      	cbnz	r0, 8006d1e <_dtoa_r+0x9be>
 8006d12:	4b87      	ldr	r3, [pc, #540]	; (8006f30 <_dtoa_r+0xbd0>)
 8006d14:	4602      	mov	r2, r0
 8006d16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d1a:	f7ff bb3b 	b.w	8006394 <_dtoa_r+0x34>
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	3202      	adds	r2, #2
 8006d22:	0092      	lsls	r2, r2, #2
 8006d24:	f107 010c 	add.w	r1, r7, #12
 8006d28:	300c      	adds	r0, #12
 8006d2a:	f7fe fb8b 	bl	8005444 <memcpy>
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4629      	mov	r1, r5
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fc5e 	bl	80075f4 <__lshift>
 8006d38:	9b01      	ldr	r3, [sp, #4]
 8006d3a:	f103 0901 	add.w	r9, r3, #1
 8006d3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006d42:	4413      	add	r3, r2
 8006d44:	9305      	str	r3, [sp, #20]
 8006d46:	f00a 0301 	and.w	r3, sl, #1
 8006d4a:	46b8      	mov	r8, r7
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	4607      	mov	r7, r0
 8006d50:	4631      	mov	r1, r6
 8006d52:	ee18 0a10 	vmov	r0, s16
 8006d56:	f7ff fa75 	bl	8006244 <quorem>
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	9002      	str	r0, [sp, #8]
 8006d5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d62:	ee18 0a10 	vmov	r0, s16
 8006d66:	f000 fcb5 	bl	80076d4 <__mcmp>
 8006d6a:	463a      	mov	r2, r7
 8006d6c:	9003      	str	r0, [sp, #12]
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4620      	mov	r0, r4
 8006d72:	f000 fccb 	bl	800770c <__mdiff>
 8006d76:	68c2      	ldr	r2, [r0, #12]
 8006d78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	bb02      	cbnz	r2, 8006dc2 <_dtoa_r+0xa62>
 8006d80:	4601      	mov	r1, r0
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f000 fca5 	bl	80076d4 <__mcmp>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	4620      	mov	r0, r4
 8006d90:	9207      	str	r2, [sp, #28]
 8006d92:	f000 fa5d 	bl	8007250 <_Bfree>
 8006d96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006d9a:	ea43 0102 	orr.w	r1, r3, r2
 8006d9e:	9b04      	ldr	r3, [sp, #16]
 8006da0:	430b      	orrs	r3, r1
 8006da2:	464d      	mov	r5, r9
 8006da4:	d10f      	bne.n	8006dc6 <_dtoa_r+0xa66>
 8006da6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006daa:	d02a      	beq.n	8006e02 <_dtoa_r+0xaa2>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dd02      	ble.n	8006db8 <_dtoa_r+0xa58>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006db8:	f88b a000 	strb.w	sl, [fp]
 8006dbc:	e775      	b.n	8006caa <_dtoa_r+0x94a>
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	e7ba      	b.n	8006d38 <_dtoa_r+0x9d8>
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	e7e2      	b.n	8006d8c <_dtoa_r+0xa2c>
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db04      	blt.n	8006dd6 <_dtoa_r+0xa76>
 8006dcc:	9906      	ldr	r1, [sp, #24]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	9904      	ldr	r1, [sp, #16]
 8006dd2:	430b      	orrs	r3, r1
 8006dd4:	d122      	bne.n	8006e1c <_dtoa_r+0xabc>
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	ddee      	ble.n	8006db8 <_dtoa_r+0xa58>
 8006dda:	ee18 1a10 	vmov	r1, s16
 8006dde:	2201      	movs	r2, #1
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fc07 	bl	80075f4 <__lshift>
 8006de6:	4631      	mov	r1, r6
 8006de8:	ee08 0a10 	vmov	s16, r0
 8006dec:	f000 fc72 	bl	80076d4 <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	dc03      	bgt.n	8006dfc <_dtoa_r+0xa9c>
 8006df4:	d1e0      	bne.n	8006db8 <_dtoa_r+0xa58>
 8006df6:	f01a 0f01 	tst.w	sl, #1
 8006dfa:	d0dd      	beq.n	8006db8 <_dtoa_r+0xa58>
 8006dfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e00:	d1d7      	bne.n	8006db2 <_dtoa_r+0xa52>
 8006e02:	2339      	movs	r3, #57	; 0x39
 8006e04:	f88b 3000 	strb.w	r3, [fp]
 8006e08:	462b      	mov	r3, r5
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006e12:	2a39      	cmp	r2, #57	; 0x39
 8006e14:	d071      	beq.n	8006efa <_dtoa_r+0xb9a>
 8006e16:	3201      	adds	r2, #1
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	e746      	b.n	8006caa <_dtoa_r+0x94a>
 8006e1c:	2a00      	cmp	r2, #0
 8006e1e:	dd07      	ble.n	8006e30 <_dtoa_r+0xad0>
 8006e20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e24:	d0ed      	beq.n	8006e02 <_dtoa_r+0xaa2>
 8006e26:	f10a 0301 	add.w	r3, sl, #1
 8006e2a:	f88b 3000 	strb.w	r3, [fp]
 8006e2e:	e73c      	b.n	8006caa <_dtoa_r+0x94a>
 8006e30:	9b05      	ldr	r3, [sp, #20]
 8006e32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006e36:	4599      	cmp	r9, r3
 8006e38:	d047      	beq.n	8006eca <_dtoa_r+0xb6a>
 8006e3a:	ee18 1a10 	vmov	r1, s16
 8006e3e:	2300      	movs	r3, #0
 8006e40:	220a      	movs	r2, #10
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 fa26 	bl	8007294 <__multadd>
 8006e48:	45b8      	cmp	r8, r7
 8006e4a:	ee08 0a10 	vmov	s16, r0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	f04f 020a 	mov.w	r2, #10
 8006e56:	4641      	mov	r1, r8
 8006e58:	4620      	mov	r0, r4
 8006e5a:	d106      	bne.n	8006e6a <_dtoa_r+0xb0a>
 8006e5c:	f000 fa1a 	bl	8007294 <__multadd>
 8006e60:	4680      	mov	r8, r0
 8006e62:	4607      	mov	r7, r0
 8006e64:	f109 0901 	add.w	r9, r9, #1
 8006e68:	e772      	b.n	8006d50 <_dtoa_r+0x9f0>
 8006e6a:	f000 fa13 	bl	8007294 <__multadd>
 8006e6e:	4639      	mov	r1, r7
 8006e70:	4680      	mov	r8, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	220a      	movs	r2, #10
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 fa0c 	bl	8007294 <__multadd>
 8006e7c:	4607      	mov	r7, r0
 8006e7e:	e7f1      	b.n	8006e64 <_dtoa_r+0xb04>
 8006e80:	9b03      	ldr	r3, [sp, #12]
 8006e82:	9302      	str	r3, [sp, #8]
 8006e84:	9d01      	ldr	r5, [sp, #4]
 8006e86:	ee18 0a10 	vmov	r0, s16
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	f7ff f9da 	bl	8006244 <quorem>
 8006e90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	f805 ab01 	strb.w	sl, [r5], #1
 8006e9a:	1aea      	subs	r2, r5, r3
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	dd09      	ble.n	8006eb6 <_dtoa_r+0xb56>
 8006ea2:	ee18 1a10 	vmov	r1, s16
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	220a      	movs	r2, #10
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f000 f9f2 	bl	8007294 <__multadd>
 8006eb0:	ee08 0a10 	vmov	s16, r0
 8006eb4:	e7e7      	b.n	8006e86 <_dtoa_r+0xb26>
 8006eb6:	9b02      	ldr	r3, [sp, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bfc8      	it	gt
 8006ebc:	461d      	movgt	r5, r3
 8006ebe:	9b01      	ldr	r3, [sp, #4]
 8006ec0:	bfd8      	it	le
 8006ec2:	2501      	movle	r5, #1
 8006ec4:	441d      	add	r5, r3
 8006ec6:	f04f 0800 	mov.w	r8, #0
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2201      	movs	r2, #1
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f000 fb8f 	bl	80075f4 <__lshift>
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	ee08 0a10 	vmov	s16, r0
 8006edc:	f000 fbfa 	bl	80076d4 <__mcmp>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	dc91      	bgt.n	8006e08 <_dtoa_r+0xaa8>
 8006ee4:	d102      	bne.n	8006eec <_dtoa_r+0xb8c>
 8006ee6:	f01a 0f01 	tst.w	sl, #1
 8006eea:	d18d      	bne.n	8006e08 <_dtoa_r+0xaa8>
 8006eec:	462b      	mov	r3, r5
 8006eee:	461d      	mov	r5, r3
 8006ef0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ef4:	2a30      	cmp	r2, #48	; 0x30
 8006ef6:	d0fa      	beq.n	8006eee <_dtoa_r+0xb8e>
 8006ef8:	e6d7      	b.n	8006caa <_dtoa_r+0x94a>
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d184      	bne.n	8006e0a <_dtoa_r+0xaaa>
 8006f00:	9b00      	ldr	r3, [sp, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	2331      	movs	r3, #49	; 0x31
 8006f08:	7013      	strb	r3, [r2, #0]
 8006f0a:	e6ce      	b.n	8006caa <_dtoa_r+0x94a>
 8006f0c:	4b09      	ldr	r3, [pc, #36]	; (8006f34 <_dtoa_r+0xbd4>)
 8006f0e:	f7ff ba95 	b.w	800643c <_dtoa_r+0xdc>
 8006f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f47f aa6e 	bne.w	80063f6 <_dtoa_r+0x96>
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <_dtoa_r+0xbd8>)
 8006f1c:	f7ff ba8e 	b.w	800643c <_dtoa_r+0xdc>
 8006f20:	9b02      	ldr	r3, [sp, #8]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dcae      	bgt.n	8006e84 <_dtoa_r+0xb24>
 8006f26:	9b06      	ldr	r3, [sp, #24]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	f73f aea8 	bgt.w	8006c7e <_dtoa_r+0x91e>
 8006f2e:	e7a9      	b.n	8006e84 <_dtoa_r+0xb24>
 8006f30:	08007ecf 	.word	0x08007ecf
 8006f34:	08007e2c 	.word	0x08007e2c
 8006f38:	08007e50 	.word	0x08007e50

08006f3c <__sflush_r>:
 8006f3c:	898a      	ldrh	r2, [r1, #12]
 8006f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f42:	4605      	mov	r5, r0
 8006f44:	0710      	lsls	r0, r2, #28
 8006f46:	460c      	mov	r4, r1
 8006f48:	d458      	bmi.n	8006ffc <__sflush_r+0xc0>
 8006f4a:	684b      	ldr	r3, [r1, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc05      	bgt.n	8006f5c <__sflush_r+0x20>
 8006f50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	dc02      	bgt.n	8006f5c <__sflush_r+0x20>
 8006f56:	2000      	movs	r0, #0
 8006f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f5e:	2e00      	cmp	r6, #0
 8006f60:	d0f9      	beq.n	8006f56 <__sflush_r+0x1a>
 8006f62:	2300      	movs	r3, #0
 8006f64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f68:	682f      	ldr	r7, [r5, #0]
 8006f6a:	602b      	str	r3, [r5, #0]
 8006f6c:	d032      	beq.n	8006fd4 <__sflush_r+0x98>
 8006f6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f70:	89a3      	ldrh	r3, [r4, #12]
 8006f72:	075a      	lsls	r2, r3, #29
 8006f74:	d505      	bpl.n	8006f82 <__sflush_r+0x46>
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	1ac0      	subs	r0, r0, r3
 8006f7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f7c:	b10b      	cbz	r3, 8006f82 <__sflush_r+0x46>
 8006f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f80:	1ac0      	subs	r0, r0, r3
 8006f82:	2300      	movs	r3, #0
 8006f84:	4602      	mov	r2, r0
 8006f86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f88:	6a21      	ldr	r1, [r4, #32]
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b0      	blx	r6
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	d106      	bne.n	8006fa2 <__sflush_r+0x66>
 8006f94:	6829      	ldr	r1, [r5, #0]
 8006f96:	291d      	cmp	r1, #29
 8006f98:	d82c      	bhi.n	8006ff4 <__sflush_r+0xb8>
 8006f9a:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <__sflush_r+0x108>)
 8006f9c:	40ca      	lsrs	r2, r1
 8006f9e:	07d6      	lsls	r6, r2, #31
 8006fa0:	d528      	bpl.n	8006ff4 <__sflush_r+0xb8>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	6062      	str	r2, [r4, #4]
 8006fa6:	04d9      	lsls	r1, r3, #19
 8006fa8:	6922      	ldr	r2, [r4, #16]
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	d504      	bpl.n	8006fb8 <__sflush_r+0x7c>
 8006fae:	1c42      	adds	r2, r0, #1
 8006fb0:	d101      	bne.n	8006fb6 <__sflush_r+0x7a>
 8006fb2:	682b      	ldr	r3, [r5, #0]
 8006fb4:	b903      	cbnz	r3, 8006fb8 <__sflush_r+0x7c>
 8006fb6:	6560      	str	r0, [r4, #84]	; 0x54
 8006fb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fba:	602f      	str	r7, [r5, #0]
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	d0ca      	beq.n	8006f56 <__sflush_r+0x1a>
 8006fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	d002      	beq.n	8006fce <__sflush_r+0x92>
 8006fc8:	4628      	mov	r0, r5
 8006fca:	f7fe fa51 	bl	8005470 <_free_r>
 8006fce:	2000      	movs	r0, #0
 8006fd0:	6360      	str	r0, [r4, #52]	; 0x34
 8006fd2:	e7c1      	b.n	8006f58 <__sflush_r+0x1c>
 8006fd4:	6a21      	ldr	r1, [r4, #32]
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4628      	mov	r0, r5
 8006fda:	47b0      	blx	r6
 8006fdc:	1c41      	adds	r1, r0, #1
 8006fde:	d1c7      	bne.n	8006f70 <__sflush_r+0x34>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0c4      	beq.n	8006f70 <__sflush_r+0x34>
 8006fe6:	2b1d      	cmp	r3, #29
 8006fe8:	d001      	beq.n	8006fee <__sflush_r+0xb2>
 8006fea:	2b16      	cmp	r3, #22
 8006fec:	d101      	bne.n	8006ff2 <__sflush_r+0xb6>
 8006fee:	602f      	str	r7, [r5, #0]
 8006ff0:	e7b1      	b.n	8006f56 <__sflush_r+0x1a>
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	e7ad      	b.n	8006f58 <__sflush_r+0x1c>
 8006ffc:	690f      	ldr	r7, [r1, #16]
 8006ffe:	2f00      	cmp	r7, #0
 8007000:	d0a9      	beq.n	8006f56 <__sflush_r+0x1a>
 8007002:	0793      	lsls	r3, r2, #30
 8007004:	680e      	ldr	r6, [r1, #0]
 8007006:	bf08      	it	eq
 8007008:	694b      	ldreq	r3, [r1, #20]
 800700a:	600f      	str	r7, [r1, #0]
 800700c:	bf18      	it	ne
 800700e:	2300      	movne	r3, #0
 8007010:	eba6 0807 	sub.w	r8, r6, r7
 8007014:	608b      	str	r3, [r1, #8]
 8007016:	f1b8 0f00 	cmp.w	r8, #0
 800701a:	dd9c      	ble.n	8006f56 <__sflush_r+0x1a>
 800701c:	6a21      	ldr	r1, [r4, #32]
 800701e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007020:	4643      	mov	r3, r8
 8007022:	463a      	mov	r2, r7
 8007024:	4628      	mov	r0, r5
 8007026:	47b0      	blx	r6
 8007028:	2800      	cmp	r0, #0
 800702a:	dc06      	bgt.n	800703a <__sflush_r+0xfe>
 800702c:	89a3      	ldrh	r3, [r4, #12]
 800702e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	f04f 30ff 	mov.w	r0, #4294967295
 8007038:	e78e      	b.n	8006f58 <__sflush_r+0x1c>
 800703a:	4407      	add	r7, r0
 800703c:	eba8 0800 	sub.w	r8, r8, r0
 8007040:	e7e9      	b.n	8007016 <__sflush_r+0xda>
 8007042:	bf00      	nop
 8007044:	20400001 	.word	0x20400001

08007048 <_fflush_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	690b      	ldr	r3, [r1, #16]
 800704c:	4605      	mov	r5, r0
 800704e:	460c      	mov	r4, r1
 8007050:	b913      	cbnz	r3, 8007058 <_fflush_r+0x10>
 8007052:	2500      	movs	r5, #0
 8007054:	4628      	mov	r0, r5
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	b118      	cbz	r0, 8007062 <_fflush_r+0x1a>
 800705a:	6983      	ldr	r3, [r0, #24]
 800705c:	b90b      	cbnz	r3, 8007062 <_fflush_r+0x1a>
 800705e:	f7fe f923 	bl	80052a8 <__sinit>
 8007062:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <_fflush_r+0x6c>)
 8007064:	429c      	cmp	r4, r3
 8007066:	d11b      	bne.n	80070a0 <_fflush_r+0x58>
 8007068:	686c      	ldr	r4, [r5, #4]
 800706a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0ef      	beq.n	8007052 <_fflush_r+0xa>
 8007072:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007074:	07d0      	lsls	r0, r2, #31
 8007076:	d404      	bmi.n	8007082 <_fflush_r+0x3a>
 8007078:	0599      	lsls	r1, r3, #22
 800707a:	d402      	bmi.n	8007082 <_fflush_r+0x3a>
 800707c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800707e:	f7fe f9d6 	bl	800542e <__retarget_lock_acquire_recursive>
 8007082:	4628      	mov	r0, r5
 8007084:	4621      	mov	r1, r4
 8007086:	f7ff ff59 	bl	8006f3c <__sflush_r>
 800708a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800708c:	07da      	lsls	r2, r3, #31
 800708e:	4605      	mov	r5, r0
 8007090:	d4e0      	bmi.n	8007054 <_fflush_r+0xc>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	059b      	lsls	r3, r3, #22
 8007096:	d4dd      	bmi.n	8007054 <_fflush_r+0xc>
 8007098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800709a:	f7fe f9c9 	bl	8005430 <__retarget_lock_release_recursive>
 800709e:	e7d9      	b.n	8007054 <_fflush_r+0xc>
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <_fflush_r+0x70>)
 80070a2:	429c      	cmp	r4, r3
 80070a4:	d101      	bne.n	80070aa <_fflush_r+0x62>
 80070a6:	68ac      	ldr	r4, [r5, #8]
 80070a8:	e7df      	b.n	800706a <_fflush_r+0x22>
 80070aa:	4b04      	ldr	r3, [pc, #16]	; (80070bc <_fflush_r+0x74>)
 80070ac:	429c      	cmp	r4, r3
 80070ae:	bf08      	it	eq
 80070b0:	68ec      	ldreq	r4, [r5, #12]
 80070b2:	e7da      	b.n	800706a <_fflush_r+0x22>
 80070b4:	08007dd8 	.word	0x08007dd8
 80070b8:	08007df8 	.word	0x08007df8
 80070bc:	08007db8 	.word	0x08007db8

080070c0 <_localeconv_r>:
 80070c0:	4800      	ldr	r0, [pc, #0]	; (80070c4 <_localeconv_r+0x4>)
 80070c2:	4770      	bx	lr
 80070c4:	20000164 	.word	0x20000164

080070c8 <_lseek_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_lseek_r+0x20>)
 80070cc:	4604      	mov	r4, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f7fa fb0c 	bl	80016f4 <_lseek>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_lseek_r+0x1e>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_lseek_r+0x1e>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20004460 	.word	0x20004460

080070ec <__swhatbuf_r>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	460e      	mov	r6, r1
 80070f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070f4:	2900      	cmp	r1, #0
 80070f6:	b096      	sub	sp, #88	; 0x58
 80070f8:	4614      	mov	r4, r2
 80070fa:	461d      	mov	r5, r3
 80070fc:	da08      	bge.n	8007110 <__swhatbuf_r+0x24>
 80070fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	061a      	lsls	r2, r3, #24
 8007108:	d410      	bmi.n	800712c <__swhatbuf_r+0x40>
 800710a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800710e:	e00e      	b.n	800712e <__swhatbuf_r+0x42>
 8007110:	466a      	mov	r2, sp
 8007112:	f000 fd93 	bl	8007c3c <_fstat_r>
 8007116:	2800      	cmp	r0, #0
 8007118:	dbf1      	blt.n	80070fe <__swhatbuf_r+0x12>
 800711a:	9a01      	ldr	r2, [sp, #4]
 800711c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007124:	425a      	negs	r2, r3
 8007126:	415a      	adcs	r2, r3
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	e7ee      	b.n	800710a <__swhatbuf_r+0x1e>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	2000      	movs	r0, #0
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	b016      	add	sp, #88	; 0x58
 8007134:	bd70      	pop	{r4, r5, r6, pc}
	...

08007138 <__smakebuf_r>:
 8007138:	898b      	ldrh	r3, [r1, #12]
 800713a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800713c:	079d      	lsls	r5, r3, #30
 800713e:	4606      	mov	r6, r0
 8007140:	460c      	mov	r4, r1
 8007142:	d507      	bpl.n	8007154 <__smakebuf_r+0x1c>
 8007144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	6123      	str	r3, [r4, #16]
 800714c:	2301      	movs	r3, #1
 800714e:	6163      	str	r3, [r4, #20]
 8007150:	b002      	add	sp, #8
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	ab01      	add	r3, sp, #4
 8007156:	466a      	mov	r2, sp
 8007158:	f7ff ffc8 	bl	80070ec <__swhatbuf_r>
 800715c:	9900      	ldr	r1, [sp, #0]
 800715e:	4605      	mov	r5, r0
 8007160:	4630      	mov	r0, r6
 8007162:	f7fe f9f1 	bl	8005548 <_malloc_r>
 8007166:	b948      	cbnz	r0, 800717c <__smakebuf_r+0x44>
 8007168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800716c:	059a      	lsls	r2, r3, #22
 800716e:	d4ef      	bmi.n	8007150 <__smakebuf_r+0x18>
 8007170:	f023 0303 	bic.w	r3, r3, #3
 8007174:	f043 0302 	orr.w	r3, r3, #2
 8007178:	81a3      	strh	r3, [r4, #12]
 800717a:	e7e3      	b.n	8007144 <__smakebuf_r+0xc>
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <__smakebuf_r+0x7c>)
 800717e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	6020      	str	r0, [r4, #0]
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	81a3      	strh	r3, [r4, #12]
 800718a:	9b00      	ldr	r3, [sp, #0]
 800718c:	6163      	str	r3, [r4, #20]
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	6120      	str	r0, [r4, #16]
 8007192:	b15b      	cbz	r3, 80071ac <__smakebuf_r+0x74>
 8007194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 fd61 	bl	8007c60 <_isatty_r>
 800719e:	b128      	cbz	r0, 80071ac <__smakebuf_r+0x74>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	89a0      	ldrh	r0, [r4, #12]
 80071ae:	4305      	orrs	r5, r0
 80071b0:	81a5      	strh	r5, [r4, #12]
 80071b2:	e7cd      	b.n	8007150 <__smakebuf_r+0x18>
 80071b4:	08005241 	.word	0x08005241

080071b8 <__malloc_lock>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__malloc_lock+0x8>)
 80071ba:	f7fe b938 	b.w	800542e <__retarget_lock_acquire_recursive>
 80071be:	bf00      	nop
 80071c0:	20004454 	.word	0x20004454

080071c4 <__malloc_unlock>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__malloc_unlock+0x8>)
 80071c6:	f7fe b933 	b.w	8005430 <__retarget_lock_release_recursive>
 80071ca:	bf00      	nop
 80071cc:	20004454 	.word	0x20004454

080071d0 <_Balloc>:
 80071d0:	b570      	push	{r4, r5, r6, lr}
 80071d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	b976      	cbnz	r6, 80071f8 <_Balloc+0x28>
 80071da:	2010      	movs	r0, #16
 80071dc:	f7fe f92a 	bl	8005434 <malloc>
 80071e0:	4602      	mov	r2, r0
 80071e2:	6260      	str	r0, [r4, #36]	; 0x24
 80071e4:	b920      	cbnz	r0, 80071f0 <_Balloc+0x20>
 80071e6:	4b18      	ldr	r3, [pc, #96]	; (8007248 <_Balloc+0x78>)
 80071e8:	4818      	ldr	r0, [pc, #96]	; (800724c <_Balloc+0x7c>)
 80071ea:	2166      	movs	r1, #102	; 0x66
 80071ec:	f000 fcf6 	bl	8007bdc <__assert_func>
 80071f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071f4:	6006      	str	r6, [r0, #0]
 80071f6:	60c6      	str	r6, [r0, #12]
 80071f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071fa:	68f3      	ldr	r3, [r6, #12]
 80071fc:	b183      	cbz	r3, 8007220 <_Balloc+0x50>
 80071fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007206:	b9b8      	cbnz	r0, 8007238 <_Balloc+0x68>
 8007208:	2101      	movs	r1, #1
 800720a:	fa01 f605 	lsl.w	r6, r1, r5
 800720e:	1d72      	adds	r2, r6, #5
 8007210:	0092      	lsls	r2, r2, #2
 8007212:	4620      	mov	r0, r4
 8007214:	f000 fb60 	bl	80078d8 <_calloc_r>
 8007218:	b160      	cbz	r0, 8007234 <_Balloc+0x64>
 800721a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800721e:	e00e      	b.n	800723e <_Balloc+0x6e>
 8007220:	2221      	movs	r2, #33	; 0x21
 8007222:	2104      	movs	r1, #4
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fb57 	bl	80078d8 <_calloc_r>
 800722a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800722c:	60f0      	str	r0, [r6, #12]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e4      	bne.n	80071fe <_Balloc+0x2e>
 8007234:	2000      	movs	r0, #0
 8007236:	bd70      	pop	{r4, r5, r6, pc}
 8007238:	6802      	ldr	r2, [r0, #0]
 800723a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800723e:	2300      	movs	r3, #0
 8007240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007244:	e7f7      	b.n	8007236 <_Balloc+0x66>
 8007246:	bf00      	nop
 8007248:	08007e5d 	.word	0x08007e5d
 800724c:	08007ee0 	.word	0x08007ee0

08007250 <_Bfree>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007254:	4605      	mov	r5, r0
 8007256:	460c      	mov	r4, r1
 8007258:	b976      	cbnz	r6, 8007278 <_Bfree+0x28>
 800725a:	2010      	movs	r0, #16
 800725c:	f7fe f8ea 	bl	8005434 <malloc>
 8007260:	4602      	mov	r2, r0
 8007262:	6268      	str	r0, [r5, #36]	; 0x24
 8007264:	b920      	cbnz	r0, 8007270 <_Bfree+0x20>
 8007266:	4b09      	ldr	r3, [pc, #36]	; (800728c <_Bfree+0x3c>)
 8007268:	4809      	ldr	r0, [pc, #36]	; (8007290 <_Bfree+0x40>)
 800726a:	218a      	movs	r1, #138	; 0x8a
 800726c:	f000 fcb6 	bl	8007bdc <__assert_func>
 8007270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007274:	6006      	str	r6, [r0, #0]
 8007276:	60c6      	str	r6, [r0, #12]
 8007278:	b13c      	cbz	r4, 800728a <_Bfree+0x3a>
 800727a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800727c:	6862      	ldr	r2, [r4, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007284:	6021      	str	r1, [r4, #0]
 8007286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	08007e5d 	.word	0x08007e5d
 8007290:	08007ee0 	.word	0x08007ee0

08007294 <__multadd>:
 8007294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007298:	690d      	ldr	r5, [r1, #16]
 800729a:	4607      	mov	r7, r0
 800729c:	460c      	mov	r4, r1
 800729e:	461e      	mov	r6, r3
 80072a0:	f101 0c14 	add.w	ip, r1, #20
 80072a4:	2000      	movs	r0, #0
 80072a6:	f8dc 3000 	ldr.w	r3, [ip]
 80072aa:	b299      	uxth	r1, r3
 80072ac:	fb02 6101 	mla	r1, r2, r1, r6
 80072b0:	0c1e      	lsrs	r6, r3, #16
 80072b2:	0c0b      	lsrs	r3, r1, #16
 80072b4:	fb02 3306 	mla	r3, r2, r6, r3
 80072b8:	b289      	uxth	r1, r1
 80072ba:	3001      	adds	r0, #1
 80072bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072c0:	4285      	cmp	r5, r0
 80072c2:	f84c 1b04 	str.w	r1, [ip], #4
 80072c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ca:	dcec      	bgt.n	80072a6 <__multadd+0x12>
 80072cc:	b30e      	cbz	r6, 8007312 <__multadd+0x7e>
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	42ab      	cmp	r3, r5
 80072d2:	dc19      	bgt.n	8007308 <__multadd+0x74>
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	4638      	mov	r0, r7
 80072d8:	3101      	adds	r1, #1
 80072da:	f7ff ff79 	bl	80071d0 <_Balloc>
 80072de:	4680      	mov	r8, r0
 80072e0:	b928      	cbnz	r0, 80072ee <__multadd+0x5a>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <__multadd+0x84>)
 80072e6:	480d      	ldr	r0, [pc, #52]	; (800731c <__multadd+0x88>)
 80072e8:	21b5      	movs	r1, #181	; 0xb5
 80072ea:	f000 fc77 	bl	8007bdc <__assert_func>
 80072ee:	6922      	ldr	r2, [r4, #16]
 80072f0:	3202      	adds	r2, #2
 80072f2:	f104 010c 	add.w	r1, r4, #12
 80072f6:	0092      	lsls	r2, r2, #2
 80072f8:	300c      	adds	r0, #12
 80072fa:	f7fe f8a3 	bl	8005444 <memcpy>
 80072fe:	4621      	mov	r1, r4
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff ffa5 	bl	8007250 <_Bfree>
 8007306:	4644      	mov	r4, r8
 8007308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800730c:	3501      	adds	r5, #1
 800730e:	615e      	str	r6, [r3, #20]
 8007310:	6125      	str	r5, [r4, #16]
 8007312:	4620      	mov	r0, r4
 8007314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007318:	08007ecf 	.word	0x08007ecf
 800731c:	08007ee0 	.word	0x08007ee0

08007320 <__hi0bits>:
 8007320:	0c03      	lsrs	r3, r0, #16
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	b9d3      	cbnz	r3, 800735c <__hi0bits+0x3c>
 8007326:	0400      	lsls	r0, r0, #16
 8007328:	2310      	movs	r3, #16
 800732a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800732e:	bf04      	itt	eq
 8007330:	0200      	lsleq	r0, r0, #8
 8007332:	3308      	addeq	r3, #8
 8007334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007338:	bf04      	itt	eq
 800733a:	0100      	lsleq	r0, r0, #4
 800733c:	3304      	addeq	r3, #4
 800733e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007342:	bf04      	itt	eq
 8007344:	0080      	lsleq	r0, r0, #2
 8007346:	3302      	addeq	r3, #2
 8007348:	2800      	cmp	r0, #0
 800734a:	db05      	blt.n	8007358 <__hi0bits+0x38>
 800734c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007350:	f103 0301 	add.w	r3, r3, #1
 8007354:	bf08      	it	eq
 8007356:	2320      	moveq	r3, #32
 8007358:	4618      	mov	r0, r3
 800735a:	4770      	bx	lr
 800735c:	2300      	movs	r3, #0
 800735e:	e7e4      	b.n	800732a <__hi0bits+0xa>

08007360 <__lo0bits>:
 8007360:	6803      	ldr	r3, [r0, #0]
 8007362:	f013 0207 	ands.w	r2, r3, #7
 8007366:	4601      	mov	r1, r0
 8007368:	d00b      	beq.n	8007382 <__lo0bits+0x22>
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d423      	bmi.n	80073b6 <__lo0bits+0x56>
 800736e:	0798      	lsls	r0, r3, #30
 8007370:	bf49      	itett	mi
 8007372:	085b      	lsrmi	r3, r3, #1
 8007374:	089b      	lsrpl	r3, r3, #2
 8007376:	2001      	movmi	r0, #1
 8007378:	600b      	strmi	r3, [r1, #0]
 800737a:	bf5c      	itt	pl
 800737c:	600b      	strpl	r3, [r1, #0]
 800737e:	2002      	movpl	r0, #2
 8007380:	4770      	bx	lr
 8007382:	b298      	uxth	r0, r3
 8007384:	b9a8      	cbnz	r0, 80073b2 <__lo0bits+0x52>
 8007386:	0c1b      	lsrs	r3, r3, #16
 8007388:	2010      	movs	r0, #16
 800738a:	b2da      	uxtb	r2, r3
 800738c:	b90a      	cbnz	r2, 8007392 <__lo0bits+0x32>
 800738e:	3008      	adds	r0, #8
 8007390:	0a1b      	lsrs	r3, r3, #8
 8007392:	071a      	lsls	r2, r3, #28
 8007394:	bf04      	itt	eq
 8007396:	091b      	lsreq	r3, r3, #4
 8007398:	3004      	addeq	r0, #4
 800739a:	079a      	lsls	r2, r3, #30
 800739c:	bf04      	itt	eq
 800739e:	089b      	lsreq	r3, r3, #2
 80073a0:	3002      	addeq	r0, #2
 80073a2:	07da      	lsls	r2, r3, #31
 80073a4:	d403      	bmi.n	80073ae <__lo0bits+0x4e>
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	f100 0001 	add.w	r0, r0, #1
 80073ac:	d005      	beq.n	80073ba <__lo0bits+0x5a>
 80073ae:	600b      	str	r3, [r1, #0]
 80073b0:	4770      	bx	lr
 80073b2:	4610      	mov	r0, r2
 80073b4:	e7e9      	b.n	800738a <__lo0bits+0x2a>
 80073b6:	2000      	movs	r0, #0
 80073b8:	4770      	bx	lr
 80073ba:	2020      	movs	r0, #32
 80073bc:	4770      	bx	lr
	...

080073c0 <__i2b>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	460c      	mov	r4, r1
 80073c4:	2101      	movs	r1, #1
 80073c6:	f7ff ff03 	bl	80071d0 <_Balloc>
 80073ca:	4602      	mov	r2, r0
 80073cc:	b928      	cbnz	r0, 80073da <__i2b+0x1a>
 80073ce:	4b05      	ldr	r3, [pc, #20]	; (80073e4 <__i2b+0x24>)
 80073d0:	4805      	ldr	r0, [pc, #20]	; (80073e8 <__i2b+0x28>)
 80073d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073d6:	f000 fc01 	bl	8007bdc <__assert_func>
 80073da:	2301      	movs	r3, #1
 80073dc:	6144      	str	r4, [r0, #20]
 80073de:	6103      	str	r3, [r0, #16]
 80073e0:	bd10      	pop	{r4, pc}
 80073e2:	bf00      	nop
 80073e4:	08007ecf 	.word	0x08007ecf
 80073e8:	08007ee0 	.word	0x08007ee0

080073ec <__multiply>:
 80073ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f0:	4691      	mov	r9, r2
 80073f2:	690a      	ldr	r2, [r1, #16]
 80073f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	bfb8      	it	lt
 80073fc:	460b      	movlt	r3, r1
 80073fe:	460c      	mov	r4, r1
 8007400:	bfbc      	itt	lt
 8007402:	464c      	movlt	r4, r9
 8007404:	4699      	movlt	r9, r3
 8007406:	6927      	ldr	r7, [r4, #16]
 8007408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800740c:	68a3      	ldr	r3, [r4, #8]
 800740e:	6861      	ldr	r1, [r4, #4]
 8007410:	eb07 060a 	add.w	r6, r7, sl
 8007414:	42b3      	cmp	r3, r6
 8007416:	b085      	sub	sp, #20
 8007418:	bfb8      	it	lt
 800741a:	3101      	addlt	r1, #1
 800741c:	f7ff fed8 	bl	80071d0 <_Balloc>
 8007420:	b930      	cbnz	r0, 8007430 <__multiply+0x44>
 8007422:	4602      	mov	r2, r0
 8007424:	4b44      	ldr	r3, [pc, #272]	; (8007538 <__multiply+0x14c>)
 8007426:	4845      	ldr	r0, [pc, #276]	; (800753c <__multiply+0x150>)
 8007428:	f240 115d 	movw	r1, #349	; 0x15d
 800742c:	f000 fbd6 	bl	8007bdc <__assert_func>
 8007430:	f100 0514 	add.w	r5, r0, #20
 8007434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007438:	462b      	mov	r3, r5
 800743a:	2200      	movs	r2, #0
 800743c:	4543      	cmp	r3, r8
 800743e:	d321      	bcc.n	8007484 <__multiply+0x98>
 8007440:	f104 0314 	add.w	r3, r4, #20
 8007444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007448:	f109 0314 	add.w	r3, r9, #20
 800744c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007450:	9202      	str	r2, [sp, #8]
 8007452:	1b3a      	subs	r2, r7, r4
 8007454:	3a15      	subs	r2, #21
 8007456:	f022 0203 	bic.w	r2, r2, #3
 800745a:	3204      	adds	r2, #4
 800745c:	f104 0115 	add.w	r1, r4, #21
 8007460:	428f      	cmp	r7, r1
 8007462:	bf38      	it	cc
 8007464:	2204      	movcc	r2, #4
 8007466:	9201      	str	r2, [sp, #4]
 8007468:	9a02      	ldr	r2, [sp, #8]
 800746a:	9303      	str	r3, [sp, #12]
 800746c:	429a      	cmp	r2, r3
 800746e:	d80c      	bhi.n	800748a <__multiply+0x9e>
 8007470:	2e00      	cmp	r6, #0
 8007472:	dd03      	ble.n	800747c <__multiply+0x90>
 8007474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007478:	2b00      	cmp	r3, #0
 800747a:	d05a      	beq.n	8007532 <__multiply+0x146>
 800747c:	6106      	str	r6, [r0, #16]
 800747e:	b005      	add	sp, #20
 8007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007484:	f843 2b04 	str.w	r2, [r3], #4
 8007488:	e7d8      	b.n	800743c <__multiply+0x50>
 800748a:	f8b3 a000 	ldrh.w	sl, [r3]
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	d024      	beq.n	80074de <__multiply+0xf2>
 8007494:	f104 0e14 	add.w	lr, r4, #20
 8007498:	46a9      	mov	r9, r5
 800749a:	f04f 0c00 	mov.w	ip, #0
 800749e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074a2:	f8d9 1000 	ldr.w	r1, [r9]
 80074a6:	fa1f fb82 	uxth.w	fp, r2
 80074aa:	b289      	uxth	r1, r1
 80074ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80074b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80074b4:	f8d9 2000 	ldr.w	r2, [r9]
 80074b8:	4461      	add	r1, ip
 80074ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074be:	fb0a c20b 	mla	r2, sl, fp, ip
 80074c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074c6:	b289      	uxth	r1, r1
 80074c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074cc:	4577      	cmp	r7, lr
 80074ce:	f849 1b04 	str.w	r1, [r9], #4
 80074d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074d6:	d8e2      	bhi.n	800749e <__multiply+0xb2>
 80074d8:	9a01      	ldr	r2, [sp, #4]
 80074da:	f845 c002 	str.w	ip, [r5, r2]
 80074de:	9a03      	ldr	r2, [sp, #12]
 80074e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074e4:	3304      	adds	r3, #4
 80074e6:	f1b9 0f00 	cmp.w	r9, #0
 80074ea:	d020      	beq.n	800752e <__multiply+0x142>
 80074ec:	6829      	ldr	r1, [r5, #0]
 80074ee:	f104 0c14 	add.w	ip, r4, #20
 80074f2:	46ae      	mov	lr, r5
 80074f4:	f04f 0a00 	mov.w	sl, #0
 80074f8:	f8bc b000 	ldrh.w	fp, [ip]
 80074fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007500:	fb09 220b 	mla	r2, r9, fp, r2
 8007504:	4492      	add	sl, r2
 8007506:	b289      	uxth	r1, r1
 8007508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800750c:	f84e 1b04 	str.w	r1, [lr], #4
 8007510:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007514:	f8be 1000 	ldrh.w	r1, [lr]
 8007518:	0c12      	lsrs	r2, r2, #16
 800751a:	fb09 1102 	mla	r1, r9, r2, r1
 800751e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007522:	4567      	cmp	r7, ip
 8007524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007528:	d8e6      	bhi.n	80074f8 <__multiply+0x10c>
 800752a:	9a01      	ldr	r2, [sp, #4]
 800752c:	50a9      	str	r1, [r5, r2]
 800752e:	3504      	adds	r5, #4
 8007530:	e79a      	b.n	8007468 <__multiply+0x7c>
 8007532:	3e01      	subs	r6, #1
 8007534:	e79c      	b.n	8007470 <__multiply+0x84>
 8007536:	bf00      	nop
 8007538:	08007ecf 	.word	0x08007ecf
 800753c:	08007ee0 	.word	0x08007ee0

08007540 <__pow5mult>:
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007544:	4615      	mov	r5, r2
 8007546:	f012 0203 	ands.w	r2, r2, #3
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	d007      	beq.n	8007560 <__pow5mult+0x20>
 8007550:	4c25      	ldr	r4, [pc, #148]	; (80075e8 <__pow5mult+0xa8>)
 8007552:	3a01      	subs	r2, #1
 8007554:	2300      	movs	r3, #0
 8007556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800755a:	f7ff fe9b 	bl	8007294 <__multadd>
 800755e:	4607      	mov	r7, r0
 8007560:	10ad      	asrs	r5, r5, #2
 8007562:	d03d      	beq.n	80075e0 <__pow5mult+0xa0>
 8007564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007566:	b97c      	cbnz	r4, 8007588 <__pow5mult+0x48>
 8007568:	2010      	movs	r0, #16
 800756a:	f7fd ff63 	bl	8005434 <malloc>
 800756e:	4602      	mov	r2, r0
 8007570:	6270      	str	r0, [r6, #36]	; 0x24
 8007572:	b928      	cbnz	r0, 8007580 <__pow5mult+0x40>
 8007574:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <__pow5mult+0xac>)
 8007576:	481e      	ldr	r0, [pc, #120]	; (80075f0 <__pow5mult+0xb0>)
 8007578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800757c:	f000 fb2e 	bl	8007bdc <__assert_func>
 8007580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007584:	6004      	str	r4, [r0, #0]
 8007586:	60c4      	str	r4, [r0, #12]
 8007588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800758c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007590:	b94c      	cbnz	r4, 80075a6 <__pow5mult+0x66>
 8007592:	f240 2171 	movw	r1, #625	; 0x271
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ff12 	bl	80073c0 <__i2b>
 800759c:	2300      	movs	r3, #0
 800759e:	f8c8 0008 	str.w	r0, [r8, #8]
 80075a2:	4604      	mov	r4, r0
 80075a4:	6003      	str	r3, [r0, #0]
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	07eb      	lsls	r3, r5, #31
 80075ac:	d50a      	bpl.n	80075c4 <__pow5mult+0x84>
 80075ae:	4639      	mov	r1, r7
 80075b0:	4622      	mov	r2, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff ff1a 	bl	80073ec <__multiply>
 80075b8:	4639      	mov	r1, r7
 80075ba:	4680      	mov	r8, r0
 80075bc:	4630      	mov	r0, r6
 80075be:	f7ff fe47 	bl	8007250 <_Bfree>
 80075c2:	4647      	mov	r7, r8
 80075c4:	106d      	asrs	r5, r5, #1
 80075c6:	d00b      	beq.n	80075e0 <__pow5mult+0xa0>
 80075c8:	6820      	ldr	r0, [r4, #0]
 80075ca:	b938      	cbnz	r0, 80075dc <__pow5mult+0x9c>
 80075cc:	4622      	mov	r2, r4
 80075ce:	4621      	mov	r1, r4
 80075d0:	4630      	mov	r0, r6
 80075d2:	f7ff ff0b 	bl	80073ec <__multiply>
 80075d6:	6020      	str	r0, [r4, #0]
 80075d8:	f8c0 9000 	str.w	r9, [r0]
 80075dc:	4604      	mov	r4, r0
 80075de:	e7e4      	b.n	80075aa <__pow5mult+0x6a>
 80075e0:	4638      	mov	r0, r7
 80075e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e6:	bf00      	nop
 80075e8:	08008030 	.word	0x08008030
 80075ec:	08007e5d 	.word	0x08007e5d
 80075f0:	08007ee0 	.word	0x08007ee0

080075f4 <__lshift>:
 80075f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	6849      	ldr	r1, [r1, #4]
 80075fc:	6923      	ldr	r3, [r4, #16]
 80075fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007602:	68a3      	ldr	r3, [r4, #8]
 8007604:	4607      	mov	r7, r0
 8007606:	4691      	mov	r9, r2
 8007608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800760c:	f108 0601 	add.w	r6, r8, #1
 8007610:	42b3      	cmp	r3, r6
 8007612:	db0b      	blt.n	800762c <__lshift+0x38>
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff fddb 	bl	80071d0 <_Balloc>
 800761a:	4605      	mov	r5, r0
 800761c:	b948      	cbnz	r0, 8007632 <__lshift+0x3e>
 800761e:	4602      	mov	r2, r0
 8007620:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <__lshift+0xd8>)
 8007622:	482b      	ldr	r0, [pc, #172]	; (80076d0 <__lshift+0xdc>)
 8007624:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007628:	f000 fad8 	bl	8007bdc <__assert_func>
 800762c:	3101      	adds	r1, #1
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	e7ee      	b.n	8007610 <__lshift+0x1c>
 8007632:	2300      	movs	r3, #0
 8007634:	f100 0114 	add.w	r1, r0, #20
 8007638:	f100 0210 	add.w	r2, r0, #16
 800763c:	4618      	mov	r0, r3
 800763e:	4553      	cmp	r3, sl
 8007640:	db37      	blt.n	80076b2 <__lshift+0xbe>
 8007642:	6920      	ldr	r0, [r4, #16]
 8007644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007648:	f104 0314 	add.w	r3, r4, #20
 800764c:	f019 091f 	ands.w	r9, r9, #31
 8007650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007658:	d02f      	beq.n	80076ba <__lshift+0xc6>
 800765a:	f1c9 0e20 	rsb	lr, r9, #32
 800765e:	468a      	mov	sl, r1
 8007660:	f04f 0c00 	mov.w	ip, #0
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	fa02 f209 	lsl.w	r2, r2, r9
 800766a:	ea42 020c 	orr.w	r2, r2, ip
 800766e:	f84a 2b04 	str.w	r2, [sl], #4
 8007672:	f853 2b04 	ldr.w	r2, [r3], #4
 8007676:	4298      	cmp	r0, r3
 8007678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800767c:	d8f2      	bhi.n	8007664 <__lshift+0x70>
 800767e:	1b03      	subs	r3, r0, r4
 8007680:	3b15      	subs	r3, #21
 8007682:	f023 0303 	bic.w	r3, r3, #3
 8007686:	3304      	adds	r3, #4
 8007688:	f104 0215 	add.w	r2, r4, #21
 800768c:	4290      	cmp	r0, r2
 800768e:	bf38      	it	cc
 8007690:	2304      	movcc	r3, #4
 8007692:	f841 c003 	str.w	ip, [r1, r3]
 8007696:	f1bc 0f00 	cmp.w	ip, #0
 800769a:	d001      	beq.n	80076a0 <__lshift+0xac>
 800769c:	f108 0602 	add.w	r6, r8, #2
 80076a0:	3e01      	subs	r6, #1
 80076a2:	4638      	mov	r0, r7
 80076a4:	612e      	str	r6, [r5, #16]
 80076a6:	4621      	mov	r1, r4
 80076a8:	f7ff fdd2 	bl	8007250 <_Bfree>
 80076ac:	4628      	mov	r0, r5
 80076ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80076b6:	3301      	adds	r3, #1
 80076b8:	e7c1      	b.n	800763e <__lshift+0x4a>
 80076ba:	3904      	subs	r1, #4
 80076bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80076c4:	4298      	cmp	r0, r3
 80076c6:	d8f9      	bhi.n	80076bc <__lshift+0xc8>
 80076c8:	e7ea      	b.n	80076a0 <__lshift+0xac>
 80076ca:	bf00      	nop
 80076cc:	08007ecf 	.word	0x08007ecf
 80076d0:	08007ee0 	.word	0x08007ee0

080076d4 <__mcmp>:
 80076d4:	b530      	push	{r4, r5, lr}
 80076d6:	6902      	ldr	r2, [r0, #16]
 80076d8:	690c      	ldr	r4, [r1, #16]
 80076da:	1b12      	subs	r2, r2, r4
 80076dc:	d10e      	bne.n	80076fc <__mcmp+0x28>
 80076de:	f100 0314 	add.w	r3, r0, #20
 80076e2:	3114      	adds	r1, #20
 80076e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076f4:	42a5      	cmp	r5, r4
 80076f6:	d003      	beq.n	8007700 <__mcmp+0x2c>
 80076f8:	d305      	bcc.n	8007706 <__mcmp+0x32>
 80076fa:	2201      	movs	r2, #1
 80076fc:	4610      	mov	r0, r2
 80076fe:	bd30      	pop	{r4, r5, pc}
 8007700:	4283      	cmp	r3, r0
 8007702:	d3f3      	bcc.n	80076ec <__mcmp+0x18>
 8007704:	e7fa      	b.n	80076fc <__mcmp+0x28>
 8007706:	f04f 32ff 	mov.w	r2, #4294967295
 800770a:	e7f7      	b.n	80076fc <__mcmp+0x28>

0800770c <__mdiff>:
 800770c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	460c      	mov	r4, r1
 8007712:	4606      	mov	r6, r0
 8007714:	4611      	mov	r1, r2
 8007716:	4620      	mov	r0, r4
 8007718:	4690      	mov	r8, r2
 800771a:	f7ff ffdb 	bl	80076d4 <__mcmp>
 800771e:	1e05      	subs	r5, r0, #0
 8007720:	d110      	bne.n	8007744 <__mdiff+0x38>
 8007722:	4629      	mov	r1, r5
 8007724:	4630      	mov	r0, r6
 8007726:	f7ff fd53 	bl	80071d0 <_Balloc>
 800772a:	b930      	cbnz	r0, 800773a <__mdiff+0x2e>
 800772c:	4b3a      	ldr	r3, [pc, #232]	; (8007818 <__mdiff+0x10c>)
 800772e:	4602      	mov	r2, r0
 8007730:	f240 2132 	movw	r1, #562	; 0x232
 8007734:	4839      	ldr	r0, [pc, #228]	; (800781c <__mdiff+0x110>)
 8007736:	f000 fa51 	bl	8007bdc <__assert_func>
 800773a:	2301      	movs	r3, #1
 800773c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	bfa4      	itt	ge
 8007746:	4643      	movge	r3, r8
 8007748:	46a0      	movge	r8, r4
 800774a:	4630      	mov	r0, r6
 800774c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007750:	bfa6      	itte	ge
 8007752:	461c      	movge	r4, r3
 8007754:	2500      	movge	r5, #0
 8007756:	2501      	movlt	r5, #1
 8007758:	f7ff fd3a 	bl	80071d0 <_Balloc>
 800775c:	b920      	cbnz	r0, 8007768 <__mdiff+0x5c>
 800775e:	4b2e      	ldr	r3, [pc, #184]	; (8007818 <__mdiff+0x10c>)
 8007760:	4602      	mov	r2, r0
 8007762:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007766:	e7e5      	b.n	8007734 <__mdiff+0x28>
 8007768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800776c:	6926      	ldr	r6, [r4, #16]
 800776e:	60c5      	str	r5, [r0, #12]
 8007770:	f104 0914 	add.w	r9, r4, #20
 8007774:	f108 0514 	add.w	r5, r8, #20
 8007778:	f100 0e14 	add.w	lr, r0, #20
 800777c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007784:	f108 0210 	add.w	r2, r8, #16
 8007788:	46f2      	mov	sl, lr
 800778a:	2100      	movs	r1, #0
 800778c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007794:	fa1f f883 	uxth.w	r8, r3
 8007798:	fa11 f18b 	uxtah	r1, r1, fp
 800779c:	0c1b      	lsrs	r3, r3, #16
 800779e:	eba1 0808 	sub.w	r8, r1, r8
 80077a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80077aa:	fa1f f888 	uxth.w	r8, r8
 80077ae:	1419      	asrs	r1, r3, #16
 80077b0:	454e      	cmp	r6, r9
 80077b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80077b6:	f84a 3b04 	str.w	r3, [sl], #4
 80077ba:	d8e7      	bhi.n	800778c <__mdiff+0x80>
 80077bc:	1b33      	subs	r3, r6, r4
 80077be:	3b15      	subs	r3, #21
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	3304      	adds	r3, #4
 80077c6:	3415      	adds	r4, #21
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	bf38      	it	cc
 80077cc:	2304      	movcc	r3, #4
 80077ce:	441d      	add	r5, r3
 80077d0:	4473      	add	r3, lr
 80077d2:	469e      	mov	lr, r3
 80077d4:	462e      	mov	r6, r5
 80077d6:	4566      	cmp	r6, ip
 80077d8:	d30e      	bcc.n	80077f8 <__mdiff+0xec>
 80077da:	f10c 0203 	add.w	r2, ip, #3
 80077de:	1b52      	subs	r2, r2, r5
 80077e0:	f022 0203 	bic.w	r2, r2, #3
 80077e4:	3d03      	subs	r5, #3
 80077e6:	45ac      	cmp	ip, r5
 80077e8:	bf38      	it	cc
 80077ea:	2200      	movcc	r2, #0
 80077ec:	441a      	add	r2, r3
 80077ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077f2:	b17b      	cbz	r3, 8007814 <__mdiff+0x108>
 80077f4:	6107      	str	r7, [r0, #16]
 80077f6:	e7a3      	b.n	8007740 <__mdiff+0x34>
 80077f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80077fc:	fa11 f288 	uxtah	r2, r1, r8
 8007800:	1414      	asrs	r4, r2, #16
 8007802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007806:	b292      	uxth	r2, r2
 8007808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800780c:	f84e 2b04 	str.w	r2, [lr], #4
 8007810:	1421      	asrs	r1, r4, #16
 8007812:	e7e0      	b.n	80077d6 <__mdiff+0xca>
 8007814:	3f01      	subs	r7, #1
 8007816:	e7ea      	b.n	80077ee <__mdiff+0xe2>
 8007818:	08007ecf 	.word	0x08007ecf
 800781c:	08007ee0 	.word	0x08007ee0

08007820 <__d2b>:
 8007820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4689      	mov	r9, r1
 8007826:	2101      	movs	r1, #1
 8007828:	ec57 6b10 	vmov	r6, r7, d0
 800782c:	4690      	mov	r8, r2
 800782e:	f7ff fccf 	bl	80071d0 <_Balloc>
 8007832:	4604      	mov	r4, r0
 8007834:	b930      	cbnz	r0, 8007844 <__d2b+0x24>
 8007836:	4602      	mov	r2, r0
 8007838:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <__d2b+0xb0>)
 800783a:	4826      	ldr	r0, [pc, #152]	; (80078d4 <__d2b+0xb4>)
 800783c:	f240 310a 	movw	r1, #778	; 0x30a
 8007840:	f000 f9cc 	bl	8007bdc <__assert_func>
 8007844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800784c:	bb35      	cbnz	r5, 800789c <__d2b+0x7c>
 800784e:	2e00      	cmp	r6, #0
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	d028      	beq.n	80078a6 <__d2b+0x86>
 8007854:	4668      	mov	r0, sp
 8007856:	9600      	str	r6, [sp, #0]
 8007858:	f7ff fd82 	bl	8007360 <__lo0bits>
 800785c:	9900      	ldr	r1, [sp, #0]
 800785e:	b300      	cbz	r0, 80078a2 <__d2b+0x82>
 8007860:	9a01      	ldr	r2, [sp, #4]
 8007862:	f1c0 0320 	rsb	r3, r0, #32
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	430b      	orrs	r3, r1
 800786c:	40c2      	lsrs	r2, r0
 800786e:	6163      	str	r3, [r4, #20]
 8007870:	9201      	str	r2, [sp, #4]
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	61a3      	str	r3, [r4, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	bf14      	ite	ne
 800787a:	2202      	movne	r2, #2
 800787c:	2201      	moveq	r2, #1
 800787e:	6122      	str	r2, [r4, #16]
 8007880:	b1d5      	cbz	r5, 80078b8 <__d2b+0x98>
 8007882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007886:	4405      	add	r5, r0
 8007888:	f8c9 5000 	str.w	r5, [r9]
 800788c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007890:	f8c8 0000 	str.w	r0, [r8]
 8007894:	4620      	mov	r0, r4
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800789c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078a0:	e7d5      	b.n	800784e <__d2b+0x2e>
 80078a2:	6161      	str	r1, [r4, #20]
 80078a4:	e7e5      	b.n	8007872 <__d2b+0x52>
 80078a6:	a801      	add	r0, sp, #4
 80078a8:	f7ff fd5a 	bl	8007360 <__lo0bits>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	6163      	str	r3, [r4, #20]
 80078b0:	2201      	movs	r2, #1
 80078b2:	6122      	str	r2, [r4, #16]
 80078b4:	3020      	adds	r0, #32
 80078b6:	e7e3      	b.n	8007880 <__d2b+0x60>
 80078b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078c0:	f8c9 0000 	str.w	r0, [r9]
 80078c4:	6918      	ldr	r0, [r3, #16]
 80078c6:	f7ff fd2b 	bl	8007320 <__hi0bits>
 80078ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80078ce:	e7df      	b.n	8007890 <__d2b+0x70>
 80078d0:	08007ecf 	.word	0x08007ecf
 80078d4:	08007ee0 	.word	0x08007ee0

080078d8 <_calloc_r>:
 80078d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078da:	fba1 2402 	umull	r2, r4, r1, r2
 80078de:	b94c      	cbnz	r4, 80078f4 <_calloc_r+0x1c>
 80078e0:	4611      	mov	r1, r2
 80078e2:	9201      	str	r2, [sp, #4]
 80078e4:	f7fd fe30 	bl	8005548 <_malloc_r>
 80078e8:	9a01      	ldr	r2, [sp, #4]
 80078ea:	4605      	mov	r5, r0
 80078ec:	b930      	cbnz	r0, 80078fc <_calloc_r+0x24>
 80078ee:	4628      	mov	r0, r5
 80078f0:	b003      	add	sp, #12
 80078f2:	bd30      	pop	{r4, r5, pc}
 80078f4:	220c      	movs	r2, #12
 80078f6:	6002      	str	r2, [r0, #0]
 80078f8:	2500      	movs	r5, #0
 80078fa:	e7f8      	b.n	80078ee <_calloc_r+0x16>
 80078fc:	4621      	mov	r1, r4
 80078fe:	f7fd fdaf 	bl	8005460 <memset>
 8007902:	e7f4      	b.n	80078ee <_calloc_r+0x16>

08007904 <__sfputc_r>:
 8007904:	6893      	ldr	r3, [r2, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	b410      	push	{r4}
 800790c:	6093      	str	r3, [r2, #8]
 800790e:	da08      	bge.n	8007922 <__sfputc_r+0x1e>
 8007910:	6994      	ldr	r4, [r2, #24]
 8007912:	42a3      	cmp	r3, r4
 8007914:	db01      	blt.n	800791a <__sfputc_r+0x16>
 8007916:	290a      	cmp	r1, #10
 8007918:	d103      	bne.n	8007922 <__sfputc_r+0x1e>
 800791a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800791e:	f7fe bbaf 	b.w	8006080 <__swbuf_r>
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	1c58      	adds	r0, r3, #1
 8007926:	6010      	str	r0, [r2, #0]
 8007928:	7019      	strb	r1, [r3, #0]
 800792a:	4608      	mov	r0, r1
 800792c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007930:	4770      	bx	lr

08007932 <__sfputs_r>:
 8007932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007934:	4606      	mov	r6, r0
 8007936:	460f      	mov	r7, r1
 8007938:	4614      	mov	r4, r2
 800793a:	18d5      	adds	r5, r2, r3
 800793c:	42ac      	cmp	r4, r5
 800793e:	d101      	bne.n	8007944 <__sfputs_r+0x12>
 8007940:	2000      	movs	r0, #0
 8007942:	e007      	b.n	8007954 <__sfputs_r+0x22>
 8007944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007948:	463a      	mov	r2, r7
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ffda 	bl	8007904 <__sfputc_r>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d1f3      	bne.n	800793c <__sfputs_r+0xa>
 8007954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007958 <_vfiprintf_r>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	460d      	mov	r5, r1
 800795e:	b09d      	sub	sp, #116	; 0x74
 8007960:	4614      	mov	r4, r2
 8007962:	4698      	mov	r8, r3
 8007964:	4606      	mov	r6, r0
 8007966:	b118      	cbz	r0, 8007970 <_vfiprintf_r+0x18>
 8007968:	6983      	ldr	r3, [r0, #24]
 800796a:	b90b      	cbnz	r3, 8007970 <_vfiprintf_r+0x18>
 800796c:	f7fd fc9c 	bl	80052a8 <__sinit>
 8007970:	4b89      	ldr	r3, [pc, #548]	; (8007b98 <_vfiprintf_r+0x240>)
 8007972:	429d      	cmp	r5, r3
 8007974:	d11b      	bne.n	80079ae <_vfiprintf_r+0x56>
 8007976:	6875      	ldr	r5, [r6, #4]
 8007978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	d405      	bmi.n	800798a <_vfiprintf_r+0x32>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d402      	bmi.n	800798a <_vfiprintf_r+0x32>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f7fd fd52 	bl	800542e <__retarget_lock_acquire_recursive>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	071b      	lsls	r3, r3, #28
 800798e:	d501      	bpl.n	8007994 <_vfiprintf_r+0x3c>
 8007990:	692b      	ldr	r3, [r5, #16]
 8007992:	b9eb      	cbnz	r3, 80079d0 <_vfiprintf_r+0x78>
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f7fe fbd6 	bl	8006148 <__swsetup_r>
 800799c:	b1c0      	cbz	r0, 80079d0 <_vfiprintf_r+0x78>
 800799e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079a0:	07dc      	lsls	r4, r3, #31
 80079a2:	d50e      	bpl.n	80079c2 <_vfiprintf_r+0x6a>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	b01d      	add	sp, #116	; 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	4b7b      	ldr	r3, [pc, #492]	; (8007b9c <_vfiprintf_r+0x244>)
 80079b0:	429d      	cmp	r5, r3
 80079b2:	d101      	bne.n	80079b8 <_vfiprintf_r+0x60>
 80079b4:	68b5      	ldr	r5, [r6, #8]
 80079b6:	e7df      	b.n	8007978 <_vfiprintf_r+0x20>
 80079b8:	4b79      	ldr	r3, [pc, #484]	; (8007ba0 <_vfiprintf_r+0x248>)
 80079ba:	429d      	cmp	r5, r3
 80079bc:	bf08      	it	eq
 80079be:	68f5      	ldreq	r5, [r6, #12]
 80079c0:	e7da      	b.n	8007978 <_vfiprintf_r+0x20>
 80079c2:	89ab      	ldrh	r3, [r5, #12]
 80079c4:	0598      	lsls	r0, r3, #22
 80079c6:	d4ed      	bmi.n	80079a4 <_vfiprintf_r+0x4c>
 80079c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ca:	f7fd fd31 	bl	8005430 <__retarget_lock_release_recursive>
 80079ce:	e7e9      	b.n	80079a4 <_vfiprintf_r+0x4c>
 80079d0:	2300      	movs	r3, #0
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	2320      	movs	r3, #32
 80079d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079da:	f8cd 800c 	str.w	r8, [sp, #12]
 80079de:	2330      	movs	r3, #48	; 0x30
 80079e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ba4 <_vfiprintf_r+0x24c>
 80079e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079e8:	f04f 0901 	mov.w	r9, #1
 80079ec:	4623      	mov	r3, r4
 80079ee:	469a      	mov	sl, r3
 80079f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079f4:	b10a      	cbz	r2, 80079fa <_vfiprintf_r+0xa2>
 80079f6:	2a25      	cmp	r2, #37	; 0x25
 80079f8:	d1f9      	bne.n	80079ee <_vfiprintf_r+0x96>
 80079fa:	ebba 0b04 	subs.w	fp, sl, r4
 80079fe:	d00b      	beq.n	8007a18 <_vfiprintf_r+0xc0>
 8007a00:	465b      	mov	r3, fp
 8007a02:	4622      	mov	r2, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	4630      	mov	r0, r6
 8007a08:	f7ff ff93 	bl	8007932 <__sfputs_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f000 80aa 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a14:	445a      	add	r2, fp
 8007a16:	9209      	str	r2, [sp, #36]	; 0x24
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80a2 	beq.w	8007b66 <_vfiprintf_r+0x20e>
 8007a22:	2300      	movs	r3, #0
 8007a24:	f04f 32ff 	mov.w	r2, #4294967295
 8007a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a2c:	f10a 0a01 	add.w	sl, sl, #1
 8007a30:	9304      	str	r3, [sp, #16]
 8007a32:	9307      	str	r3, [sp, #28]
 8007a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a38:	931a      	str	r3, [sp, #104]	; 0x68
 8007a3a:	4654      	mov	r4, sl
 8007a3c:	2205      	movs	r2, #5
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	4858      	ldr	r0, [pc, #352]	; (8007ba4 <_vfiprintf_r+0x24c>)
 8007a44:	f7f8 fbec 	bl	8000220 <memchr>
 8007a48:	9a04      	ldr	r2, [sp, #16]
 8007a4a:	b9d8      	cbnz	r0, 8007a84 <_vfiprintf_r+0x12c>
 8007a4c:	06d1      	lsls	r1, r2, #27
 8007a4e:	bf44      	itt	mi
 8007a50:	2320      	movmi	r3, #32
 8007a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a56:	0713      	lsls	r3, r2, #28
 8007a58:	bf44      	itt	mi
 8007a5a:	232b      	movmi	r3, #43	; 0x2b
 8007a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a60:	f89a 3000 	ldrb.w	r3, [sl]
 8007a64:	2b2a      	cmp	r3, #42	; 0x2a
 8007a66:	d015      	beq.n	8007a94 <_vfiprintf_r+0x13c>
 8007a68:	9a07      	ldr	r2, [sp, #28]
 8007a6a:	4654      	mov	r4, sl
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f04f 0c0a 	mov.w	ip, #10
 8007a72:	4621      	mov	r1, r4
 8007a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a78:	3b30      	subs	r3, #48	; 0x30
 8007a7a:	2b09      	cmp	r3, #9
 8007a7c:	d94e      	bls.n	8007b1c <_vfiprintf_r+0x1c4>
 8007a7e:	b1b0      	cbz	r0, 8007aae <_vfiprintf_r+0x156>
 8007a80:	9207      	str	r2, [sp, #28]
 8007a82:	e014      	b.n	8007aae <_vfiprintf_r+0x156>
 8007a84:	eba0 0308 	sub.w	r3, r0, r8
 8007a88:	fa09 f303 	lsl.w	r3, r9, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	9304      	str	r3, [sp, #16]
 8007a90:	46a2      	mov	sl, r4
 8007a92:	e7d2      	b.n	8007a3a <_vfiprintf_r+0xe2>
 8007a94:	9b03      	ldr	r3, [sp, #12]
 8007a96:	1d19      	adds	r1, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	9103      	str	r1, [sp, #12]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	bfbb      	ittet	lt
 8007aa0:	425b      	neglt	r3, r3
 8007aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8007aa6:	9307      	strge	r3, [sp, #28]
 8007aa8:	9307      	strlt	r3, [sp, #28]
 8007aaa:	bfb8      	it	lt
 8007aac:	9204      	strlt	r2, [sp, #16]
 8007aae:	7823      	ldrb	r3, [r4, #0]
 8007ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ab2:	d10c      	bne.n	8007ace <_vfiprintf_r+0x176>
 8007ab4:	7863      	ldrb	r3, [r4, #1]
 8007ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab8:	d135      	bne.n	8007b26 <_vfiprintf_r+0x1ce>
 8007aba:	9b03      	ldr	r3, [sp, #12]
 8007abc:	1d1a      	adds	r2, r3, #4
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	9203      	str	r2, [sp, #12]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	bfb8      	it	lt
 8007ac6:	f04f 33ff 	movlt.w	r3, #4294967295
 8007aca:	3402      	adds	r4, #2
 8007acc:	9305      	str	r3, [sp, #20]
 8007ace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bb4 <_vfiprintf_r+0x25c>
 8007ad2:	7821      	ldrb	r1, [r4, #0]
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	f7f8 fba2 	bl	8000220 <memchr>
 8007adc:	b140      	cbz	r0, 8007af0 <_vfiprintf_r+0x198>
 8007ade:	2340      	movs	r3, #64	; 0x40
 8007ae0:	eba0 000a 	sub.w	r0, r0, sl
 8007ae4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ae8:	9b04      	ldr	r3, [sp, #16]
 8007aea:	4303      	orrs	r3, r0
 8007aec:	3401      	adds	r4, #1
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af4:	482c      	ldr	r0, [pc, #176]	; (8007ba8 <_vfiprintf_r+0x250>)
 8007af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007afa:	2206      	movs	r2, #6
 8007afc:	f7f8 fb90 	bl	8000220 <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d03f      	beq.n	8007b84 <_vfiprintf_r+0x22c>
 8007b04:	4b29      	ldr	r3, [pc, #164]	; (8007bac <_vfiprintf_r+0x254>)
 8007b06:	bb1b      	cbnz	r3, 8007b50 <_vfiprintf_r+0x1f8>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3307      	adds	r3, #7
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	443b      	add	r3, r7
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	e767      	b.n	80079ec <_vfiprintf_r+0x94>
 8007b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b20:	460c      	mov	r4, r1
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7a5      	b.n	8007a72 <_vfiprintf_r+0x11a>
 8007b26:	2300      	movs	r3, #0
 8007b28:	3401      	adds	r4, #1
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f04f 0c0a 	mov.w	ip, #10
 8007b32:	4620      	mov	r0, r4
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	3a30      	subs	r2, #48	; 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d903      	bls.n	8007b46 <_vfiprintf_r+0x1ee>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c5      	beq.n	8007ace <_vfiprintf_r+0x176>
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	e7c3      	b.n	8007ace <_vfiprintf_r+0x176>
 8007b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e7f0      	b.n	8007b32 <_vfiprintf_r+0x1da>
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	462a      	mov	r2, r5
 8007b56:	4b16      	ldr	r3, [pc, #88]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f7fd fe08 	bl	8005770 <_printf_float>
 8007b60:	4607      	mov	r7, r0
 8007b62:	1c78      	adds	r0, r7, #1
 8007b64:	d1d6      	bne.n	8007b14 <_vfiprintf_r+0x1bc>
 8007b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b68:	07d9      	lsls	r1, r3, #31
 8007b6a:	d405      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b6c:	89ab      	ldrh	r3, [r5, #12]
 8007b6e:	059a      	lsls	r2, r3, #22
 8007b70:	d402      	bmi.n	8007b78 <_vfiprintf_r+0x220>
 8007b72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b74:	f7fd fc5c 	bl	8005430 <__retarget_lock_release_recursive>
 8007b78:	89ab      	ldrh	r3, [r5, #12]
 8007b7a:	065b      	lsls	r3, r3, #25
 8007b7c:	f53f af12 	bmi.w	80079a4 <_vfiprintf_r+0x4c>
 8007b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b82:	e711      	b.n	80079a8 <_vfiprintf_r+0x50>
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4b09      	ldr	r3, [pc, #36]	; (8007bb0 <_vfiprintf_r+0x258>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	4630      	mov	r0, r6
 8007b90:	f7fe f892 	bl	8005cb8 <_printf_i>
 8007b94:	e7e4      	b.n	8007b60 <_vfiprintf_r+0x208>
 8007b96:	bf00      	nop
 8007b98:	08007dd8 	.word	0x08007dd8
 8007b9c:	08007df8 	.word	0x08007df8
 8007ba0:	08007db8 	.word	0x08007db8
 8007ba4:	0800803c 	.word	0x0800803c
 8007ba8:	08008046 	.word	0x08008046
 8007bac:	08005771 	.word	0x08005771
 8007bb0:	08007933 	.word	0x08007933
 8007bb4:	08008042 	.word	0x08008042

08007bb8 <_read_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4d07      	ldr	r5, [pc, #28]	; (8007bd8 <_read_r+0x20>)
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	4608      	mov	r0, r1
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	602a      	str	r2, [r5, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f7f9 fd34 	bl	8001634 <_read>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_read_r+0x1e>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_read_r+0x1e>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	20004460 	.word	0x20004460

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f000 f80e 	bl	8007c18 <fiprintf>
 8007bfc:	f000 f85f 	bl	8007cbe <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	20000010 	.word	0x20000010
 8007c0c:	0800804d 	.word	0x0800804d
 8007c10:	0800805a 	.word	0x0800805a
 8007c14:	08008088 	.word	0x08008088

08007c18 <fiprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b503      	push	{r0, r1, lr}
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <fiprintf+0x20>)
 8007c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f7ff fe95 	bl	8007958 <_vfiprintf_r>
 8007c2e:	b002      	add	sp, #8
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	20000010 	.word	0x20000010

08007c3c <_fstat_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d07      	ldr	r5, [pc, #28]	; (8007c5c <_fstat_r+0x20>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	4611      	mov	r1, r2
 8007c48:	602b      	str	r3, [r5, #0]
 8007c4a:	f7f9 fd38 	bl	80016be <_fstat>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	d102      	bne.n	8007c58 <_fstat_r+0x1c>
 8007c52:	682b      	ldr	r3, [r5, #0]
 8007c54:	b103      	cbz	r3, 8007c58 <_fstat_r+0x1c>
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	bd38      	pop	{r3, r4, r5, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20004460 	.word	0x20004460

08007c60 <_isatty_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4d06      	ldr	r5, [pc, #24]	; (8007c7c <_isatty_r+0x1c>)
 8007c64:	2300      	movs	r3, #0
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7f9 fd37 	bl	80016de <_isatty>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_isatty_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_isatty_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20004460 	.word	0x20004460

08007c80 <__ascii_mbtowc>:
 8007c80:	b082      	sub	sp, #8
 8007c82:	b901      	cbnz	r1, 8007c86 <__ascii_mbtowc+0x6>
 8007c84:	a901      	add	r1, sp, #4
 8007c86:	b142      	cbz	r2, 8007c9a <__ascii_mbtowc+0x1a>
 8007c88:	b14b      	cbz	r3, 8007c9e <__ascii_mbtowc+0x1e>
 8007c8a:	7813      	ldrb	r3, [r2, #0]
 8007c8c:	600b      	str	r3, [r1, #0]
 8007c8e:	7812      	ldrb	r2, [r2, #0]
 8007c90:	1e10      	subs	r0, r2, #0
 8007c92:	bf18      	it	ne
 8007c94:	2001      	movne	r0, #1
 8007c96:	b002      	add	sp, #8
 8007c98:	4770      	bx	lr
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	e7fb      	b.n	8007c96 <__ascii_mbtowc+0x16>
 8007c9e:	f06f 0001 	mvn.w	r0, #1
 8007ca2:	e7f8      	b.n	8007c96 <__ascii_mbtowc+0x16>

08007ca4 <__ascii_wctomb>:
 8007ca4:	b149      	cbz	r1, 8007cba <__ascii_wctomb+0x16>
 8007ca6:	2aff      	cmp	r2, #255	; 0xff
 8007ca8:	bf85      	ittet	hi
 8007caa:	238a      	movhi	r3, #138	; 0x8a
 8007cac:	6003      	strhi	r3, [r0, #0]
 8007cae:	700a      	strbls	r2, [r1, #0]
 8007cb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cb4:	bf98      	it	ls
 8007cb6:	2001      	movls	r0, #1
 8007cb8:	4770      	bx	lr
 8007cba:	4608      	mov	r0, r1
 8007cbc:	4770      	bx	lr

08007cbe <abort>:
 8007cbe:	b508      	push	{r3, lr}
 8007cc0:	2006      	movs	r0, #6
 8007cc2:	f000 f82b 	bl	8007d1c <raise>
 8007cc6:	2001      	movs	r0, #1
 8007cc8:	f7f9 fcaa 	bl	8001620 <_exit>

08007ccc <_raise_r>:
 8007ccc:	291f      	cmp	r1, #31
 8007cce:	b538      	push	{r3, r4, r5, lr}
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	d904      	bls.n	8007ce0 <_raise_r+0x14>
 8007cd6:	2316      	movs	r3, #22
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	f04f 30ff 	mov.w	r0, #4294967295
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ce2:	b112      	cbz	r2, 8007cea <_raise_r+0x1e>
 8007ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ce8:	b94b      	cbnz	r3, 8007cfe <_raise_r+0x32>
 8007cea:	4620      	mov	r0, r4
 8007cec:	f000 f830 	bl	8007d50 <_getpid_r>
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	4601      	mov	r1, r0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cfa:	f000 b817 	b.w	8007d2c <_kill_r>
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d00a      	beq.n	8007d18 <_raise_r+0x4c>
 8007d02:	1c59      	adds	r1, r3, #1
 8007d04:	d103      	bne.n	8007d0e <_raise_r+0x42>
 8007d06:	2316      	movs	r3, #22
 8007d08:	6003      	str	r3, [r0, #0]
 8007d0a:	2001      	movs	r0, #1
 8007d0c:	e7e7      	b.n	8007cde <_raise_r+0x12>
 8007d0e:	2400      	movs	r4, #0
 8007d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d14:	4628      	mov	r0, r5
 8007d16:	4798      	blx	r3
 8007d18:	2000      	movs	r0, #0
 8007d1a:	e7e0      	b.n	8007cde <_raise_r+0x12>

08007d1c <raise>:
 8007d1c:	4b02      	ldr	r3, [pc, #8]	; (8007d28 <raise+0xc>)
 8007d1e:	4601      	mov	r1, r0
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	f7ff bfd3 	b.w	8007ccc <_raise_r>
 8007d26:	bf00      	nop
 8007d28:	20000010 	.word	0x20000010

08007d2c <_kill_r>:
 8007d2c:	b538      	push	{r3, r4, r5, lr}
 8007d2e:	4d07      	ldr	r5, [pc, #28]	; (8007d4c <_kill_r+0x20>)
 8007d30:	2300      	movs	r3, #0
 8007d32:	4604      	mov	r4, r0
 8007d34:	4608      	mov	r0, r1
 8007d36:	4611      	mov	r1, r2
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	f7f9 fc61 	bl	8001600 <_kill>
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	d102      	bne.n	8007d48 <_kill_r+0x1c>
 8007d42:	682b      	ldr	r3, [r5, #0]
 8007d44:	b103      	cbz	r3, 8007d48 <_kill_r+0x1c>
 8007d46:	6023      	str	r3, [r4, #0]
 8007d48:	bd38      	pop	{r3, r4, r5, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20004460 	.word	0x20004460

08007d50 <_getpid_r>:
 8007d50:	f7f9 bc4e 	b.w	80015f0 <_getpid>

08007d54 <_init>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr

08007d60 <_fini>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	bf00      	nop
 8007d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d66:	bc08      	pop	{r3}
 8007d68:	469e      	mov	lr, r3
 8007d6a:	4770      	bx	lr
