
499Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000199c  0800a4d0  0800a4d0  0001a4d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be6c  0800be6c  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be74  0800be74  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800be7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000290  0800c10c  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800c10c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013570  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033bc  00000000  00000000  00033830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00036bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00037e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001804f  00000000  00000000  00038f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181f0  00000000  00000000  00050f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084482  00000000  00000000  00069187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed609  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  000ed65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4b4 	.word	0x0800a4b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	0800a4b4 	.word	0x0800a4b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Controller_Init>:
#include "Control.h"

// Initialize controller terms to 0 for first output calcs
void Controller_Init(PIController *sys)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	// Define controller variables
	sys->integrator = 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
	sys->prev_error = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
	sys->prev_meas = 0.0f;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
	sys->out = 0.0f;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <Controller_Update>:

// Calculate controller output and update stored values
float Controller_Update(PIController *sys, float setpoint, float measurement)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fcc:	edc7 0a01 	vstr	s1, [r7, #4]

	float error, proportional;

	// Find error signal
	error = setpoint - measurement;
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate proportional term
	proportional = sys->Kp * error;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate integral term
	sys->integrator = sys->integrator + 0.5f * sys->Ki * sys->T * (error + sys->prev_error);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	ed93 7a07 	vldr	s14, [r3, #28]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001002:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edd3 7a06 	vldr	s15, [r3, #24]
 800100c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	ed93 6a08 	vldr	s12, [r3, #32]
 8001016:	edd7 7a05 	vldr	s15, [r7, #20]
 800101a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edc3 7a07 	vstr	s15, [r3, #28]

	// Clamp integral term (saturating)
	if (sys->integrator > sys->lim_max_int) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	edd3 7a03 	vldr	s15, [r3, #12]
 8001038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	dd04      	ble.n	800104c <Controller_Update+0x8c>

		sys->integrator = sys->lim_max_int;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	61da      	str	r2, [r3, #28]
 800104a:	e00e      	b.n	800106a <Controller_Update+0xaa>

	} else if (sys->integrator < sys->lim_min_int) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	edd3 7a02 	vldr	s15, [r3, #8]
 8001058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d503      	bpl.n	800106a <Controller_Update+0xaa>

		sys->integrator = sys->lim_min_int;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	61da      	str	r2, [r3, #28]
	}

	// Calculate controller output
	sys->out = proportional + sys->integrator;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001070:	edd7 7a04 	vldr	s15, [r7, #16]
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Clamp controller output (saturating)
	if (sys->out > sys->lim_max) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edd3 7a05 	vldr	s15, [r3, #20]
 800108a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd04      	ble.n	800109e <Controller_Update+0xde>

		sys->out = sys->lim_max;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
 800109c:	e00e      	b.n	80010bc <Controller_Update+0xfc>

	} else if (sys->out < sys->lim_min) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d503      	bpl.n	80010bc <Controller_Update+0xfc>

		sys->out = sys->lim_min;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28

	}

	// Update prev values for next iteration
	sys->prev_error = error;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	621a      	str	r2, [r3, #32]
	sys->prev_meas = measurement;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

	return sys->out;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	ee07 3a90 	vmov	s15, r3

}
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f0:	2201      	movs	r2, #1
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <DEV_SPI_WRite+0x20>)
 80010f4:	f005 f899 	bl	800622a <HAL_SPI_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000035c 	.word	0x2000035c

08001104 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <DEV_Module_Init+0x28>)
 800110e:	f003 f8b7 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <DEV_Module_Init+0x28>)
 8001118:	f003 f8b2 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DEV_Module_Init+0x28>)
 8001122:	f003 f8ad 	bl	8004280 <HAL_GPIO_WritePin>
//    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020000 	.word	0x40020000

08001130 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <Paint_NewImage+0x90>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001154:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <Paint_NewImage+0x90>)
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <Paint_NewImage+0x90>)
 800115c:	883b      	ldrh	r3, [r7, #0]
 800115e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <Paint_NewImage+0x90>)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <Paint_NewImage+0x90>)
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <Paint_NewImage+0x90>)
 800116e:	8a5b      	ldrh	r3, [r3, #18]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <Paint_NewImage+0x90>)
 8001176:	8a9b      	ldrh	r3, [r3, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <Paint_NewImage+0x94>)
 800117e:	f006 ffff 	bl	8008180 <iprintf>
   
    Paint.Rotate = Rotate;
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <Paint_NewImage+0x90>)
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <Paint_NewImage+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <Paint_NewImage+0x6a>
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	2bb4      	cmp	r3, #180	; 0xb4
 8001198:	d106      	bne.n	80011a8 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <Paint_NewImage+0x90>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <Paint_NewImage+0x90>)
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	80d3      	strh	r3, [r2, #6]
 80011a6:	e006      	b.n	80011b6 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <Paint_NewImage+0x90>)
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <Paint_NewImage+0x90>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	80d3      	strh	r3, [r2, #6]
    }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002ac 	.word	0x200002ac
 80011c4:	0800a4d0 	.word	0x0800a4d0

080011c8 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <Paint_SetClearFuntion+0x1c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002c8 	.word	0x200002c8

080011e8 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <Paint_SetDisplayFuntion+0x1c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200002c4 	.word	0x200002c4

08001208 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800121a:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <Paint_SetPixel+0x150>)
 800121c:	889b      	ldrh	r3, [r3, #4]
 800121e:	b29b      	uxth	r3, r3
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	429a      	cmp	r2, r3
 8001224:	f200 808d 	bhi.w	8001342 <Paint_SetPixel+0x13a>
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <Paint_SetPixel+0x150>)
 800122a:	88db      	ldrh	r3, [r3, #6]
 800122c:	b29b      	uxth	r3, r3
 800122e:	88ba      	ldrh	r2, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	f200 8086 	bhi.w	8001342 <Paint_SetPixel+0x13a>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <Paint_SetPixel+0x150>)
 8001238:	89db      	ldrh	r3, [r3, #14]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001240:	d02c      	beq.n	800129c <Paint_SetPixel+0x94>
 8001242:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001246:	dc7e      	bgt.n	8001346 <Paint_SetPixel+0x13e>
 8001248:	2bb4      	cmp	r3, #180	; 0xb4
 800124a:	d016      	beq.n	800127a <Paint_SetPixel+0x72>
 800124c:	2bb4      	cmp	r3, #180	; 0xb4
 800124e:	dc7a      	bgt.n	8001346 <Paint_SetPixel+0x13e>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <Paint_SetPixel+0x52>
 8001254:	2b5a      	cmp	r3, #90	; 0x5a
 8001256:	d005      	beq.n	8001264 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8001258:	e075      	b.n	8001346 <Paint_SetPixel+0x13e>
        X = Xpoint;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	81bb      	strh	r3, [r7, #12]
        break;
 8001262:	e026      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <Paint_SetPixel+0x150>)
 8001266:	891b      	ldrh	r3, [r3, #8]
 8001268:	b29a      	uxth	r2, r3
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	81bb      	strh	r3, [r7, #12]
        break;
 8001278:	e01b      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <Paint_SetPixel+0x150>)
 800127c:	891b      	ldrh	r3, [r3, #8]
 800127e:	b29a      	uxth	r2, r3
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <Paint_SetPixel+0x150>)
 800128c:	895b      	ldrh	r3, [r3, #10]
 800128e:	b29a      	uxth	r2, r3
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	81bb      	strh	r3, [r7, #12]
        break;
 800129a:	e00a      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Ypoint;
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <Paint_SetPixel+0x150>)
 80012a2:	895b      	ldrh	r3, [r3, #10]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	81bb      	strh	r3, [r7, #12]
        break;
 80012b0:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <Paint_SetPixel+0x150>)
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d846      	bhi.n	800134a <Paint_SetPixel+0x142>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <Paint_SetPixel+0xbc>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	0800131b 	.word	0x0800131b
 80012c8:	080012d5 	.word	0x080012d5
 80012cc:	080012e7 	.word	0x080012e7
 80012d0:	080012f9 	.word	0x080012f9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <Paint_SetPixel+0x150>)
 80012d6:	891b      	ldrh	r3, [r3, #8]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3b01      	subs	r3, #1
 80012e2:	81fb      	strh	r3, [r7, #14]
        break;
 80012e4:	e01a      	b.n	800131c <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <Paint_SetPixel+0x150>)
 80012e8:	895b      	ldrh	r3, [r3, #10]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	81bb      	strh	r3, [r7, #12]
        break;
 80012f6:	e011      	b.n	800131c <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Paint_SetPixel+0x150>)
 80012fa:	891b      	ldrh	r3, [r3, #8]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <Paint_SetPixel+0x150>)
 800130a:	895b      	ldrh	r3, [r3, #10]
 800130c:	b29a      	uxth	r2, r3
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	81bb      	strh	r3, [r7, #12]
        break;
 8001318:	e000      	b.n	800131c <Paint_SetPixel+0x114>
        break;
 800131a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <Paint_SetPixel+0x150>)
 800131e:	891b      	ldrh	r3, [r3, #8]
 8001320:	b29b      	uxth	r3, r3
 8001322:	89fa      	ldrh	r2, [r7, #14]
 8001324:	429a      	cmp	r2, r3
 8001326:	d812      	bhi.n	800134e <Paint_SetPixel+0x146>
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <Paint_SetPixel+0x150>)
 800132a:	895b      	ldrh	r3, [r3, #10]
 800132c:	b29b      	uxth	r3, r3
 800132e:	89ba      	ldrh	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d80c      	bhi.n	800134e <Paint_SetPixel+0x146>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <Paint_SetPixel+0x154>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	89b9      	ldrh	r1, [r7, #12]
 800133c:	89f8      	ldrh	r0, [r7, #14]
 800133e:	4798      	blx	r3
 8001340:	e006      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 8001342:	bf00      	nop
 8001344:	e004      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 8001346:	bf00      	nop
 8001348:	e002      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 800134a:	bf00      	nop
 800134c:	e000      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 800134e:	bf00      	nop
}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002ac 	.word	0x200002ac
 800135c:	200002c4 	.word	0x200002c4

08001360 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	e012      	b.n	80013aa <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	81fb      	strh	r3, [r7, #14]
 8001388:	e008      	b.n	800139c <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 800138a:	8c3a      	ldrh	r2, [r7, #32]
 800138c:	89b9      	ldrh	r1, [r7, #12]
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff39 	bl	8001208 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3f2      	bcc.n	800138a <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 80013a4:	89bb      	ldrh	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	81bb      	strh	r3, [r7, #12]
 80013aa:	89ba      	ldrh	r2, [r7, #12]
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3e8      	bcc.n	8001384 <Paint_ClearWindows+0x24>
        }
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <Paint_DrawPoint+0x12c>)
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	88fa      	ldrh	r2, [r7, #6]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d87b      	bhi.n	80014de <Paint_DrawPoint+0x122>
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <Paint_DrawPoint+0x12c>)
 80013e8:	88db      	ldrh	r3, [r3, #6]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d875      	bhi.n	80014de <Paint_DrawPoint+0x122>
//        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 80013f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d144      	bne.n	8001484 <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	81fb      	strh	r3, [r7, #14]
 80013fe:	e039      	b.n	8001474 <Paint_DrawPoint+0xb8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001400:	2300      	movs	r3, #0
 8001402:	81bb      	strh	r3, [r7, #12]
 8001404:	e029      	b.n	800145a <Paint_DrawPoint+0x9e>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140c:	441a      	add	r2, r3
 800140e:	787b      	ldrb	r3, [r7, #1]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	db28      	blt.n	8001468 <Paint_DrawPoint+0xac>
 8001416:	88ba      	ldrh	r2, [r7, #4]
 8001418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141c:	441a      	add	r2, r3
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	db20      	blt.n	8001468 <Paint_DrawPoint+0xac>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001426:	89fa      	ldrh	r2, [r7, #14]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4413      	add	r3, r2
 800142c:	b29a      	uxth	r2, r3
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	b29b      	uxth	r3, r3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b298      	uxth	r0, r3
 8001436:	89ba      	ldrh	r2, [r7, #12]
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	b29a      	uxth	r2, r3
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	b29b      	uxth	r3, r3
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fedd 	bl	8001208 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800144e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	81bb      	strh	r3, [r7, #12]
 800145a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	429a      	cmp	r2, r3
 8001466:	dbce      	blt.n	8001406 <Paint_DrawPoint+0x4a>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146c:	b29b      	uxth	r3, r3
 800146e:	3301      	adds	r3, #1
 8001470:	b29b      	uxth	r3, r3
 8001472:	81fb      	strh	r3, [r7, #14]
 8001474:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	3b01      	subs	r3, #1
 800147e:	429a      	cmp	r2, r3
 8001480:	dbbe      	blt.n	8001400 <Paint_DrawPoint+0x44>
 8001482:	e02d      	b.n	80014e0 <Paint_DrawPoint+0x124>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001484:	2300      	movs	r3, #0
 8001486:	81fb      	strh	r3, [r7, #14]
 8001488:	e023      	b.n	80014d2 <Paint_DrawPoint+0x116>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800148a:	2300      	movs	r3, #0
 800148c:	81bb      	strh	r3, [r7, #12]
 800148e:	e015      	b.n	80014bc <Paint_DrawPoint+0x100>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001490:	89fa      	ldrh	r2, [r7, #14]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b298      	uxth	r0, r3
 800149c:	89ba      	ldrh	r2, [r7, #12]
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	887a      	ldrh	r2, [r7, #2]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff feac 	bl	8001208 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80014b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	81bb      	strh	r3, [r7, #12]
 80014bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbe4      	blt.n	8001490 <Paint_DrawPoint+0xd4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80014c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	81fb      	strh	r3, [r7, #14]
 80014d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d6:	787b      	ldrb	r3, [r7, #1]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbd6      	blt.n	800148a <Paint_DrawPoint+0xce>
 80014dc:	e000      	b.n	80014e0 <Paint_DrawPoint+0x124>
        return;
 80014de:	bf00      	nop
            }
        }
    }
}
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002ac 	.word	0x200002ac

080014ec <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08d      	sub	sp, #52	; 0x34
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	80fb      	strh	r3, [r7, #6]
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <Paint_DrawLine+0x154>)
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	b29b      	uxth	r3, r3
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	429a      	cmp	r2, r3
 8001514:	f200 808c 	bhi.w	8001630 <Paint_DrawLine+0x144>
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <Paint_DrawLine+0x154>)
 800151a:	88db      	ldrh	r3, [r3, #6]
 800151c:	b29b      	uxth	r3, r3
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	f200 8085 	bhi.w	8001630 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <Paint_DrawLine+0x154>)
 8001528:	889b      	ldrh	r3, [r3, #4]
 800152a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	429a      	cmp	r2, r3
 8001530:	d87e      	bhi.n	8001630 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <Paint_DrawLine+0x154>)
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	b29b      	uxth	r3, r3
 8001538:	883a      	ldrh	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d878      	bhi.n	8001630 <Paint_DrawLine+0x144>
//        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	bfb8      	it	lt
 8001550:	425b      	neglt	r3, r3
 8001552:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001554:	883a      	ldrh	r2, [r7, #0]
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	bfb8      	it	lt
 800155e:	425b      	neglt	r3, r3
 8001560:	425b      	negs	r3, r3
 8001562:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	429a      	cmp	r2, r3
 800156a:	d201      	bcs.n	8001570 <Paint_DrawLine+0x84>
 800156c:	2301      	movs	r3, #1
 800156e:	e001      	b.n	8001574 <Paint_DrawLine+0x88>
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d201      	bcs.n	8001582 <Paint_DrawLine+0x96>
 800157e:	2301      	movs	r3, #1
 8001580:	e001      	b.n	8001586 <Paint_DrawLine+0x9a>
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	3301      	adds	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800159a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d118      	bne.n	80015d4 <Paint_DrawLine+0xe8>
 80015a2:	7ffa      	ldrb	r2, [r7, #31]
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <Paint_DrawLine+0x158>)
 80015a6:	fba3 1302 	umull	r1, r3, r3, r2
 80015aa:	0859      	lsrs	r1, r3, #1
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <Paint_DrawLine+0xe8>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80015ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015be:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015c0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80015c2:	2201      	movs	r2, #1
 80015c4:	9200      	str	r2, [sp, #0]
 80015c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ca:	f7ff fef7 	bl	80013bc <Paint_DrawPoint>
            Dotted_Len = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	77fb      	strb	r3, [r7, #31]
 80015d2:	e008      	b.n	80015e6 <Paint_DrawLine+0xfa>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80015d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80015da:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015dc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80015de:	2401      	movs	r4, #1
 80015e0:	9400      	str	r4, [sp, #0]
 80015e2:	f7ff feeb 	bl	80013bc <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dc0c      	bgt.n	800160a <Paint_DrawLine+0x11e>
            if (Xpoint == Xend)
 80015f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d01d      	beq.n	8001634 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001606:	4413      	add	r3, r2
 8001608:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbbf      	blt.n	8001594 <Paint_DrawLine+0xa8>
            if (Ypoint == Yend)
 8001614:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001616:	883b      	ldrh	r3, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d00d      	beq.n	8001638 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4413      	add	r3, r2
 8001622:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	b29a      	uxth	r2, r3
 8001628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800162a:	4413      	add	r3, r2
 800162c:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800162e:	e7b1      	b.n	8001594 <Paint_DrawLine+0xa8>
        return;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <Paint_DrawLine+0x14e>
                break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <Paint_DrawLine+0x14e>
                break;
 8001638:	bf00      	nop
        }
    }
}
 800163a:	372c      	adds	r7, #44	; 0x2c
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	200002ac 	.word	0x200002ac
 8001644:	aaaaaaab 	.word	0xaaaaaaab

08001648 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4603      	mov	r3, r0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	460b      	mov	r3, r1
 8001656:	81bb      	strh	r3, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <Paint_DrawChar+0x150>)
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	b29b      	uxth	r3, r3
 8001662:	89fa      	ldrh	r2, [r7, #14]
 8001664:	429a      	cmp	r2, r3
 8001666:	f200 8092 	bhi.w	800178e <Paint_DrawChar+0x146>
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <Paint_DrawChar+0x150>)
 800166c:	88db      	ldrh	r3, [r3, #6]
 800166e:	b29b      	uxth	r3, r3
 8001670:	89ba      	ldrh	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	f200 808b 	bhi.w	800178e <Paint_DrawChar+0x146>
//        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	3b20      	subs	r3, #32
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	88d2      	ldrh	r2, [r2, #6]
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	8892      	ldrh	r2, [r2, #4]
 8001688:	08d2      	lsrs	r2, r2, #3
 800168a:	b292      	uxth	r2, r2
 800168c:	4611      	mov	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	8892      	ldrh	r2, [r2, #4]
 8001692:	f002 0207 	and.w	r2, r2, #7
 8001696:	b292      	uxth	r2, r2
 8001698:	2a00      	cmp	r2, #0
 800169a:	bf14      	ite	ne
 800169c:	2201      	movne	r2, #1
 800169e:	2200      	moveq	r2, #0
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440a      	add	r2, r1
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	83fb      	strh	r3, [r7, #30]
 80016b8:	e063      	b.n	8001782 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	83bb      	strh	r3, [r7, #28]
 80016be:	e04e      	b.n	800175e <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80016c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d118      	bne.n	80016fc <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	fa42 f303 	asr.w	r3, r2, r3
 80016dc:	400b      	ands	r3, r1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d031      	beq.n	8001746 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	8bbb      	ldrh	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	b298      	uxth	r0, r3
 80016ea:	89ba      	ldrh	r2, [r7, #12]
 80016ec:	8bfb      	ldrh	r3, [r7, #30]
 80016ee:	4413      	add	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fd87 	bl	8001208 <Paint_SetPixel>
 80016fa:	e024      	b.n	8001746 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	8bbb      	ldrh	r3, [r7, #28]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	fa42 f303 	asr.w	r3, r2, r3
 800170e:	400b      	ands	r3, r1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001714:	89fa      	ldrh	r2, [r7, #14]
 8001716:	8bbb      	ldrh	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	b298      	uxth	r0, r3
 800171c:	89ba      	ldrh	r2, [r7, #12]
 800171e:	8bfb      	ldrh	r3, [r7, #30]
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fd6e 	bl	8001208 <Paint_SetPixel>
 800172c:	e00b      	b.n	8001746 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800172e:	89fa      	ldrh	r2, [r7, #14]
 8001730:	8bbb      	ldrh	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	b298      	uxth	r0, r3
 8001736:	89ba      	ldrh	r2, [r7, #12]
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fd61 	bl	8001208 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001746:	8bbb      	ldrh	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b07      	cmp	r3, #7
 8001750:	d102      	bne.n	8001758 <Paint_DrawChar+0x110>
                ptr++;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3301      	adds	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001758:	8bbb      	ldrh	r3, [r7, #28]
 800175a:	3301      	adds	r3, #1
 800175c:	83bb      	strh	r3, [r7, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	8bba      	ldrh	r2, [r7, #28]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3ab      	bcc.n	80016c0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	889b      	ldrh	r3, [r3, #4]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <Paint_DrawChar+0x134>
            ptr++;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	3301      	adds	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800177c:	8bfb      	ldrh	r3, [r7, #30]
 800177e:	3301      	adds	r3, #1
 8001780:	83fb      	strh	r3, [r7, #30]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	8bfa      	ldrh	r2, [r7, #30]
 8001788:	429a      	cmp	r2, r3
 800178a:	d396      	bcc.n	80016ba <Paint_DrawChar+0x72>
 800178c:	e000      	b.n	8001790 <Paint_DrawChar+0x148>
        return;
 800178e:	bf00      	nop
    }// Write all
}
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002ac 	.word	0x200002ac

0800179c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4603      	mov	r3, r0
 80017a8:	81fb      	strh	r3, [r7, #14]
 80017aa:	460b      	mov	r3, r1
 80017ac:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017b8:	889b      	ldrh	r3, [r3, #4]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	89fa      	ldrh	r2, [r7, #14]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d83b      	bhi.n	800183a <Paint_DrawString_EN+0x9e>
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017c4:	88db      	ldrh	r3, [r3, #6]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	89ba      	ldrh	r2, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d835      	bhi.n	800183a <Paint_DrawString_EN+0x9e>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 80017ce:	e02f      	b.n	8001830 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	8892      	ldrh	r2, [r2, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017da:	8892      	ldrh	r2, [r2, #4]
 80017dc:	b292      	uxth	r2, r2
 80017de:	4293      	cmp	r3, r2
 80017e0:	dd06      	ble.n	80017f0 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	88da      	ldrh	r2, [r3, #6]
 80017ea:	8abb      	ldrh	r3, [r7, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80017f0:	8abb      	ldrh	r3, [r7, #20]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	88d2      	ldrh	r2, [r2, #6]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017fa:	88d2      	ldrh	r2, [r2, #6]
 80017fc:	b292      	uxth	r2, r2
 80017fe:	4293      	cmp	r3, r2
 8001800:	dd03      	ble.n	800180a <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	8ab9      	ldrh	r1, [r7, #20]
 8001810:	8af8      	ldrh	r0, [r7, #22]
 8001812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	8c3b      	ldrh	r3, [r7, #32]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f7ff ff14 	bl	8001648 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	889a      	ldrh	r2, [r3, #4]
 800182a:	8afb      	ldrh	r3, [r7, #22]
 800182c:	4413      	add	r3, r2
 800182e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1cb      	bne.n	80017d0 <Paint_DrawString_EN+0x34>
 8001838:	e000      	b.n	800183c <Paint_DrawString_EN+0xa0>
        return;
 800183a:	bf00      	nop
    }
}
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002ac 	.word	0x200002ac

08001848 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800184c:	2201      	movs	r2, #1
 800184e:	2140      	movs	r1, #64	; 0x40
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <LCD_1IN8_Reset+0x38>)
 8001852:	f002 fd15 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001856:	2064      	movs	r0, #100	; 0x64
 8001858:	f002 fa50 	bl	8003cfc <HAL_Delay>
    LCD_1IN8_RST_0;
 800185c:	2200      	movs	r2, #0
 800185e:	2140      	movs	r1, #64	; 0x40
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <LCD_1IN8_Reset+0x38>)
 8001862:	f002 fd0d 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001866:	2064      	movs	r0, #100	; 0x64
 8001868:	f002 fa48 	bl	8003cfc <HAL_Delay>
    LCD_1IN8_RST_1;
 800186c:	2201      	movs	r2, #1
 800186e:	2140      	movs	r1, #64	; 0x40
 8001870:	4803      	ldr	r0, [pc, #12]	; (8001880 <LCD_1IN8_Reset+0x38>)
 8001872:	f002 fd05 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f002 fa40 	bl	8003cfc <HAL_Delay>
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40020000 	.word	0x40020000

08001884 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800188e:	2200      	movs	r2, #0
 8001890:	2110      	movs	r1, #16
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <LCD_1IN8_WriteReg+0x30>)
 8001894:	f002 fcf4 	bl	8004280 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8001898:	2200      	movs	r2, #0
 800189a:	2108      	movs	r1, #8
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <LCD_1IN8_WriteReg+0x30>)
 800189e:	f002 fcef 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fc1b 	bl	80010e0 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020000 	.word	0x40020000

080018b8 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 80018c2:	2201      	movs	r2, #1
 80018c4:	2110      	movs	r1, #16
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <LCD_1IN8_WriteData_8Bit+0x38>)
 80018c8:	f002 fcda 	bl	8004280 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 80018cc:	2200      	movs	r2, #0
 80018ce:	2108      	movs	r1, #8
 80018d0:	4807      	ldr	r0, [pc, #28]	; (80018f0 <LCD_1IN8_WriteData_8Bit+0x38>)
 80018d2:	f002 fcd5 	bl	8004280 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fc01 	bl	80010e0 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 80018de:	2201      	movs	r2, #1
 80018e0:	2108      	movs	r1, #8
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <LCD_1IN8_WriteData_8Bit+0x38>)
 80018e4:	f002 fccc 	bl	8004280 <HAL_GPIO_WritePin>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40020000 	.word	0x40020000

080018f4 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

static void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 8001900:	2201      	movs	r2, #1
 8001902:	2110      	movs	r1, #16
 8001904:	480e      	ldr	r0, [pc, #56]	; (8001940 <LCD_1IN8_WriteData_NLen16Bit+0x4c>)
 8001906:	f002 fcbb 	bl	8004280 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	e00e      	b.n	800192e <LCD_1IN8_WriteData_NLen16Bit+0x3a>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff fbe1 	bl	80010e0 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbdc 	bl	80010e0 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3ec      	bcc.n	8001910 <LCD_1IN8_WriteData_NLen16Bit+0x1c>
    }
    //LCD_1IN8_CS_1;
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40020000 	.word	0x40020000

08001944 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 8001948:	20b1      	movs	r0, #177	; 0xb1
 800194a:	f7ff ff9b 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ffb2 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001954:	202c      	movs	r0, #44	; 0x2c
 8001956:	f7ff ffaf 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800195a:	202d      	movs	r0, #45	; 0x2d
 800195c:	f7ff ffac 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 8001960:	20b2      	movs	r0, #178	; 0xb2
 8001962:	f7ff ff8f 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff ffa6 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800196c:	202c      	movs	r0, #44	; 0x2c
 800196e:	f7ff ffa3 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001972:	202d      	movs	r0, #45	; 0x2d
 8001974:	f7ff ffa0 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 8001978:	20b3      	movs	r0, #179	; 0xb3
 800197a:	f7ff ff83 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff ff9a 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001984:	202c      	movs	r0, #44	; 0x2c
 8001986:	f7ff ff97 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800198a:	202d      	movs	r0, #45	; 0x2d
 800198c:	f7ff ff94 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff ff91 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001996:	202c      	movs	r0, #44	; 0x2c
 8001998:	f7ff ff8e 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800199c:	202d      	movs	r0, #45	; 0x2d
 800199e:	f7ff ff8b 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 80019a2:	20b4      	movs	r0, #180	; 0xb4
 80019a4:	f7ff ff6e 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 80019a8:	2007      	movs	r0, #7
 80019aa:	f7ff ff85 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 80019ae:	20c0      	movs	r0, #192	; 0xc0
 80019b0:	f7ff ff68 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 80019b4:	20a2      	movs	r0, #162	; 0xa2
 80019b6:	f7ff ff7f 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80019ba:	2002      	movs	r0, #2
 80019bc:	f7ff ff7c 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 80019c0:	2084      	movs	r0, #132	; 0x84
 80019c2:	f7ff ff79 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 80019c6:	20c1      	movs	r0, #193	; 0xc1
 80019c8:	f7ff ff5c 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 80019cc:	20c5      	movs	r0, #197	; 0xc5
 80019ce:	f7ff ff73 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 80019d2:	20c2      	movs	r0, #194	; 0xc2
 80019d4:	f7ff ff56 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 80019d8:	200a      	movs	r0, #10
 80019da:	f7ff ff6d 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff ff6a 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 80019e4:	20c3      	movs	r0, #195	; 0xc3
 80019e6:	f7ff ff4d 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80019ea:	208a      	movs	r0, #138	; 0x8a
 80019ec:	f7ff ff64 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 80019f0:	202a      	movs	r0, #42	; 0x2a
 80019f2:	f7ff ff61 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 80019f6:	20c4      	movs	r0, #196	; 0xc4
 80019f8:	f7ff ff44 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80019fc:	208a      	movs	r0, #138	; 0x8a
 80019fe:	f7ff ff5b 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 8001a02:	20ee      	movs	r0, #238	; 0xee
 8001a04:	f7ff ff58 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8001a08:	20c5      	movs	r0, #197	; 0xc5
 8001a0a:	f7ff ff3b 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 8001a0e:	200e      	movs	r0, #14
 8001a10:	f7ff ff52 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8001a14:	20e0      	movs	r0, #224	; 0xe0
 8001a16:	f7ff ff35 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff ff4c 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 8001a20:	201a      	movs	r0, #26
 8001a22:	f7ff ff49 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f7ff ff46 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 8001a2c:	2018      	movs	r0, #24
 8001a2e:	f7ff ff43 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 8001a32:	202f      	movs	r0, #47	; 0x2f
 8001a34:	f7ff ff40 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 8001a38:	2028      	movs	r0, #40	; 0x28
 8001a3a:	f7ff ff3d 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f7ff ff3a 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 8001a44:	2022      	movs	r0, #34	; 0x22
 8001a46:	f7ff ff37 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 8001a4a:	201f      	movs	r0, #31
 8001a4c:	f7ff ff34 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8001a50:	201b      	movs	r0, #27
 8001a52:	f7ff ff31 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 8001a56:	2023      	movs	r0, #35	; 0x23
 8001a58:	f7ff ff2e 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 8001a5c:	2037      	movs	r0, #55	; 0x37
 8001a5e:	f7ff ff2b 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7ff ff28 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001a68:	2007      	movs	r0, #7
 8001a6a:	f7ff ff25 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff ff22 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001a74:	2010      	movs	r0, #16
 8001a76:	f7ff ff1f 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 8001a7a:	20e1      	movs	r0, #225	; 0xe1
 8001a7c:	f7ff ff02 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001a80:	200f      	movs	r0, #15
 8001a82:	f7ff ff19 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8001a86:	201b      	movs	r0, #27
 8001a88:	f7ff ff16 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001a8c:	200f      	movs	r0, #15
 8001a8e:	f7ff ff13 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 8001a92:	2017      	movs	r0, #23
 8001a94:	f7ff ff10 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8001a98:	2033      	movs	r0, #51	; 0x33
 8001a9a:	f7ff ff0d 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 8001a9e:	202c      	movs	r0, #44	; 0x2c
 8001aa0:	f7ff ff0a 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8001aa4:	2029      	movs	r0, #41	; 0x29
 8001aa6:	f7ff ff07 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 8001aaa:	202e      	movs	r0, #46	; 0x2e
 8001aac:	f7ff ff04 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001ab0:	2030      	movs	r0, #48	; 0x30
 8001ab2:	f7ff ff01 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001ab6:	2030      	movs	r0, #48	; 0x30
 8001ab8:	f7ff fefe 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 8001abc:	2039      	movs	r0, #57	; 0x39
 8001abe:	f7ff fefb 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 8001ac2:	203f      	movs	r0, #63	; 0x3f
 8001ac4:	f7ff fef8 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fef5 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001ace:	2007      	movs	r0, #7
 8001ad0:	f7ff fef2 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f7ff feef 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001ada:	2010      	movs	r0, #16
 8001adc:	f7ff feec 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 8001ae0:	20f0      	movs	r0, #240	; 0xf0
 8001ae2:	f7ff fecf 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fee6 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 8001aec:	20f6      	movs	r0, #246	; 0xf6
 8001aee:	f7ff fec9 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff fee0 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8001af8:	203a      	movs	r0, #58	; 0x3a
 8001afa:	f7ff fec3 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 8001afe:	2005      	movs	r0, #5
 8001b00:	f7ff feda 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 8001b12:	4a34      	ldr	r2, [pc, #208]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <LCD_1IN8_SetGramScanWay+0x28>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d005      	beq.n	8001b30 <LCD_1IN8_SetGramScanWay+0x28>
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d002      	beq.n	8001b30 <LCD_1IN8_SetGramScanWay+0x28>
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d10c      	bne.n	8001b4a <LCD_1IN8_SetGramScanWay+0x42>
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;		
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b38:	22a0      	movs	r2, #160	; 0xa0
 8001b3a:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b3e:	2202      	movs	r2, #2
 8001b40:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 8001b42:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	811a      	strh	r2, [r3, #8]
 8001b48:	e00b      	b.n	8001b62 <LCD_1IN8_SetGramScanWay+0x5a>
	}else{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b4c:	22a0      	movs	r2, #160	; 0xa0
 8001b4e:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 8001b62:	2300      	movs	r3, #0
 8001b64:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	2b07      	cmp	r3, #7
 8001b6a:	d82b      	bhi.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <LCD_1IN8_SetGramScanWay+0x6c>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b95 	.word	0x08001b95
 8001b78:	08001b9b 	.word	0x08001b9b
 8001b7c:	08001ba1 	.word	0x08001ba1
 8001b80:	08001ba7 	.word	0x08001ba7
 8001b84:	08001bad 	.word	0x08001bad
 8001b88:	08001bb3 	.word	0x08001bb3
 8001b8c:	08001bb9 	.word	0x08001bb9
 8001b90:	08001bbf 	.word	0x08001bbf
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8001b94:	2300      	movs	r3, #0
 8001b96:	81fb      	strh	r3, [r7, #14]
        break;
 8001b98:	e014      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	81fb      	strh	r3, [r7, #14]
        break;
 8001b9e:	e011      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	81fb      	strh	r3, [r7, #14]
        break;
 8001ba4:	e00e      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	81fb      	strh	r3, [r7, #14]
        break;
 8001baa:	e00b      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8001bac:	2320      	movs	r3, #32
 8001bae:	81fb      	strh	r3, [r7, #14]
        break;
 8001bb0:	e008      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8001bb2:	2360      	movs	r3, #96	; 0x60
 8001bb4:	81fb      	strh	r3, [r7, #14]
        break;
 8001bb6:	e005      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8001bb8:	23a0      	movs	r3, #160	; 0xa0
 8001bba:	81fb      	strh	r3, [r7, #14]
        break;
 8001bbc:	e002      	b.n	8001bc4 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8001bbe:	23e0      	movs	r3, #224	; 0xe0
 8001bc0:	81fb      	strh	r3, [r7, #14]
        break;
 8001bc2:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8001bc4:	2036      	movs	r0, #54	; 0x36
 8001bc6:	f7ff fe5d 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f023 0308 	bic.w	r3, r3, #8
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe6f 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

}
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200002cc 	.word	0x200002cc

08001be8 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 8001bf2:	f7ff fe29 	bl	8001848 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 8001bf6:	f7ff fea5 	bl	8001944 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff83 	bl	8001b08 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 8001c02:	20c8      	movs	r0, #200	; 0xc8
 8001c04:	f002 f87a 	bl	8003cfc <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8001c08:	2011      	movs	r0, #17
 8001c0a:	f7ff fe3b 	bl	8001884 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 8001c0e:	2078      	movs	r0, #120	; 0x78
 8001c10:	f002 f874 	bl	8003cfc <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8001c14:	2029      	movs	r0, #41	; 0x29
 8001c16:	f7ff fe35 	bl	8001884 <LCD_1IN8_WriteReg>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	4608      	mov	r0, r1
 8001c2e:	4611      	mov	r1, r2
 8001c30:	461a      	mov	r2, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	80fb      	strh	r3, [r7, #6]
 8001c36:	4603      	mov	r3, r0
 8001c38:	80bb      	strh	r3, [r7, #4]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	807b      	strh	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 8001c42:	202a      	movs	r0, #42	; 0x2a
 8001c44:	f7ff fe1e 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fe35 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <LCD_1IN8_SetWindows+0xa8>)
 8001c54:	88db      	ldrh	r3, [r3, #6]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe2b 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8001c62:	2000      	movs	r0, #0
 8001c64:	f7ff fe28 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <LCD_1IN8_SetWindows+0xa8>)
 8001c6e:	88db      	ldrh	r3, [r3, #6]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fe1c 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8001c80:	202b      	movs	r0, #43	; 0x2b
 8001c82:	f7ff fdff 	bl	8001884 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fe16 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001c8c:	88bb      	ldrh	r3, [r7, #4]
 8001c8e:	b2da      	uxtb	r2, r3
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <LCD_1IN8_SetWindows+0xa8>)
 8001c92:	891b      	ldrh	r3, [r3, #8]
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fe0c 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7ff fe09 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001ca6:	883b      	ldrh	r3, [r7, #0]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <LCD_1IN8_SetWindows+0xa8>)
 8001cac:	891b      	ldrh	r3, [r3, #8]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fdfd 	bl	80018b8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8001cbe:	202c      	movs	r0, #44	; 0x2c
 8001cc0:	f7ff fde0 	bl	8001884 <LCD_1IN8_WriteReg>

}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd90      	pop	{r4, r7, pc}
 8001ccc:	200002cc 	.word	0x200002cc

08001cd0 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	80fb      	strh	r3, [r7, #6]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	88fa      	ldrh	r2, [r7, #6]
 8001ce4:	88b9      	ldrh	r1, [r7, #4]
 8001ce6:	88f8      	ldrh	r0, [r7, #6]
 8001ce8:	f7ff ff9c 	bl	8001c24 <LCD_1IN8_SetWindows>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	80bb      	strh	r3, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8001d06:	88bb      	ldrh	r3, [r7, #4]
 8001d08:	887a      	ldrh	r2, [r7, #2]
 8001d0a:	fb03 f202 	mul.w	r2, r3, r2
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	4611      	mov	r1, r2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fdee 	bl	80018f4 <LCD_1IN8_WriteData_NLen16Bit>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	80fb      	strh	r3, [r7, #6]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	80bb      	strh	r3, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) ) {
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <LCD_1IN8_DrawPaint+0x48>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d810      	bhi.n	8001d5e <LCD_1IN8_DrawPaint+0x3e>
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <LCD_1IN8_DrawPaint+0x48>)
 8001d3e:	885b      	ldrh	r3, [r3, #2]
 8001d40:	88ba      	ldrh	r2, [r7, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d80b      	bhi.n	8001d5e <LCD_1IN8_DrawPaint+0x3e>
        LCD_1IN8_SetCursor (Xpoint, Ypoint);
 8001d46:	88ba      	ldrh	r2, [r7, #4]
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ffbf 	bl	8001cd0 <LCD_1IN8_SetCursor>
        LCD_1IN8_SetColor ( Color , 1 , 1);
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	2201      	movs	r2, #1
 8001d56:	2101      	movs	r1, #1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ffcb 	bl	8001cf4 <LCD_1IN8_SetColor>
    }
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200002cc 	.word	0x200002cc

08001d6c <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, LCD_1IN8_WIDTH, LCD_1IN8_HEIGHT);
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	22a0      	movs	r2, #160	; 0xa0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ff51 	bl	8001c24 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8001d82:	2201      	movs	r2, #1
 8001d84:	2110      	movs	r1, #16
 8001d86:	4813      	ldr	r0, [pc, #76]	; (8001dd4 <LCD_1IN8_Clear+0x68>)
 8001d88:	f002 fa7a 	bl	8004280 <HAL_GPIO_WritePin>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	81fb      	strh	r3, [r7, #14]
 8001d90:	e017      	b.n	8001dc2 <LCD_1IN8_Clear+0x56>
	{
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	81bb      	strh	r3, [r7, #12]
 8001d96:	e00e      	b.n	8001db6 <LCD_1IN8_Clear+0x4a>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f99f 	bl	80010e0 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	0a1b      	lsrs	r3, r3, #8
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f998 	bl	80010e0 <DEV_SPI_WRite>
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001db0:	89bb      	ldrh	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	81bb      	strh	r3, [r7, #12]
 8001db6:	89bb      	ldrh	r3, [r7, #12]
 8001db8:	2b9f      	cmp	r3, #159	; 0x9f
 8001dba:	d9ed      	bls.n	8001d98 <LCD_1IN8_Clear+0x2c>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	81fb      	strh	r3, [r7, #14]
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8001dc6:	d9e4      	bls.n	8001d92 <LCD_1IN8_Clear+0x26>
			
		}
	}
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <LCD_updt_temps>:
char set_preh_time_BUFFER[]=	{' ',' ','1','.','0','6','\0'};

/*
 *  Update measured temperatures
 */
void LCD_updt_temps(volatile float *cur_plt_tmp, volatile float *cur_amb_tmp){
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	LCD_data.CUR_PLT_TMP= *cur_plt_tmp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <LCD_updt_temps+0x28>)
 8001de8:	6153      	str	r3, [r2, #20]
	LCD_data.CUR_AMB_TMP= *cur_amb_tmp;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <LCD_updt_temps+0x28>)
 8001df0:	6193      	str	r3, [r2, #24]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002d8 	.word	0x200002d8

08001e04 <LCD_usr_inputs>:

/*
 *  Update configurable variables
 */
void LCD_usr_inputs(volatile float* set_preheat_tmp, volatile float* set_preheat_tim,
					volatile float* set_reflow_tmp, volatile float* set_reflow_tim) {
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]

    LCD_data.SET_REFL_TMP = *set_reflow_tmp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <LCD_usr_inputs+0x3c>)
 8001e18:	6053      	str	r3, [r2, #4]
    LCD_data.SET_PRE_TMP = *set_preheat_tmp;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <LCD_usr_inputs+0x3c>)
 8001e20:	6093      	str	r3, [r2, #8]
    LCD_data.PREHEAT_TIME = *set_preheat_tim;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a06      	ldr	r2, [pc, #24]	; (8001e40 <LCD_usr_inputs+0x3c>)
 8001e28:	60d3      	str	r3, [r2, #12]
    LCD_data.REFLOW_TIME = *set_reflow_tim;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <LCD_usr_inputs+0x3c>)
 8001e30:	6113      	str	r3, [r2, #16]

}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200002d8 	.word	0x200002d8

08001e44 <LCD_init>:
}

/*
 * Initialize LCD with a black screen, and LCD_data
 */
void LCD_init(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
		//Power up LCD
		//HAL_GPIO_WritePin(DISP_DIS_GPIO_Port, DISP_DIS_Pin, 0);		//Power up LCD
		HAL_Delay(100);
 8001e48:	2064      	movs	r0, #100	; 0x64
 8001e4a:	f001 ff57 	bl	8003cfc <HAL_Delay>

		// Begin LCD Init
		DEV_Module_Init();
 8001e4e:	f7ff f959 	bl	8001104 <DEV_Module_Init>
		LCD_1IN8_Init(SCAN_DIR_DFT);
 8001e52:	2005      	movs	r0, #5
 8001e54:	f7ff fec8 	bl	8001be8 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7ff ff87 	bl	8001d6c <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	2200      	movs	r2, #0
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	20a0      	movs	r0, #160	; 0xa0
 8001e68:	f7ff f962 	bl	8001130 <Paint_NewImage>
		Paint_SetClearFuntion(LCD_1IN8_Clear);
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <LCD_init+0x70>)
 8001e6e:	f7ff f9ab 	bl	80011c8 <Paint_SetClearFuntion>
		Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8001e72:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <LCD_init+0x74>)
 8001e74:	f7ff f9b8 	bl	80011e8 <Paint_SetDisplayFuntion>

		LCD_data.CUR_AMB_TMP=255;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <LCD_init+0x78>)
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <LCD_init+0x7c>)
 8001e7c:	619a      	str	r2, [r3, #24]
		LCD_data.CUR_PLT_TMP=255;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <LCD_init+0x78>)
 8001e80:	4a0f      	ldr	r2, [pc, #60]	; (8001ec0 <LCD_init+0x7c>)
 8001e82:	615a      	str	r2, [r3, #20]
		LCD_data.SET_REFL_TMP=255;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <LCD_init+0x78>)
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <LCD_init+0x7c>)
 8001e88:	605a      	str	r2, [r3, #4]
		LCD_data.REFLOW_TIME=255;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <LCD_init+0x78>)
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <LCD_init+0x7c>)
 8001e8e:	611a      	str	r2, [r3, #16]
		LCD_data.SET_PRE_TMP=255;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <LCD_init+0x78>)
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LCD_init+0x7c>)
 8001e94:	609a      	str	r2, [r3, #8]
		LCD_data.REFLOW_TIME=255;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <LCD_init+0x78>)
 8001e98:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <LCD_init+0x7c>)
 8001e9a:	611a      	str	r2, [r3, #16]
		LCD_data.STATE=0;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <LCD_init+0x78>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	771a      	strb	r2, [r3, #28]
		LCD_data.flags=0;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <LCD_init+0x78>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	801a      	strh	r2, [r3, #0]

		LCD_Set_State(0);
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 fa13 	bl	80022d4 <LCD_Set_State>
	return;
 8001eae:	bf00      	nop
}
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	08001d6d 	.word	0x08001d6d
 8001eb8:	08001d21 	.word	0x08001d21
 8001ebc:	200002d8 	.word	0x200002d8
 8001ec0:	437f0000 	.word	0x437f0000

08001ec4 <LCD_Format>:

/*
 *  Format float as xxx.xx from x.xx/xx.xx/xxx.xx for display on LCD
 *  Returns 1 if successful 0 if failed to format
 */
uint8_t LCD_Format(char *string_ptr, float number){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	ed87 0a00 	vstr	s0, [r7]
	sprintf(string_ptr, "%.2f", number);
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f7fe fb59 	bl	8000588 <__aeabi_f2d>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	492c      	ldr	r1, [pc, #176]	; (8001f8c <LCD_Format+0xc8>)
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f006 f977 	bl	80081d0 <siprintf>
	char temp_buffer[]={' ',' ','x','.','x','x','\0'};
 8001ee2:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <LCD_Format+0xcc>)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eec:	6018      	str	r0, [r3, #0]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	8019      	strh	r1, [r3, #0]
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	0c0a      	lsrs	r2, r1, #16
 8001ef6:	701a      	strb	r2, [r3, #0]
	uint8_t temp_pos = 3;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	//Parse through elements
	for(i=0;i<(TEMP_RES+1);i++){
 8001efc:	2300      	movs	r3, #0
 8001efe:	75bb      	strb	r3, [r7, #22]
 8001f00:	e03c      	b.n	8001f7c <LCD_Format+0xb8>

		//Find the decimal
		if(*string_ptr=='.'){
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b2e      	cmp	r3, #46	; 0x2e
 8001f08:	d132      	bne.n	8001f70 <LCD_Format+0xac>

			//Next two digits are the ".xx"
			temp_buffer[4]=*(string_ptr+1);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	743b      	strb	r3, [r7, #16]
			temp_buffer[5]=*(string_ptr+2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	789b      	ldrb	r3, [r3, #2]
 8001f14:	747b      	strb	r3, [r7, #17]

			//Populate temp_buffer with correct stuff
			while(i>0){
 8001f16:	e00f      	b.n	8001f38 <LCD_Format+0x74>
				temp_pos--;
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	75fb      	strb	r3, [r7, #23]
				i--;
 8001f1e:	7dbb      	ldrb	r3, [r7, #22]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	75bb      	strb	r3, [r7, #22]
				string_ptr--;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	607b      	str	r3, [r7, #4]
				temp_buffer[temp_pos]=*(string_ptr);
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	7812      	ldrb	r2, [r2, #0]
 8001f30:	3318      	adds	r3, #24
 8001f32:	443b      	add	r3, r7
 8001f34:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while(i>0){
 8001f38:	7dbb      	ldrb	r3, [r7, #22]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1ec      	bne.n	8001f18 <LCD_Format+0x54>
			}

			//push all temp_buffer data into the string, just finna hard code
			*(string_ptr)	=temp_buffer[0];
 8001f3e:	7b3a      	ldrb	r2, [r7, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	701a      	strb	r2, [r3, #0]
			*(string_ptr+1)	=temp_buffer[1];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3301      	adds	r3, #1
 8001f48:	7b7a      	ldrb	r2, [r7, #13]
 8001f4a:	701a      	strb	r2, [r3, #0]
			*(string_ptr+2)	=temp_buffer[2];
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3302      	adds	r3, #2
 8001f50:	7bba      	ldrb	r2, [r7, #14]
 8001f52:	701a      	strb	r2, [r3, #0]
			*(string_ptr+3)	=temp_buffer[3];
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3303      	adds	r3, #3
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	701a      	strb	r2, [r3, #0]
			*(string_ptr+4)	=temp_buffer[4];
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	7c3a      	ldrb	r2, [r7, #16]
 8001f62:	701a      	strb	r2, [r3, #0]
			*(string_ptr+5)	=temp_buffer[5];
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3305      	adds	r3, #5
 8001f68:	7c7a      	ldrb	r2, [r7, #17]
 8001f6a:	701a      	strb	r2, [r3, #0]

			//Text string is formatted
			return 1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e009      	b.n	8001f84 <LCD_Format+0xc0>
		}

		//Check next element
		string_ptr++;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
	for(i=0;i<(TEMP_RES+1);i++){
 8001f76:	7dbb      	ldrb	r3, [r7, #22]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	75bb      	strb	r3, [r7, #22]
 8001f7c:	7dbb      	ldrb	r3, [r7, #22]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d9bf      	bls.n	8001f02 <LCD_Format+0x3e>
	}

return 0;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	0800a59c 	.word	0x0800a59c
 8001f90:	0800a5a4 	.word	0x0800a5a4

08001f94 <LCD_Refresh>:
/*
 *  Updates LCD based on contents of LCD_Data struct
 *  NOTES:
 *  	- Using using black background and white foreground clears whatever previous test was on that line
 */
void LCD_Refresh(uint8_t cur_STATE){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	LCD_data.STATE=cur_STATE;
 8001f9e:	4a91      	ldr	r2, [pc, #580]	; (80021e4 <LCD_Refresh+0x250>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	7713      	strb	r3, [r2, #28]

	//If the state machine changed reconfigure GUI
	if(PREV_STATE != LCD_data.STATE){
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <LCD_Refresh+0x250>)
 8001fa6:	7f1b      	ldrb	r3, [r3, #28]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b8f      	ldr	r3, [pc, #572]	; (80021e8 <LCD_Refresh+0x254>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d00a      	beq.n	8001fc8 <LCD_Refresh+0x34>
		LCD_Set_State(LCD_data.STATE);
 8001fb2:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <LCD_Refresh+0x250>)
 8001fb4:	7f1b      	ldrb	r3, [r3, #28]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f98b 	bl	80022d4 <LCD_Set_State>
		PREV_STATE=LCD_data.STATE;
 8001fbe:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <LCD_Refresh+0x250>)
 8001fc0:	7f1b      	ldrb	r3, [r3, #28]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b88      	ldr	r3, [pc, #544]	; (80021e8 <LCD_Refresh+0x254>)
 8001fc6:	701a      	strb	r2, [r3, #0]
	}

	//	Main state machine for LCD refresh
	switch(LCD_data.STATE){
 8001fc8:	4b86      	ldr	r3, [pc, #536]	; (80021e4 <LCD_Refresh+0x250>)
 8001fca:	7f1b      	ldrb	r3, [r3, #28]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	f200 80f5 	bhi.w	80021be <LCD_Refresh+0x22a>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <LCD_Refresh+0x48>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	0800205d 	.word	0x0800205d
 8001fe4:	080020f7 	.word	0x080020f7
 8001fe8:	08002171 	.word	0x08002171

	//Initial boot up
	case 0:
		if((LCD_data.flags & 0x80) ==0x80 )
 8001fec:	4b7d      	ldr	r3, [pc, #500]	; (80021e4 <LCD_Refresh+0x250>)
 8001fee:	881b      	ldrh	r3, [r3, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d10a      	bne.n	8002010 <LCD_Refresh+0x7c>
			Paint_DrawString_EN(26, 104, "OKAY", &Font8, BLACK, WHITE);
 8001ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2300      	movs	r3, #0
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	4b79      	ldr	r3, [pc, #484]	; (80021ec <LCD_Refresh+0x258>)
 8002006:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <LCD_Refresh+0x25c>)
 8002008:	2168      	movs	r1, #104	; 0x68
 800200a:	201a      	movs	r0, #26
 800200c:	f7ff fbc6 	bl	800179c <Paint_DrawString_EN>
		if((LCD_data.flags & 0x40) ==0x40 )
 8002010:	4b74      	ldr	r3, [pc, #464]	; (80021e4 <LCD_Refresh+0x250>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b40      	cmp	r3, #64	; 0x40
 800201c:	d10a      	bne.n	8002034 <LCD_Refresh+0xa0>
			Paint_DrawString_EN(46, 112, "OKAY", &Font8, BLACK, WHITE);
 800201e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2300      	movs	r3, #0
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	4b70      	ldr	r3, [pc, #448]	; (80021ec <LCD_Refresh+0x258>)
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <LCD_Refresh+0x25c>)
 800202c:	2170      	movs	r1, #112	; 0x70
 800202e:	202e      	movs	r0, #46	; 0x2e
 8002030:	f7ff fbb4 	bl	800179c <Paint_DrawString_EN>
		if((LCD_data.flags & 0x20) ==0x20 )
 8002034:	4b6b      	ldr	r3, [pc, #428]	; (80021e4 <LCD_Refresh+0x250>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	b29b      	uxth	r3, r3
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b20      	cmp	r3, #32
 8002040:	f040 80c9 	bne.w	80021d6 <LCD_Refresh+0x242>
			Paint_DrawString_EN(46, 120, "OKAY", &Font8, BLACK, WHITE);
 8002044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2300      	movs	r3, #0
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <LCD_Refresh+0x258>)
 8002050:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <LCD_Refresh+0x25c>)
 8002052:	2178      	movs	r1, #120	; 0x78
 8002054:	202e      	movs	r0, #46	; 0x2e
 8002056:	f7ff fba1 	bl	800179c <Paint_DrawString_EN>
		break;
 800205a:	e0bc      	b.n	80021d6 <LCD_Refresh+0x242>

	//Configure Hot plate
	case 1:
		LCD_Format(set_preh_temp_BUFFER,LCD_data.SET_PRE_TMP);
 800205c:	4b61      	ldr	r3, [pc, #388]	; (80021e4 <LCD_Refresh+0x250>)
 800205e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002062:	eeb0 0a67 	vmov.f32	s0, s15
 8002066:	4863      	ldr	r0, [pc, #396]	; (80021f4 <LCD_Refresh+0x260>)
 8002068:	f7ff ff2c 	bl	8001ec4 <LCD_Format>
		LCD_Format(set_preh_time_BUFFER,LCD_data.PREHEAT_TIME);
 800206c:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <LCD_Refresh+0x250>)
 800206e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002072:	eeb0 0a67 	vmov.f32	s0, s15
 8002076:	4860      	ldr	r0, [pc, #384]	; (80021f8 <LCD_Refresh+0x264>)
 8002078:	f7ff ff24 	bl	8001ec4 <LCD_Format>
		LCD_Format(set_refl_temp_BUFFER,LCD_data.SET_REFL_TMP);
 800207c:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <LCD_Refresh+0x250>)
 800207e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	485d      	ldr	r0, [pc, #372]	; (80021fc <LCD_Refresh+0x268>)
 8002088:	f7ff ff1c 	bl	8001ec4 <LCD_Format>
		LCD_Format(set_refl_time_BUFFER,LCD_data.REFLOW_TIME);
 800208c:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <LCD_Refresh+0x250>)
 800208e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	485a      	ldr	r0, [pc, #360]	; (8002200 <LCD_Refresh+0x26c>)
 8002098:	f7ff ff14 	bl	8001ec4 <LCD_Format>
		Paint_DrawString_EN(71, 24, set_preh_temp_BUFFER, &Font12, BLACK, WHITE);
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2300      	movs	r3, #0
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4b57      	ldr	r3, [pc, #348]	; (8002204 <LCD_Refresh+0x270>)
 80020a8:	4a52      	ldr	r2, [pc, #328]	; (80021f4 <LCD_Refresh+0x260>)
 80020aa:	2118      	movs	r1, #24
 80020ac:	2047      	movs	r0, #71	; 0x47
 80020ae:	f7ff fb75 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 40, set_preh_time_BUFFER, &Font12, BLACK, WHITE);
 80020b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2300      	movs	r3, #0
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4b51      	ldr	r3, [pc, #324]	; (8002204 <LCD_Refresh+0x270>)
 80020be:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <LCD_Refresh+0x264>)
 80020c0:	2128      	movs	r1, #40	; 0x28
 80020c2:	2047      	movs	r0, #71	; 0x47
 80020c4:	f7ff fb6a 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 56, set_refl_temp_BUFFER, &Font12, BLACK, WHITE);
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2300      	movs	r3, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <LCD_Refresh+0x270>)
 80020d4:	4a49      	ldr	r2, [pc, #292]	; (80021fc <LCD_Refresh+0x268>)
 80020d6:	2138      	movs	r1, #56	; 0x38
 80020d8:	2047      	movs	r0, #71	; 0x47
 80020da:	f7ff fb5f 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 72, set_refl_time_BUFFER, &Font12, BLACK, WHITE);
 80020de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4b46      	ldr	r3, [pc, #280]	; (8002204 <LCD_Refresh+0x270>)
 80020ea:	4a45      	ldr	r2, [pc, #276]	; (8002200 <LCD_Refresh+0x26c>)
 80020ec:	2148      	movs	r1, #72	; 0x48
 80020ee:	2047      	movs	r0, #71	; 0x47
 80020f0:	f7ff fb54 	bl	800179c <Paint_DrawString_EN>
		break;
 80020f4:	e072      	b.n	80021dc <LCD_Refresh+0x248>

	//Hot Plate Heating Graph
	case 2:
		LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <LCD_Refresh+0x250>)
 80020f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80020fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002100:	4841      	ldr	r0, [pc, #260]	; (8002208 <LCD_Refresh+0x274>)
 8002102:	f7ff fedf 	bl	8001ec4 <LCD_Format>
		Paint_DrawString_EN(1, 120,  plt_tmp_BUFFER, &Font8, BLACK, WHITE);
 8002106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2300      	movs	r3, #0
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <LCD_Refresh+0x258>)
 8002112:	4a3d      	ldr	r2, [pc, #244]	; (8002208 <LCD_Refresh+0x274>)
 8002114:	2178      	movs	r1, #120	; 0x78
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff fb40 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawPoint(X_POS,(LIVE_TMP_Y-(LCD_data.CUR_PLT_TMP/2)), RED, DOT_PIXEL_1X1, DOT_FILL_AROUND);	//Add point to graph
 800211c:	4b3b      	ldr	r3, [pc, #236]	; (800220c <LCD_Refresh+0x278>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b298      	uxth	r0, r3
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <LCD_Refresh+0x250>)
 8002124:	ed93 7a05 	vldr	s14, [r3, #20]
 8002128:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800212c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002130:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002210 <LCD_Refresh+0x27c>
 8002134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213c:	ee17 3a90 	vmov	r3, s15
 8002140:	b299      	uxth	r1, r3
 8002142:	2301      	movs	r3, #1
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800214c:	f7ff f936 	bl	80013bc <Paint_DrawPoint>
		X_POS++;
 8002150:	4b2e      	ldr	r3, [pc, #184]	; (800220c <LCD_Refresh+0x278>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b2c      	ldr	r3, [pc, #176]	; (800220c <LCD_Refresh+0x278>)
 800215a:	701a      	strb	r2, [r3, #0]
		if(X_POS>160){					//Increment xpos of live graph point
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <LCD_Refresh+0x278>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2ba0      	cmp	r3, #160	; 0xa0
 8002162:	d93a      	bls.n	80021da <LCD_Refresh+0x246>
			LCD_Clear_Plot();
 8002164:	f000 f85a 	bl	800221c <LCD_Clear_Plot>
			X_POS=LIVE_TMP_X+1;
 8002168:	4b28      	ldr	r3, [pc, #160]	; (800220c <LCD_Refresh+0x278>)
 800216a:	2219      	movs	r2, #25
 800216c:	701a      	strb	r2, [r3, #0]
		}

		break;
 800216e:	e034      	b.n	80021da <LCD_Refresh+0x246>

	//Hot Plate Heating Values (same data as case 2 just no graph)
	case 3:
		LCD_Format(amb_tmp_BUFFER,LCD_data.CUR_AMB_TMP);
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <LCD_Refresh+0x250>)
 8002172:	edd3 7a06 	vldr	s15, [r3, #24]
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	4826      	ldr	r0, [pc, #152]	; (8002214 <LCD_Refresh+0x280>)
 800217c:	f7ff fea2 	bl	8001ec4 <LCD_Format>
		LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <LCD_Refresh+0x250>)
 8002182:	edd3 7a05 	vldr	s15, [r3, #20]
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	481f      	ldr	r0, [pc, #124]	; (8002208 <LCD_Refresh+0x274>)
 800218c:	f7ff fe9a 	bl	8001ec4 <LCD_Format>
		Paint_DrawString_EN(98, 88,  plt_tmp_BUFFER, &Font12, BLACK, WHITE);
 8002190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <LCD_Refresh+0x270>)
 800219c:	4a1a      	ldr	r2, [pc, #104]	; (8002208 <LCD_Refresh+0x274>)
 800219e:	2158      	movs	r1, #88	; 0x58
 80021a0:	2062      	movs	r0, #98	; 0x62
 80021a2:	f7ff fafb 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(98, 104,  amb_tmp_BUFFER, &Font12, BLACK, WHITE);
 80021a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <LCD_Refresh+0x270>)
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <LCD_Refresh+0x280>)
 80021b4:	2168      	movs	r1, #104	; 0x68
 80021b6:	2062      	movs	r0, #98	; 0x62
 80021b8:	f7ff faf0 	bl	800179c <Paint_DrawString_EN>
		break;
 80021bc:	e00e      	b.n	80021dc <LCD_Refresh+0x248>

	//Catch of invalid state
	default:
		Paint_DrawString_EN(1, 1, "DEFAULT", &Font8, BLACK, WHITE);
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <LCD_Refresh+0x258>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <LCD_Refresh+0x284>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff fae4 	bl	800179c <Paint_DrawString_EN>
		break;
 80021d4:	e002      	b.n	80021dc <LCD_Refresh+0x248>
		break;
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <LCD_Refresh+0x248>
		break;
 80021da:	bf00      	nop
	}

}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200002d8 	.word	0x200002d8
 80021e8:	200002d6 	.word	0x200002d6
 80021ec:	20000044 	.word	0x20000044
 80021f0:	0800a5ac 	.word	0x0800a5ac
 80021f4:	20000024 	.word	0x20000024
 80021f8:	2000002c 	.word	0x2000002c
 80021fc:	20000014 	.word	0x20000014
 8002200:	2000001c 	.word	0x2000001c
 8002204:	20000034 	.word	0x20000034
 8002208:	2000000c 	.word	0x2000000c
 800220c:	20000000 	.word	0x20000000
 8002210:	42f00000 	.word	0x42f00000
 8002214:	20000004 	.word	0x20000004
 8002218:	0800a5b4 	.word	0x0800a5b4

0800221c <LCD_Clear_Plot>:

/*
 * Clears the graph area for state 2
 */
void LCD_Clear_Plot(){
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af04      	add	r7, sp, #16
	Paint_ClearWindows(LIVE_TMP_X, 0, LCD_1IN8_WIDTH, LIVE_TMP_Y-1, BLACK);	//Clear graph area
 8002222:	2300      	movs	r3, #0
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2377      	movs	r3, #119	; 0x77
 8002228:	22a0      	movs	r2, #160	; 0xa0
 800222a:	2100      	movs	r1, #0
 800222c:	2018      	movs	r0, #24
 800222e:	f7ff f897 	bl	8001360 <Paint_ClearWindows>

	//grid lines for temp
	Paint_DrawLine(LIVE_TMP_X+1, 104, LCD_1IN8_WIDTH, 104, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002232:	2301      	movs	r3, #1
 8002234:	9302      	str	r3, [sp, #8]
 8002236:	2301      	movs	r3, #1
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	f248 4330 	movw	r3, #33840	; 0x8430
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2368      	movs	r3, #104	; 0x68
 8002242:	22a0      	movs	r2, #160	; 0xa0
 8002244:	2168      	movs	r1, #104	; 0x68
 8002246:	2019      	movs	r0, #25
 8002248:	f7ff f950 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  88, LCD_1IN8_WIDTH,  88, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800224c:	2301      	movs	r3, #1
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	2301      	movs	r3, #1
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	f248 4330 	movw	r3, #33840	; 0x8430
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2358      	movs	r3, #88	; 0x58
 800225c:	22a0      	movs	r2, #160	; 0xa0
 800225e:	2158      	movs	r1, #88	; 0x58
 8002260:	2019      	movs	r0, #25
 8002262:	f7ff f943 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  72, LCD_1IN8_WIDTH,  72, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002266:	2301      	movs	r3, #1
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2301      	movs	r3, #1
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	2348      	movs	r3, #72	; 0x48
 8002276:	22a0      	movs	r2, #160	; 0xa0
 8002278:	2148      	movs	r1, #72	; 0x48
 800227a:	2019      	movs	r0, #25
 800227c:	f7ff f936 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  56, LCD_1IN8_WIDTH,  56, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002280:	2301      	movs	r3, #1
 8002282:	9302      	str	r3, [sp, #8]
 8002284:	2301      	movs	r3, #1
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	f248 4330 	movw	r3, #33840	; 0x8430
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2338      	movs	r3, #56	; 0x38
 8002290:	22a0      	movs	r2, #160	; 0xa0
 8002292:	2138      	movs	r1, #56	; 0x38
 8002294:	2019      	movs	r0, #25
 8002296:	f7ff f929 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  40, LCD_1IN8_WIDTH,  40, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800229a:	2301      	movs	r3, #1
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	2301      	movs	r3, #1
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2328      	movs	r3, #40	; 0x28
 80022aa:	22a0      	movs	r2, #160	; 0xa0
 80022ac:	2128      	movs	r1, #40	; 0x28
 80022ae:	2019      	movs	r0, #25
 80022b0:	f7ff f91c 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  24, LCD_1IN8_WIDTH,  24, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80022b4:	2301      	movs	r3, #1
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2301      	movs	r3, #1
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f248 4330 	movw	r3, #33840	; 0x8430
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2318      	movs	r3, #24
 80022c4:	22a0      	movs	r2, #160	; 0xa0
 80022c6:	2118      	movs	r1, #24
 80022c8:	2019      	movs	r0, #25
 80022ca:	f7ff f90f 	bl	80014ec <Paint_DrawLine>
	//Paint_DrawLine(LIVE_TMP_X+1,   8, LCD_1IN8_WIDTH,   8, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);

	/*Might be better to store datapoints somewhere and just clear those instead of whole window*/
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <LCD_Set_State>:

/*
 *  Some new states require the LCD to be cleared before new text can be added
 *  This function clears the LCD and configures it for the NEW STATE
 */
void LCD_Set_State(uint8_t test_STATE){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af04      	add	r7, sp, #16
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
	PREV_STATE=test_STATE;
 80022de:	4abe      	ldr	r2, [pc, #760]	; (80025d8 <LCD_Set_State+0x304>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	7013      	strb	r3, [r2, #0]

	//Main Switch Case
	switch(test_STATE){
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	f200 8220 	bhi.w	800272c <LCD_Set_State+0x458>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <LCD_Set_State+0x20>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002305 	.word	0x08002305
 80022f8:	080023a7 	.word	0x080023a7
 80022fc:	0800241d 	.word	0x0800241d
 8002300:	08002645 	.word	0x08002645
		//Initial boot up
		case 0:
			LCD_1IN8_Clear(BLACK);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fd31 	bl	8001d6c <LCD_1IN8_Clear>
			Paint_DrawString_EN(120,1, "STATE 0", &Font8, BLACK, WHITE);
 800230a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4bb1      	ldr	r3, [pc, #708]	; (80025dc <LCD_Set_State+0x308>)
 8002316:	4ab2      	ldr	r2, [pc, #712]	; (80025e0 <LCD_Set_State+0x30c>)
 8002318:	2101      	movs	r1, #1
 800231a:	2078      	movs	r0, #120	; 0x78
 800231c:	f7ff fa3e 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 32, "THE HOT POTATO", &Font16, BLACK, WHITE);
 8002320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	4bae      	ldr	r3, [pc, #696]	; (80025e4 <LCD_Set_State+0x310>)
 800232c:	4aae      	ldr	r2, [pc, #696]	; (80025e8 <LCD_Set_State+0x314>)
 800232e:	2120      	movs	r1, #32
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff fa33 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(24, 56, "SMD REFLOW", &Font16, BLACK, WHITE);
 8002336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2300      	movs	r3, #0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	4ba8      	ldr	r3, [pc, #672]	; (80025e4 <LCD_Set_State+0x310>)
 8002342:	4aaa      	ldr	r2, [pc, #680]	; (80025ec <LCD_Set_State+0x318>)
 8002344:	2138      	movs	r1, #56	; 0x38
 8002346:	2018      	movs	r0, #24
 8002348:	f7ff fa28 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 96, "Initialization:", &Font8, BLACK, WHITE);
 800234c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2300      	movs	r3, #0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	4ba1      	ldr	r3, [pc, #644]	; (80025dc <LCD_Set_State+0x308>)
 8002358:	4aa5      	ldr	r2, [pc, #660]	; (80025f0 <LCD_Set_State+0x31c>)
 800235a:	2160      	movs	r1, #96	; 0x60
 800235c:	2001      	movs	r0, #1
 800235e:	f7ff fa1d 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 104, "IMU: ...", &Font8, BLACK, WHITE);
 8002362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2300      	movs	r3, #0
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4b9b      	ldr	r3, [pc, #620]	; (80025dc <LCD_Set_State+0x308>)
 800236e:	4aa1      	ldr	r2, [pc, #644]	; (80025f4 <LCD_Set_State+0x320>)
 8002370:	2168      	movs	r1, #104	; 0x68
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fa12 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 112, "TEMP #1: ...", &Font8, BLACK, WHITE);
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	4b96      	ldr	r3, [pc, #600]	; (80025dc <LCD_Set_State+0x308>)
 8002384:	4a9c      	ldr	r2, [pc, #624]	; (80025f8 <LCD_Set_State+0x324>)
 8002386:	2170      	movs	r1, #112	; 0x70
 8002388:	2001      	movs	r0, #1
 800238a:	f7ff fa07 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 120, "TEMP #2: ...", &Font8, BLACK, WHITE);
 800238e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2300      	movs	r3, #0
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4b90      	ldr	r3, [pc, #576]	; (80025dc <LCD_Set_State+0x308>)
 800239a:	4a98      	ldr	r2, [pc, #608]	; (80025fc <LCD_Set_State+0x328>)
 800239c:	2178      	movs	r1, #120	; 0x78
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff f9fc 	bl	800179c <Paint_DrawString_EN>
			break;
 80023a4:	e1d1      	b.n	800274a <LCD_Set_State+0x476>

		//Configure Hot plate
		case 1:
			LCD_1IN8_Clear(BLACK);
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fce0 	bl	8001d6c <LCD_1IN8_Clear>
			Paint_DrawString_EN(120,1, "STATE 1", &Font8, BLACK, WHITE);
 80023ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4b89      	ldr	r3, [pc, #548]	; (80025dc <LCD_Set_State+0x308>)
 80023b8:	4a91      	ldr	r2, [pc, #580]	; (8002600 <LCD_Set_State+0x32c>)
 80023ba:	2101      	movs	r1, #1
 80023bc:	2078      	movs	r0, #120	; 0x78
 80023be:	f7ff f9ed 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 24, "Set P_Temp:       `C", &Font12, BLACK, WHITE);
 80023c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4b8d      	ldr	r3, [pc, #564]	; (8002604 <LCD_Set_State+0x330>)
 80023ce:	4a8e      	ldr	r2, [pc, #568]	; (8002608 <LCD_Set_State+0x334>)
 80023d0:	2118      	movs	r1, #24
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7ff f9e2 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 40, "Set P_Tim:        min", &Font12, BLACK, WHITE);
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2300      	movs	r3, #0
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <LCD_Set_State+0x330>)
 80023e4:	4a89      	ldr	r2, [pc, #548]	; (800260c <LCD_Set_State+0x338>)
 80023e6:	2128      	movs	r1, #40	; 0x28
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff f9d7 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 56, "Set R_Temp:       `C", &Font12, BLACK, WHITE);
 80023ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	4b82      	ldr	r3, [pc, #520]	; (8002604 <LCD_Set_State+0x330>)
 80023fa:	4a85      	ldr	r2, [pc, #532]	; (8002610 <LCD_Set_State+0x33c>)
 80023fc:	2138      	movs	r1, #56	; 0x38
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff f9cc 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72, "Set R_Tim:        min", &Font12, BLACK, WHITE);
 8002404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2300      	movs	r3, #0
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <LCD_Set_State+0x330>)
 8002410:	4a80      	ldr	r2, [pc, #512]	; (8002614 <LCD_Set_State+0x340>)
 8002412:	2148      	movs	r1, #72	; 0x48
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff f9c1 	bl	800179c <Paint_DrawString_EN>
			break;
 800241a:	e196      	b.n	800274a <LCD_Set_State+0x476>

		//Hot Plate Heating
		case 2:
			LCD_1IN8_Clear(BLACK);
 800241c:	2000      	movs	r0, #0
 800241e:	f7ff fca5 	bl	8001d6c <LCD_1IN8_Clear>
			Paint_DrawString_EN(120, 1, "STATE 2", &Font8, BLACK, WHITE);
 8002422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	4b6b      	ldr	r3, [pc, #428]	; (80025dc <LCD_Set_State+0x308>)
 800242e:	4a7a      	ldr	r2, [pc, #488]	; (8002618 <LCD_Set_State+0x344>)
 8002430:	2101      	movs	r1, #1
 8002432:	2078      	movs	r0, #120	; 0x78
 8002434:	f7ff f9b2 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 1, "Temp", &Font8, BLACK, WHITE);
 8002438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4b66      	ldr	r3, [pc, #408]	; (80025dc <LCD_Set_State+0x308>)
 8002444:	4a75      	ldr	r2, [pc, #468]	; (800261c <LCD_Set_State+0x348>)
 8002446:	2101      	movs	r1, #1
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff f9a7 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 9, "`C", &Font8, BLACK, WHITE);
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	4b60      	ldr	r3, [pc, #384]	; (80025dc <LCD_Set_State+0x308>)
 800245a:	4a71      	ldr	r2, [pc, #452]	; (8002620 <LCD_Set_State+0x34c>)
 800245c:	2109      	movs	r1, #9
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff f99c 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(80, 120, "Time", &Font8, BLACK, WHITE);
 8002464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	2300      	movs	r3, #0
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4b5b      	ldr	r3, [pc, #364]	; (80025dc <LCD_Set_State+0x308>)
 8002470:	4a6c      	ldr	r2, [pc, #432]	; (8002624 <LCD_Set_State+0x350>)
 8002472:	2178      	movs	r1, #120	; 0x78
 8002474:	2050      	movs	r0, #80	; 0x50
 8002476:	f7ff f991 	bl	800179c <Paint_DrawString_EN>

			//main xy axis
			Paint_DrawLine(LIVE_TMP_X, 16, LIVE_TMP_X, LIVE_TMP_Y, YELLOW, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 800247a:	2300      	movs	r3, #0
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	2301      	movs	r3, #1
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2378      	movs	r3, #120	; 0x78
 800248a:	2218      	movs	r2, #24
 800248c:	2110      	movs	r1, #16
 800248e:	2018      	movs	r0, #24
 8002490:	f7ff f82c 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(0, LIVE_TMP_Y, LCD_1IN8_WIDTH, LIVE_TMP_Y, YELLOW, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8002494:	2300      	movs	r3, #0
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	2301      	movs	r3, #1
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2378      	movs	r3, #120	; 0x78
 80024a4:	22a0      	movs	r2, #160	; 0xa0
 80024a6:	2178      	movs	r1, #120	; 0x78
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7ff f81f 	bl	80014ec <Paint_DrawLine>

			//Temp markings
			Paint_DrawString_EN(1,104-5, " 32", &Font8, BLACK, WHITE);
 80024ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2300      	movs	r3, #0
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	4b48      	ldr	r3, [pc, #288]	; (80025dc <LCD_Set_State+0x308>)
 80024ba:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <LCD_Set_State+0x354>)
 80024bc:	2163      	movs	r1, #99	; 0x63
 80024be:	2001      	movs	r0, #1
 80024c0:	f7ff f96c 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 88-5, " 64", &Font8, BLACK, WHITE);
 80024c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4b43      	ldr	r3, [pc, #268]	; (80025dc <LCD_Set_State+0x308>)
 80024d0:	4a56      	ldr	r2, [pc, #344]	; (800262c <LCD_Set_State+0x358>)
 80024d2:	2153      	movs	r1, #83	; 0x53
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7ff f961 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72-5, " 96", &Font8, BLACK, WHITE);
 80024da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <LCD_Set_State+0x308>)
 80024e6:	4a52      	ldr	r2, [pc, #328]	; (8002630 <LCD_Set_State+0x35c>)
 80024e8:	2143      	movs	r1, #67	; 0x43
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff f956 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 56-5, "128", &Font8, BLACK, WHITE);
 80024f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <LCD_Set_State+0x308>)
 80024fc:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <LCD_Set_State+0x360>)
 80024fe:	2133      	movs	r1, #51	; 0x33
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff f94b 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 40-5, "160", &Font8, BLACK, WHITE);
 8002506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2300      	movs	r3, #0
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <LCD_Set_State+0x308>)
 8002512:	4a49      	ldr	r2, [pc, #292]	; (8002638 <LCD_Set_State+0x364>)
 8002514:	2123      	movs	r1, #35	; 0x23
 8002516:	2001      	movs	r0, #1
 8002518:	f7ff f940 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 24-5, "192", &Font8, BLACK, WHITE);
 800251c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <LCD_Set_State+0x308>)
 8002528:	4a44      	ldr	r2, [pc, #272]	; (800263c <LCD_Set_State+0x368>)
 800252a:	2113      	movs	r1, #19
 800252c:	2001      	movs	r0, #1
 800252e:	f7ff f935 	bl	800179c <Paint_DrawString_EN>
			//Paint_DrawString_EN(1,  8, "224", &Font8, BLACK, WHITE);

			//grid lines for temp
			Paint_DrawLine(LIVE_TMP_X+1, 104, 160, 104, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002532:	2301      	movs	r3, #1
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	2301      	movs	r3, #1
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	f248 4330 	movw	r3, #33840	; 0x8430
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2368      	movs	r3, #104	; 0x68
 8002542:	22a0      	movs	r2, #160	; 0xa0
 8002544:	2168      	movs	r1, #104	; 0x68
 8002546:	2019      	movs	r0, #25
 8002548:	f7fe ffd0 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  88, 160,  88, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800254c:	2301      	movs	r3, #1
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	2301      	movs	r3, #1
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	f248 4330 	movw	r3, #33840	; 0x8430
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	2358      	movs	r3, #88	; 0x58
 800255c:	22a0      	movs	r2, #160	; 0xa0
 800255e:	2158      	movs	r1, #88	; 0x58
 8002560:	2019      	movs	r0, #25
 8002562:	f7fe ffc3 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  72, 160,  72, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002566:	2301      	movs	r3, #1
 8002568:	9302      	str	r3, [sp, #8]
 800256a:	2301      	movs	r3, #1
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2348      	movs	r3, #72	; 0x48
 8002576:	22a0      	movs	r2, #160	; 0xa0
 8002578:	2148      	movs	r1, #72	; 0x48
 800257a:	2019      	movs	r0, #25
 800257c:	f7fe ffb6 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  56, 160,  56, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002580:	2301      	movs	r3, #1
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	2301      	movs	r3, #1
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	f248 4330 	movw	r3, #33840	; 0x8430
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2338      	movs	r3, #56	; 0x38
 8002590:	22a0      	movs	r2, #160	; 0xa0
 8002592:	2138      	movs	r1, #56	; 0x38
 8002594:	2019      	movs	r0, #25
 8002596:	f7fe ffa9 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  40, 160,  40, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800259a:	2301      	movs	r3, #1
 800259c:	9302      	str	r3, [sp, #8]
 800259e:	2301      	movs	r3, #1
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	f248 4330 	movw	r3, #33840	; 0x8430
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2328      	movs	r3, #40	; 0x28
 80025aa:	22a0      	movs	r2, #160	; 0xa0
 80025ac:	2128      	movs	r1, #40	; 0x28
 80025ae:	2019      	movs	r0, #25
 80025b0:	f7fe ff9c 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  24, 160,  24, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80025b4:	2301      	movs	r3, #1
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2301      	movs	r3, #1
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f248 4330 	movw	r3, #33840	; 0x8430
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2318      	movs	r3, #24
 80025c4:	22a0      	movs	r2, #160	; 0xa0
 80025c6:	2118      	movs	r1, #24
 80025c8:	2019      	movs	r0, #25
 80025ca:	f7fe ff8f 	bl	80014ec <Paint_DrawLine>
			//Paint_DrawLine(LIVE_TMP_X,   8, 160,   8, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);

			X_POS = LIVE_TMP_X+1;			//reset temp graphing position;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <LCD_Set_State+0x36c>)
 80025d0:	2219      	movs	r2, #25
 80025d2:	701a      	strb	r2, [r3, #0]
			break;
 80025d4:	e0b9      	b.n	800274a <LCD_Set_State+0x476>
 80025d6:	bf00      	nop
 80025d8:	200002d6 	.word	0x200002d6
 80025dc:	20000044 	.word	0x20000044
 80025e0:	0800a5bc 	.word	0x0800a5bc
 80025e4:	2000003c 	.word	0x2000003c
 80025e8:	0800a5c4 	.word	0x0800a5c4
 80025ec:	0800a5d4 	.word	0x0800a5d4
 80025f0:	0800a5e0 	.word	0x0800a5e0
 80025f4:	0800a5f0 	.word	0x0800a5f0
 80025f8:	0800a5fc 	.word	0x0800a5fc
 80025fc:	0800a60c 	.word	0x0800a60c
 8002600:	0800a61c 	.word	0x0800a61c
 8002604:	20000034 	.word	0x20000034
 8002608:	0800a624 	.word	0x0800a624
 800260c:	0800a63c 	.word	0x0800a63c
 8002610:	0800a654 	.word	0x0800a654
 8002614:	0800a66c 	.word	0x0800a66c
 8002618:	0800a684 	.word	0x0800a684
 800261c:	0800a68c 	.word	0x0800a68c
 8002620:	0800a694 	.word	0x0800a694
 8002624:	0800a698 	.word	0x0800a698
 8002628:	0800a6a0 	.word	0x0800a6a0
 800262c:	0800a6a4 	.word	0x0800a6a4
 8002630:	0800a6a8 	.word	0x0800a6a8
 8002634:	0800a6ac 	.word	0x0800a6ac
 8002638:	0800a6b0 	.word	0x0800a6b0
 800263c:	0800a6b4 	.word	0x0800a6b4
 8002640:	20000000 	.word	0x20000000

		//Another Temp Display
		case 3:
			LCD_1IN8_Clear(BLACK);
 8002644:	2000      	movs	r0, #0
 8002646:	f7ff fb91 	bl	8001d6c <LCD_1IN8_Clear>
			Paint_DrawString_EN(120, 1, "STATE 3", &Font8, BLACK, WHITE);
 800264a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2300      	movs	r3, #0
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <LCD_Set_State+0x480>)
 8002656:	4a40      	ldr	r2, [pc, #256]	; (8002758 <LCD_Set_State+0x484>)
 8002658:	2101      	movs	r1, #1
 800265a:	2078      	movs	r0, #120	; 0x78
 800265c:	f7ff f89e 	bl	800179c <Paint_DrawString_EN>
			LCD_Format(set_refl_temp_BUFFER,LCD_data.SET_REFL_TMP);
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <LCD_Set_State+0x488>)
 8002662:	edd3 7a01 	vldr	s15, [r3, #4]
 8002666:	eeb0 0a67 	vmov.f32	s0, s15
 800266a:	483d      	ldr	r0, [pc, #244]	; (8002760 <LCD_Set_State+0x48c>)
 800266c:	f7ff fc2a 	bl	8001ec4 <LCD_Format>
			LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 8002670:	4b3a      	ldr	r3, [pc, #232]	; (800275c <LCD_Set_State+0x488>)
 8002672:	edd3 7a05 	vldr	s15, [r3, #20]
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	483a      	ldr	r0, [pc, #232]	; (8002764 <LCD_Set_State+0x490>)
 800267c:	f7ff fc22 	bl	8001ec4 <LCD_Format>
			LCD_Format(amb_tmp_BUFFER,LCD_data.CUR_AMB_TMP);
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <LCD_Set_State+0x488>)
 8002682:	edd3 7a06 	vldr	s15, [r3, #24]
 8002686:	eeb0 0a67 	vmov.f32	s0, s15
 800268a:	4837      	ldr	r0, [pc, #220]	; (8002768 <LCD_Set_State+0x494>)
 800268c:	f7ff fc1a 	bl	8001ec4 <LCD_Format>
			Paint_DrawString_EN(24, 8,  "Sensor Readings", &Font12, BLACK, WHITE);
 8002690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2300      	movs	r3, #0
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4b34      	ldr	r3, [pc, #208]	; (800276c <LCD_Set_State+0x498>)
 800269c:	4a34      	ldr	r2, [pc, #208]	; (8002770 <LCD_Set_State+0x49c>)
 800269e:	2108      	movs	r1, #8
 80026a0:	2018      	movs	r0, #24
 80026a2:	f7ff f87b 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72,  "Plate Target:       `C", &Font12, BLACK, WHITE);
 80026a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <LCD_Set_State+0x498>)
 80026b2:	4a30      	ldr	r2, [pc, #192]	; (8002774 <LCD_Set_State+0x4a0>)
 80026b4:	2148      	movs	r1, #72	; 0x48
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7ff f870 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 72,  set_refl_temp_BUFFER, &Font12, BLACK, WHITE);
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2300      	movs	r3, #0
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b29      	ldr	r3, [pc, #164]	; (800276c <LCD_Set_State+0x498>)
 80026c8:	4a25      	ldr	r2, [pc, #148]	; (8002760 <LCD_Set_State+0x48c>)
 80026ca:	2148      	movs	r1, #72	; 0x48
 80026cc:	2062      	movs	r0, #98	; 0x62
 80026ce:	f7ff f865 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 88,  "Plate Live:         `C", &Font12, BLACK, WHITE);
 80026d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2300      	movs	r3, #0
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <LCD_Set_State+0x498>)
 80026de:	4a26      	ldr	r2, [pc, #152]	; (8002778 <LCD_Set_State+0x4a4>)
 80026e0:	2158      	movs	r1, #88	; 0x58
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff f85a 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 88,  plt_tmp_BUFFER, &Font12, BLACK, WHITE);
 80026e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <LCD_Set_State+0x498>)
 80026f4:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <LCD_Set_State+0x490>)
 80026f6:	2158      	movs	r1, #88	; 0x58
 80026f8:	2062      	movs	r0, #98	; 0x62
 80026fa:	f7ff f84f 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 104, "Ambient Live:       `C", &Font12, BLACK, WHITE);
 80026fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2300      	movs	r3, #0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <LCD_Set_State+0x498>)
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <LCD_Set_State+0x4a8>)
 800270c:	2168      	movs	r1, #104	; 0x68
 800270e:	2001      	movs	r0, #1
 8002710:	f7ff f844 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 104,  amb_tmp_BUFFER, &Font12, BLACK, WHITE);
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2300      	movs	r3, #0
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <LCD_Set_State+0x498>)
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <LCD_Set_State+0x494>)
 8002722:	2168      	movs	r1, #104	; 0x68
 8002724:	2062      	movs	r0, #98	; 0x62
 8002726:	f7ff f839 	bl	800179c <Paint_DrawString_EN>
			break;
 800272a:	e00e      	b.n	800274a <LCD_Set_State+0x476>

		//Catch of invalid state
		default:
			LCD_1IN8_Clear(BLACK);
 800272c:	2000      	movs	r0, #0
 800272e:	f7ff fb1d 	bl	8001d6c <LCD_1IN8_Clear>
			Paint_DrawString_EN(1, 48, "**State Machine Error**", &Font12, BLACK, WHITE);
 8002732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	2300      	movs	r3, #0
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <LCD_Set_State+0x498>)
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <LCD_Set_State+0x4ac>)
 8002740:	2130      	movs	r1, #48	; 0x30
 8002742:	2001      	movs	r0, #1
 8002744:	f7ff f82a 	bl	800179c <Paint_DrawString_EN>
			break;
 8002748:	bf00      	nop
	}

return;
 800274a:	bf00      	nop
}
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000044 	.word	0x20000044
 8002758:	0800a6b8 	.word	0x0800a6b8
 800275c:	200002d8 	.word	0x200002d8
 8002760:	20000014 	.word	0x20000014
 8002764:	2000000c 	.word	0x2000000c
 8002768:	20000004 	.word	0x20000004
 800276c:	20000034 	.word	0x20000034
 8002770:	0800a6c0 	.word	0x0800a6c0
 8002774:	0800a6d0 	.word	0x0800a6d0
 8002778:	0800a6e8 	.word	0x0800a6e8
 800277c:	0800a700 	.word	0x0800a700
 8002780:	0800a718 	.word	0x0800a718

08002784 <PWM_Update>:
#include "PWM_Config.h"

// Update dutycycle of PWM signal. Frequency of PWM signal is hardcoded for now
void PWM_Update(TIM_HandleTypeDef *Timer, uint32_t Timer_Channel, float Duty_Cycle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tim_period, ccr_val;

	tim_period = __HAL_TIM_GET_AUTORELOAD(Timer);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	82bb      	strh	r3, [r7, #20]

	// If requested DC is 0, turn PWM off
	if (Duty_Cycle == 0) {
 800279a:	edd7 7a01 	vldr	s15, [r7, #4]
 800279e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	d104      	bne.n	80027b2 <PWM_Update+0x2e>

		HAL_TIM_PWM_Stop(Timer, Timer_Channel);
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f004 f9bc 	bl	8006b28 <HAL_TIM_PWM_Stop>

		return;
 80027b0:	e034      	b.n	800281c <PWM_Update+0x98>

	} else {

		ccr_val = Duty_Cycle * tim_period;
 80027b2:	8abb      	ldrh	r3, [r7, #20]
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c8:	ee17 3a90 	vmov	r3, s15
 80027cc:	82fb      	strh	r3, [r7, #22]

		// Catch undefined case where DC would be >= 100%
		if (ccr_val >= tim_period) {
 80027ce:	8afa      	ldrh	r2, [r7, #22]
 80027d0:	8abb      	ldrh	r3, [r7, #20]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d301      	bcc.n	80027da <PWM_Update+0x56>

			ccr_val = tim_period;	// Probably get rid of this
 80027d6:	8abb      	ldrh	r3, [r7, #20]
 80027d8:	82fb      	strh	r3, [r7, #22]

		}

		// Update PWM Duty Cycle
		__HAL_TIM_SET_COMPARE(Timer, Timer_Channel, ccr_val);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d104      	bne.n	80027ea <PWM_Update+0x66>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	8afa      	ldrh	r2, [r7, #22]
 80027e6:	635a      	str	r2, [r3, #52]	; 0x34
 80027e8:	e013      	b.n	8002812 <PWM_Update+0x8e>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d104      	bne.n	80027fa <PWM_Update+0x76>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	8afb      	ldrh	r3, [r7, #22]
 80027f6:	6393      	str	r3, [r2, #56]	; 0x38
 80027f8:	e00b      	b.n	8002812 <PWM_Update+0x8e>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d104      	bne.n	800280a <PWM_Update+0x86>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	8afb      	ldrh	r3, [r7, #22]
 8002806:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002808:	e003      	b.n	8002812 <PWM_Update+0x8e>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	6413      	str	r3, [r2, #64]	; 0x40

		// Ensure PWM is running
		HAL_TIM_PWM_Start(Timer, Timer_Channel);
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f004 f8e9 	bl	80069ec <HAL_TIM_PWM_Start>

	}

	return;
 800281a:	bf00      	nop

};
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282a:	f107 0314 	add.w	r3, r7, #20
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	609a      	str	r2, [r3, #8]
 8002836:	60da      	str	r2, [r3, #12]
 8002838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b4f      	ldr	r3, [pc, #316]	; (800297c <MX_GPIO_Init+0x158>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a4e      	ldr	r2, [pc, #312]	; (800297c <MX_GPIO_Init+0x158>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b4c      	ldr	r3, [pc, #304]	; (800297c <MX_GPIO_Init+0x158>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b48      	ldr	r3, [pc, #288]	; (800297c <MX_GPIO_Init+0x158>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	4a47      	ldr	r2, [pc, #284]	; (800297c <MX_GPIO_Init+0x158>)
 8002860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
 8002866:	4b45      	ldr	r3, [pc, #276]	; (800297c <MX_GPIO_Init+0x158>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	4b41      	ldr	r3, [pc, #260]	; (800297c <MX_GPIO_Init+0x158>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a40      	ldr	r2, [pc, #256]	; (800297c <MX_GPIO_Init+0x158>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b3e      	ldr	r3, [pc, #248]	; (800297c <MX_GPIO_Init+0x158>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	607b      	str	r3, [r7, #4]
 8002892:	4b3a      	ldr	r3, [pc, #232]	; (800297c <MX_GPIO_Init+0x158>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	4a39      	ldr	r2, [pc, #228]	; (800297c <MX_GPIO_Init+0x158>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b37      	ldr	r3, [pc, #220]	; (800297c <MX_GPIO_Init+0x158>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 80028aa:	2200      	movs	r2, #0
 80028ac:	f242 31b0 	movw	r1, #9136	; 0x23b0
 80028b0:	4833      	ldr	r0, [pc, #204]	; (8002980 <MX_GPIO_Init+0x15c>)
 80028b2:	f001 fce5 	bl	8004280 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80028b6:	2200      	movs	r2, #0
 80028b8:	2158      	movs	r1, #88	; 0x58
 80028ba:	4832      	ldr	r0, [pc, #200]	; (8002984 <MX_GPIO_Init+0x160>)
 80028bc:	f001 fce0 	bl	8004280 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 80028c0:	f242 33b0 	movw	r3, #9136	; 0x23b0
 80028c4:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	4829      	ldr	r0, [pc, #164]	; (8002980 <MX_GPIO_Init+0x15c>)
 80028da:	f001 fb45 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80028de:	2358      	movs	r3, #88	; 0x58
 80028e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	4823      	ldr	r0, [pc, #140]	; (8002984 <MX_GPIO_Init+0x160>)
 80028f6:	f001 fb37 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin|IMU_INT1_Pin|IMU_INT2_Pin;
 80028fa:	2307      	movs	r3, #7
 80028fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	4619      	mov	r1, r3
 800290e:	481e      	ldr	r0, [pc, #120]	; (8002988 <MX_GPIO_Init+0x164>)
 8002910:	f001 fb2a 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEB_B_Pin;
 8002914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291a:	2300      	movs	r3, #0
 800291c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEB_B_GPIO_Port, &GPIO_InitStruct);
 8002922:	f107 0314 	add.w	r3, r7, #20
 8002926:	4619      	mov	r1, r3
 8002928:	4817      	ldr	r0, [pc, #92]	; (8002988 <MX_GPIO_Init+0x164>)
 800292a:	f001 fb1d 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEB_A_Pin|ROT_SW_Pin;
 800292e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002934:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4810      	ldr	r0, [pc, #64]	; (8002988 <MX_GPIO_Init+0x164>)
 8002946:	f001 fb0f 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEL_0_Pin|SEL_1_Pin|PG_3V3_Pin;
 800294a:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800294e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002950:	2300      	movs	r3, #0
 8002952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4619      	mov	r1, r3
 800295e:	4809      	ldr	r0, [pc, #36]	; (8002984 <MX_GPIO_Init+0x160>)
 8002960:	f001 fb02 	bl	8003f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	2028      	movs	r0, #40	; 0x28
 800296a:	f001 fac6 	bl	8003efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800296e:	2028      	movs	r0, #40	; 0x28
 8002970:	f001 fadf 	bl	8003f32 <HAL_NVIC_EnableIRQ>

}
 8002974:	bf00      	nop
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	40020800 	.word	0x40020800
 8002984:	40020000 	.word	0x40020000
 8002988:	40020400 	.word	0x40020400

0800298c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_I2C1_Init+0x50>)
 8002992:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <MX_I2C1_Init+0x54>)
 8002994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_I2C1_Init+0x50>)
 8002998:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <MX_I2C1_Init+0x58>)
 800299a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_I2C1_Init+0x50>)
 800299e:	2200      	movs	r2, #0
 80029a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_I2C1_Init+0x50>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_I2C1_Init+0x50>)
 80029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <MX_I2C1_Init+0x50>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_I2C1_Init+0x50>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029bc:	4b07      	ldr	r3, [pc, #28]	; (80029dc <MX_I2C1_Init+0x50>)
 80029be:	2200      	movs	r2, #0
 80029c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_I2C1_Init+0x50>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <MX_I2C1_Init+0x50>)
 80029ca:	f001 fcb1 	bl	8004330 <HAL_I2C_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029d4:	f000 faae 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200002f8 	.word	0x200002f8
 80029e0:	40005400 	.word	0x40005400
 80029e4:	000186a0 	.word	0x000186a0

080029e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a19      	ldr	r2, [pc, #100]	; (8002a6c <HAL_I2C_MspInit+0x84>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12b      	bne.n	8002a62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a17      	ldr	r2, [pc, #92]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a26:	23c0      	movs	r3, #192	; 0xc0
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a2a:	2312      	movs	r3, #18
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a36:	2304      	movs	r3, #4
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <HAL_I2C_MspInit+0x8c>)
 8002a42:	f001 fa91 	bl	8003f68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_I2C_MspInit+0x88>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a62:	bf00      	nop
 8002a64:	3728      	adds	r7, #40	; 0x28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40005400 	.word	0x40005400
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020400 	.word	0x40020400

08002a78 <read_ambient_temp>:

/* USER CODE BEGIN 1 */

/*	Routine for reading TMP75	*/
float read_ambient_temp()
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af02      	add	r7, sp, #8

	uint8_t ambient_sens_addr = 0x48 << 1;	// Note address needs to be shifted by 1 bit in this protocol
 8002a7e:	2390      	movs	r3, #144	; 0x90
 8002a80:	73fb      	strb	r3, [r7, #15]
	uint8_t tempr_reg = 0x00, conf_reg = 0x01;
 8002a82:	2300      	movs	r3, #0
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	2301      	movs	r3, #1
 8002a88:	73bb      	strb	r3, [r7, #14]
	uint8_t tempr_data_buff[2];
	int final_tempr = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]

	// Routine as described for dataread from MLX90614 DS
	HAL_I2C_Master_Transmit(&hi2c1, ambient_sens_addr, &tempr_reg, 1, 500);
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	b299      	uxth	r1, r3
 8002a92:	1dfa      	adds	r2, r7, #7
 8002a94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4813      	ldr	r0, [pc, #76]	; (8002aec <read_ambient_temp+0x74>)
 8002a9e:	f001 fd8b 	bl	80045b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ambient_sens_addr, tempr_data_buff, 2, 500);
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	b299      	uxth	r1, r3
 8002aa6:	1d3a      	adds	r2, r7, #4
 8002aa8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2302      	movs	r3, #2
 8002ab0:	480e      	ldr	r0, [pc, #56]	; (8002aec <read_ambient_temp+0x74>)
 8002ab2:	f001 fe7f 	bl	80047b4 <HAL_I2C_Master_Receive>
	final_tempr = (tempr_data_buff[0] << 4) | (tempr_data_buff[1]);
 8002ab6:	793b      	ldrb	r3, [r7, #4]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	797a      	ldrb	r2, [r7, #5]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60bb      	str	r3, [r7, #8]

	// Configuration register defaults to highest res with scale factor of .0625
	return final_tempr * .0625;
 8002ac0:	68b8      	ldr	r0, [r7, #8]
 8002ac2:	f7fd fd4f 	bl	8000564 <__aeabi_i2d>
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <read_ambient_temp+0x78>)
 8002acc:	f7fd fdb4 	bl	8000638 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7fe f886 	bl	8000be8 <__aeabi_d2f>
 8002adc:	4603      	mov	r3, r0
 8002ade:	ee07 3a90 	vmov	s15, r3
}
 8002ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200002f8 	.word	0x200002f8
 8002af0:	3fb00000 	.word	0x3fb00000
 8002af4:	00000000 	.word	0x00000000

08002af8 <read_plate_temp>:

/*	Routine for reading IR Temp Sensor MLX90614		*/
float read_plate_temp()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af04      	add	r7, sp, #16

	uint8_t ir_sens_addr = 0x5A << 1;	// Note address needs to be shifted by 1 bit in this protocol
 8002afe:	23b4      	movs	r3, #180	; 0xb4
 8002b00:	73fb      	strb	r3, [r7, #15]
	uint8_t t_amb_addr = 0x06, t_obj_addr = 0x07;
 8002b02:	2306      	movs	r3, #6
 8002b04:	73bb      	strb	r3, [r7, #14]
 8002b06:	2307      	movs	r3, #7
 8002b08:	737b      	strb	r3, [r7, #13]
	uint8_t tempr_data_buff[3];
	int final_tempr = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]

	// Routine as described for dataread from MLX90614 DS
	// TODO: May need to program temperature range and emissivity constant within EEPROM (see DS for protocol)
	HAL_I2C_Mem_Read(&hi2c1, ir_sens_addr, t_obj_addr, 1, tempr_data_buff, 3, 100);	// Note use this function it is better somehow
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
 8002b10:	b299      	uxth	r1, r3
 8002b12:	7b7b      	ldrb	r3, [r7, #13]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	2364      	movs	r3, #100	; 0x64
 8002b18:	9302      	str	r3, [sp, #8]
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	1d3b      	adds	r3, r7, #4
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	2301      	movs	r3, #1
 8002b24:	481c      	ldr	r0, [pc, #112]	; (8002b98 <read_plate_temp+0xa0>)
 8002b26:	f002 f86b 	bl	8004c00 <HAL_I2C_Mem_Read>

	// Final temperature = Tobj * .02 - 273.15
	final_tempr = (tempr_data_buff[1] << 8 | tempr_data_buff[0]) * .02;	// Result in Kelvin
 8002b2a:	797b      	ldrb	r3, [r7, #5]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	793a      	ldrb	r2, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fd16 	bl	8000564 <__aeabi_i2d>
 8002b38:	a313      	add	r3, pc, #76	; (adr r3, 8002b88 <read_plate_temp+0x90>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fd7b 	bl	8000638 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fe f825 	bl	8000b98 <__aeabi_d2iz>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	60bb      	str	r3, [r7, #8]
	final_tempr -= 273.15;
 8002b52:	68b8      	ldr	r0, [r7, #8]
 8002b54:	f7fd fd06 	bl	8000564 <__aeabi_i2d>
 8002b58:	a30d      	add	r3, pc, #52	; (adr r3, 8002b90 <read_plate_temp+0x98>)
 8002b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5e:	f7fd fbb3 	bl	80002c8 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7fe f815 	bl	8000b98 <__aeabi_d2iz>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	60bb      	str	r3, [r7, #8]

	return final_tempr;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	47ae147b 	.word	0x47ae147b
 8002b8c:	3f947ae1 	.word	0x3f947ae1
 8002b90:	66666666 	.word	0x66666666
 8002b94:	40711266 	.word	0x40711266
 8002b98:	200002f8 	.word	0x200002f8

08002b9c <System_Initialization>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* Initialize peripherals, fan, and hotplate, control systems in off state, LCD display IDLE */
void System_Initialization()
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0

	/* Disable all peripherals */
	HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_SET);	// Disable sensors
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	2110      	movs	r1, #16
 8002ba4:	4812      	ldr	r0, [pc, #72]	; (8002bf0 <System_Initialization+0x54>)
 8002ba6:	f001 fb6b 	bl	8004280 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);		// Disable hotplate voltage
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb0:	480f      	ldr	r0, [pc, #60]	; (8002bf0 <System_Initialization+0x54>)
 8002bb2:	f001 fb65 	bl	8004280 <HAL_GPIO_WritePin>
	PWM_Update(fan_pwm, TIM_CHANNEL_1, 1);								// Disable fan (100% DC)
 8002bb6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bba:	2100      	movs	r1, #0
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <System_Initialization+0x58>)
 8002bbe:	f7ff fde1 	bl	8002784 <PWM_Update>
	PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 1);							// Disable hotplate (100% DC)
 8002bc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	480b      	ldr	r0, [pc, #44]	; (8002bf8 <System_Initialization+0x5c>)
 8002bca:	f7ff fddb 	bl	8002784 <PWM_Update>

	/* Initialize control structures */
	Controller_Init(&fan);
 8002bce:	480b      	ldr	r0, [pc, #44]	; (8002bfc <System_Initialization+0x60>)
 8002bd0:	f7fe f9dc 	bl	8000f8c <Controller_Init>
	Controller_Init(&hotplate);
 8002bd4:	480a      	ldr	r0, [pc, #40]	; (8002c00 <System_Initialization+0x64>)
 8002bd6:	f7fe f9d9 	bl	8000f8c <Controller_Init>

	/* Initialize LCD */
	LCD_init();
 8002bda:	f7ff f933 	bl	8001e44 <LCD_init>
	LCD_Refresh(STATE);
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <System_Initialization+0x68>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f9d5 	bl	8001f94 <LCD_Refresh>

};
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40020800 	.word	0x40020800
 8002bf4:	2000049c 	.word	0x2000049c
 8002bf8:	200003c4 	.word	0x200003c4
 8002bfc:	2000005c 	.word	0x2000005c
 8002c00:	20000088 	.word	0x20000088
 8002c04:	20000354 	.word	0x20000354

08002c08 <update_temps>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Update current system temperatures */
void update_temps()
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
	  measured_amb_temp = read_ambient_temp();
 8002c0c:	f7ff ff34 	bl	8002a78 <read_ambient_temp>
 8002c10:	eef0 7a40 	vmov.f32	s15, s0
 8002c14:	4b05      	ldr	r3, [pc, #20]	; (8002c2c <update_temps+0x24>)
 8002c16:	edc3 7a00 	vstr	s15, [r3]
	  measured_hotplate_temp = read_plate_temp();
 8002c1a:	f7ff ff6d 	bl	8002af8 <read_plate_temp>
 8002c1e:	eef0 7a40 	vmov.f32	s15, s0
 8002c22:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <update_temps+0x28>)
 8002c24:	edc3 7a00 	vstr	s15, [r3]
};
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2000034c 	.word	0x2000034c
 8002c30:	20000350 	.word	0x20000350

08002c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c3a:	f000 ffed 	bl	8003c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c3e:	f000 f90d 	bl	8002e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c42:	f7ff fdef 	bl	8002824 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c46:	f7ff fea1 	bl	800298c <MX_I2C1_Init>
  MX_TIM5_Init();
 8002c4a:	f000 fd51 	bl	80036f0 <MX_TIM5_Init>
  MX_SPI1_Init();
 8002c4e:	f000 f977 	bl	8002f40 <MX_SPI1_Init>
  MX_TIM9_Init();
 8002c52:	f000 fddb 	bl	800380c <MX_TIM9_Init>
  MX_TIM1_Init();
 8002c56:	f000 fcc7 	bl	80035e8 <MX_TIM1_Init>
  MX_TIM11_Init();
 8002c5a:	f000 fe35 	bl	80038c8 <MX_TIM11_Init>
  MX_TIM6_Init();
 8002c5e:	f000 fd9f 	bl	80037a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /** Initialize System **/
  System_Initialization();
 8002c62:	f7ff ff9b 	bl	8002b9c <System_Initialization>

  /** Take measurements for calculation of PI gain constants **/
//  ZN_Tuning();

  // Initialize local variables
  int heating_stage = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
  int graph_refresh = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /** SYSTEM STATE MACHINE **/
	  switch (STATE)
 8002c6e:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <main+0x1f4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d04e      	beq.n	8002d14 <main+0xe0>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	f300 80d3 	bgt.w	8002e22 <main+0x1ee>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <main+0x52>
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d022      	beq.n	8002cca <main+0x96>

						  }

		  default :

			  break;
 8002c84:	e0cd      	b.n	8002e22 <main+0x1ee>
			  LCD_Refresh(STATE);
 8002c86:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <main+0x1f4>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff f981 	bl	8001f94 <LCD_Refresh>
			  heating_stage = 0;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
			  graph_refresh = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	603b      	str	r3, [r7, #0]
				HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_SET);	// Disable sensors
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	2110      	movs	r1, #16
 8002c9e:	4863      	ldr	r0, [pc, #396]	; (8002e2c <main+0x1f8>)
 8002ca0:	f001 faee 	bl	8004280 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);		// Disable hotplate voltage
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002caa:	4860      	ldr	r0, [pc, #384]	; (8002e2c <main+0x1f8>)
 8002cac:	f001 fae8 	bl	8004280 <HAL_GPIO_WritePin>
				PWM_Update(fan_pwm, TIM_CHANNEL_1, 1);								// Disable fan (100% DC)
 8002cb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	485e      	ldr	r0, [pc, #376]	; (8002e30 <main+0x1fc>)
 8002cb8:	f7ff fd64 	bl	8002784 <PWM_Update>
				PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 1);							// Disable hotplate (100% DC)
 8002cbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	485c      	ldr	r0, [pc, #368]	; (8002e34 <main+0x200>)
 8002cc4:	f7ff fd5e 	bl	8002784 <PWM_Update>
			  break;
 8002cc8:	e0ac      	b.n	8002e24 <main+0x1f0>
			  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cd0:	4856      	ldr	r0, [pc, #344]	; (8002e2c <main+0x1f8>)
 8002cd2:	f001 fad5 	bl	8004280 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2110      	movs	r1, #16
 8002cda:	4854      	ldr	r0, [pc, #336]	; (8002e2c <main+0x1f8>)
 8002cdc:	f001 fad0 	bl	8004280 <HAL_GPIO_WritePin>
			  PWM_Update(fan_pwm, TIM_CHANNEL_1, .5);
 8002ce0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4852      	ldr	r0, [pc, #328]	; (8002e30 <main+0x1fc>)
 8002ce8:	f7ff fd4c 	bl	8002784 <PWM_Update>
			  HAL_GPIO_WritePin(DISP_DIS_GPIO_Port, DISP_DIS_Pin, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2120      	movs	r1, #32
 8002cf0:	484e      	ldr	r0, [pc, #312]	; (8002e2c <main+0x1f8>)
 8002cf2:	f001 fac5 	bl	8004280 <HAL_GPIO_WritePin>
			  LCD_usr_inputs(&user_preheat_temp, &user_preheat_time, &user_temp, &user_reflow_time);
 8002cf6:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <main+0x204>)
 8002cf8:	4a50      	ldr	r2, [pc, #320]	; (8002e3c <main+0x208>)
 8002cfa:	4951      	ldr	r1, [pc, #324]	; (8002e40 <main+0x20c>)
 8002cfc:	4851      	ldr	r0, [pc, #324]	; (8002e44 <main+0x210>)
 8002cfe:	f7ff f881 	bl	8001e04 <LCD_usr_inputs>
			  LCD_Refresh(STATE);
 8002d02:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <main+0x1f4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f943 	bl	8001f94 <LCD_Refresh>
			  update_temps();
 8002d0e:	f7ff ff7b 	bl	8002c08 <update_temps>
			  break;
 8002d12:	e087      	b.n	8002e24 <main+0x1f0>
				  if (graph_refresh == 0) {	// Scuffed timerless version of slowing refresh rate
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <main+0xfa>
					  LCD_updt_temps(&measured_hotplate_temp, &measured_amb_temp);
 8002d1a:	494b      	ldr	r1, [pc, #300]	; (8002e48 <main+0x214>)
 8002d1c:	484b      	ldr	r0, [pc, #300]	; (8002e4c <main+0x218>)
 8002d1e:	f7ff f85b 	bl	8001dd8 <LCD_updt_temps>
					  LCD_Refresh(STATE);
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <main+0x1f4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff f933 	bl	8001f94 <LCD_Refresh>
				  graph_refresh = (graph_refresh + 1) % 100;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	4a47      	ldr	r2, [pc, #284]	; (8002e50 <main+0x21c>)
 8002d34:	fb82 1203 	smull	r1, r2, r2, r3
 8002d38:	1151      	asrs	r1, r2, #5
 8002d3a:	17da      	asrs	r2, r3, #31
 8002d3c:	1a8a      	subs	r2, r1, r2
 8002d3e:	2164      	movs	r1, #100	; 0x64
 8002d40:	fb01 f202 	mul.w	r2, r1, r2
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	603b      	str	r3, [r7, #0]
				  update_temps();
 8002d48:	f7ff ff5e 	bl	8002c08 <update_temps>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d862      	bhi.n	8002e18 <main+0x1e4>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <main+0x124>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d95 	.word	0x08002d95
 8002d60:	08002dbf 	.word	0x08002dbf
 8002d64:	08002deb 	.word	0x08002deb
							  if (measured_hotplate_temp < user_temp) {
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <main+0x218>)
 8002d6a:	ed93 7a00 	vldr	s14, [r3]
 8002d6e:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <main+0x208>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7c:	d506      	bpl.n	8002d8c <main+0x158>
								  PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 0.0);	// Max plate by turning FET off
 8002d7e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002e54 <main+0x220>
 8002d82:	2100      	movs	r1, #0
 8002d84:	482b      	ldr	r0, [pc, #172]	; (8002e34 <main+0x200>)
 8002d86:	f7ff fcfd 	bl	8002784 <PWM_Update>
							  break;
 8002d8a:	e04a      	b.n	8002e22 <main+0x1ee>
								  heating_stage++;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	607b      	str	r3, [r7, #4]
							  break;
 8002d92:	e046      	b.n	8002e22 <main+0x1ee>
							  if (HAL_TIM_Base_GetState(control_timer) != HAL_TIM_STATE_BUSY) {
 8002d94:	4830      	ldr	r0, [pc, #192]	; (8002e58 <main+0x224>)
 8002d96:	f004 f983 	bl	80070a0 <HAL_TIM_Base_GetState>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d002      	beq.n	8002da6 <main+0x172>
								  start_preheat();
 8002da0:	f000 f974 	bl	800308c <start_preheat>
							  break;
 8002da4:	e03a      	b.n	8002e1c <main+0x1e8>
							  }	else if ( preheat_status() ){	// If preheat time has been completed
 8002da6:	f000 f9a9 	bl	80030fc <preheat_status>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d035      	beq.n	8002e1c <main+0x1e8>
								  HAL_TIM_Base_Stop_IT(control_timer);
 8002db0:	4829      	ldr	r0, [pc, #164]	; (8002e58 <main+0x224>)
 8002db2:	f003 fd4d 	bl	8006850 <HAL_TIM_Base_Stop_IT>
								  heating_stage++;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3301      	adds	r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
							  break;
 8002dbc:	e02e      	b.n	8002e1c <main+0x1e8>
							  if (measured_hotplate_temp < user_temp) {
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <main+0x218>)
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <main+0x208>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	d506      	bpl.n	8002de2 <main+0x1ae>
								  PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 0.0);	// Max plate by turning FET off
 8002dd4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002e54 <main+0x220>
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4816      	ldr	r0, [pc, #88]	; (8002e34 <main+0x200>)
 8002ddc:	f7ff fcd2 	bl	8002784 <PWM_Update>
							  break;
 8002de0:	e01f      	b.n	8002e22 <main+0x1ee>
								  heating_stage++;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3301      	adds	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
							  break;
 8002de8:	e01b      	b.n	8002e22 <main+0x1ee>
							  if (HAL_TIM_Base_GetState(control_timer) != HAL_TIM_STATE_BUSY) {
 8002dea:	481b      	ldr	r0, [pc, #108]	; (8002e58 <main+0x224>)
 8002dec:	f004 f958 	bl	80070a0 <HAL_TIM_Base_GetState>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d002      	beq.n	8002dfc <main+0x1c8>
								  start_reflow();
 8002df6:	f000 f965 	bl	80030c4 <start_reflow>
							  break;
 8002dfa:	e011      	b.n	8002e20 <main+0x1ec>
							  }	else if ( reflow_status() ){	// If reflow time has been completed
 8002dfc:	f000 f98a 	bl	8003114 <reflow_status>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <main+0x1ec>
								  HAL_TIM_Base_Stop_IT(control_timer);
 8002e06:	4814      	ldr	r0, [pc, #80]	; (8002e58 <main+0x224>)
 8002e08:	f003 fd22 	bl	8006850 <HAL_TIM_Base_Stop_IT>
								  heating_stage = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
								  STATE = 0;
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <main+0x1f4>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
							  break;
 8002e16:	e003      	b.n	8002e20 <main+0x1ec>
							  break;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <main+0x1ee>
							  break;
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <main+0x1ee>
							  break;
 8002e20:	bf00      	nop
			  break;
 8002e22:	bf00      	nop
	  switch (STATE)
 8002e24:	e723      	b.n	8002c6e <main+0x3a>
 8002e26:	bf00      	nop
 8002e28:	20000354 	.word	0x20000354
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	2000049c 	.word	0x2000049c
 8002e34:	200003c4 	.word	0x200003c4
 8002e38:	20000058 	.word	0x20000058
 8002e3c:	2000004c 	.word	0x2000004c
 8002e40:	20000054 	.word	0x20000054
 8002e44:	20000050 	.word	0x20000050
 8002e48:	2000034c 	.word	0x2000034c
 8002e4c:	20000350 	.word	0x20000350
 8002e50:	51eb851f 	.word	0x51eb851f
 8002e54:	00000000 	.word	0x00000000
 8002e58:	2000040c 	.word	0x2000040c

08002e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b094      	sub	sp, #80	; 0x50
 8002e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e62:	f107 031c 	add.w	r3, r7, #28
 8002e66:	2234      	movs	r2, #52	; 0x34
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 fc36 	bl	80076dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e70:	f107 0308 	add.w	r3, r7, #8
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e80:	2300      	movs	r3, #0
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <SystemClock_Config+0xd0>)
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <SystemClock_Config+0xd0>)
 8002e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <SystemClock_Config+0xd0>)
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <SystemClock_Config+0xd4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <SystemClock_Config+0xd4>)
 8002ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <SystemClock_Config+0xd4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eb4:	603b      	str	r3, [r7, #0]
 8002eb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002ed0:	2360      	movs	r3, #96	; 0x60
 8002ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002edc:	2302      	movs	r3, #2
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ee0:	f107 031c 	add.w	r3, r7, #28
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f002 fe93 	bl	8005c10 <HAL_RCC_OscConfig>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ef0:	f000 f820 	bl	8002f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef4:	230f      	movs	r3, #15
 8002ef6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f0a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	2103      	movs	r1, #3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fcb0 	bl	8005878 <HAL_RCC_ClockConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f1e:	f000 f809 	bl	8002f34 <Error_Handler>
  }
}
 8002f22:	bf00      	nop
 8002f24:	3750      	adds	r7, #80	; 0x50
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40007000 	.word	0x40007000

08002f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f38:	b672      	cpsid	i
}
 8002f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <Error_Handler+0x8>
	...

08002f40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f46:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <MX_SPI1_Init+0x68>)
 8002f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f58:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f64:	4b0f      	ldr	r3, [pc, #60]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f7e:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f84:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f90:	4804      	ldr	r0, [pc, #16]	; (8002fa4 <MX_SPI1_Init+0x64>)
 8002f92:	f003 f8c1 	bl	8006118 <HAL_SPI_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f9c:	f7ff ffca 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	2000035c 	.word	0x2000035c
 8002fa8:	40013000 	.word	0x40013000

08002fac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_SPI_MspInit+0x84>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d12b      	bne.n	8003026 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	4b18      	ldr	r3, [pc, #96]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a17      	ldr	r2, [pc, #92]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002fd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a10      	ldr	r2, [pc, #64]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <HAL_SPI_MspInit+0x88>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003006:	23a0      	movs	r3, #160	; 0xa0
 8003008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003012:	2303      	movs	r3, #3
 8003014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003016:	2305      	movs	r3, #5
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	4619      	mov	r1, r3
 8003020:	4805      	ldr	r0, [pc, #20]	; (8003038 <HAL_SPI_MspInit+0x8c>)
 8003022:	f000 ffa1 	bl	8003f68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003026:	bf00      	nop
 8003028:	3728      	adds	r7, #40	; 0x28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40013000 	.word	0x40013000
 8003034:	40023800 	.word	0x40023800
 8003038:	40020000 	.word	0x40020000

0800303c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_MspInit+0x4c>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a0f      	ldr	r2, [pc, #60]	; (8003088 <HAL_MspInit+0x4c>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_MspInit+0x4c>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	607b      	str	r3, [r7, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_MspInit+0x4c>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <HAL_MspInit+0x4c>)
 8003068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_MspInit+0x4c>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800

0800308c <start_preheat>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void start_preheat()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
	heat_complete = 0;
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <start_preheat+0x28>)
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
	heat_time = user_preheat_time;
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <start_preheat+0x2c>)
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a0:	ee17 2a90 	vmov	r2, s15
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <start_preheat+0x30>)
 80030a6:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(control_timer);
 80030a8:	4805      	ldr	r0, [pc, #20]	; (80030c0 <start_preheat+0x34>)
 80030aa:	f003 fb83 	bl	80067b4 <HAL_TIM_Base_Start_IT>

}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200003bc 	.word	0x200003bc
 80030b8:	20000054 	.word	0x20000054
 80030bc:	200003b8 	.word	0x200003b8
 80030c0:	2000040c 	.word	0x2000040c

080030c4 <start_reflow>:
void start_reflow()
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0

	heat_complete = 0;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <start_reflow+0x28>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
	heat_time = user_reflow_time;
 80030ce:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <start_reflow+0x2c>)
 80030d0:	edd3 7a00 	vldr	s15, [r3]
 80030d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d8:	ee17 2a90 	vmov	r2, s15
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <start_reflow+0x30>)
 80030de:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(control_timer);
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <start_reflow+0x34>)
 80030e2:	f003 fb67 	bl	80067b4 <HAL_TIM_Base_Start_IT>

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200003bc 	.word	0x200003bc
 80030f0:	20000058 	.word	0x20000058
 80030f4:	200003b8 	.word	0x200003b8
 80030f8:	2000040c 	.word	0x2000040c

080030fc <preheat_status>:
int preheat_status()
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
	return heat_complete;
 8003100:	4b03      	ldr	r3, [pc, #12]	; (8003110 <preheat_status+0x14>)
 8003102:	681b      	ldr	r3, [r3, #0]
}
 8003104:	4618      	mov	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	200003bc 	.word	0x200003bc

08003114 <reflow_status>:
int reflow_status()
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
	return heat_complete;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <reflow_status+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200003bc 	.word	0x200003bc

0800312c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <NMI_Handler+0x4>

08003132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <HardFault_Handler+0x4>

08003138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <MemManage_Handler+0x4>

0800313e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <BusFault_Handler+0x4>

08003144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <UsageFault_Handler+0x4>

0800314a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003178:	f000 fda0 	bl	8003cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800317c:	bf00      	nop
 800317e:	bd80      	pop	{r7, pc}

08003180 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003184:	4803      	ldr	r0, [pc, #12]	; (8003194 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8003186:	f003 fd33 	bl	8006bf0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800318a:	4803      	ldr	r0, [pc, #12]	; (8003198 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800318c:	f003 fd30 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200003c4 	.word	0x200003c4
 8003198:	2000049c 	.word	0x2000049c

0800319c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* BEGIN INTERRUPT MASKING FOR ENCODER */

	// Check pushbutton
	if(!HAL_GPIO_ReadPin(GPIOB, ROT_SW_Pin)) {
 80031a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031a4:	4868      	ldr	r0, [pc, #416]	; (8003348 <EXTI15_10_IRQHandler+0x1ac>)
 80031a6:	f001 f853 	bl	8004250 <HAL_GPIO_ReadPin>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d135      	bne.n	800321c <EXTI15_10_IRQHandler+0x80>

		// If pushbutton pressed, start a timer to check for a hold
		HAL_TIM_Base_Start(&htim6);
 80031b0:	4866      	ldr	r0, [pc, #408]	; (800334c <EXTI15_10_IRQHandler+0x1b0>)
 80031b2:	f003 fa91 	bl	80066d8 <HAL_TIM_Base_Start>
		while(__HAL_TIM_GET_COUNTER(&htim6) < 5000);
 80031b6:	bf00      	nop
 80031b8:	4b64      	ldr	r3, [pc, #400]	; (800334c <EXTI15_10_IRQHandler+0x1b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f241 3287 	movw	r2, #4999	; 0x1387
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d9f8      	bls.n	80031b8 <EXTI15_10_IRQHandler+0x1c>

		// If the button has been held for the length of the timer, change state
		if(!HAL_GPIO_ReadPin(GPIOB, ROT_SW_Pin)) {
 80031c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ca:	485f      	ldr	r0, [pc, #380]	; (8003348 <EXTI15_10_IRQHandler+0x1ac>)
 80031cc:	f001 f840 	bl	8004250 <HAL_GPIO_ReadPin>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10e      	bne.n	80031f4 <EXTI15_10_IRQHandler+0x58>

			STATE = (STATE + 1) % 3;
 80031d6:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <EXTI15_10_IRQHandler+0x1b4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	4b5d      	ldr	r3, [pc, #372]	; (8003354 <EXTI15_10_IRQHandler+0x1b8>)
 80031de:	fb83 3201 	smull	r3, r2, r3, r1
 80031e2:	17cb      	asrs	r3, r1, #31
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	1aca      	subs	r2, r1, r3
 80031ee:	4b58      	ldr	r3, [pc, #352]	; (8003350 <EXTI15_10_IRQHandler+0x1b4>)
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e00b      	b.n	800320c <EXTI15_10_IRQHandler+0x70>

		}	else {	// Otherwise, the button was tapped to set other parameter

				set_user_temp_flag = (set_user_temp_flag + 1) % 4;
 80031f4:	4b58      	ldr	r3, [pc, #352]	; (8003358 <EXTI15_10_IRQHandler+0x1bc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	425a      	negs	r2, r3
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	bf58      	it	pl
 8003206:	4253      	negpl	r3, r2
 8003208:	4a53      	ldr	r2, [pc, #332]	; (8003358 <EXTI15_10_IRQHandler+0x1bc>)
 800320a:	6013      	str	r3, [r2, #0]

		}

		// Reset the timer for the next iteration
		HAL_TIM_Base_Stop(&htim6);
 800320c:	484f      	ldr	r0, [pc, #316]	; (800334c <EXTI15_10_IRQHandler+0x1b0>)
 800320e:	f003 faa9 	bl	8006764 <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 8003212:	4b4e      	ldr	r3, [pc, #312]	; (800334c <EXTI15_10_IRQHandler+0x1b0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2200      	movs	r2, #0
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
 800321a:	e08a      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>

	} else {	// If the pushbutton didn't trigger the interrupt, one of the rotary encoder twists must have

		// If CW, A goes LO first while B is HI
		if(!HAL_GPIO_ReadPin(GPIOB, DEB_A_Pin) && HAL_GPIO_ReadPin(GPIOB, DEB_B_Pin)) {
 800321c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003220:	4849      	ldr	r0, [pc, #292]	; (8003348 <EXTI15_10_IRQHandler+0x1ac>)
 8003222:	f001 f815 	bl	8004250 <HAL_GPIO_ReadPin>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d145      	bne.n	80032b8 <EXTI15_10_IRQHandler+0x11c>
 800322c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003230:	4845      	ldr	r0, [pc, #276]	; (8003348 <EXTI15_10_IRQHandler+0x1ac>)
 8003232:	f001 f80d 	bl	8004250 <HAL_GPIO_ReadPin>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d03d      	beq.n	80032b8 <EXTI15_10_IRQHandler+0x11c>

			// Update whichever variable is selected on the display
			switch (set_user_temp_flag) {
 800323c:	4b46      	ldr	r3, [pc, #280]	; (8003358 <EXTI15_10_IRQHandler+0x1bc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d837      	bhi.n	80032b4 <EXTI15_10_IRQHandler+0x118>
 8003244:	a201      	add	r2, pc, #4	; (adr r2, 800324c <EXTI15_10_IRQHandler+0xb0>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003273 	.word	0x08003273
 8003254:	08003289 	.word	0x08003289
 8003258:	0800329f 	.word	0x0800329f

			case 0:
				user_preheat_temp++;
 800325c:	4b3f      	ldr	r3, [pc, #252]	; (800335c <EXTI15_10_IRQHandler+0x1c0>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800326a:	4b3c      	ldr	r3, [pc, #240]	; (800335c <EXTI15_10_IRQHandler+0x1c0>)
 800326c:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003270:	e021      	b.n	80032b6 <EXTI15_10_IRQHandler+0x11a>
			case 1:
				user_preheat_time++;
 8003272:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <EXTI15_10_IRQHandler+0x1c4>)
 8003274:	edd3 7a00 	vldr	s15, [r3]
 8003278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800327c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003280:	4b37      	ldr	r3, [pc, #220]	; (8003360 <EXTI15_10_IRQHandler+0x1c4>)
 8003282:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003286:	e016      	b.n	80032b6 <EXTI15_10_IRQHandler+0x11a>
			case 2:
				user_temp++;
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <EXTI15_10_IRQHandler+0x1c8>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003292:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003296:	4b33      	ldr	r3, [pc, #204]	; (8003364 <EXTI15_10_IRQHandler+0x1c8>)
 8003298:	edc3 7a00 	vstr	s15, [r3]
				break;
 800329c:	e00b      	b.n	80032b6 <EXTI15_10_IRQHandler+0x11a>
			case 3:
				user_reflow_time++;
 800329e:	4b32      	ldr	r3, [pc, #200]	; (8003368 <EXTI15_10_IRQHandler+0x1cc>)
 80032a0:	edd3 7a00 	vldr	s15, [r3]
 80032a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <EXTI15_10_IRQHandler+0x1cc>)
 80032ae:	edc3 7a00 	vstr	s15, [r3]
				break;
 80032b2:	e000      	b.n	80032b6 <EXTI15_10_IRQHandler+0x11a>
			default:
				break;
 80032b4:	bf00      	nop
			switch (set_user_temp_flag) {
 80032b6:	e03c      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>


		} else { 	// Otherwise it is a CCW rotation

			// Update whichever variable is selected on the display
			switch (set_user_temp_flag) {
 80032b8:	4b27      	ldr	r3, [pc, #156]	; (8003358 <EXTI15_10_IRQHandler+0x1bc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b03      	cmp	r3, #3
 80032be:	d837      	bhi.n	8003330 <EXTI15_10_IRQHandler+0x194>
 80032c0:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <EXTI15_10_IRQHandler+0x12c>)
 80032c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c6:	bf00      	nop
 80032c8:	080032d9 	.word	0x080032d9
 80032cc:	080032ef 	.word	0x080032ef
 80032d0:	08003305 	.word	0x08003305
 80032d4:	0800331b 	.word	0x0800331b

			case 0:
				user_preheat_temp--;
 80032d8:	4b20      	ldr	r3, [pc, #128]	; (800335c <EXTI15_10_IRQHandler+0x1c0>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032e6:	4b1d      	ldr	r3, [pc, #116]	; (800335c <EXTI15_10_IRQHandler+0x1c0>)
 80032e8:	edc3 7a00 	vstr	s15, [r3]
				break;
 80032ec:	e021      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>
			case 1:
				user_preheat_time--;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <EXTI15_10_IRQHandler+0x1c4>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <EXTI15_10_IRQHandler+0x1c4>)
 80032fe:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003302:	e016      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>
			case 2:
				user_temp--;
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <EXTI15_10_IRQHandler+0x1c8>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800330e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <EXTI15_10_IRQHandler+0x1c8>)
 8003314:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003318:	e00b      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>
			case 3:
				user_reflow_time--;
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <EXTI15_10_IRQHandler+0x1cc>)
 800331c:	edd3 7a00 	vldr	s15, [r3]
 8003320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <EXTI15_10_IRQHandler+0x1cc>)
 800332a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800332e:	e000      	b.n	8003332 <EXTI15_10_IRQHandler+0x196>
			default:
				break;
 8003330:	bf00      	nop
	}

	/* END INTERRUPT MASKING FOR ENCODER */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DEB_A_Pin);
 8003332:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003336:	f000 ffd7 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 800333a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800333e:	f000 ffd3 	bl	80042e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40020400 	.word	0x40020400
 800334c:	20000454 	.word	0x20000454
 8003350:	20000354 	.word	0x20000354
 8003354:	55555556 	.word	0x55555556
 8003358:	20000358 	.word	0x20000358
 800335c:	20000050 	.word	0x20000050
 8003360:	20000054 	.word	0x20000054
 8003364:	2000004c 	.word	0x2000004c
 8003368:	20000058 	.word	0x20000058

0800336c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	/* For a given amount of time, keep temperatures stable */
	if ( tick_counter <  ( heat_time * 5)) {	// Keep in mind timer interrupts configured for 5 Hz.
 8003370:	4b25      	ldr	r3, [pc, #148]	; (8003408 <TIM5_IRQHandler+0x9c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	4b24      	ldr	r3, [pc, #144]	; (800340c <TIM5_IRQHandler+0xa0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	dd36      	ble.n	80033f0 <TIM5_IRQHandler+0x84>

			// DEBUG
			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8003382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003386:	4822      	ldr	r0, [pc, #136]	; (8003410 <TIM5_IRQHandler+0xa4>)
 8003388:	f000 ff93 	bl	80042b2 <HAL_GPIO_TogglePin>

//			// Update temps
//			update_temps();

			// Update fan speed
			Controller_Update(&fan, 30.0, measured_amb_temp);
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <TIM5_IRQHandler+0xa8>)
 800338e:	edd3 7a00 	vldr	s15, [r3]
 8003392:	eef0 0a67 	vmov.f32	s1, s15
 8003396:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800339a:	481f      	ldr	r0, [pc, #124]	; (8003418 <TIM5_IRQHandler+0xac>)
 800339c:	f7fd fe10 	bl	8000fc0 <Controller_Update>
			PWM_Update(fan_pwm, TIM_CHANNEL_1, fan.out);
 80033a0:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <TIM5_IRQHandler+0xac>)
 80033a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033a6:	eeb0 0a67 	vmov.f32	s0, s15
 80033aa:	2100      	movs	r1, #0
 80033ac:	481b      	ldr	r0, [pc, #108]	; (800341c <TIM5_IRQHandler+0xb0>)
 80033ae:	f7ff f9e9 	bl	8002784 <PWM_Update>

			// Update plate temperature
			Controller_Update(&hotplate, user_temp, measured_hotplate_temp);
 80033b2:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <TIM5_IRQHandler+0xb4>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	4b1a      	ldr	r3, [pc, #104]	; (8003424 <TIM5_IRQHandler+0xb8>)
 80033ba:	ed93 7a00 	vldr	s14, [r3]
 80033be:	eef0 0a47 	vmov.f32	s1, s14
 80033c2:	eeb0 0a67 	vmov.f32	s0, s15
 80033c6:	4818      	ldr	r0, [pc, #96]	; (8003428 <TIM5_IRQHandler+0xbc>)
 80033c8:	f7fd fdfa 	bl	8000fc0 <Controller_Update>
			PWM_Update(hotplate_pwm, TIM_CHANNEL_1, hotplate.out);
 80033cc:	4b16      	ldr	r3, [pc, #88]	; (8003428 <TIM5_IRQHandler+0xbc>)
 80033ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033d2:	eeb0 0a67 	vmov.f32	s0, s15
 80033d6:	2100      	movs	r1, #0
 80033d8:	4814      	ldr	r0, [pc, #80]	; (800342c <TIM5_IRQHandler+0xc0>)
 80033da:	f7ff f9d3 	bl	8002784 <PWM_Update>

		heat_complete = 0;
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <TIM5_IRQHandler+0xc4>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
		tick_counter++;
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <TIM5_IRQHandler+0xa0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	4a08      	ldr	r2, [pc, #32]	; (800340c <TIM5_IRQHandler+0xa0>)
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e005      	b.n	80033fc <TIM5_IRQHandler+0x90>

	} else { 	// Else we must have reached tick count, reset counter

		tick_counter = 0;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <TIM5_IRQHandler+0xa0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]

		// Set heating cycle complete flag
		heat_complete = 1;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <TIM5_IRQHandler+0xc4>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]




  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <TIM5_IRQHandler+0xc8>)
 80033fe:	f003 fbf7 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200003b8 	.word	0x200003b8
 800340c:	200003b4 	.word	0x200003b4
 8003410:	40020800 	.word	0x40020800
 8003414:	2000034c 	.word	0x2000034c
 8003418:	2000005c 	.word	0x2000005c
 800341c:	2000049c 	.word	0x2000049c
 8003420:	2000004c 	.word	0x2000004c
 8003424:	20000350 	.word	0x20000350
 8003428:	20000088 	.word	0x20000088
 800342c:	200003c4 	.word	0x200003c4
 8003430:	200003bc 	.word	0x200003bc
 8003434:	2000040c 	.word	0x2000040c

08003438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
	return 1;
 800343c:	2301      	movs	r3, #1
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_kill>:

int _kill(int pid, int sig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003452:	f004 f903 	bl	800765c <__errno>
 8003456:	4603      	mov	r3, r0
 8003458:	2216      	movs	r2, #22
 800345a:	601a      	str	r2, [r3, #0]
	return -1;
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_exit>:

void _exit (int status)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ffe7 	bl	8003448 <_kill>
	while (1) {}		/* Make sure we hang here */
 800347a:	e7fe      	b.n	800347a <_exit+0x12>

0800347c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e00a      	b.n	80034a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800348e:	f3af 8000 	nop.w
 8003492:	4601      	mov	r1, r0
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	60ba      	str	r2, [r7, #8]
 800349a:	b2ca      	uxtb	r2, r1
 800349c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	3301      	adds	r3, #1
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dbf0      	blt.n	800348e <_read+0x12>
	}

return len;
 80034ac:	687b      	ldr	r3, [r7, #4]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e009      	b.n	80034dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	dbf1      	blt.n	80034c8 <_write+0x12>
	}
	return len;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_close>:

int _close(int file)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
	return -1;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003516:	605a      	str	r2, [r3, #4]
	return 0;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <_isatty>:

int _isatty(int file)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	return 1;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
	return 0;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f004 f868 	bl	800765c <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20008000 	.word	0x20008000
 80035b8:	00000400 	.word	0x00000400
 80035bc:	200003c0 	.word	0x200003c0
 80035c0:	20000540 	.word	0x20000540

080035c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <SystemInit+0x20>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ce:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <SystemInit+0x20>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b092      	sub	sp, #72	; 0x48
 80035ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	615a      	str	r2, [r3, #20]
 800360a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2220      	movs	r2, #32
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f004 f862 	bl	80076dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <MX_TIM1_Init+0x100>)
 800361a:	4a34      	ldr	r2, [pc, #208]	; (80036ec <MX_TIM1_Init+0x104>)
 800361c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003620:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003624:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 96;
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <MX_TIM1_Init+0x100>)
 800362e:	2260      	movs	r2, #96	; 0x60
 8003630:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003632:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <MX_TIM1_Init+0x100>)
 800363a:	2200      	movs	r2, #0
 800363c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800363e:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003640:	2200      	movs	r2, #0
 8003642:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003644:	4828      	ldr	r0, [pc, #160]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003646:	f003 f981 	bl	800694c <HAL_TIM_PWM_Init>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003650:	f7ff fc70 	bl	8002f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003658:	2300      	movs	r3, #0
 800365a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800365c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003660:	4619      	mov	r1, r3
 8003662:	4821      	ldr	r0, [pc, #132]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003664:	f003 ff3a 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800366e:	f7ff fc61 	bl	8002f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003672:	2360      	movs	r3, #96	; 0x60
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800367a:	2300      	movs	r3, #0
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800367e:	2300      	movs	r3, #0
 8003680:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800368e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003692:	2200      	movs	r2, #0
 8003694:	4619      	mov	r1, r3
 8003696:	4814      	ldr	r0, [pc, #80]	; (80036e8 <MX_TIM1_Init+0x100>)
 8003698:	f003 fc0e 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80036a2:	f7ff fc47 	bl	8002f34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	4619      	mov	r1, r3
 80036c8:	4807      	ldr	r0, [pc, #28]	; (80036e8 <MX_TIM1_Init+0x100>)
 80036ca:	f003 ff61 	bl	8007590 <HAL_TIMEx_ConfigBreakDeadTime>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80036d4:	f7ff fc2e 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036d8:	4803      	ldr	r0, [pc, #12]	; (80036e8 <MX_TIM1_Init+0x100>)
 80036da:	f000 f9e9 	bl	8003ab0 <HAL_TIM_MspPostInit>

}
 80036de:	bf00      	nop
 80036e0:	3748      	adds	r7, #72	; 0x48
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200003c4 	.word	0x200003c4
 80036ec:	40010000 	.word	0x40010000

080036f0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b08a      	sub	sp, #40	; 0x28
 80036f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_Init 0 */
	// This is configured for a period of .45 seconds rn
	// Right now TIM5 is used for timing control of system events
  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f6:	f107 0320 	add.w	r3, r7, #32
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003700:	1d3b      	adds	r3, r7, #4
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]
 800370e:	615a      	str	r2, [r3, #20]
 8003710:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003712:	4b21      	ldr	r3, [pc, #132]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003714:	4a21      	ldr	r2, [pc, #132]	; (800379c <MX_TIM5_Init+0xac>)
 8003716:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 8003718:	4b1f      	ldr	r3, [pc, #124]	; (8003798 <MX_TIM5_Init+0xa8>)
 800371a:	f242 7210 	movw	r2, #10000	; 0x2710
 800371e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003722:	2200      	movs	r2, #0
 8003724:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1920;
 8003726:	4b1c      	ldr	r3, [pc, #112]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003728:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800372c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800372e:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003734:	4b18      	ldr	r3, [pc, #96]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800373a:	4817      	ldr	r0, [pc, #92]	; (8003798 <MX_TIM5_Init+0xa8>)
 800373c:	f003 f8b7 	bl	80068ae <HAL_TIM_OC_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8003746:	f7ff fbf5 	bl	8002f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374e:	2300      	movs	r3, #0
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003752:	f107 0320 	add.w	r3, r7, #32
 8003756:	4619      	mov	r1, r3
 8003758:	480f      	ldr	r0, [pc, #60]	; (8003798 <MX_TIM5_Init+0xa8>)
 800375a:	f003 febf 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8003764:	f7ff fbe6 	bl	8002f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003768:	2300      	movs	r3, #0
 800376a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2200      	movs	r2, #0
 800377c:	4619      	mov	r1, r3
 800377e:	4806      	ldr	r0, [pc, #24]	; (8003798 <MX_TIM5_Init+0xa8>)
 8003780:	f003 fb3e 	bl	8006e00 <HAL_TIM_OC_ConfigChannel>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800378a:	f7ff fbd3 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	3728      	adds	r7, #40	; 0x28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000040c 	.word	0x2000040c
 800379c:	40000c00 	.word	0x40000c00

080037a0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a6:	463b      	mov	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <MX_TIM6_Init+0x64>)
 80037b0:	4a15      	ldr	r2, [pc, #84]	; (8003808 <MX_TIM6_Init+0x68>)
 80037b2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9600;
 80037b4:	4b13      	ldr	r3, [pc, #76]	; (8003804 <MX_TIM6_Init+0x64>)
 80037b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <MX_TIM6_Init+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80037c2:	4b10      	ldr	r3, [pc, #64]	; (8003804 <MX_TIM6_Init+0x64>)
 80037c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ca:	4b0e      	ldr	r3, [pc, #56]	; (8003804 <MX_TIM6_Init+0x64>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037d0:	480c      	ldr	r0, [pc, #48]	; (8003804 <MX_TIM6_Init+0x64>)
 80037d2:	f002 ff31 	bl	8006638 <HAL_TIM_Base_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037dc:	f7ff fbaa 	bl	8002f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	; (8003804 <MX_TIM6_Init+0x64>)
 80037ee:	f003 fe75 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037f8:	f7ff fb9c 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000454 	.word	0x20000454
 8003808:	40001000 	.word	0x40001000

0800380c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
 8003820:	615a      	str	r2, [r3, #20]
 8003822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003824:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <MX_TIM9_Init+0xb4>)
 8003826:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <MX_TIM9_Init+0xb8>)
 8003828:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1000;
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <MX_TIM9_Init+0xb4>)
 800382c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003830:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <MX_TIM9_Init+0xb4>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 480;
 8003838:	4b21      	ldr	r3, [pc, #132]	; (80038c0 <MX_TIM9_Init+0xb4>)
 800383a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800383e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <MX_TIM9_Init+0xb4>)
 8003842:	2200      	movs	r2, #0
 8003844:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <MX_TIM9_Init+0xb4>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800384c:	481c      	ldr	r0, [pc, #112]	; (80038c0 <MX_TIM9_Init+0xb4>)
 800384e:	f003 f87d 	bl	800694c <HAL_TIM_PWM_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8003858:	f7ff fb6c 	bl	8002f34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800385c:	4818      	ldr	r0, [pc, #96]	; (80038c0 <MX_TIM9_Init+0xb4>)
 800385e:	f003 f826 	bl	80068ae <HAL_TIM_OC_Init>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d001      	beq.n	800386c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8003868:	f7ff fb64 	bl	8002f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800386c:	2360      	movs	r3, #96	; 0x60
 800386e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 240;
 8003870:	23f0      	movs	r3, #240	; 0xf0
 8003872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	2200      	movs	r2, #0
 8003880:	4619      	mov	r1, r3
 8003882:	480f      	ldr	r0, [pc, #60]	; (80038c0 <MX_TIM9_Init+0xb4>)
 8003884:	f003 fb18 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 800388e:	f7ff fb51 	bl	8002f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2204      	movs	r2, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4807      	ldr	r0, [pc, #28]	; (80038c0 <MX_TIM9_Init+0xb4>)
 80038a2:	f003 faad 	bl	8006e00 <HAL_TIM_OC_ConfigChannel>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_TIM9_Init+0xa4>
  {
    Error_Handler();
 80038ac:	f7ff fb42 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80038b0:	4803      	ldr	r0, [pc, #12]	; (80038c0 <MX_TIM9_Init+0xb4>)
 80038b2:	f000 f8fd 	bl	8003ab0 <HAL_TIM_MspPostInit>

}
 80038b6:	bf00      	nop
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	2000049c 	.word	0x2000049c
 80038c4:	40014000 	.word	0x40014000

080038c8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <MX_TIM11_Init+0x94>)
 80038e2:	4a1f      	ldr	r2, [pc, #124]	; (8003960 <MX_TIM11_Init+0x98>)
 80038e4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <MX_TIM11_Init+0x94>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <MX_TIM11_Init+0x94>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 34359;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <MX_TIM11_Init+0x94>)
 80038f4:	f248 6237 	movw	r2, #34359	; 0x8637
 80038f8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038fa:	4b18      	ldr	r3, [pc, #96]	; (800395c <MX_TIM11_Init+0x94>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003900:	4b16      	ldr	r3, [pc, #88]	; (800395c <MX_TIM11_Init+0x94>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003906:	4815      	ldr	r0, [pc, #84]	; (800395c <MX_TIM11_Init+0x94>)
 8003908:	f002 fe96 	bl	8006638 <HAL_TIM_Base_Init>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003912:	f7ff fb0f 	bl	8002f34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003916:	4811      	ldr	r0, [pc, #68]	; (800395c <MX_TIM11_Init+0x94>)
 8003918:	f003 f818 	bl	800694c <HAL_TIM_PWM_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003922:	f7ff fb07 	bl	8002f34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003926:	2360      	movs	r3, #96	; 0x60
 8003928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 17179;
 800392a:	f244 331b 	movw	r3, #17179	; 0x431b
 800392e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003930:	2300      	movs	r3, #0
 8003932:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2200      	movs	r2, #0
 800393c:	4619      	mov	r1, r3
 800393e:	4807      	ldr	r0, [pc, #28]	; (800395c <MX_TIM11_Init+0x94>)
 8003940:	f003 faba 	bl	8006eb8 <HAL_TIM_PWM_ConfigChannel>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800394a:	f7ff faf3 	bl	8002f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800394e:	4803      	ldr	r0, [pc, #12]	; (800395c <MX_TIM11_Init+0x94>)
 8003950:	f000 f8ae 	bl	8003ab0 <HAL_TIM_MspPostInit>

}
 8003954:	bf00      	nop
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200004e4 	.word	0x200004e4
 8003960:	40014800 	.word	0x40014800

08003964 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_TIM_PWM_MspInit+0x80>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d116      	bne.n	80039a4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003992:	2200      	movs	r2, #0
 8003994:	2100      	movs	r1, #0
 8003996:	2018      	movs	r0, #24
 8003998:	f000 faaf 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800399c:	2018      	movs	r0, #24
 800399e:	f000 fac8 	bl	8003f32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80039a2:	e01a      	b.n	80039da <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM9)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_TIM_PWM_MspInit+0x88>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d115      	bne.n	80039da <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6453      	str	r3, [r2, #68]	; 0x44
 80039be:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <HAL_TIM_PWM_MspInit+0x84>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	2018      	movs	r0, #24
 80039d0:	f000 fa93 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80039d4:	2018      	movs	r0, #24
 80039d6:	f000 faac 	bl	8003f32 <HAL_NVIC_EnableIRQ>
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40014000 	.word	0x40014000

080039f0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM5)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <HAL_TIM_OC_MspInit+0x48>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d115      	bne.n	8003a2e <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_TIM_OC_MspInit+0x4c>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a0c      	ldr	r2, [pc, #48]	; (8003a3c <HAL_TIM_OC_MspInit+0x4c>)
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_TIM_OC_MspInit+0x4c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2101      	movs	r1, #1
 8003a22:	2032      	movs	r0, #50	; 0x32
 8003a24:	f000 fa69 	bl	8003efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a28:	2032      	movs	r0, #50	; 0x32
 8003a2a:	f000 fa82 	bl	8003f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40023800 	.word	0x40023800

08003a40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <HAL_TIM_Base_MspInit+0x64>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a5c:	f043 0310 	orr.w	r3, r3, #16
 8003a60:	6413      	str	r3, [r2, #64]	; 0x40
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a6e:	e012      	b.n	8003a96 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_TIM_Base_MspInit+0x6c>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d10d      	bne.n	8003a96 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a88:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_TIM_Base_MspInit+0x68>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40001000 	.word	0x40001000
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40014800 	.word	0x40014800

08003ab0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	609a      	str	r2, [r3, #8]
 8003ac4:	60da      	str	r2, [r3, #12]
 8003ac6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a37      	ldr	r2, [pc, #220]	; (8003bac <HAL_TIM_MspPostInit+0xfc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d11f      	bne.n	8003b12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	4b36      	ldr	r3, [pc, #216]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b33      	ldr	r3, [pc, #204]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PLATE_PWM_Pin;
 8003aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PLATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4619      	mov	r1, r3
 8003b0a:	482a      	ldr	r0, [pc, #168]	; (8003bb4 <HAL_TIM_MspPostInit+0x104>)
 8003b0c:	f000 fa2c 	bl	8003f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003b10:	e047      	b.n	8003ba2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <HAL_TIM_MspPostInit+0x108>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d11e      	bne.n	8003b5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	4b23      	ldr	r3, [pc, #140]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2c:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b44:	2300      	movs	r3, #0
 8003b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b4c:	f107 0314 	add.w	r3, r7, #20
 8003b50:	4619      	mov	r1, r3
 8003b52:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <HAL_TIM_MspPostInit+0x104>)
 8003b54:	f000 fa08 	bl	8003f68 <HAL_GPIO_Init>
}
 8003b58:	e023      	b.n	8003ba2 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_TIM_MspPostInit+0x10c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d11e      	bne.n	8003ba2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b6e:	f043 0304 	orr.w	r3, r3, #4
 8003b72:	6313      	str	r3, [r2, #48]	; 0x30
 8003b74:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_TIM_MspPostInit+0x100>)
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 8003b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b92:	2303      	movs	r3, #3
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4808      	ldr	r0, [pc, #32]	; (8003bc0 <HAL_TIM_MspPostInit+0x110>)
 8003b9e:	f000 f9e3 	bl	8003f68 <HAL_GPIO_Init>
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40014000 	.word	0x40014000
 8003bbc:	40014800 	.word	0x40014800
 8003bc0:	40020800 	.word	0x40020800

08003bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bca:	490e      	ldr	r1, [pc, #56]	; (8003c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003be0:	4c0b      	ldr	r4, [pc, #44]	; (8003c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003bee:	f7ff fce9 	bl	80035c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bf2:	f003 fd39 	bl	8007668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf6:	f7ff f81d 	bl	8002c34 <main>
  bx  lr    
 8003bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003bfc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c04:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8003c08:	0800be7c 	.word	0x0800be7c
  ldr r2, =_sbss
 8003c0c:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8003c10:	20000540 	.word	0x20000540

08003c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c14:	e7fe      	b.n	8003c14 <ADC_IRQHandler>
	...

08003c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_Init+0x40>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a0d      	ldr	r2, [pc, #52]	; (8003c58 <HAL_Init+0x40>)
 8003c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_Init+0x40>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_Init+0x40>)
 8003c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c34:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_Init+0x40>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a07      	ldr	r2, [pc, #28]	; (8003c58 <HAL_Init+0x40>)
 8003c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c40:	2003      	movs	r0, #3
 8003c42:	f000 f94f 	bl	8003ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c46:	200f      	movs	r0, #15
 8003c48:	f000 f808 	bl	8003c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c4c:	f7ff f9f6 	bl	800303c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40023c00 	.word	0x40023c00

08003c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_InitTick+0x54>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b12      	ldr	r3, [pc, #72]	; (8003cb4 <HAL_InitTick+0x58>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f967 	bl	8003f4e <HAL_SYSTICK_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e00e      	b.n	8003ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d80a      	bhi.n	8003ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c90:	2200      	movs	r2, #0
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	f04f 30ff 	mov.w	r0, #4294967295
 8003c98:	f000 f92f 	bl	8003efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c9c:	4a06      	ldr	r2, [pc, #24]	; (8003cb8 <HAL_InitTick+0x5c>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e000      	b.n	8003ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200000b4 	.word	0x200000b4
 8003cb4:	200000bc 	.word	0x200000bc
 8003cb8:	200000b8 	.word	0x200000b8

08003cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_IncTick+0x20>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a04      	ldr	r2, [pc, #16]	; (8003ce0 <HAL_IncTick+0x24>)
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	200000bc 	.word	0x200000bc
 8003ce0:	2000052c 	.word	0x2000052c

08003ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce8:	4b03      	ldr	r3, [pc, #12]	; (8003cf8 <HAL_GetTick+0x14>)
 8003cea:	681b      	ldr	r3, [r3, #0]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	2000052c 	.word	0x2000052c

08003cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7ff ffee 	bl	8003ce4 <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d14:	d005      	beq.n	8003d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d16:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_Delay+0x44>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d22:	bf00      	nop
 8003d24:	f7ff ffde 	bl	8003ce4 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d8f7      	bhi.n	8003d24 <HAL_Delay+0x28>
  {
  }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200000bc 	.word	0x200000bc

08003d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d60:	4013      	ands	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <__NVIC_SetPriorityGrouping+0x44>)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	60d3      	str	r3, [r2, #12]
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d90:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <__NVIC_GetPriorityGrouping+0x18>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	f003 0307 	and.w	r3, r3, #7
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	e000ed00 	.word	0xe000ed00

08003da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	db0b      	blt.n	8003dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	f003 021f 	and.w	r2, r3, #31
 8003dc0:	4907      	ldr	r1, [pc, #28]	; (8003de0 <__NVIC_EnableIRQ+0x38>)
 8003dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2001      	movs	r0, #1
 8003dca:	fa00 f202 	lsl.w	r2, r0, r2
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000e100 	.word	0xe000e100

08003de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	db0a      	blt.n	8003e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	490c      	ldr	r1, [pc, #48]	; (8003e30 <__NVIC_SetPriority+0x4c>)
 8003dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e02:	0112      	lsls	r2, r2, #4
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	440b      	add	r3, r1
 8003e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e0c:	e00a      	b.n	8003e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4908      	ldr	r1, [pc, #32]	; (8003e34 <__NVIC_SetPriority+0x50>)
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	3b04      	subs	r3, #4
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	440b      	add	r3, r1
 8003e22:	761a      	strb	r2, [r3, #24]
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr
 8003e30:	e000e100 	.word	0xe000e100
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b089      	sub	sp, #36	; 0x24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f1c3 0307 	rsb	r3, r3, #7
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	bf28      	it	cs
 8003e56:	2304      	movcs	r3, #4
 8003e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d902      	bls.n	8003e68 <NVIC_EncodePriority+0x30>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b03      	subs	r3, #3
 8003e66:	e000      	b.n	8003e6a <NVIC_EncodePriority+0x32>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e80:	f04f 31ff 	mov.w	r1, #4294967295
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8a:	43d9      	mvns	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	4313      	orrs	r3, r2
         );
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
	...

08003ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb0:	d301      	bcc.n	8003eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <SysTick_Config+0x40>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ebe:	210f      	movs	r1, #15
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	f7ff ff8e 	bl	8003de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <SysTick_Config+0x40>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <SysTick_Config+0x40>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010

08003ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff29 	bl	8003d44 <__NVIC_SetPriorityGrouping>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	4603      	mov	r3, r0
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f0c:	f7ff ff3e 	bl	8003d8c <__NVIC_GetPriorityGrouping>
 8003f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f7ff ff8e 	bl	8003e38 <NVIC_EncodePriority>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f22:	4611      	mov	r1, r2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff ff5d 	bl	8003de4 <__NVIC_SetPriority>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff31 	bl	8003da8 <__NVIC_EnableIRQ>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffa2 	bl	8003ea0 <SysTick_Config>
 8003f5c:	4603      	mov	r3, r0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e14d      	b.n	8004220 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f84:	2201      	movs	r2, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 813c 	bne.w	800421a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d005      	beq.n	8003fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d130      	bne.n	800401c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4013      	ands	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 0201 	and.w	r2, r3, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d017      	beq.n	8004058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4313      	orrs	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d123      	bne.n	80040ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	220f      	movs	r2, #15
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4013      	ands	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	691a      	ldr	r2, [r3, #16]
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	08da      	lsrs	r2, r3, #3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3208      	adds	r2, #8
 80040a6:	69b9      	ldr	r1, [r7, #24]
 80040a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 0203 	and.w	r2, r3, #3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8096 	beq.w	800421a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	4b51      	ldr	r3, [pc, #324]	; (8004238 <HAL_GPIO_Init+0x2d0>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	4a50      	ldr	r2, [pc, #320]	; (8004238 <HAL_GPIO_Init+0x2d0>)
 80040f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040fc:	6453      	str	r3, [r2, #68]	; 0x44
 80040fe:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <HAL_GPIO_Init+0x2d0>)
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800410a:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x2d4>)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	089b      	lsrs	r3, r3, #2
 8004110:	3302      	adds	r3, #2
 8004112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a43      	ldr	r2, [pc, #268]	; (8004240 <HAL_GPIO_Init+0x2d8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00d      	beq.n	8004152 <HAL_GPIO_Init+0x1ea>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_GPIO_Init+0x2dc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d007      	beq.n	800414e <HAL_GPIO_Init+0x1e6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a41      	ldr	r2, [pc, #260]	; (8004248 <HAL_GPIO_Init+0x2e0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_GPIO_Init+0x1e2>
 8004146:	2302      	movs	r3, #2
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x1ec>
 800414a:	2307      	movs	r3, #7
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x1ec>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x1ec>
 8004152:	2300      	movs	r3, #0
 8004154:	69fa      	ldr	r2, [r7, #28]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004164:	4935      	ldr	r1, [pc, #212]	; (800423c <HAL_GPIO_Init+0x2d4>)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_GPIO_Init+0x2e4>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_GPIO_Init+0x2e4>)
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800419c:	4b2b      	ldr	r3, [pc, #172]	; (800424c <HAL_GPIO_Init+0x2e4>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4013      	ands	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041c0:	4a22      	ldr	r2, [pc, #136]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041c6:	4b21      	ldr	r3, [pc, #132]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <HAL_GPIO_Init+0x2e4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <HAL_GPIO_Init+0x2e4>)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b0f      	cmp	r3, #15
 8004224:	f67f aeae 	bls.w	8003f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004228:	bf00      	nop
 800422a:	bf00      	nop
 800422c:	3724      	adds	r7, #36	; 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	40013800 	.word	0x40013800
 8004240:	40020000 	.word	0x40020000
 8004244:	40020400 	.word	0x40020400
 8004248:	40020800 	.word	0x40020800
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	887b      	ldrh	r3, [r7, #2]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
 800426c:	e001      	b.n	8004272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800426e:	2300      	movs	r3, #0
 8004270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
 800428c:	4613      	mov	r3, r2
 800428e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004290:	787b      	ldrb	r3, [r7, #1]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800429c:	e003      	b.n	80042a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	041a      	lsls	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	460b      	mov	r3, r1
 80042bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042c4:	887a      	ldrh	r2, [r7, #2]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4013      	ands	r3, r2
 80042ca:	041a      	lsls	r2, r3, #16
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	43d9      	mvns	r1, r3
 80042d0:	887b      	ldrh	r3, [r7, #2]
 80042d2:	400b      	ands	r3, r1
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	619a      	str	r2, [r3, #24]
}
 80042da:	bf00      	nop
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
	...

080042e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f4:	695a      	ldr	r2, [r3, #20]
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d006      	beq.n	800430c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	4618      	mov	r0, r3
 8004308:	f000 f806 	bl	8004318 <HAL_GPIO_EXTI_Callback>
  }
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e12b      	b.n	800459a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fe fb46 	bl	80029e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004382:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004392:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004394:	f001 fc28 	bl	8005be8 <HAL_RCC_GetPCLK1Freq>
 8004398:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4a81      	ldr	r2, [pc, #516]	; (80045a4 <HAL_I2C_Init+0x274>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d807      	bhi.n	80043b4 <HAL_I2C_Init+0x84>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a80      	ldr	r2, [pc, #512]	; (80045a8 <HAL_I2C_Init+0x278>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e006      	b.n	80043c2 <HAL_I2C_Init+0x92>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a7d      	ldr	r2, [pc, #500]	; (80045ac <HAL_I2C_Init+0x27c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf94      	ite	ls
 80043bc:	2301      	movls	r3, #1
 80043be:	2300      	movhi	r3, #0
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0e7      	b.n	800459a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a78      	ldr	r2, [pc, #480]	; (80045b0 <HAL_I2C_Init+0x280>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	0c9b      	lsrs	r3, r3, #18
 80043d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a6a      	ldr	r2, [pc, #424]	; (80045a4 <HAL_I2C_Init+0x274>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d802      	bhi.n	8004404 <HAL_I2C_Init+0xd4>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3301      	adds	r3, #1
 8004402:	e009      	b.n	8004418 <HAL_I2C_Init+0xe8>
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800440a:	fb02 f303 	mul.w	r3, r2, r3
 800440e:	4a69      	ldr	r2, [pc, #420]	; (80045b4 <HAL_I2C_Init+0x284>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	099b      	lsrs	r3, r3, #6
 8004416:	3301      	adds	r3, #1
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800442a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	495c      	ldr	r1, [pc, #368]	; (80045a4 <HAL_I2C_Init+0x274>)
 8004434:	428b      	cmp	r3, r1
 8004436:	d819      	bhi.n	800446c <HAL_I2C_Init+0x13c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1e59      	subs	r1, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	1c59      	adds	r1, r3, #1
 8004448:	f640 73fc 	movw	r3, #4092	; 0xffc
 800444c:	400b      	ands	r3, r1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00a      	beq.n	8004468 <HAL_I2C_Init+0x138>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1e59      	subs	r1, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004460:	3301      	adds	r3, #1
 8004462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004466:	e051      	b.n	800450c <HAL_I2C_Init+0x1dc>
 8004468:	2304      	movs	r3, #4
 800446a:	e04f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <HAL_I2C_Init+0x168>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1e58      	subs	r0, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	440b      	add	r3, r1
 8004482:	fbb0 f3f3 	udiv	r3, r0, r3
 8004486:	3301      	adds	r3, #1
 8004488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e012      	b.n	80044be <HAL_I2C_Init+0x18e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e58      	subs	r0, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	0099      	lsls	r1, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_I2C_Init+0x196>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10e      	bne.n	80044ec <HAL_I2C_Init+0x1bc>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1e58      	subs	r0, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6859      	ldr	r1, [r3, #4]
 80044d6:	460b      	mov	r3, r1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	440b      	add	r3, r1
 80044dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e0:	3301      	adds	r3, #1
 80044e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Init+0x1dc>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1e58      	subs	r0, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004502:	3301      	adds	r3, #1
 8004504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	6809      	ldr	r1, [r1, #0]
 8004510:	4313      	orrs	r3, r2
 8004512:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800453a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6911      	ldr	r1, [r2, #16]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695a      	ldr	r2, [r3, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0201 	orr.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	000186a0 	.word	0x000186a0
 80045a8:	001e847f 	.word	0x001e847f
 80045ac:	003d08ff 	.word	0x003d08ff
 80045b0:	431bde83 	.word	0x431bde83
 80045b4:	10624dd3 	.word	0x10624dd3

080045b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	461a      	mov	r2, r3
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
 80045c8:	4613      	mov	r3, r2
 80045ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045cc:	f7ff fb8a 	bl	8003ce4 <HAL_GetTick>
 80045d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b20      	cmp	r3, #32
 80045dc:	f040 80e0 	bne.w	80047a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2319      	movs	r3, #25
 80045e6:	2201      	movs	r2, #1
 80045e8:	4970      	ldr	r1, [pc, #448]	; (80047ac <HAL_I2C_Master_Transmit+0x1f4>)
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 ff66 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0d3      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_I2C_Master_Transmit+0x50>
 8004604:	2302      	movs	r3, #2
 8004606:	e0cc      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b01      	cmp	r3, #1
 800461c:	d007      	beq.n	800462e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800463c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2210      	movs	r2, #16
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	893a      	ldrh	r2, [r7, #8]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a50      	ldr	r2, [pc, #320]	; (80047b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800466e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004670:	8979      	ldrh	r1, [r7, #10]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	6a3a      	ldr	r2, [r7, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fce8 	bl	800504c <I2C_MasterRequestWrite>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e08d      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800469c:	e066      	b.n	800476c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f000 ffe0 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d107      	bne.n	80046c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e06b      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11b      	bne.n	8004740 <HAL_I2C_Master_Transmit+0x188>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470c:	2b00      	cmp	r3, #0
 800470e:	d017      	beq.n	8004740 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	6a39      	ldr	r1, [r7, #32]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 ffd0 	bl	80056ea <I2C_WaitOnBTFFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00d      	beq.n	800476c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	2b04      	cmp	r3, #4
 8004756:	d107      	bne.n	8004768 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004766:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e01a      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	d194      	bne.n	800469e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	00100002 	.word	0x00100002
 80047b0:	ffff0000 	.word	0xffff0000

080047b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08c      	sub	sp, #48	; 0x30
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	817b      	strh	r3, [r7, #10]
 80047c4:	4613      	mov	r3, r2
 80047c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c8:	f7ff fa8c 	bl	8003ce4 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	f040 820b 	bne.w	8004bf2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	2319      	movs	r3, #25
 80047e2:	2201      	movs	r2, #1
 80047e4:	497c      	ldr	r1, [pc, #496]	; (80049d8 <HAL_I2C_Master_Receive+0x224>)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fe68 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
 80047f4:	e1fe      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_I2C_Master_Receive+0x50>
 8004800:	2302      	movs	r3, #2
 8004802:	e1f7      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d007      	beq.n	800482a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004838:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2222      	movs	r2, #34	; 0x22
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2210      	movs	r2, #16
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	893a      	ldrh	r2, [r7, #8]
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a5c      	ldr	r2, [pc, #368]	; (80049dc <HAL_I2C_Master_Receive+0x228>)
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800486c:	8979      	ldrh	r1, [r7, #10]
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fc6c 	bl	8005150 <I2C_MasterRequestRead>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e1b8      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d113      	bne.n	80048b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	623b      	str	r3, [r7, #32]
 800489e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	e18c      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d11b      	bne.n	80048f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e16c      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d11b      	bne.n	8004932 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004908:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	e14c      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004942:	2300      	movs	r3, #0
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004958:	e138      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	2b03      	cmp	r3, #3
 8004960:	f200 80f1 	bhi.w	8004b46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004968:	2b01      	cmp	r3, #1
 800496a:	d123      	bne.n	80049b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800496e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fefb 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e139      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b2:	e10b      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d14e      	bne.n	8004a5a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	2200      	movs	r2, #0
 80049c4:	4906      	ldr	r1, [pc, #24]	; (80049e0 <HAL_I2C_Master_Receive+0x22c>)
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fd78 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e10e      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
 80049d6:	bf00      	nop
 80049d8:	00100002 	.word	0x00100002
 80049dc:	ffff0000 	.word	0xffff0000
 80049e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a58:	e0b8      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	2200      	movs	r2, #0
 8004a62:	4966      	ldr	r1, [pc, #408]	; (8004bfc <HAL_I2C_Master_Receive+0x448>)
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 fd29 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0bf      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	2200      	movs	r2, #0
 8004abe:	494f      	ldr	r1, [pc, #316]	; (8004bfc <HAL_I2C_Master_Receive+0x448>)
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fcfb 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e091      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b44:	e042      	b.n	8004bcc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fe0e 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e04c      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d118      	bne.n	8004bcc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f47f aec2 	bne.w	800495a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3728      	adds	r7, #40	; 0x28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	00010004 	.word	0x00010004

08004c00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	; 0x30
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	817b      	strh	r3, [r7, #10]
 8004c12:	460b      	mov	r3, r1
 8004c14:	813b      	strh	r3, [r7, #8]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c1a:	f7ff f863 	bl	8003ce4 <HAL_GetTick>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f040 8208 	bne.w	800503e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	2319      	movs	r3, #25
 8004c34:	2201      	movs	r2, #1
 8004c36:	497b      	ldr	r1, [pc, #492]	; (8004e24 <HAL_I2C_Mem_Read+0x224>)
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fc3f 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c44:	2302      	movs	r3, #2
 8004c46:	e1fb      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_I2C_Mem_Read+0x56>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e1f4      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d007      	beq.n	8004c7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2222      	movs	r2, #34	; 0x22
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a5b      	ldr	r2, [pc, #364]	; (8004e28 <HAL_I2C_Mem_Read+0x228>)
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cbe:	88f8      	ldrh	r0, [r7, #6]
 8004cc0:	893a      	ldrh	r2, [r7, #8]
 8004cc2:	8979      	ldrh	r1, [r7, #10]
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	4603      	mov	r3, r0
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f000 fb0c 	bl	80052ec <I2C_RequestMemoryRead>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e1b0      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d113      	bne.n	8004d0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	623b      	str	r3, [r7, #32]
 8004cfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	e184      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d11b      	bne.n	8004d4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e164      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d11b      	bne.n	8004d8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	e144      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004da4:	e138      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	f200 80f1 	bhi.w	8004f92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d123      	bne.n	8004e00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fcd5 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e139      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dfe:	e10b      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d14e      	bne.n	8004ea6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0e:	2200      	movs	r2, #0
 8004e10:	4906      	ldr	r1, [pc, #24]	; (8004e2c <HAL_I2C_Mem_Read+0x22c>)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 fb52 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d008      	beq.n	8004e30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e10e      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
 8004e22:	bf00      	nop
 8004e24:	00100002 	.word	0x00100002
 8004e28:	ffff0000 	.word	0xffff0000
 8004e2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ea4:	e0b8      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eac:	2200      	movs	r2, #0
 8004eae:	4966      	ldr	r1, [pc, #408]	; (8005048 <HAL_I2C_Mem_Read+0x448>)
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fb03 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e0bf      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	b2d2      	uxtb	r2, r2
 8004edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2200      	movs	r2, #0
 8004f0a:	494f      	ldr	r1, [pc, #316]	; (8005048 <HAL_I2C_Mem_Read+0x448>)
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 fad5 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e091      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691a      	ldr	r2, [r3, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f90:	e042      	b.n	8005018 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fbe8 	bl	800576c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e04c      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d118      	bne.n	8005018 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691a      	ldr	r2, [r3, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	b2d2      	uxtb	r2, r2
 8004ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f aec2 	bne.w	8004da6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2220      	movs	r2, #32
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e000      	b.n	8005040 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	00010004 	.word	0x00010004

0800504c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b088      	sub	sp, #32
 8005050:	af02      	add	r7, sp, #8
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	607a      	str	r2, [r7, #4]
 8005056:	603b      	str	r3, [r7, #0]
 8005058:	460b      	mov	r3, r1
 800505a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d006      	beq.n	8005076 <I2C_MasterRequestWrite+0x2a>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d003      	beq.n	8005076 <I2C_MasterRequestWrite+0x2a>
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005074:	d108      	bne.n	8005088 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e00b      	b.n	80050a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	2b12      	cmp	r3, #18
 800508e:	d107      	bne.n	80050a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fa05 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c6:	d103      	bne.n	80050d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e035      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050dc:	d108      	bne.n	80050f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050ec:	611a      	str	r2, [r3, #16]
 80050ee:	e01b      	b.n	8005128 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	11db      	asrs	r3, r3, #7
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 0306 	and.w	r3, r3, #6
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f063 030f 	orn	r3, r3, #15
 8005100:	b2da      	uxtb	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	490e      	ldr	r1, [pc, #56]	; (8005148 <I2C_MasterRequestWrite+0xfc>)
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fa2b 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e010      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800511e:	897b      	ldrh	r3, [r7, #10]
 8005120:	b2da      	uxtb	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	4907      	ldr	r1, [pc, #28]	; (800514c <I2C_MasterRequestWrite+0x100>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fa1b 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3718      	adds	r7, #24
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	00010008 	.word	0x00010008
 800514c:	00010002 	.word	0x00010002

08005150 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	460b      	mov	r3, r1
 800515e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005174:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b08      	cmp	r3, #8
 800517a:	d006      	beq.n	800518a <I2C_MasterRequestRead+0x3a>
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d003      	beq.n	800518a <I2C_MasterRequestRead+0x3a>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005188:	d108      	bne.n	800519c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	e00b      	b.n	80051b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a0:	2b11      	cmp	r3, #17
 80051a2:	d107      	bne.n	80051b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 f97b 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	d103      	bne.n	80051e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e079      	b.n	80052dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051f0:	d108      	bne.n	8005204 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051f2:	897b      	ldrh	r3, [r7, #10]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	611a      	str	r2, [r3, #16]
 8005202:	e05f      	b.n	80052c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005204:	897b      	ldrh	r3, [r7, #10]
 8005206:	11db      	asrs	r3, r3, #7
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0306 	and.w	r3, r3, #6
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f063 030f 	orn	r3, r3, #15
 8005214:	b2da      	uxtb	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4930      	ldr	r1, [pc, #192]	; (80052e4 <I2C_MasterRequestRead+0x194>)
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f9a1 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e054      	b.n	80052dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	b2da      	uxtb	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4929      	ldr	r1, [pc, #164]	; (80052e8 <I2C_MasterRequestRead+0x198>)
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f991 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e044      	b.n	80052dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005276:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f919 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00d      	beq.n	80052ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529e:	d103      	bne.n	80052a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052a6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e017      	b.n	80052dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052ac:	897b      	ldrh	r3, [r7, #10]
 80052ae:	11db      	asrs	r3, r3, #7
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	f003 0306 	and.w	r3, r3, #6
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f063 030e 	orn	r3, r3, #14
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <I2C_MasterRequestRead+0x198>)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f94d 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010008 	.word	0x00010008
 80052e8:	00010002 	.word	0x00010002

080052ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	4608      	mov	r0, r1
 80052f6:	4611      	mov	r1, r2
 80052f8:	461a      	mov	r2, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	817b      	strh	r3, [r7, #10]
 80052fe:	460b      	mov	r3, r1
 8005300:	813b      	strh	r3, [r7, #8]
 8005302:	4613      	mov	r3, r2
 8005304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	2200      	movs	r2, #0
 800532e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f8c2 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d103      	bne.n	8005356 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0aa      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	4952      	ldr	r1, [pc, #328]	; (80054b8 <I2C_RequestMemoryRead+0x1cc>)
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f8fa 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e097      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005398:	6a39      	ldr	r1, [r7, #32]
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f964 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d107      	bne.n	80053be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e076      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053c2:	88fb      	ldrh	r3, [r7, #6]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d105      	bne.n	80053d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c8:	893b      	ldrh	r3, [r7, #8]
 80053ca:	b2da      	uxtb	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	611a      	str	r2, [r3, #16]
 80053d2:	e021      	b.n	8005418 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053d4:	893b      	ldrh	r3, [r7, #8]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	b29b      	uxth	r3, r3
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e4:	6a39      	ldr	r1, [r7, #32]
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f93e 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00d      	beq.n	800540e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d107      	bne.n	800540a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e050      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800540e:	893b      	ldrh	r3, [r7, #8]
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541a:	6a39      	ldr	r1, [r7, #32]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 f923 	bl	8005668 <I2C_WaitOnTXEFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00d      	beq.n	8005444 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b04      	cmp	r3, #4
 800542e:	d107      	bne.n	8005440 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e035      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005452:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2200      	movs	r2, #0
 800545c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f82b 	bl	80054bc <I2C_WaitOnFlagUntilTimeout>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00d      	beq.n	8005488 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547a:	d103      	bne.n	8005484 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e013      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005488:	897b      	ldrh	r3, [r7, #10]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	b2da      	uxtb	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	4906      	ldr	r1, [pc, #24]	; (80054b8 <I2C_RequestMemoryRead+0x1cc>)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f863 	bl	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	00010002 	.word	0x00010002

080054bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054cc:	e025      	b.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d021      	beq.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d6:	f7fe fc05 	bl	8003ce4 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d302      	bcc.n	80054ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	f043 0220 	orr.w	r2, r3, #32
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e023      	b.n	8005562 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10d      	bne.n	8005540 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	43da      	mvns	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	e00c      	b.n	800555a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	43da      	mvns	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf0c      	ite	eq
 8005552:	2301      	moveq	r3, #1
 8005554:	2300      	movne	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	429a      	cmp	r2, r3
 800555e:	d0b6      	beq.n	80054ce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005578:	e051      	b.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005588:	d123      	bne.n	80055d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005598:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055a2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f043 0204 	orr.w	r2, r3, #4
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e046      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d021      	beq.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055da:	f7fe fb83 	bl	8003ce4 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d302      	bcc.n	80055f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d116      	bne.n	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e020      	b.n	8005660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	0c1b      	lsrs	r3, r3, #16
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d10c      	bne.n	8005642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	43da      	mvns	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2db      	uxtb	r3, r3
 8005640:	e00b      	b.n	800565a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	43da      	mvns	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d18d      	bne.n	800557a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005674:	e02d      	b.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f8ce 	bl	8005818 <I2C_IsAcknowledgeFailed>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e02d      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fe fb29 	bl	8003ce4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e007      	b.n	80056e2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d1ca      	bne.n	8005676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	60b9      	str	r1, [r7, #8]
 80056f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056f6:	e02d      	b.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f88d 	bl	8005818 <I2C_IsAcknowledgeFailed>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e02d      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d021      	beq.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005710:	f7fe fae8 	bl	8003ce4 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	429a      	cmp	r2, r3
 800571e:	d302      	bcc.n	8005726 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d116      	bne.n	8005754 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e007      	b.n	8005764 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d1ca      	bne.n	80056f8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005778:	e042      	b.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f003 0310 	and.w	r3, r3, #16
 8005784:	2b10      	cmp	r3, #16
 8005786:	d119      	bne.n	80057bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0210 	mvn.w	r2, #16
 8005790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e029      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057bc:	f7fe fa92 	bl	8003ce4 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d302      	bcc.n	80057d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d116      	bne.n	8005800 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e007      	b.n	8005810 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b40      	cmp	r3, #64	; 0x40
 800580c:	d1b5      	bne.n	800577a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d11b      	bne.n	8005868 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005838:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f043 0204 	orr.w	r2, r3, #4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
	...

08005878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0cc      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d90c      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	683a      	ldr	r2, [r7, #0]
 800589e:	b2d2      	uxtb	r2, r2
 80058a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0b8      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d020      	beq.n	8005902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058cc:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4a58      	ldr	r2, [pc, #352]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4a52      	ldr	r2, [pc, #328]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f0:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	494d      	ldr	r1, [pc, #308]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d044      	beq.n	8005998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	4b47      	ldr	r3, [pc, #284]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d119      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d003      	beq.n	8005936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005932:	2b03      	cmp	r3, #3
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e06f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e067      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f023 0203 	bic.w	r2, r3, #3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	4934      	ldr	r1, [pc, #208]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005968:	f7fe f9bc 	bl	8003ce4 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596e:	e00a      	b.n	8005986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005970:	f7fe f9b8 	bl	8003ce4 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	; 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e04f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 020c 	and.w	r2, r3, #12
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	429a      	cmp	r2, r3
 8005996:	d1eb      	bne.n	8005970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005998:	4b25      	ldr	r3, [pc, #148]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d20c      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a6:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_RCC_ClockConfig+0x1b8>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e032      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4916      	ldr	r1, [pc, #88]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	490e      	ldr	r1, [pc, #56]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059fe:	f000 f821 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 8005a02:	4602      	mov	r2, r0
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	490a      	ldr	r1, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x1c0>)
 8005a10:	5ccb      	ldrb	r3, [r1, r3]
 8005a12:	fa22 f303 	lsr.w	r3, r2, r3
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 8005a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe f91c 	bl	8003c5c <HAL_InitTick>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40023c00 	.word	0x40023c00
 8005a34:	40023800 	.word	0x40023800
 8005a38:	0800ba7c 	.word	0x0800ba7c
 8005a3c:	200000b4 	.word	0x200000b4
 8005a40:	200000b8 	.word	0x200000b8

08005a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a48:	b090      	sub	sp, #64	; 0x40
 8005a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a54:	2300      	movs	r3, #0
 8005a56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a5c:	4b59      	ldr	r3, [pc, #356]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 030c 	and.w	r3, r3, #12
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d00d      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x40>
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	f200 80a1 	bhi.w	8005bb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x34>
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	d003      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a76:	e09b      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a78:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a7c:	e09b      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a7e:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a82:	e098      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a84:	4b4f      	ldr	r3, [pc, #316]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8e:	4b4d      	ldr	r3, [pc, #308]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d028      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	099b      	lsrs	r3, r3, #6
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	623b      	str	r3, [r7, #32]
 8005aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005aac:	2100      	movs	r1, #0
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab0:	fb03 f201 	mul.w	r2, r3, r1
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	fb00 f303 	mul.w	r3, r0, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	4a43      	ldr	r2, [pc, #268]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8005abe:	fba0 1202 	umull	r1, r2, r0, r2
 8005ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ac4:	460a      	mov	r2, r1
 8005ac6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005aca:	4413      	add	r3, r2
 8005acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	61fa      	str	r2, [r7, #28]
 8005ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ada:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ade:	f7fb f8d3 	bl	8000c88 <__aeabi_uldivmod>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aea:	e053      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aec:	4b35      	ldr	r3, [pc, #212]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	099b      	lsrs	r3, r3, #6
 8005af2:	2200      	movs	r2, #0
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	617a      	str	r2, [r7, #20]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005afe:	f04f 0b00 	mov.w	fp, #0
 8005b02:	4652      	mov	r2, sl
 8005b04:	465b      	mov	r3, fp
 8005b06:	f04f 0000 	mov.w	r0, #0
 8005b0a:	f04f 0100 	mov.w	r1, #0
 8005b0e:	0159      	lsls	r1, r3, #5
 8005b10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b14:	0150      	lsls	r0, r2, #5
 8005b16:	4602      	mov	r2, r0
 8005b18:	460b      	mov	r3, r1
 8005b1a:	ebb2 080a 	subs.w	r8, r2, sl
 8005b1e:	eb63 090b 	sbc.w	r9, r3, fp
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b36:	ebb2 0408 	subs.w	r4, r2, r8
 8005b3a:	eb63 0509 	sbc.w	r5, r3, r9
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	00eb      	lsls	r3, r5, #3
 8005b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b4c:	00e2      	lsls	r2, r4, #3
 8005b4e:	4614      	mov	r4, r2
 8005b50:	461d      	mov	r5, r3
 8005b52:	eb14 030a 	adds.w	r3, r4, sl
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	eb45 030b 	adc.w	r3, r5, fp
 8005b5c:	607b      	str	r3, [r7, #4]
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	028b      	lsls	r3, r1, #10
 8005b6e:	4621      	mov	r1, r4
 8005b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b74:	4621      	mov	r1, r4
 8005b76:	028a      	lsls	r2, r1, #10
 8005b78:	4610      	mov	r0, r2
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	60fa      	str	r2, [r7, #12]
 8005b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b88:	f7fb f87e 	bl	8000c88 <__aeabi_uldivmod>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4613      	mov	r3, r2
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bae:	e002      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bb2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3740      	adds	r7, #64	; 0x40
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	00f42400 	.word	0x00f42400
 8005bcc:	018cba80 	.word	0x018cba80

08005bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	200000b4 	.word	0x200000b4

08005be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bec:	f7ff fff0 	bl	8005bd0 <HAL_RCC_GetHCLKFreq>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	0a9b      	lsrs	r3, r3, #10
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	4903      	ldr	r1, [pc, #12]	; (8005c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfe:	5ccb      	ldrb	r3, [r1, r3]
 8005c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40023800 	.word	0x40023800
 8005c0c:	0800ba8c 	.word	0x0800ba8c

08005c10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e273      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d075      	beq.n	8005d1a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c2e:	4b88      	ldr	r3, [pc, #544]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d00c      	beq.n	8005c54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c3a:	4b85      	ldr	r3, [pc, #532]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d112      	bne.n	8005c6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c46:	4b82      	ldr	r3, [pc, #520]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c52:	d10b      	bne.n	8005c6c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c54:	4b7e      	ldr	r3, [pc, #504]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d05b      	beq.n	8005d18 <HAL_RCC_OscConfig+0x108>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d157      	bne.n	8005d18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e24e      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d106      	bne.n	8005c84 <HAL_RCC_OscConfig+0x74>
 8005c76:	4b76      	ldr	r3, [pc, #472]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a75      	ldr	r2, [pc, #468]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e01d      	b.n	8005cc0 <HAL_RCC_OscConfig+0xb0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x98>
 8005c8e:	4b70      	ldr	r3, [pc, #448]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a6f      	ldr	r2, [pc, #444]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	4b6d      	ldr	r3, [pc, #436]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6c      	ldr	r2, [pc, #432]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCC_OscConfig+0xb0>
 8005ca8:	4b69      	ldr	r3, [pc, #420]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a68      	ldr	r2, [pc, #416]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	4b66      	ldr	r3, [pc, #408]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a65      	ldr	r2, [pc, #404]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d013      	beq.n	8005cf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc8:	f7fe f80c 	bl	8003ce4 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cce:	e008      	b.n	8005ce2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cd0:	f7fe f808 	bl	8003ce4 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b64      	cmp	r3, #100	; 0x64
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e213      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	4b5b      	ldr	r3, [pc, #364]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0xc0>
 8005cee:	e014      	b.n	8005d1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fd fff8 	bl	8003ce4 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf8:	f7fd fff4 	bl	8003ce4 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b64      	cmp	r3, #100	; 0x64
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e1ff      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	4b51      	ldr	r3, [pc, #324]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0xe8>
 8005d16:	e000      	b.n	8005d1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d063      	beq.n	8005dee <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d26:	4b4a      	ldr	r3, [pc, #296]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d32:	4b47      	ldr	r3, [pc, #284]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d11c      	bne.n	8005d78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d3e:	4b44      	ldr	r3, [pc, #272]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d4a:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_RCC_OscConfig+0x152>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d001      	beq.n	8005d62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e1d3      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	4937      	ldr	r1, [pc, #220]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d76:	e03a      	b.n	8005dee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d020      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d80:	4b34      	ldr	r3, [pc, #208]	; (8005e54 <HAL_RCC_OscConfig+0x244>)
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d86:	f7fd ffad 	bl	8003ce4 <HAL_GetTick>
 8005d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8c:	e008      	b.n	8005da0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d8e:	f7fd ffa9 	bl	8003ce4 <HAL_GetTick>
 8005d92:	4602      	mov	r2, r0
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d901      	bls.n	8005da0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e1b4      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da0:	4b2b      	ldr	r3, [pc, #172]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d0f0      	beq.n	8005d8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dac:	4b28      	ldr	r3, [pc, #160]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	4925      	ldr	r1, [pc, #148]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
 8005dc0:	e015      	b.n	8005dee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dc2:	4b24      	ldr	r3, [pc, #144]	; (8005e54 <HAL_RCC_OscConfig+0x244>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd ff8c 	bl	8003ce4 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dd0:	f7fd ff88 	bl	8003ce4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e193      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005de2:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d036      	beq.n	8005e68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e02:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <HAL_RCC_OscConfig+0x248>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e08:	f7fd ff6c 	bl	8003ce4 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e10:	f7fd ff68 	bl	8003ce4 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e173      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e22:	4b0b      	ldr	r3, [pc, #44]	; (8005e50 <HAL_RCC_OscConfig+0x240>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x200>
 8005e2e:	e01b      	b.n	8005e68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e30:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <HAL_RCC_OscConfig+0x248>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7fd ff55 	bl	8003ce4 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e3c:	e00e      	b.n	8005e5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7fd ff51 	bl	8003ce4 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d907      	bls.n	8005e5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e15c      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
 8005e50:	40023800 	.word	0x40023800
 8005e54:	42470000 	.word	0x42470000
 8005e58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e5c:	4b8a      	ldr	r3, [pc, #552]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005e5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ea      	bne.n	8005e3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8097 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7a:	4b83      	ldr	r3, [pc, #524]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	4b7f      	ldr	r3, [pc, #508]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a7e      	ldr	r2, [pc, #504]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
 8005e96:	4b7c      	ldr	r3, [pc, #496]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea6:	4b79      	ldr	r3, [pc, #484]	; (800608c <HAL_RCC_OscConfig+0x47c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d118      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb2:	4b76      	ldr	r3, [pc, #472]	; (800608c <HAL_RCC_OscConfig+0x47c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a75      	ldr	r2, [pc, #468]	; (800608c <HAL_RCC_OscConfig+0x47c>)
 8005eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd ff11 	bl	8003ce4 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec6:	f7fd ff0d 	bl	8003ce4 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e118      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed8:	4b6c      	ldr	r3, [pc, #432]	; (800608c <HAL_RCC_OscConfig+0x47c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f0      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d106      	bne.n	8005efa <HAL_RCC_OscConfig+0x2ea>
 8005eec:	4b66      	ldr	r3, [pc, #408]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	4a65      	ldr	r2, [pc, #404]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005ef2:	f043 0301 	orr.w	r3, r3, #1
 8005ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef8:	e01c      	b.n	8005f34 <HAL_RCC_OscConfig+0x324>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x30c>
 8005f02:	4b61      	ldr	r3, [pc, #388]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4a60      	ldr	r2, [pc, #384]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f08:	f043 0304 	orr.w	r3, r3, #4
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0e:	4b5e      	ldr	r3, [pc, #376]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f12:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCC_OscConfig+0x324>
 8005f1c:	4b5a      	ldr	r3, [pc, #360]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a59      	ldr	r2, [pc, #356]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f22:	f023 0301 	bic.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	4b57      	ldr	r3, [pc, #348]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2c:	4a56      	ldr	r2, [pc, #344]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f2e:	f023 0304 	bic.w	r3, r3, #4
 8005f32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d015      	beq.n	8005f68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fd fed2 	bl	8003ce4 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f44:	f7fd fece 	bl	8003ce4 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0d7      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0ee      	beq.n	8005f44 <HAL_RCC_OscConfig+0x334>
 8005f66:	e014      	b.n	8005f92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f68:	f7fd febc 	bl	8003ce4 <HAL_GetTick>
 8005f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f6e:	e00a      	b.n	8005f86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f70:	f7fd feb8 	bl	8003ce4 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e0c1      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1ee      	bne.n	8005f70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d105      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f98:	4b3b      	ldr	r3, [pc, #236]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	4a3a      	ldr	r2, [pc, #232]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80ad 	beq.w	8006108 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fae:	4b36      	ldr	r3, [pc, #216]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f003 030c 	and.w	r3, r3, #12
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d060      	beq.n	800607c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d145      	bne.n	800604e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc2:	4b33      	ldr	r3, [pc, #204]	; (8006090 <HAL_RCC_OscConfig+0x480>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc8:	f7fd fe8c 	bl	8003ce4 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fd0:	f7fd fe88 	bl	8003ce4 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e093      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1f0      	bne.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	69da      	ldr	r2, [r3, #28]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffc:	019b      	lsls	r3, r3, #6
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	3b01      	subs	r3, #1
 8006008:	041b      	lsls	r3, r3, #16
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	061b      	lsls	r3, r3, #24
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	071b      	lsls	r3, r3, #28
 800601a:	491b      	ldr	r1, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 800601c:	4313      	orrs	r3, r2
 800601e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006020:	4b1b      	ldr	r3, [pc, #108]	; (8006090 <HAL_RCC_OscConfig+0x480>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006026:	f7fd fe5d 	bl	8003ce4 <HAL_GetTick>
 800602a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800602c:	e008      	b.n	8006040 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800602e:	f7fd fe59 	bl	8003ce4 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	2b02      	cmp	r3, #2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e064      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006040:	4b11      	ldr	r3, [pc, #68]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0f0      	beq.n	800602e <HAL_RCC_OscConfig+0x41e>
 800604c:	e05c      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <HAL_RCC_OscConfig+0x480>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fd fe46 	bl	8003ce4 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605c:	f7fd fe42 	bl	8003ce4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e04d      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606e:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_RCC_OscConfig+0x478>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x44c>
 800607a:	e045      	b.n	8006108 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d107      	bne.n	8006094 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e040      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
 8006088:	40023800 	.word	0x40023800
 800608c:	40007000 	.word	0x40007000
 8006090:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006094:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d030      	beq.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d129      	bne.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d122      	bne.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060c4:	4013      	ands	r3, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d119      	bne.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	3b01      	subs	r3, #1
 80060de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d10f      	bne.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d001      	beq.n	8006108 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40023800 	.word	0x40023800

08006118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e07b      	b.n	8006222 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b00      	cmp	r3, #0
 8006130:	d108      	bne.n	8006144 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613a:	d009      	beq.n	8006150 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	61da      	str	r2, [r3, #28]
 8006142:	e005      	b.n	8006150 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7fc ff1e 	bl	8002fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006186:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a2:	431a      	orrs	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c0:	431a      	orrs	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d4:	ea42 0103 	orr.w	r1, r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	f003 0104 	and.w	r1, r3, #4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	f003 0210 	and.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006210:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b088      	sub	sp, #32
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	603b      	str	r3, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006244:	2b01      	cmp	r3, #1
 8006246:	d101      	bne.n	800624c <HAL_SPI_Transmit+0x22>
 8006248:	2302      	movs	r3, #2
 800624a:	e126      	b.n	800649a <HAL_SPI_Transmit+0x270>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006254:	f7fd fd46 	bl	8003ce4 <HAL_GetTick>
 8006258:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b01      	cmp	r3, #1
 8006268:	d002      	beq.n	8006270 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800626a:	2302      	movs	r3, #2
 800626c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800626e:	e10b      	b.n	8006488 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_SPI_Transmit+0x52>
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006280:	e102      	b.n	8006488 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2203      	movs	r2, #3
 8006286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	88fa      	ldrh	r2, [r7, #6]
 80062a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	d10f      	bne.n	80062ea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d007      	beq.n	8006308 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006310:	d14b      	bne.n	80063aa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_SPI_Transmit+0xf6>
 800631a:	8afb      	ldrh	r3, [r7, #22]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d13e      	bne.n	800639e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006344:	e02b      	b.n	800639e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d112      	bne.n	800637a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006358:	881a      	ldrh	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800636e:	b29b      	uxth	r3, r3
 8006370:	3b01      	subs	r3, #1
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	86da      	strh	r2, [r3, #54]	; 0x36
 8006378:	e011      	b.n	800639e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800637a:	f7fd fcb3 	bl	8003ce4 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	429a      	cmp	r2, r3
 8006388:	d803      	bhi.n	8006392 <HAL_SPI_Transmit+0x168>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006390:	d102      	bne.n	8006398 <HAL_SPI_Transmit+0x16e>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d102      	bne.n	800639e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006398:	2303      	movs	r3, #3
 800639a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800639c:	e074      	b.n	8006488 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1ce      	bne.n	8006346 <HAL_SPI_Transmit+0x11c>
 80063a8:	e04c      	b.n	8006444 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <HAL_SPI_Transmit+0x18e>
 80063b2:	8afb      	ldrh	r3, [r7, #22]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d140      	bne.n	800643a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063de:	e02c      	b.n	800643a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d113      	bne.n	8006416 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	7812      	ldrb	r2, [r2, #0]
 80063fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640a:	b29b      	uxth	r3, r3
 800640c:	3b01      	subs	r3, #1
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	86da      	strh	r2, [r3, #54]	; 0x36
 8006414:	e011      	b.n	800643a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006416:	f7fd fc65 	bl	8003ce4 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	429a      	cmp	r2, r3
 8006424:	d803      	bhi.n	800642e <HAL_SPI_Transmit+0x204>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d102      	bne.n	8006434 <HAL_SPI_Transmit+0x20a>
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006438:	e026      	b.n	8006488 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1cd      	bne.n	80063e0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8b3 	bl	80065b4 <SPI_EndRxTxTransaction>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e000      	b.n	8006488 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006486:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006498:	7ffb      	ldrb	r3, [r7, #31]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3720      	adds	r7, #32
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	603b      	str	r3, [r7, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064b4:	f7fd fc16 	bl	8003ce4 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	1a9b      	subs	r3, r3, r2
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4413      	add	r3, r2
 80064c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064c4:	f7fd fc0e 	bl	8003ce4 <HAL_GetTick>
 80064c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064ca:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	015b      	lsls	r3, r3, #5
 80064d0:	0d1b      	lsrs	r3, r3, #20
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	fb02 f303 	mul.w	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064da:	e054      	b.n	8006586 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d050      	beq.n	8006586 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064e4:	f7fd fbfe 	bl	8003ce4 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	69fa      	ldr	r2, [r7, #28]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d902      	bls.n	80064fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d13d      	bne.n	8006576 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006508:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006512:	d111      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651c:	d004      	beq.n	8006528 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006526:	d107      	bne.n	8006538 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006536:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006540:	d10f      	bne.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006560:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e017      	b.n	80065a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800657c:	2300      	movs	r3, #0
 800657e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	3b01      	subs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4013      	ands	r3, r2
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	bf0c      	ite	eq
 8006596:	2301      	moveq	r3, #1
 8006598:	2300      	movne	r3, #0
 800659a:	b2db      	uxtb	r3, r3
 800659c:	461a      	mov	r2, r3
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d19b      	bne.n	80064dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200000b4 	.word	0x200000b4

080065b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065c0:	4b1b      	ldr	r3, [pc, #108]	; (8006630 <SPI_EndRxTxTransaction+0x7c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <SPI_EndRxTxTransaction+0x80>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	0d5b      	lsrs	r3, r3, #21
 80065cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065d0:	fb02 f303 	mul.w	r3, r2, r3
 80065d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065de:	d112      	bne.n	8006606 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	2180      	movs	r1, #128	; 0x80
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff ff5a 	bl	80064a4 <SPI_WaitFlagStateUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e00f      	b.n	8006626 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3b01      	subs	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b80      	cmp	r3, #128	; 0x80
 800661e:	d0f2      	beq.n	8006606 <SPI_EndRxTxTransaction+0x52>
 8006620:	e000      	b.n	8006624 <SPI_EndRxTxTransaction+0x70>
        break;
 8006622:	bf00      	nop
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200000b4 	.word	0x200000b4
 8006634:	165e9f81 	.word	0x165e9f81

08006638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d101      	bne.n	800664a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e041      	b.n	80066ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7fd f9ee 	bl	8003a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2202      	movs	r2, #2
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	3304      	adds	r3, #4
 8006674:	4619      	mov	r1, r3
 8006676:	4610      	mov	r0, r2
 8006678:	f000 fd20 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d001      	beq.n	80066f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e02d      	b.n	800674c <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_TIM_Base_Start+0x80>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_TIM_Base_Start+0x3e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <HAL_TIM_Base_Start+0x84>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d004      	beq.n	8006716 <HAL_TIM_Base_Start+0x3e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <HAL_TIM_Base_Start+0x88>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d111      	bne.n	800673a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b06      	cmp	r3, #6
 8006726:	d010      	beq.n	800674a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006738:	e007      	b.n	800674a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f042 0201 	orr.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800674a:	2300      	movs	r3, #0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40010000 	.word	0x40010000
 800675c:	40000c00 	.word	0x40000c00
 8006760:	40014000 	.word	0x40014000

08006764 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a1a      	ldr	r2, [r3, #32]
 8006772:	f241 1311 	movw	r3, #4369	; 0x1111
 8006776:	4013      	ands	r3, r2
 8006778:	2b00      	cmp	r3, #0
 800677a:	d10f      	bne.n	800679c <HAL_TIM_Base_Stop+0x38>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	f240 4344 	movw	r3, #1092	; 0x444
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_TIM_Base_Stop+0x38>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0201 	bic.w	r2, r2, #1
 800679a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
	...

080067b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d001      	beq.n	80067cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e035      	b.n	8006838 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a16      	ldr	r2, [pc, #88]	; (8006844 <HAL_TIM_Base_Start_IT+0x90>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x4e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <HAL_TIM_Base_Start_IT+0x94>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_Base_Start_IT+0x4e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <HAL_TIM_Base_Start_IT+0x98>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d111      	bne.n	8006826 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0307 	and.w	r3, r3, #7
 800680c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b06      	cmp	r3, #6
 8006812:	d010      	beq.n	8006836 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0201 	orr.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	e007      	b.n	8006836 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40014000 	.word	0x40014000

08006850 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6a1a      	ldr	r2, [r3, #32]
 800686e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10f      	bne.n	8006898 <HAL_TIM_Base_Stop_IT+0x48>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6a1a      	ldr	r2, [r3, #32]
 800687e:	f240 4344 	movw	r3, #1092	; 0x444
 8006882:	4013      	ands	r3, r2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d107      	bne.n	8006898 <HAL_TIM_Base_Stop_IT+0x48>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e041      	b.n	8006944 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fd f88b 	bl	80039f0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3304      	adds	r3, #4
 80068ea:	4619      	mov	r1, r3
 80068ec:	4610      	mov	r0, r2
 80068ee:	f000 fbe5 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e041      	b.n	80069e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fc fff6 	bl	8003964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	4619      	mov	r1, r3
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fb96 	bl	80070bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
	...

080069ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d109      	bne.n	8006a10 <HAL_TIM_PWM_Start+0x24>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e022      	b.n	8006a56 <HAL_TIM_PWM_Start+0x6a>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	d109      	bne.n	8006a2a <HAL_TIM_PWM_Start+0x3e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	bf14      	ite	ne
 8006a22:	2301      	movne	r3, #1
 8006a24:	2300      	moveq	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	e015      	b.n	8006a56 <HAL_TIM_PWM_Start+0x6a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b08      	cmp	r3, #8
 8006a2e:	d109      	bne.n	8006a44 <HAL_TIM_PWM_Start+0x58>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	e008      	b.n	8006a56 <HAL_TIM_PWM_Start+0x6a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	bf14      	ite	ne
 8006a50:	2301      	movne	r3, #1
 8006a52:	2300      	moveq	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e059      	b.n	8006b12 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d104      	bne.n	8006a6e <HAL_TIM_PWM_Start+0x82>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a6c:	e013      	b.n	8006a96 <HAL_TIM_PWM_Start+0xaa>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d104      	bne.n	8006a7e <HAL_TIM_PWM_Start+0x92>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a7c:	e00b      	b.n	8006a96 <HAL_TIM_PWM_Start+0xaa>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_PWM_Start+0xa2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	e003      	b.n	8006a96 <HAL_TIM_PWM_Start+0xaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 fcf6 	bl	8007490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_TIM_PWM_Start+0x130>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d107      	bne.n	8006abe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006abc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <HAL_TIM_PWM_Start+0x130>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_TIM_PWM_Start+0xf0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <HAL_TIM_PWM_Start+0x134>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_PWM_Start+0xf0>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <HAL_TIM_PWM_Start+0x138>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d111      	bne.n	8006b00 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b06      	cmp	r3, #6
 8006aec:	d010      	beq.n	8006b10 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0201 	orr.w	r2, r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	e007      	b.n	8006b10 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f042 0201 	orr.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40014000 	.word	0x40014000

08006b28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fca8 	bl	8007490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a29      	ldr	r2, [pc, #164]	; (8006bec <HAL_TIM_PWM_Stop+0xc4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d117      	bne.n	8006b7a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6a1a      	ldr	r2, [r3, #32]
 8006b50:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10f      	bne.n	8006b7a <HAL_TIM_PWM_Stop+0x52>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	f240 4344 	movw	r3, #1092	; 0x444
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d107      	bne.n	8006b7a <HAL_TIM_PWM_Stop+0x52>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10f      	bne.n	8006baa <HAL_TIM_PWM_Stop+0x82>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	f240 4344 	movw	r3, #1092	; 0x444
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d107      	bne.n	8006baa <HAL_TIM_PWM_Stop+0x82>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0201 	bic.w	r2, r2, #1
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_TIM_PWM_Stop+0x92>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb8:	e013      	b.n	8006be2 <HAL_TIM_PWM_Stop+0xba>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b04      	cmp	r3, #4
 8006bbe:	d104      	bne.n	8006bca <HAL_TIM_PWM_Stop+0xa2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc8:	e00b      	b.n	8006be2 <HAL_TIM_PWM_Stop+0xba>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d104      	bne.n	8006bda <HAL_TIM_PWM_Stop+0xb2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd8:	e003      	b.n	8006be2 <HAL_TIM_PWM_Stop+0xba>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40010000 	.word	0x40010000

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0202 	mvn.w	r2, #2
 8006c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa16 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa08 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa19 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9ec 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9de 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f9ef 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0208 	mvn.w	r2, #8
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9c2 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f9b4 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f9c5 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0210 	mvn.w	r2, #16
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f998 	bl	8007064 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 f98a 	bl	8007050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f99b 	bl	8007078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10e      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0201 	mvn.w	r2, #1
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f964 	bl	800703c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fc54 	bl	8007648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f960 	bl	800708c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0220 	mvn.w	r2, #32
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc1e 	bl	8007634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e048      	b.n	8006eb0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b0c      	cmp	r3, #12
 8006e2a:	d839      	bhi.n	8006ea0 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e69 	.word	0x08006e69
 8006e38:	08006ea1 	.word	0x08006ea1
 8006e3c:	08006ea1 	.word	0x08006ea1
 8006e40:	08006ea1 	.word	0x08006ea1
 8006e44:	08006e77 	.word	0x08006e77
 8006e48:	08006ea1 	.word	0x08006ea1
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006ea1 	.word	0x08006ea1
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006ea1 	.word	0x08006ea1
 8006e5c:	08006ea1 	.word	0x08006ea1
 8006e60:	08006ea1 	.word	0x08006ea1
 8006e64:	08006e93 	.word	0x08006e93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f982 	bl	8007178 <TIM_OC1_SetConfig>
      break;
 8006e74:	e017      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 f9e1 	bl	8007244 <TIM_OC2_SetConfig>
      break;
 8006e82:	e010      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fa46 	bl	800731c <TIM_OC3_SetConfig>
      break;
 8006e90:	e009      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 faa9 	bl	80073f0 <TIM_OC4_SetConfig>
      break;
 8006e9e:	e002      	b.n	8006ea6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ea4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006ed2:	2302      	movs	r3, #2
 8006ed4:	e0ae      	b.n	8007034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b0c      	cmp	r3, #12
 8006ee2:	f200 809f 	bhi.w	8007024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f21 	.word	0x08006f21
 8006ef0:	08007025 	.word	0x08007025
 8006ef4:	08007025 	.word	0x08007025
 8006ef8:	08007025 	.word	0x08007025
 8006efc:	08006f61 	.word	0x08006f61
 8006f00:	08007025 	.word	0x08007025
 8006f04:	08007025 	.word	0x08007025
 8006f08:	08007025 	.word	0x08007025
 8006f0c:	08006fa3 	.word	0x08006fa3
 8006f10:	08007025 	.word	0x08007025
 8006f14:	08007025 	.word	0x08007025
 8006f18:	08007025 	.word	0x08007025
 8006f1c:	08006fe3 	.word	0x08006fe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f926 	bl	8007178 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0208 	orr.w	r2, r2, #8
 8006f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0204 	bic.w	r2, r2, #4
 8006f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6999      	ldr	r1, [r3, #24]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	619a      	str	r2, [r3, #24]
      break;
 8006f5e:	e064      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 f96c 	bl	8007244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6999      	ldr	r1, [r3, #24]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	021a      	lsls	r2, r3, #8
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	619a      	str	r2, [r3, #24]
      break;
 8006fa0:	e043      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68b9      	ldr	r1, [r7, #8]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 f9b7 	bl	800731c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0208 	orr.w	r2, r2, #8
 8006fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0204 	bic.w	r2, r2, #4
 8006fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	69d9      	ldr	r1, [r3, #28]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	61da      	str	r2, [r3, #28]
      break;
 8006fe0:	e023      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68b9      	ldr	r1, [r7, #8]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fa01 	bl	80073f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69da      	ldr	r2, [r3, #28]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	69d9      	ldr	r1, [r3, #28]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	021a      	lsls	r2, r3, #8
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	61da      	str	r2, [r3, #28]
      break;
 8007022:	e002      	b.n	800702a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	75fb      	strb	r3, [r7, #23]
      break;
 8007028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  return htim->State;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ae:	b2db      	uxtb	r3, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a26      	ldr	r2, [pc, #152]	; (8007168 <TIM_Base_SetConfig+0xac>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d003      	beq.n	80070dc <TIM_Base_SetConfig+0x20>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a25      	ldr	r2, [pc, #148]	; (800716c <TIM_Base_SetConfig+0xb0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d108      	bne.n	80070ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <TIM_Base_SetConfig+0xac>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00b      	beq.n	800710e <TIM_Base_SetConfig+0x52>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1c      	ldr	r2, [pc, #112]	; (800716c <TIM_Base_SetConfig+0xb0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_Base_SetConfig+0x52>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <TIM_Base_SetConfig+0xb4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_Base_SetConfig+0x52>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a1a      	ldr	r2, [pc, #104]	; (8007174 <TIM_Base_SetConfig+0xb8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d108      	bne.n	8007120 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a08      	ldr	r2, [pc, #32]	; (8007168 <TIM_Base_SetConfig+0xac>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d103      	bne.n	8007154 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	615a      	str	r2, [r3, #20]
}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40010000 	.word	0x40010000
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40014000 	.word	0x40014000
 8007174:	40014800 	.word	0x40014800

08007178 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007178:	b480      	push	{r7}
 800717a:	b087      	sub	sp, #28
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f023 0303 	bic.w	r3, r3, #3
 80071ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 0302 	bic.w	r3, r3, #2
 80071c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <TIM_OC1_SetConfig+0xc8>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f023 0308 	bic.w	r3, r3, #8
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 0304 	bic.w	r3, r3, #4
 80071ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a13      	ldr	r2, [pc, #76]	; (8007240 <TIM_OC1_SetConfig+0xc8>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d111      	bne.n	800721a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	621a      	str	r2, [r3, #32]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	40010000 	.word	0x40010000

08007244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	f023 0210 	bic.w	r2, r3, #16
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800727a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <TIM_OC2_SetConfig+0xd4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d10d      	bne.n	80072c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a15      	ldr	r2, [pc, #84]	; (8007318 <TIM_OC2_SetConfig+0xd4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d113      	bne.n	80072f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	695b      	ldr	r3, [r3, #20]
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	bf00      	nop
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	40010000 	.word	0x40010000

0800731c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800734a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f023 0303 	bic.w	r3, r3, #3
 8007352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <TIM_OC3_SetConfig+0xd0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d10d      	bne.n	8007396 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a14      	ldr	r2, [pc, #80]	; (80073ec <TIM_OC3_SetConfig+0xd0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d113      	bne.n	80073c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	621a      	str	r2, [r3, #32]
}
 80073e0:	bf00      	nop
 80073e2:	371c      	adds	r7, #28
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	40010000 	.word	0x40010000

080073f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800743a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a10      	ldr	r2, [pc, #64]	; (800748c <TIM_OC4_SetConfig+0x9c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d109      	bne.n	8007464 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007456:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	695b      	ldr	r3, [r3, #20]
 800745c:	019b      	lsls	r3, r3, #6
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000

08007490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	401a      	ands	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	fa01 f303 	lsl.w	r3, r1, r3
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e041      	b.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d009      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a12      	ldr	r2, [pc, #72]	; (8007588 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d004      	beq.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a11      	ldr	r2, [pc, #68]	; (800758c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d10c      	bne.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007552:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	4313      	orrs	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	40010000 	.word	0x40010000
 8007588:	40000c00 	.word	0x40000c00
 800758c:	40014000 	.word	0x40014000

08007590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e03d      	b.n	8007628 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <__errno>:
 800765c:	4b01      	ldr	r3, [pc, #4]	; (8007664 <__errno+0x8>)
 800765e:	6818      	ldr	r0, [r3, #0]
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	200000c0 	.word	0x200000c0

08007668 <__libc_init_array>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	4d0d      	ldr	r5, [pc, #52]	; (80076a0 <__libc_init_array+0x38>)
 800766c:	4c0d      	ldr	r4, [pc, #52]	; (80076a4 <__libc_init_array+0x3c>)
 800766e:	1b64      	subs	r4, r4, r5
 8007670:	10a4      	asrs	r4, r4, #2
 8007672:	2600      	movs	r6, #0
 8007674:	42a6      	cmp	r6, r4
 8007676:	d109      	bne.n	800768c <__libc_init_array+0x24>
 8007678:	4d0b      	ldr	r5, [pc, #44]	; (80076a8 <__libc_init_array+0x40>)
 800767a:	4c0c      	ldr	r4, [pc, #48]	; (80076ac <__libc_init_array+0x44>)
 800767c:	f002 ff1a 	bl	800a4b4 <_init>
 8007680:	1b64      	subs	r4, r4, r5
 8007682:	10a4      	asrs	r4, r4, #2
 8007684:	2600      	movs	r6, #0
 8007686:	42a6      	cmp	r6, r4
 8007688:	d105      	bne.n	8007696 <__libc_init_array+0x2e>
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007690:	4798      	blx	r3
 8007692:	3601      	adds	r6, #1
 8007694:	e7ee      	b.n	8007674 <__libc_init_array+0xc>
 8007696:	f855 3b04 	ldr.w	r3, [r5], #4
 800769a:	4798      	blx	r3
 800769c:	3601      	adds	r6, #1
 800769e:	e7f2      	b.n	8007686 <__libc_init_array+0x1e>
 80076a0:	0800be74 	.word	0x0800be74
 80076a4:	0800be74 	.word	0x0800be74
 80076a8:	0800be74 	.word	0x0800be74
 80076ac:	0800be78 	.word	0x0800be78

080076b0 <malloc>:
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <malloc+0xc>)
 80076b2:	4601      	mov	r1, r0
 80076b4:	6818      	ldr	r0, [r3, #0]
 80076b6:	f000 b885 	b.w	80077c4 <_malloc_r>
 80076ba:	bf00      	nop
 80076bc:	200000c0 	.word	0x200000c0

080076c0 <memcpy>:
 80076c0:	440a      	add	r2, r1
 80076c2:	4291      	cmp	r1, r2
 80076c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c8:	d100      	bne.n	80076cc <memcpy+0xc>
 80076ca:	4770      	bx	lr
 80076cc:	b510      	push	{r4, lr}
 80076ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d6:	4291      	cmp	r1, r2
 80076d8:	d1f9      	bne.n	80076ce <memcpy+0xe>
 80076da:	bd10      	pop	{r4, pc}

080076dc <memset>:
 80076dc:	4402      	add	r2, r0
 80076de:	4603      	mov	r3, r0
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d100      	bne.n	80076e6 <memset+0xa>
 80076e4:	4770      	bx	lr
 80076e6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ea:	e7f9      	b.n	80076e0 <memset+0x4>

080076ec <_free_r>:
 80076ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d044      	beq.n	800777c <_free_r+0x90>
 80076f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f6:	9001      	str	r0, [sp, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f1a1 0404 	sub.w	r4, r1, #4
 80076fe:	bfb8      	it	lt
 8007700:	18e4      	addlt	r4, r4, r3
 8007702:	f001 fee3 	bl	80094cc <__malloc_lock>
 8007706:	4a1e      	ldr	r2, [pc, #120]	; (8007780 <_free_r+0x94>)
 8007708:	9801      	ldr	r0, [sp, #4]
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	b933      	cbnz	r3, 800771c <_free_r+0x30>
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007718:	f001 bede 	b.w	80094d8 <__malloc_unlock>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d908      	bls.n	8007732 <_free_r+0x46>
 8007720:	6825      	ldr	r5, [r4, #0]
 8007722:	1961      	adds	r1, r4, r5
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1949      	addeq	r1, r1, r5
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	e7ed      	b.n	800770e <_free_r+0x22>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x50>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x46>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1855      	adds	r5, r2, r1
 8007740:	42a5      	cmp	r5, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x70>
 8007744:	6824      	ldr	r4, [r4, #0]
 8007746:	4421      	add	r1, r4
 8007748:	1854      	adds	r4, r2, r1
 800774a:	42a3      	cmp	r3, r4
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1e0      	bne.n	8007712 <_free_r+0x26>
 8007750:	681c      	ldr	r4, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4421      	add	r1, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	e7da      	b.n	8007712 <_free_r+0x26>
 800775c:	d902      	bls.n	8007764 <_free_r+0x78>
 800775e:	230c      	movs	r3, #12
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	e7d6      	b.n	8007712 <_free_r+0x26>
 8007764:	6825      	ldr	r5, [r4, #0]
 8007766:	1961      	adds	r1, r4, r5
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1949      	addeq	r1, r1, r5
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7ca      	b.n	8007712 <_free_r+0x26>
 800777c:	b003      	add	sp, #12
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	20000530 	.word	0x20000530

08007784 <sbrk_aligned>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	4e0e      	ldr	r6, [pc, #56]	; (80077c0 <sbrk_aligned+0x3c>)
 8007788:	460c      	mov	r4, r1
 800778a:	6831      	ldr	r1, [r6, #0]
 800778c:	4605      	mov	r5, r0
 800778e:	b911      	cbnz	r1, 8007796 <sbrk_aligned+0x12>
 8007790:	f000 fd0e 	bl	80081b0 <_sbrk_r>
 8007794:	6030      	str	r0, [r6, #0]
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 fd09 	bl	80081b0 <_sbrk_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d00a      	beq.n	80077b8 <sbrk_aligned+0x34>
 80077a2:	1cc4      	adds	r4, r0, #3
 80077a4:	f024 0403 	bic.w	r4, r4, #3
 80077a8:	42a0      	cmp	r0, r4
 80077aa:	d007      	beq.n	80077bc <sbrk_aligned+0x38>
 80077ac:	1a21      	subs	r1, r4, r0
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 fcfe 	bl	80081b0 <_sbrk_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d101      	bne.n	80077bc <sbrk_aligned+0x38>
 80077b8:	f04f 34ff 	mov.w	r4, #4294967295
 80077bc:	4620      	mov	r0, r4
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	20000534 	.word	0x20000534

080077c4 <_malloc_r>:
 80077c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	1ccd      	adds	r5, r1, #3
 80077ca:	f025 0503 	bic.w	r5, r5, #3
 80077ce:	3508      	adds	r5, #8
 80077d0:	2d0c      	cmp	r5, #12
 80077d2:	bf38      	it	cc
 80077d4:	250c      	movcc	r5, #12
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	4607      	mov	r7, r0
 80077da:	db01      	blt.n	80077e0 <_malloc_r+0x1c>
 80077dc:	42a9      	cmp	r1, r5
 80077de:	d905      	bls.n	80077ec <_malloc_r+0x28>
 80077e0:	230c      	movs	r3, #12
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	2600      	movs	r6, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ec:	4e2e      	ldr	r6, [pc, #184]	; (80078a8 <_malloc_r+0xe4>)
 80077ee:	f001 fe6d 	bl	80094cc <__malloc_lock>
 80077f2:	6833      	ldr	r3, [r6, #0]
 80077f4:	461c      	mov	r4, r3
 80077f6:	bb34      	cbnz	r4, 8007846 <_malloc_r+0x82>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4638      	mov	r0, r7
 80077fc:	f7ff ffc2 	bl	8007784 <sbrk_aligned>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	4604      	mov	r4, r0
 8007804:	d14d      	bne.n	80078a2 <_malloc_r+0xde>
 8007806:	6834      	ldr	r4, [r6, #0]
 8007808:	4626      	mov	r6, r4
 800780a:	2e00      	cmp	r6, #0
 800780c:	d140      	bne.n	8007890 <_malloc_r+0xcc>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	4631      	mov	r1, r6
 8007812:	4638      	mov	r0, r7
 8007814:	eb04 0803 	add.w	r8, r4, r3
 8007818:	f000 fcca 	bl	80081b0 <_sbrk_r>
 800781c:	4580      	cmp	r8, r0
 800781e:	d13a      	bne.n	8007896 <_malloc_r+0xd2>
 8007820:	6821      	ldr	r1, [r4, #0]
 8007822:	3503      	adds	r5, #3
 8007824:	1a6d      	subs	r5, r5, r1
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	4629      	mov	r1, r5
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff ffa5 	bl	8007784 <sbrk_aligned>
 800783a:	3001      	adds	r0, #1
 800783c:	d02b      	beq.n	8007896 <_malloc_r+0xd2>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	442b      	add	r3, r5
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	e00e      	b.n	8007864 <_malloc_r+0xa0>
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	1b52      	subs	r2, r2, r5
 800784a:	d41e      	bmi.n	800788a <_malloc_r+0xc6>
 800784c:	2a0b      	cmp	r2, #11
 800784e:	d916      	bls.n	800787e <_malloc_r+0xba>
 8007850:	1961      	adds	r1, r4, r5
 8007852:	42a3      	cmp	r3, r4
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	bf18      	it	ne
 8007858:	6059      	strne	r1, [r3, #4]
 800785a:	6863      	ldr	r3, [r4, #4]
 800785c:	bf08      	it	eq
 800785e:	6031      	streq	r1, [r6, #0]
 8007860:	5162      	str	r2, [r4, r5]
 8007862:	604b      	str	r3, [r1, #4]
 8007864:	4638      	mov	r0, r7
 8007866:	f104 060b 	add.w	r6, r4, #11
 800786a:	f001 fe35 	bl	80094d8 <__malloc_unlock>
 800786e:	f026 0607 	bic.w	r6, r6, #7
 8007872:	1d23      	adds	r3, r4, #4
 8007874:	1af2      	subs	r2, r6, r3
 8007876:	d0b6      	beq.n	80077e6 <_malloc_r+0x22>
 8007878:	1b9b      	subs	r3, r3, r6
 800787a:	50a3      	str	r3, [r4, r2]
 800787c:	e7b3      	b.n	80077e6 <_malloc_r+0x22>
 800787e:	6862      	ldr	r2, [r4, #4]
 8007880:	42a3      	cmp	r3, r4
 8007882:	bf0c      	ite	eq
 8007884:	6032      	streq	r2, [r6, #0]
 8007886:	605a      	strne	r2, [r3, #4]
 8007888:	e7ec      	b.n	8007864 <_malloc_r+0xa0>
 800788a:	4623      	mov	r3, r4
 800788c:	6864      	ldr	r4, [r4, #4]
 800788e:	e7b2      	b.n	80077f6 <_malloc_r+0x32>
 8007890:	4634      	mov	r4, r6
 8007892:	6876      	ldr	r6, [r6, #4]
 8007894:	e7b9      	b.n	800780a <_malloc_r+0x46>
 8007896:	230c      	movs	r3, #12
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4638      	mov	r0, r7
 800789c:	f001 fe1c 	bl	80094d8 <__malloc_unlock>
 80078a0:	e7a1      	b.n	80077e6 <_malloc_r+0x22>
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	e7de      	b.n	8007864 <_malloc_r+0xa0>
 80078a6:	bf00      	nop
 80078a8:	20000530 	.word	0x20000530

080078ac <__cvt>:
 80078ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	ec55 4b10 	vmov	r4, r5, d0
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	460e      	mov	r6, r1
 80078b8:	4619      	mov	r1, r3
 80078ba:	462b      	mov	r3, r5
 80078bc:	bfbb      	ittet	lt
 80078be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078c2:	461d      	movlt	r5, r3
 80078c4:	2300      	movge	r3, #0
 80078c6:	232d      	movlt	r3, #45	; 0x2d
 80078c8:	700b      	strb	r3, [r1, #0]
 80078ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078d0:	4691      	mov	r9, r2
 80078d2:	f023 0820 	bic.w	r8, r3, #32
 80078d6:	bfbc      	itt	lt
 80078d8:	4622      	movlt	r2, r4
 80078da:	4614      	movlt	r4, r2
 80078dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078e0:	d005      	beq.n	80078ee <__cvt+0x42>
 80078e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078e6:	d100      	bne.n	80078ea <__cvt+0x3e>
 80078e8:	3601      	adds	r6, #1
 80078ea:	2102      	movs	r1, #2
 80078ec:	e000      	b.n	80078f0 <__cvt+0x44>
 80078ee:	2103      	movs	r1, #3
 80078f0:	ab03      	add	r3, sp, #12
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	ab02      	add	r3, sp, #8
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	ec45 4b10 	vmov	d0, r4, r5
 80078fc:	4653      	mov	r3, sl
 80078fe:	4632      	mov	r2, r6
 8007900:	f000 fdd2 	bl	80084a8 <_dtoa_r>
 8007904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007908:	4607      	mov	r7, r0
 800790a:	d102      	bne.n	8007912 <__cvt+0x66>
 800790c:	f019 0f01 	tst.w	r9, #1
 8007910:	d022      	beq.n	8007958 <__cvt+0xac>
 8007912:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007916:	eb07 0906 	add.w	r9, r7, r6
 800791a:	d110      	bne.n	800793e <__cvt+0x92>
 800791c:	783b      	ldrb	r3, [r7, #0]
 800791e:	2b30      	cmp	r3, #48	; 0x30
 8007920:	d10a      	bne.n	8007938 <__cvt+0x8c>
 8007922:	2200      	movs	r2, #0
 8007924:	2300      	movs	r3, #0
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f9 f8ed 	bl	8000b08 <__aeabi_dcmpeq>
 800792e:	b918      	cbnz	r0, 8007938 <__cvt+0x8c>
 8007930:	f1c6 0601 	rsb	r6, r6, #1
 8007934:	f8ca 6000 	str.w	r6, [sl]
 8007938:	f8da 3000 	ldr.w	r3, [sl]
 800793c:	4499      	add	r9, r3
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f9 f8df 	bl	8000b08 <__aeabi_dcmpeq>
 800794a:	b108      	cbz	r0, 8007950 <__cvt+0xa4>
 800794c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007950:	2230      	movs	r2, #48	; 0x30
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	454b      	cmp	r3, r9
 8007956:	d307      	bcc.n	8007968 <__cvt+0xbc>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800795c:	1bdb      	subs	r3, r3, r7
 800795e:	4638      	mov	r0, r7
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	b004      	add	sp, #16
 8007964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007968:	1c59      	adds	r1, r3, #1
 800796a:	9103      	str	r1, [sp, #12]
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e7f0      	b.n	8007952 <__cvt+0xa6>

08007970 <__exponent>:
 8007970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007972:	4603      	mov	r3, r0
 8007974:	2900      	cmp	r1, #0
 8007976:	bfb8      	it	lt
 8007978:	4249      	neglt	r1, r1
 800797a:	f803 2b02 	strb.w	r2, [r3], #2
 800797e:	bfb4      	ite	lt
 8007980:	222d      	movlt	r2, #45	; 0x2d
 8007982:	222b      	movge	r2, #43	; 0x2b
 8007984:	2909      	cmp	r1, #9
 8007986:	7042      	strb	r2, [r0, #1]
 8007988:	dd2a      	ble.n	80079e0 <__exponent+0x70>
 800798a:	f10d 0407 	add.w	r4, sp, #7
 800798e:	46a4      	mov	ip, r4
 8007990:	270a      	movs	r7, #10
 8007992:	46a6      	mov	lr, r4
 8007994:	460a      	mov	r2, r1
 8007996:	fb91 f6f7 	sdiv	r6, r1, r7
 800799a:	fb07 1516 	mls	r5, r7, r6, r1
 800799e:	3530      	adds	r5, #48	; 0x30
 80079a0:	2a63      	cmp	r2, #99	; 0x63
 80079a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80079a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079aa:	4631      	mov	r1, r6
 80079ac:	dcf1      	bgt.n	8007992 <__exponent+0x22>
 80079ae:	3130      	adds	r1, #48	; 0x30
 80079b0:	f1ae 0502 	sub.w	r5, lr, #2
 80079b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079b8:	1c44      	adds	r4, r0, #1
 80079ba:	4629      	mov	r1, r5
 80079bc:	4561      	cmp	r1, ip
 80079be:	d30a      	bcc.n	80079d6 <__exponent+0x66>
 80079c0:	f10d 0209 	add.w	r2, sp, #9
 80079c4:	eba2 020e 	sub.w	r2, r2, lr
 80079c8:	4565      	cmp	r5, ip
 80079ca:	bf88      	it	hi
 80079cc:	2200      	movhi	r2, #0
 80079ce:	4413      	add	r3, r2
 80079d0:	1a18      	subs	r0, r3, r0
 80079d2:	b003      	add	sp, #12
 80079d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079de:	e7ed      	b.n	80079bc <__exponent+0x4c>
 80079e0:	2330      	movs	r3, #48	; 0x30
 80079e2:	3130      	adds	r1, #48	; 0x30
 80079e4:	7083      	strb	r3, [r0, #2]
 80079e6:	70c1      	strb	r1, [r0, #3]
 80079e8:	1d03      	adds	r3, r0, #4
 80079ea:	e7f1      	b.n	80079d0 <__exponent+0x60>

080079ec <_printf_float>:
 80079ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f0:	ed2d 8b02 	vpush	{d8}
 80079f4:	b08d      	sub	sp, #52	; 0x34
 80079f6:	460c      	mov	r4, r1
 80079f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079fc:	4616      	mov	r6, r2
 80079fe:	461f      	mov	r7, r3
 8007a00:	4605      	mov	r5, r0
 8007a02:	f001 fcf7 	bl	80093f4 <_localeconv_r>
 8007a06:	f8d0 a000 	ldr.w	sl, [r0]
 8007a0a:	4650      	mov	r0, sl
 8007a0c:	f7f8 fc00 	bl	8000210 <strlen>
 8007a10:	2300      	movs	r3, #0
 8007a12:	930a      	str	r3, [sp, #40]	; 0x28
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	9305      	str	r3, [sp, #20]
 8007a18:	f8d8 3000 	ldr.w	r3, [r8]
 8007a1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a20:	3307      	adds	r3, #7
 8007a22:	f023 0307 	bic.w	r3, r3, #7
 8007a26:	f103 0208 	add.w	r2, r3, #8
 8007a2a:	f8c8 2000 	str.w	r2, [r8]
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a3e:	9307      	str	r3, [sp, #28]
 8007a40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a44:	ee08 0a10 	vmov	s16, r0
 8007a48:	4b9f      	ldr	r3, [pc, #636]	; (8007cc8 <_printf_float+0x2dc>)
 8007a4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a52:	f7f9 f88b 	bl	8000b6c <__aeabi_dcmpun>
 8007a56:	bb88      	cbnz	r0, 8007abc <_printf_float+0xd0>
 8007a58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a5c:	4b9a      	ldr	r3, [pc, #616]	; (8007cc8 <_printf_float+0x2dc>)
 8007a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a62:	f7f9 f865 	bl	8000b30 <__aeabi_dcmple>
 8007a66:	bb48      	cbnz	r0, 8007abc <_printf_float+0xd0>
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f9 f854 	bl	8000b1c <__aeabi_dcmplt>
 8007a74:	b110      	cbz	r0, 8007a7c <_printf_float+0x90>
 8007a76:	232d      	movs	r3, #45	; 0x2d
 8007a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a7c:	4b93      	ldr	r3, [pc, #588]	; (8007ccc <_printf_float+0x2e0>)
 8007a7e:	4894      	ldr	r0, [pc, #592]	; (8007cd0 <_printf_float+0x2e4>)
 8007a80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a84:	bf94      	ite	ls
 8007a86:	4698      	movls	r8, r3
 8007a88:	4680      	movhi	r8, r0
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	f023 0204 	bic.w	r2, r3, #4
 8007a94:	6022      	str	r2, [r4, #0]
 8007a96:	f04f 0900 	mov.w	r9, #0
 8007a9a:	9700      	str	r7, [sp, #0]
 8007a9c:	4633      	mov	r3, r6
 8007a9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007aa0:	4621      	mov	r1, r4
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f000 f9d8 	bl	8007e58 <_printf_common>
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	f040 8090 	bne.w	8007bce <_printf_float+0x1e2>
 8007aae:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab2:	b00d      	add	sp, #52	; 0x34
 8007ab4:	ecbd 8b02 	vpop	{d8}
 8007ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abc:	4642      	mov	r2, r8
 8007abe:	464b      	mov	r3, r9
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f7f9 f852 	bl	8000b6c <__aeabi_dcmpun>
 8007ac8:	b140      	cbz	r0, 8007adc <_printf_float+0xf0>
 8007aca:	464b      	mov	r3, r9
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bfbc      	itt	lt
 8007ad0:	232d      	movlt	r3, #45	; 0x2d
 8007ad2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ad6:	487f      	ldr	r0, [pc, #508]	; (8007cd4 <_printf_float+0x2e8>)
 8007ad8:	4b7f      	ldr	r3, [pc, #508]	; (8007cd8 <_printf_float+0x2ec>)
 8007ada:	e7d1      	b.n	8007a80 <_printf_float+0x94>
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ae2:	9206      	str	r2, [sp, #24]
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	d13f      	bne.n	8007b68 <_printf_float+0x17c>
 8007ae8:	2306      	movs	r3, #6
 8007aea:	6063      	str	r3, [r4, #4]
 8007aec:	9b05      	ldr	r3, [sp, #20]
 8007aee:	6861      	ldr	r1, [r4, #4]
 8007af0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	ab0a      	add	r3, sp, #40	; 0x28
 8007afa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007afe:	ab09      	add	r3, sp, #36	; 0x24
 8007b00:	ec49 8b10 	vmov	d0, r8, r9
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	6022      	str	r2, [r4, #0]
 8007b08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f7ff fecd 	bl	80078ac <__cvt>
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b16:	2b47      	cmp	r3, #71	; 0x47
 8007b18:	4680      	mov	r8, r0
 8007b1a:	d108      	bne.n	8007b2e <_printf_float+0x142>
 8007b1c:	1cc8      	adds	r0, r1, #3
 8007b1e:	db02      	blt.n	8007b26 <_printf_float+0x13a>
 8007b20:	6863      	ldr	r3, [r4, #4]
 8007b22:	4299      	cmp	r1, r3
 8007b24:	dd41      	ble.n	8007baa <_printf_float+0x1be>
 8007b26:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b2a:	fa5f fb8b 	uxtb.w	fp, fp
 8007b2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b32:	d820      	bhi.n	8007b76 <_printf_float+0x18a>
 8007b34:	3901      	subs	r1, #1
 8007b36:	465a      	mov	r2, fp
 8007b38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007b3e:	f7ff ff17 	bl	8007970 <__exponent>
 8007b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b44:	1813      	adds	r3, r2, r0
 8007b46:	2a01      	cmp	r2, #1
 8007b48:	4681      	mov	r9, r0
 8007b4a:	6123      	str	r3, [r4, #16]
 8007b4c:	dc02      	bgt.n	8007b54 <_printf_float+0x168>
 8007b4e:	6822      	ldr	r2, [r4, #0]
 8007b50:	07d2      	lsls	r2, r2, #31
 8007b52:	d501      	bpl.n	8007b58 <_printf_float+0x16c>
 8007b54:	3301      	adds	r3, #1
 8007b56:	6123      	str	r3, [r4, #16]
 8007b58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d09c      	beq.n	8007a9a <_printf_float+0xae>
 8007b60:	232d      	movs	r3, #45	; 0x2d
 8007b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b66:	e798      	b.n	8007a9a <_printf_float+0xae>
 8007b68:	9a06      	ldr	r2, [sp, #24]
 8007b6a:	2a47      	cmp	r2, #71	; 0x47
 8007b6c:	d1be      	bne.n	8007aec <_printf_float+0x100>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1bc      	bne.n	8007aec <_printf_float+0x100>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e7b9      	b.n	8007aea <_printf_float+0xfe>
 8007b76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b7a:	d118      	bne.n	8007bae <_printf_float+0x1c2>
 8007b7c:	2900      	cmp	r1, #0
 8007b7e:	6863      	ldr	r3, [r4, #4]
 8007b80:	dd0b      	ble.n	8007b9a <_printf_float+0x1ae>
 8007b82:	6121      	str	r1, [r4, #16]
 8007b84:	b913      	cbnz	r3, 8007b8c <_printf_float+0x1a0>
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	07d0      	lsls	r0, r2, #31
 8007b8a:	d502      	bpl.n	8007b92 <_printf_float+0x1a6>
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	440b      	add	r3, r1
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b94:	f04f 0900 	mov.w	r9, #0
 8007b98:	e7de      	b.n	8007b58 <_printf_float+0x16c>
 8007b9a:	b913      	cbnz	r3, 8007ba2 <_printf_float+0x1b6>
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	07d2      	lsls	r2, r2, #31
 8007ba0:	d501      	bpl.n	8007ba6 <_printf_float+0x1ba>
 8007ba2:	3302      	adds	r3, #2
 8007ba4:	e7f4      	b.n	8007b90 <_printf_float+0x1a4>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e7f2      	b.n	8007b90 <_printf_float+0x1a4>
 8007baa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	db05      	blt.n	8007bc0 <_printf_float+0x1d4>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	6121      	str	r1, [r4, #16]
 8007bb8:	07d8      	lsls	r0, r3, #31
 8007bba:	d5ea      	bpl.n	8007b92 <_printf_float+0x1a6>
 8007bbc:	1c4b      	adds	r3, r1, #1
 8007bbe:	e7e7      	b.n	8007b90 <_printf_float+0x1a4>
 8007bc0:	2900      	cmp	r1, #0
 8007bc2:	bfd4      	ite	le
 8007bc4:	f1c1 0202 	rsble	r2, r1, #2
 8007bc8:	2201      	movgt	r2, #1
 8007bca:	4413      	add	r3, r2
 8007bcc:	e7e0      	b.n	8007b90 <_printf_float+0x1a4>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	055a      	lsls	r2, r3, #21
 8007bd2:	d407      	bmi.n	8007be4 <_printf_float+0x1f8>
 8007bd4:	6923      	ldr	r3, [r4, #16]
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	4631      	mov	r1, r6
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b8      	blx	r7
 8007bde:	3001      	adds	r0, #1
 8007be0:	d12c      	bne.n	8007c3c <_printf_float+0x250>
 8007be2:	e764      	b.n	8007aae <_printf_float+0xc2>
 8007be4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007be8:	f240 80e0 	bls.w	8007dac <_printf_float+0x3c0>
 8007bec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f7f8 ff88 	bl	8000b08 <__aeabi_dcmpeq>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d034      	beq.n	8007c66 <_printf_float+0x27a>
 8007bfc:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <_printf_float+0x2f0>)
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4631      	mov	r1, r6
 8007c02:	4628      	mov	r0, r5
 8007c04:	47b8      	blx	r7
 8007c06:	3001      	adds	r0, #1
 8007c08:	f43f af51 	beq.w	8007aae <_printf_float+0xc2>
 8007c0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c10:	429a      	cmp	r2, r3
 8007c12:	db02      	blt.n	8007c1a <_printf_float+0x22e>
 8007c14:	6823      	ldr	r3, [r4, #0]
 8007c16:	07d8      	lsls	r0, r3, #31
 8007c18:	d510      	bpl.n	8007c3c <_printf_float+0x250>
 8007c1a:	ee18 3a10 	vmov	r3, s16
 8007c1e:	4652      	mov	r2, sl
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f af41 	beq.w	8007aae <_printf_float+0xc2>
 8007c2c:	f04f 0800 	mov.w	r8, #0
 8007c30:	f104 091a 	add.w	r9, r4, #26
 8007c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c36:	3b01      	subs	r3, #1
 8007c38:	4543      	cmp	r3, r8
 8007c3a:	dc09      	bgt.n	8007c50 <_printf_float+0x264>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	079b      	lsls	r3, r3, #30
 8007c40:	f100 8105 	bmi.w	8007e4e <_printf_float+0x462>
 8007c44:	68e0      	ldr	r0, [r4, #12]
 8007c46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c48:	4298      	cmp	r0, r3
 8007c4a:	bfb8      	it	lt
 8007c4c:	4618      	movlt	r0, r3
 8007c4e:	e730      	b.n	8007ab2 <_printf_float+0xc6>
 8007c50:	2301      	movs	r3, #1
 8007c52:	464a      	mov	r2, r9
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	47b8      	blx	r7
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	f43f af27 	beq.w	8007aae <_printf_float+0xc2>
 8007c60:	f108 0801 	add.w	r8, r8, #1
 8007c64:	e7e6      	b.n	8007c34 <_printf_float+0x248>
 8007c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc39      	bgt.n	8007ce0 <_printf_float+0x2f4>
 8007c6c:	4a1b      	ldr	r2, [pc, #108]	; (8007cdc <_printf_float+0x2f0>)
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	f43f af19 	beq.w	8007aae <_printf_float+0xc2>
 8007c7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c80:	4313      	orrs	r3, r2
 8007c82:	d102      	bne.n	8007c8a <_printf_float+0x29e>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	07d9      	lsls	r1, r3, #31
 8007c88:	d5d8      	bpl.n	8007c3c <_printf_float+0x250>
 8007c8a:	ee18 3a10 	vmov	r3, s16
 8007c8e:	4652      	mov	r2, sl
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f af09 	beq.w	8007aae <_printf_float+0xc2>
 8007c9c:	f04f 0900 	mov.w	r9, #0
 8007ca0:	f104 0a1a 	add.w	sl, r4, #26
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	425b      	negs	r3, r3
 8007ca8:	454b      	cmp	r3, r9
 8007caa:	dc01      	bgt.n	8007cb0 <_printf_float+0x2c4>
 8007cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cae:	e792      	b.n	8007bd6 <_printf_float+0x1ea>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	4652      	mov	r2, sl
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	47b8      	blx	r7
 8007cba:	3001      	adds	r0, #1
 8007cbc:	f43f aef7 	beq.w	8007aae <_printf_float+0xc2>
 8007cc0:	f109 0901 	add.w	r9, r9, #1
 8007cc4:	e7ee      	b.n	8007ca4 <_printf_float+0x2b8>
 8007cc6:	bf00      	nop
 8007cc8:	7fefffff 	.word	0x7fefffff
 8007ccc:	0800ba98 	.word	0x0800ba98
 8007cd0:	0800ba9c 	.word	0x0800ba9c
 8007cd4:	0800baa4 	.word	0x0800baa4
 8007cd8:	0800baa0 	.word	0x0800baa0
 8007cdc:	0800baa8 	.word	0x0800baa8
 8007ce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ce2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	bfa8      	it	ge
 8007ce8:	461a      	movge	r2, r3
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	4691      	mov	r9, r2
 8007cee:	dc37      	bgt.n	8007d60 <_printf_float+0x374>
 8007cf0:	f04f 0b00 	mov.w	fp, #0
 8007cf4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cf8:	f104 021a 	add.w	r2, r4, #26
 8007cfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cfe:	9305      	str	r3, [sp, #20]
 8007d00:	eba3 0309 	sub.w	r3, r3, r9
 8007d04:	455b      	cmp	r3, fp
 8007d06:	dc33      	bgt.n	8007d70 <_printf_float+0x384>
 8007d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	db3b      	blt.n	8007d88 <_printf_float+0x39c>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	07da      	lsls	r2, r3, #31
 8007d14:	d438      	bmi.n	8007d88 <_printf_float+0x39c>
 8007d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d18:	9a05      	ldr	r2, [sp, #20]
 8007d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d1c:	1a9a      	subs	r2, r3, r2
 8007d1e:	eba3 0901 	sub.w	r9, r3, r1
 8007d22:	4591      	cmp	r9, r2
 8007d24:	bfa8      	it	ge
 8007d26:	4691      	movge	r9, r2
 8007d28:	f1b9 0f00 	cmp.w	r9, #0
 8007d2c:	dc35      	bgt.n	8007d9a <_printf_float+0x3ae>
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d36:	f104 0a1a 	add.w	sl, r4, #26
 8007d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	eba3 0309 	sub.w	r3, r3, r9
 8007d44:	4543      	cmp	r3, r8
 8007d46:	f77f af79 	ble.w	8007c3c <_printf_float+0x250>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	4652      	mov	r2, sl
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	f43f aeaa 	beq.w	8007aae <_printf_float+0xc2>
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	e7ec      	b.n	8007d3a <_printf_float+0x34e>
 8007d60:	4613      	mov	r3, r2
 8007d62:	4631      	mov	r1, r6
 8007d64:	4642      	mov	r2, r8
 8007d66:	4628      	mov	r0, r5
 8007d68:	47b8      	blx	r7
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d1c0      	bne.n	8007cf0 <_printf_float+0x304>
 8007d6e:	e69e      	b.n	8007aae <_printf_float+0xc2>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	9205      	str	r2, [sp, #20]
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f ae97 	beq.w	8007aae <_printf_float+0xc2>
 8007d80:	9a05      	ldr	r2, [sp, #20]
 8007d82:	f10b 0b01 	add.w	fp, fp, #1
 8007d86:	e7b9      	b.n	8007cfc <_printf_float+0x310>
 8007d88:	ee18 3a10 	vmov	r3, s16
 8007d8c:	4652      	mov	r2, sl
 8007d8e:	4631      	mov	r1, r6
 8007d90:	4628      	mov	r0, r5
 8007d92:	47b8      	blx	r7
 8007d94:	3001      	adds	r0, #1
 8007d96:	d1be      	bne.n	8007d16 <_printf_float+0x32a>
 8007d98:	e689      	b.n	8007aae <_printf_float+0xc2>
 8007d9a:	9a05      	ldr	r2, [sp, #20]
 8007d9c:	464b      	mov	r3, r9
 8007d9e:	4442      	add	r2, r8
 8007da0:	4631      	mov	r1, r6
 8007da2:	4628      	mov	r0, r5
 8007da4:	47b8      	blx	r7
 8007da6:	3001      	adds	r0, #1
 8007da8:	d1c1      	bne.n	8007d2e <_printf_float+0x342>
 8007daa:	e680      	b.n	8007aae <_printf_float+0xc2>
 8007dac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007dae:	2a01      	cmp	r2, #1
 8007db0:	dc01      	bgt.n	8007db6 <_printf_float+0x3ca>
 8007db2:	07db      	lsls	r3, r3, #31
 8007db4:	d538      	bpl.n	8007e28 <_printf_float+0x43c>
 8007db6:	2301      	movs	r3, #1
 8007db8:	4642      	mov	r2, r8
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b8      	blx	r7
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f43f ae74 	beq.w	8007aae <_printf_float+0xc2>
 8007dc6:	ee18 3a10 	vmov	r3, s16
 8007dca:	4652      	mov	r2, sl
 8007dcc:	4631      	mov	r1, r6
 8007dce:	4628      	mov	r0, r5
 8007dd0:	47b8      	blx	r7
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	f43f ae6b 	beq.w	8007aae <_printf_float+0xc2>
 8007dd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ddc:	2200      	movs	r2, #0
 8007dde:	2300      	movs	r3, #0
 8007de0:	f7f8 fe92 	bl	8000b08 <__aeabi_dcmpeq>
 8007de4:	b9d8      	cbnz	r0, 8007e1e <_printf_float+0x432>
 8007de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de8:	f108 0201 	add.w	r2, r8, #1
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4631      	mov	r1, r6
 8007df0:	4628      	mov	r0, r5
 8007df2:	47b8      	blx	r7
 8007df4:	3001      	adds	r0, #1
 8007df6:	d10e      	bne.n	8007e16 <_printf_float+0x42a>
 8007df8:	e659      	b.n	8007aae <_printf_float+0xc2>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4652      	mov	r2, sl
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4628      	mov	r0, r5
 8007e02:	47b8      	blx	r7
 8007e04:	3001      	adds	r0, #1
 8007e06:	f43f ae52 	beq.w	8007aae <_printf_float+0xc2>
 8007e0a:	f108 0801 	add.w	r8, r8, #1
 8007e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e10:	3b01      	subs	r3, #1
 8007e12:	4543      	cmp	r3, r8
 8007e14:	dcf1      	bgt.n	8007dfa <_printf_float+0x40e>
 8007e16:	464b      	mov	r3, r9
 8007e18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e1c:	e6dc      	b.n	8007bd8 <_printf_float+0x1ec>
 8007e1e:	f04f 0800 	mov.w	r8, #0
 8007e22:	f104 0a1a 	add.w	sl, r4, #26
 8007e26:	e7f2      	b.n	8007e0e <_printf_float+0x422>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	4642      	mov	r2, r8
 8007e2c:	e7df      	b.n	8007dee <_printf_float+0x402>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	464a      	mov	r2, r9
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	f43f ae38 	beq.w	8007aae <_printf_float+0xc2>
 8007e3e:	f108 0801 	add.w	r8, r8, #1
 8007e42:	68e3      	ldr	r3, [r4, #12]
 8007e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e46:	1a5b      	subs	r3, r3, r1
 8007e48:	4543      	cmp	r3, r8
 8007e4a:	dcf0      	bgt.n	8007e2e <_printf_float+0x442>
 8007e4c:	e6fa      	b.n	8007c44 <_printf_float+0x258>
 8007e4e:	f04f 0800 	mov.w	r8, #0
 8007e52:	f104 0919 	add.w	r9, r4, #25
 8007e56:	e7f4      	b.n	8007e42 <_printf_float+0x456>

08007e58 <_printf_common>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	4616      	mov	r6, r2
 8007e5e:	4699      	mov	r9, r3
 8007e60:	688a      	ldr	r2, [r1, #8]
 8007e62:	690b      	ldr	r3, [r1, #16]
 8007e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	bfb8      	it	lt
 8007e6c:	4613      	movlt	r3, r2
 8007e6e:	6033      	str	r3, [r6, #0]
 8007e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e74:	4607      	mov	r7, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	b10a      	cbz	r2, 8007e7e <_printf_common+0x26>
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	6033      	str	r3, [r6, #0]
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	0699      	lsls	r1, r3, #26
 8007e82:	bf42      	ittt	mi
 8007e84:	6833      	ldrmi	r3, [r6, #0]
 8007e86:	3302      	addmi	r3, #2
 8007e88:	6033      	strmi	r3, [r6, #0]
 8007e8a:	6825      	ldr	r5, [r4, #0]
 8007e8c:	f015 0506 	ands.w	r5, r5, #6
 8007e90:	d106      	bne.n	8007ea0 <_printf_common+0x48>
 8007e92:	f104 0a19 	add.w	sl, r4, #25
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	6832      	ldr	r2, [r6, #0]
 8007e9a:	1a9b      	subs	r3, r3, r2
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dc26      	bgt.n	8007eee <_printf_common+0x96>
 8007ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ea4:	1e13      	subs	r3, r2, #0
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	bf18      	it	ne
 8007eaa:	2301      	movne	r3, #1
 8007eac:	0692      	lsls	r2, r2, #26
 8007eae:	d42b      	bmi.n	8007f08 <_printf_common+0xb0>
 8007eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	47c0      	blx	r8
 8007eba:	3001      	adds	r0, #1
 8007ebc:	d01e      	beq.n	8007efc <_printf_common+0xa4>
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	68e5      	ldr	r5, [r4, #12]
 8007ec2:	6832      	ldr	r2, [r6, #0]
 8007ec4:	f003 0306 	and.w	r3, r3, #6
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	bf08      	it	eq
 8007ecc:	1aad      	subeq	r5, r5, r2
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	6922      	ldr	r2, [r4, #16]
 8007ed2:	bf0c      	ite	eq
 8007ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed8:	2500      	movne	r5, #0
 8007eda:	4293      	cmp	r3, r2
 8007edc:	bfc4      	itt	gt
 8007ede:	1a9b      	subgt	r3, r3, r2
 8007ee0:	18ed      	addgt	r5, r5, r3
 8007ee2:	2600      	movs	r6, #0
 8007ee4:	341a      	adds	r4, #26
 8007ee6:	42b5      	cmp	r5, r6
 8007ee8:	d11a      	bne.n	8007f20 <_printf_common+0xc8>
 8007eea:	2000      	movs	r0, #0
 8007eec:	e008      	b.n	8007f00 <_printf_common+0xa8>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4652      	mov	r2, sl
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	47c0      	blx	r8
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d103      	bne.n	8007f04 <_printf_common+0xac>
 8007efc:	f04f 30ff 	mov.w	r0, #4294967295
 8007f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f04:	3501      	adds	r5, #1
 8007f06:	e7c6      	b.n	8007e96 <_printf_common+0x3e>
 8007f08:	18e1      	adds	r1, r4, r3
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	2030      	movs	r0, #48	; 0x30
 8007f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f12:	4422      	add	r2, r4
 8007f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f1c:	3302      	adds	r3, #2
 8007f1e:	e7c7      	b.n	8007eb0 <_printf_common+0x58>
 8007f20:	2301      	movs	r3, #1
 8007f22:	4622      	mov	r2, r4
 8007f24:	4649      	mov	r1, r9
 8007f26:	4638      	mov	r0, r7
 8007f28:	47c0      	blx	r8
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	d0e6      	beq.n	8007efc <_printf_common+0xa4>
 8007f2e:	3601      	adds	r6, #1
 8007f30:	e7d9      	b.n	8007ee6 <_printf_common+0x8e>
	...

08007f34 <_printf_i>:
 8007f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	7e0f      	ldrb	r7, [r1, #24]
 8007f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f3c:	2f78      	cmp	r7, #120	; 0x78
 8007f3e:	4691      	mov	r9, r2
 8007f40:	4680      	mov	r8, r0
 8007f42:	460c      	mov	r4, r1
 8007f44:	469a      	mov	sl, r3
 8007f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f4a:	d807      	bhi.n	8007f5c <_printf_i+0x28>
 8007f4c:	2f62      	cmp	r7, #98	; 0x62
 8007f4e:	d80a      	bhi.n	8007f66 <_printf_i+0x32>
 8007f50:	2f00      	cmp	r7, #0
 8007f52:	f000 80d8 	beq.w	8008106 <_printf_i+0x1d2>
 8007f56:	2f58      	cmp	r7, #88	; 0x58
 8007f58:	f000 80a3 	beq.w	80080a2 <_printf_i+0x16e>
 8007f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f64:	e03a      	b.n	8007fdc <_printf_i+0xa8>
 8007f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f6a:	2b15      	cmp	r3, #21
 8007f6c:	d8f6      	bhi.n	8007f5c <_printf_i+0x28>
 8007f6e:	a101      	add	r1, pc, #4	; (adr r1, 8007f74 <_printf_i+0x40>)
 8007f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f74:	08007fcd 	.word	0x08007fcd
 8007f78:	08007fe1 	.word	0x08007fe1
 8007f7c:	08007f5d 	.word	0x08007f5d
 8007f80:	08007f5d 	.word	0x08007f5d
 8007f84:	08007f5d 	.word	0x08007f5d
 8007f88:	08007f5d 	.word	0x08007f5d
 8007f8c:	08007fe1 	.word	0x08007fe1
 8007f90:	08007f5d 	.word	0x08007f5d
 8007f94:	08007f5d 	.word	0x08007f5d
 8007f98:	08007f5d 	.word	0x08007f5d
 8007f9c:	08007f5d 	.word	0x08007f5d
 8007fa0:	080080ed 	.word	0x080080ed
 8007fa4:	08008011 	.word	0x08008011
 8007fa8:	080080cf 	.word	0x080080cf
 8007fac:	08007f5d 	.word	0x08007f5d
 8007fb0:	08007f5d 	.word	0x08007f5d
 8007fb4:	0800810f 	.word	0x0800810f
 8007fb8:	08007f5d 	.word	0x08007f5d
 8007fbc:	08008011 	.word	0x08008011
 8007fc0:	08007f5d 	.word	0x08007f5d
 8007fc4:	08007f5d 	.word	0x08007f5d
 8007fc8:	080080d7 	.word	0x080080d7
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	1d1a      	adds	r2, r3, #4
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	602a      	str	r2, [r5, #0]
 8007fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0a3      	b.n	8008128 <_printf_i+0x1f4>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	6829      	ldr	r1, [r5, #0]
 8007fe4:	0606      	lsls	r6, r0, #24
 8007fe6:	f101 0304 	add.w	r3, r1, #4
 8007fea:	d50a      	bpl.n	8008002 <_printf_i+0xce>
 8007fec:	680e      	ldr	r6, [r1, #0]
 8007fee:	602b      	str	r3, [r5, #0]
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	da03      	bge.n	8007ffc <_printf_i+0xc8>
 8007ff4:	232d      	movs	r3, #45	; 0x2d
 8007ff6:	4276      	negs	r6, r6
 8007ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ffc:	485e      	ldr	r0, [pc, #376]	; (8008178 <_printf_i+0x244>)
 8007ffe:	230a      	movs	r3, #10
 8008000:	e019      	b.n	8008036 <_printf_i+0x102>
 8008002:	680e      	ldr	r6, [r1, #0]
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	f010 0f40 	tst.w	r0, #64	; 0x40
 800800a:	bf18      	it	ne
 800800c:	b236      	sxthne	r6, r6
 800800e:	e7ef      	b.n	8007ff0 <_printf_i+0xbc>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	6820      	ldr	r0, [r4, #0]
 8008014:	1d19      	adds	r1, r3, #4
 8008016:	6029      	str	r1, [r5, #0]
 8008018:	0601      	lsls	r1, r0, #24
 800801a:	d501      	bpl.n	8008020 <_printf_i+0xec>
 800801c:	681e      	ldr	r6, [r3, #0]
 800801e:	e002      	b.n	8008026 <_printf_i+0xf2>
 8008020:	0646      	lsls	r6, r0, #25
 8008022:	d5fb      	bpl.n	800801c <_printf_i+0xe8>
 8008024:	881e      	ldrh	r6, [r3, #0]
 8008026:	4854      	ldr	r0, [pc, #336]	; (8008178 <_printf_i+0x244>)
 8008028:	2f6f      	cmp	r7, #111	; 0x6f
 800802a:	bf0c      	ite	eq
 800802c:	2308      	moveq	r3, #8
 800802e:	230a      	movne	r3, #10
 8008030:	2100      	movs	r1, #0
 8008032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008036:	6865      	ldr	r5, [r4, #4]
 8008038:	60a5      	str	r5, [r4, #8]
 800803a:	2d00      	cmp	r5, #0
 800803c:	bfa2      	ittt	ge
 800803e:	6821      	ldrge	r1, [r4, #0]
 8008040:	f021 0104 	bicge.w	r1, r1, #4
 8008044:	6021      	strge	r1, [r4, #0]
 8008046:	b90e      	cbnz	r6, 800804c <_printf_i+0x118>
 8008048:	2d00      	cmp	r5, #0
 800804a:	d04d      	beq.n	80080e8 <_printf_i+0x1b4>
 800804c:	4615      	mov	r5, r2
 800804e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008052:	fb03 6711 	mls	r7, r3, r1, r6
 8008056:	5dc7      	ldrb	r7, [r0, r7]
 8008058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800805c:	4637      	mov	r7, r6
 800805e:	42bb      	cmp	r3, r7
 8008060:	460e      	mov	r6, r1
 8008062:	d9f4      	bls.n	800804e <_printf_i+0x11a>
 8008064:	2b08      	cmp	r3, #8
 8008066:	d10b      	bne.n	8008080 <_printf_i+0x14c>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	07de      	lsls	r6, r3, #31
 800806c:	d508      	bpl.n	8008080 <_printf_i+0x14c>
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6861      	ldr	r1, [r4, #4]
 8008072:	4299      	cmp	r1, r3
 8008074:	bfde      	ittt	le
 8008076:	2330      	movle	r3, #48	; 0x30
 8008078:	f805 3c01 	strble.w	r3, [r5, #-1]
 800807c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008080:	1b52      	subs	r2, r2, r5
 8008082:	6122      	str	r2, [r4, #16]
 8008084:	f8cd a000 	str.w	sl, [sp]
 8008088:	464b      	mov	r3, r9
 800808a:	aa03      	add	r2, sp, #12
 800808c:	4621      	mov	r1, r4
 800808e:	4640      	mov	r0, r8
 8008090:	f7ff fee2 	bl	8007e58 <_printf_common>
 8008094:	3001      	adds	r0, #1
 8008096:	d14c      	bne.n	8008132 <_printf_i+0x1fe>
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	b004      	add	sp, #16
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	4835      	ldr	r0, [pc, #212]	; (8008178 <_printf_i+0x244>)
 80080a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080a8:	6829      	ldr	r1, [r5, #0]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80080b0:	6029      	str	r1, [r5, #0]
 80080b2:	061d      	lsls	r5, r3, #24
 80080b4:	d514      	bpl.n	80080e0 <_printf_i+0x1ac>
 80080b6:	07df      	lsls	r7, r3, #31
 80080b8:	bf44      	itt	mi
 80080ba:	f043 0320 	orrmi.w	r3, r3, #32
 80080be:	6023      	strmi	r3, [r4, #0]
 80080c0:	b91e      	cbnz	r6, 80080ca <_printf_i+0x196>
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	f023 0320 	bic.w	r3, r3, #32
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	2310      	movs	r3, #16
 80080cc:	e7b0      	b.n	8008030 <_printf_i+0xfc>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f043 0320 	orr.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2378      	movs	r3, #120	; 0x78
 80080d8:	4828      	ldr	r0, [pc, #160]	; (800817c <_printf_i+0x248>)
 80080da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080de:	e7e3      	b.n	80080a8 <_printf_i+0x174>
 80080e0:	0659      	lsls	r1, r3, #25
 80080e2:	bf48      	it	mi
 80080e4:	b2b6      	uxthmi	r6, r6
 80080e6:	e7e6      	b.n	80080b6 <_printf_i+0x182>
 80080e8:	4615      	mov	r5, r2
 80080ea:	e7bb      	b.n	8008064 <_printf_i+0x130>
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	6826      	ldr	r6, [r4, #0]
 80080f0:	6961      	ldr	r1, [r4, #20]
 80080f2:	1d18      	adds	r0, r3, #4
 80080f4:	6028      	str	r0, [r5, #0]
 80080f6:	0635      	lsls	r5, r6, #24
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	d501      	bpl.n	8008100 <_printf_i+0x1cc>
 80080fc:	6019      	str	r1, [r3, #0]
 80080fe:	e002      	b.n	8008106 <_printf_i+0x1d2>
 8008100:	0670      	lsls	r0, r6, #25
 8008102:	d5fb      	bpl.n	80080fc <_printf_i+0x1c8>
 8008104:	8019      	strh	r1, [r3, #0]
 8008106:	2300      	movs	r3, #0
 8008108:	6123      	str	r3, [r4, #16]
 800810a:	4615      	mov	r5, r2
 800810c:	e7ba      	b.n	8008084 <_printf_i+0x150>
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	1d1a      	adds	r2, r3, #4
 8008112:	602a      	str	r2, [r5, #0]
 8008114:	681d      	ldr	r5, [r3, #0]
 8008116:	6862      	ldr	r2, [r4, #4]
 8008118:	2100      	movs	r1, #0
 800811a:	4628      	mov	r0, r5
 800811c:	f7f8 f880 	bl	8000220 <memchr>
 8008120:	b108      	cbz	r0, 8008126 <_printf_i+0x1f2>
 8008122:	1b40      	subs	r0, r0, r5
 8008124:	6060      	str	r0, [r4, #4]
 8008126:	6863      	ldr	r3, [r4, #4]
 8008128:	6123      	str	r3, [r4, #16]
 800812a:	2300      	movs	r3, #0
 800812c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008130:	e7a8      	b.n	8008084 <_printf_i+0x150>
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	462a      	mov	r2, r5
 8008136:	4649      	mov	r1, r9
 8008138:	4640      	mov	r0, r8
 800813a:	47d0      	blx	sl
 800813c:	3001      	adds	r0, #1
 800813e:	d0ab      	beq.n	8008098 <_printf_i+0x164>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	079b      	lsls	r3, r3, #30
 8008144:	d413      	bmi.n	800816e <_printf_i+0x23a>
 8008146:	68e0      	ldr	r0, [r4, #12]
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	4298      	cmp	r0, r3
 800814c:	bfb8      	it	lt
 800814e:	4618      	movlt	r0, r3
 8008150:	e7a4      	b.n	800809c <_printf_i+0x168>
 8008152:	2301      	movs	r3, #1
 8008154:	4632      	mov	r2, r6
 8008156:	4649      	mov	r1, r9
 8008158:	4640      	mov	r0, r8
 800815a:	47d0      	blx	sl
 800815c:	3001      	adds	r0, #1
 800815e:	d09b      	beq.n	8008098 <_printf_i+0x164>
 8008160:	3501      	adds	r5, #1
 8008162:	68e3      	ldr	r3, [r4, #12]
 8008164:	9903      	ldr	r1, [sp, #12]
 8008166:	1a5b      	subs	r3, r3, r1
 8008168:	42ab      	cmp	r3, r5
 800816a:	dcf2      	bgt.n	8008152 <_printf_i+0x21e>
 800816c:	e7eb      	b.n	8008146 <_printf_i+0x212>
 800816e:	2500      	movs	r5, #0
 8008170:	f104 0619 	add.w	r6, r4, #25
 8008174:	e7f5      	b.n	8008162 <_printf_i+0x22e>
 8008176:	bf00      	nop
 8008178:	0800baaa 	.word	0x0800baaa
 800817c:	0800babb 	.word	0x0800babb

08008180 <iprintf>:
 8008180:	b40f      	push	{r0, r1, r2, r3}
 8008182:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <iprintf+0x2c>)
 8008184:	b513      	push	{r0, r1, r4, lr}
 8008186:	681c      	ldr	r4, [r3, #0]
 8008188:	b124      	cbz	r4, 8008194 <iprintf+0x14>
 800818a:	69a3      	ldr	r3, [r4, #24]
 800818c:	b913      	cbnz	r3, 8008194 <iprintf+0x14>
 800818e:	4620      	mov	r0, r4
 8008190:	f001 f892 	bl	80092b8 <__sinit>
 8008194:	ab05      	add	r3, sp, #20
 8008196:	9a04      	ldr	r2, [sp, #16]
 8008198:	68a1      	ldr	r1, [r4, #8]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	4620      	mov	r0, r4
 800819e:	f001 fec1 	bl	8009f24 <_vfiprintf_r>
 80081a2:	b002      	add	sp, #8
 80081a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a8:	b004      	add	sp, #16
 80081aa:	4770      	bx	lr
 80081ac:	200000c0 	.word	0x200000c0

080081b0 <_sbrk_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d06      	ldr	r5, [pc, #24]	; (80081cc <_sbrk_r+0x1c>)
 80081b4:	2300      	movs	r3, #0
 80081b6:	4604      	mov	r4, r0
 80081b8:	4608      	mov	r0, r1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	f7fb f9cc 	bl	8003558 <_sbrk>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d102      	bne.n	80081ca <_sbrk_r+0x1a>
 80081c4:	682b      	ldr	r3, [r5, #0]
 80081c6:	b103      	cbz	r3, 80081ca <_sbrk_r+0x1a>
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	bd38      	pop	{r3, r4, r5, pc}
 80081cc:	2000053c 	.word	0x2000053c

080081d0 <siprintf>:
 80081d0:	b40e      	push	{r1, r2, r3}
 80081d2:	b500      	push	{lr}
 80081d4:	b09c      	sub	sp, #112	; 0x70
 80081d6:	ab1d      	add	r3, sp, #116	; 0x74
 80081d8:	9002      	str	r0, [sp, #8]
 80081da:	9006      	str	r0, [sp, #24]
 80081dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081e0:	4809      	ldr	r0, [pc, #36]	; (8008208 <siprintf+0x38>)
 80081e2:	9107      	str	r1, [sp, #28]
 80081e4:	9104      	str	r1, [sp, #16]
 80081e6:	4909      	ldr	r1, [pc, #36]	; (800820c <siprintf+0x3c>)
 80081e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081ec:	9105      	str	r1, [sp, #20]
 80081ee:	6800      	ldr	r0, [r0, #0]
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	a902      	add	r1, sp, #8
 80081f4:	f001 fd6c 	bl	8009cd0 <_svfiprintf_r>
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	b01c      	add	sp, #112	; 0x70
 8008200:	f85d eb04 	ldr.w	lr, [sp], #4
 8008204:	b003      	add	sp, #12
 8008206:	4770      	bx	lr
 8008208:	200000c0 	.word	0x200000c0
 800820c:	ffff0208 	.word	0xffff0208

08008210 <__swbuf_r>:
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	460e      	mov	r6, r1
 8008214:	4614      	mov	r4, r2
 8008216:	4605      	mov	r5, r0
 8008218:	b118      	cbz	r0, 8008222 <__swbuf_r+0x12>
 800821a:	6983      	ldr	r3, [r0, #24]
 800821c:	b90b      	cbnz	r3, 8008222 <__swbuf_r+0x12>
 800821e:	f001 f84b 	bl	80092b8 <__sinit>
 8008222:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <__swbuf_r+0x98>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d12b      	bne.n	8008280 <__swbuf_r+0x70>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	69a3      	ldr	r3, [r4, #24]
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	071a      	lsls	r2, r3, #28
 8008232:	d52f      	bpl.n	8008294 <__swbuf_r+0x84>
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	b36b      	cbz	r3, 8008294 <__swbuf_r+0x84>
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	6820      	ldr	r0, [r4, #0]
 800823c:	1ac0      	subs	r0, r0, r3
 800823e:	6963      	ldr	r3, [r4, #20]
 8008240:	b2f6      	uxtb	r6, r6
 8008242:	4283      	cmp	r3, r0
 8008244:	4637      	mov	r7, r6
 8008246:	dc04      	bgt.n	8008252 <__swbuf_r+0x42>
 8008248:	4621      	mov	r1, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f000 ffa0 	bl	8009190 <_fflush_r>
 8008250:	bb30      	cbnz	r0, 80082a0 <__swbuf_r+0x90>
 8008252:	68a3      	ldr	r3, [r4, #8]
 8008254:	3b01      	subs	r3, #1
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	1c5a      	adds	r2, r3, #1
 800825c:	6022      	str	r2, [r4, #0]
 800825e:	701e      	strb	r6, [r3, #0]
 8008260:	6963      	ldr	r3, [r4, #20]
 8008262:	3001      	adds	r0, #1
 8008264:	4283      	cmp	r3, r0
 8008266:	d004      	beq.n	8008272 <__swbuf_r+0x62>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	07db      	lsls	r3, r3, #31
 800826c:	d506      	bpl.n	800827c <__swbuf_r+0x6c>
 800826e:	2e0a      	cmp	r6, #10
 8008270:	d104      	bne.n	800827c <__swbuf_r+0x6c>
 8008272:	4621      	mov	r1, r4
 8008274:	4628      	mov	r0, r5
 8008276:	f000 ff8b 	bl	8009190 <_fflush_r>
 800827a:	b988      	cbnz	r0, 80082a0 <__swbuf_r+0x90>
 800827c:	4638      	mov	r0, r7
 800827e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <__swbuf_r+0x9c>)
 8008282:	429c      	cmp	r4, r3
 8008284:	d101      	bne.n	800828a <__swbuf_r+0x7a>
 8008286:	68ac      	ldr	r4, [r5, #8]
 8008288:	e7cf      	b.n	800822a <__swbuf_r+0x1a>
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <__swbuf_r+0xa0>)
 800828c:	429c      	cmp	r4, r3
 800828e:	bf08      	it	eq
 8008290:	68ec      	ldreq	r4, [r5, #12]
 8008292:	e7ca      	b.n	800822a <__swbuf_r+0x1a>
 8008294:	4621      	mov	r1, r4
 8008296:	4628      	mov	r0, r5
 8008298:	f000 f80c 	bl	80082b4 <__swsetup_r>
 800829c:	2800      	cmp	r0, #0
 800829e:	d0cb      	beq.n	8008238 <__swbuf_r+0x28>
 80082a0:	f04f 37ff 	mov.w	r7, #4294967295
 80082a4:	e7ea      	b.n	800827c <__swbuf_r+0x6c>
 80082a6:	bf00      	nop
 80082a8:	0800bb7c 	.word	0x0800bb7c
 80082ac:	0800bb9c 	.word	0x0800bb9c
 80082b0:	0800bb5c 	.word	0x0800bb5c

080082b4 <__swsetup_r>:
 80082b4:	4b32      	ldr	r3, [pc, #200]	; (8008380 <__swsetup_r+0xcc>)
 80082b6:	b570      	push	{r4, r5, r6, lr}
 80082b8:	681d      	ldr	r5, [r3, #0]
 80082ba:	4606      	mov	r6, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	b125      	cbz	r5, 80082ca <__swsetup_r+0x16>
 80082c0:	69ab      	ldr	r3, [r5, #24]
 80082c2:	b913      	cbnz	r3, 80082ca <__swsetup_r+0x16>
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 fff7 	bl	80092b8 <__sinit>
 80082ca:	4b2e      	ldr	r3, [pc, #184]	; (8008384 <__swsetup_r+0xd0>)
 80082cc:	429c      	cmp	r4, r3
 80082ce:	d10f      	bne.n	80082f0 <__swsetup_r+0x3c>
 80082d0:	686c      	ldr	r4, [r5, #4]
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	d42c      	bmi.n	8008336 <__swsetup_r+0x82>
 80082dc:	06dd      	lsls	r5, r3, #27
 80082de:	d411      	bmi.n	8008304 <__swsetup_r+0x50>
 80082e0:	2309      	movs	r3, #9
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	e03e      	b.n	800836e <__swsetup_r+0xba>
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <__swsetup_r+0xd4>)
 80082f2:	429c      	cmp	r4, r3
 80082f4:	d101      	bne.n	80082fa <__swsetup_r+0x46>
 80082f6:	68ac      	ldr	r4, [r5, #8]
 80082f8:	e7eb      	b.n	80082d2 <__swsetup_r+0x1e>
 80082fa:	4b24      	ldr	r3, [pc, #144]	; (800838c <__swsetup_r+0xd8>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	bf08      	it	eq
 8008300:	68ec      	ldreq	r4, [r5, #12]
 8008302:	e7e6      	b.n	80082d2 <__swsetup_r+0x1e>
 8008304:	0758      	lsls	r0, r3, #29
 8008306:	d512      	bpl.n	800832e <__swsetup_r+0x7a>
 8008308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800830a:	b141      	cbz	r1, 800831e <__swsetup_r+0x6a>
 800830c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008310:	4299      	cmp	r1, r3
 8008312:	d002      	beq.n	800831a <__swsetup_r+0x66>
 8008314:	4630      	mov	r0, r6
 8008316:	f7ff f9e9 	bl	80076ec <_free_r>
 800831a:	2300      	movs	r3, #0
 800831c:	6363      	str	r3, [r4, #52]	; 0x34
 800831e:	89a3      	ldrh	r3, [r4, #12]
 8008320:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	2300      	movs	r3, #0
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6923      	ldr	r3, [r4, #16]
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	f043 0308 	orr.w	r3, r3, #8
 8008334:	81a3      	strh	r3, [r4, #12]
 8008336:	6923      	ldr	r3, [r4, #16]
 8008338:	b94b      	cbnz	r3, 800834e <__swsetup_r+0x9a>
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008344:	d003      	beq.n	800834e <__swsetup_r+0x9a>
 8008346:	4621      	mov	r1, r4
 8008348:	4630      	mov	r0, r6
 800834a:	f001 f87f 	bl	800944c <__smakebuf_r>
 800834e:	89a0      	ldrh	r0, [r4, #12]
 8008350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008354:	f010 0301 	ands.w	r3, r0, #1
 8008358:	d00a      	beq.n	8008370 <__swsetup_r+0xbc>
 800835a:	2300      	movs	r3, #0
 800835c:	60a3      	str	r3, [r4, #8]
 800835e:	6963      	ldr	r3, [r4, #20]
 8008360:	425b      	negs	r3, r3
 8008362:	61a3      	str	r3, [r4, #24]
 8008364:	6923      	ldr	r3, [r4, #16]
 8008366:	b943      	cbnz	r3, 800837a <__swsetup_r+0xc6>
 8008368:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800836c:	d1ba      	bne.n	80082e4 <__swsetup_r+0x30>
 800836e:	bd70      	pop	{r4, r5, r6, pc}
 8008370:	0781      	lsls	r1, r0, #30
 8008372:	bf58      	it	pl
 8008374:	6963      	ldrpl	r3, [r4, #20]
 8008376:	60a3      	str	r3, [r4, #8]
 8008378:	e7f4      	b.n	8008364 <__swsetup_r+0xb0>
 800837a:	2000      	movs	r0, #0
 800837c:	e7f7      	b.n	800836e <__swsetup_r+0xba>
 800837e:	bf00      	nop
 8008380:	200000c0 	.word	0x200000c0
 8008384:	0800bb7c 	.word	0x0800bb7c
 8008388:	0800bb9c 	.word	0x0800bb9c
 800838c:	0800bb5c 	.word	0x0800bb5c

08008390 <quorem>:
 8008390:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	6903      	ldr	r3, [r0, #16]
 8008396:	690c      	ldr	r4, [r1, #16]
 8008398:	42a3      	cmp	r3, r4
 800839a:	4607      	mov	r7, r0
 800839c:	f2c0 8081 	blt.w	80084a2 <quorem+0x112>
 80083a0:	3c01      	subs	r4, #1
 80083a2:	f101 0814 	add.w	r8, r1, #20
 80083a6:	f100 0514 	add.w	r5, r0, #20
 80083aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083b8:	3301      	adds	r3, #1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80083c8:	d331      	bcc.n	800842e <quorem+0x9e>
 80083ca:	f04f 0e00 	mov.w	lr, #0
 80083ce:	4640      	mov	r0, r8
 80083d0:	46ac      	mov	ip, r5
 80083d2:	46f2      	mov	sl, lr
 80083d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80083d8:	b293      	uxth	r3, r2
 80083da:	fb06 e303 	mla	r3, r6, r3, lr
 80083de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	ebaa 0303 	sub.w	r3, sl, r3
 80083e8:	f8dc a000 	ldr.w	sl, [ip]
 80083ec:	0c12      	lsrs	r2, r2, #16
 80083ee:	fa13 f38a 	uxtah	r3, r3, sl
 80083f2:	fb06 e202 	mla	r2, r6, r2, lr
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083fe:	b292      	uxth	r2, r2
 8008400:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008404:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008408:	f8bd 3000 	ldrh.w	r3, [sp]
 800840c:	4581      	cmp	r9, r0
 800840e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008412:	f84c 3b04 	str.w	r3, [ip], #4
 8008416:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800841a:	d2db      	bcs.n	80083d4 <quorem+0x44>
 800841c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008420:	b92b      	cbnz	r3, 800842e <quorem+0x9e>
 8008422:	9b01      	ldr	r3, [sp, #4]
 8008424:	3b04      	subs	r3, #4
 8008426:	429d      	cmp	r5, r3
 8008428:	461a      	mov	r2, r3
 800842a:	d32e      	bcc.n	800848a <quorem+0xfa>
 800842c:	613c      	str	r4, [r7, #16]
 800842e:	4638      	mov	r0, r7
 8008430:	f001 fada 	bl	80099e8 <__mcmp>
 8008434:	2800      	cmp	r0, #0
 8008436:	db24      	blt.n	8008482 <quorem+0xf2>
 8008438:	3601      	adds	r6, #1
 800843a:	4628      	mov	r0, r5
 800843c:	f04f 0c00 	mov.w	ip, #0
 8008440:	f858 2b04 	ldr.w	r2, [r8], #4
 8008444:	f8d0 e000 	ldr.w	lr, [r0]
 8008448:	b293      	uxth	r3, r2
 800844a:	ebac 0303 	sub.w	r3, ip, r3
 800844e:	0c12      	lsrs	r2, r2, #16
 8008450:	fa13 f38e 	uxtah	r3, r3, lr
 8008454:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008458:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800845c:	b29b      	uxth	r3, r3
 800845e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008462:	45c1      	cmp	r9, r8
 8008464:	f840 3b04 	str.w	r3, [r0], #4
 8008468:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800846c:	d2e8      	bcs.n	8008440 <quorem+0xb0>
 800846e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008476:	b922      	cbnz	r2, 8008482 <quorem+0xf2>
 8008478:	3b04      	subs	r3, #4
 800847a:	429d      	cmp	r5, r3
 800847c:	461a      	mov	r2, r3
 800847e:	d30a      	bcc.n	8008496 <quorem+0x106>
 8008480:	613c      	str	r4, [r7, #16]
 8008482:	4630      	mov	r0, r6
 8008484:	b003      	add	sp, #12
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	6812      	ldr	r2, [r2, #0]
 800848c:	3b04      	subs	r3, #4
 800848e:	2a00      	cmp	r2, #0
 8008490:	d1cc      	bne.n	800842c <quorem+0x9c>
 8008492:	3c01      	subs	r4, #1
 8008494:	e7c7      	b.n	8008426 <quorem+0x96>
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	3b04      	subs	r3, #4
 800849a:	2a00      	cmp	r2, #0
 800849c:	d1f0      	bne.n	8008480 <quorem+0xf0>
 800849e:	3c01      	subs	r4, #1
 80084a0:	e7eb      	b.n	800847a <quorem+0xea>
 80084a2:	2000      	movs	r0, #0
 80084a4:	e7ee      	b.n	8008484 <quorem+0xf4>
	...

080084a8 <_dtoa_r>:
 80084a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ac:	ed2d 8b04 	vpush	{d8-d9}
 80084b0:	ec57 6b10 	vmov	r6, r7, d0
 80084b4:	b093      	sub	sp, #76	; 0x4c
 80084b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084bc:	9106      	str	r1, [sp, #24]
 80084be:	ee10 aa10 	vmov	sl, s0
 80084c2:	4604      	mov	r4, r0
 80084c4:	9209      	str	r2, [sp, #36]	; 0x24
 80084c6:	930c      	str	r3, [sp, #48]	; 0x30
 80084c8:	46bb      	mov	fp, r7
 80084ca:	b975      	cbnz	r5, 80084ea <_dtoa_r+0x42>
 80084cc:	2010      	movs	r0, #16
 80084ce:	f7ff f8ef 	bl	80076b0 <malloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6260      	str	r0, [r4, #36]	; 0x24
 80084d6:	b920      	cbnz	r0, 80084e2 <_dtoa_r+0x3a>
 80084d8:	4ba7      	ldr	r3, [pc, #668]	; (8008778 <_dtoa_r+0x2d0>)
 80084da:	21ea      	movs	r1, #234	; 0xea
 80084dc:	48a7      	ldr	r0, [pc, #668]	; (800877c <_dtoa_r+0x2d4>)
 80084de:	f001 fea7 	bl	800a230 <__assert_func>
 80084e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084e6:	6005      	str	r5, [r0, #0]
 80084e8:	60c5      	str	r5, [r0, #12]
 80084ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084ec:	6819      	ldr	r1, [r3, #0]
 80084ee:	b151      	cbz	r1, 8008506 <_dtoa_r+0x5e>
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	604a      	str	r2, [r1, #4]
 80084f4:	2301      	movs	r3, #1
 80084f6:	4093      	lsls	r3, r2
 80084f8:	608b      	str	r3, [r1, #8]
 80084fa:	4620      	mov	r0, r4
 80084fc:	f001 f832 	bl	8009564 <_Bfree>
 8008500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	1e3b      	subs	r3, r7, #0
 8008508:	bfaa      	itet	ge
 800850a:	2300      	movge	r3, #0
 800850c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008510:	f8c8 3000 	strge.w	r3, [r8]
 8008514:	4b9a      	ldr	r3, [pc, #616]	; (8008780 <_dtoa_r+0x2d8>)
 8008516:	bfbc      	itt	lt
 8008518:	2201      	movlt	r2, #1
 800851a:	f8c8 2000 	strlt.w	r2, [r8]
 800851e:	ea33 030b 	bics.w	r3, r3, fp
 8008522:	d11b      	bne.n	800855c <_dtoa_r+0xb4>
 8008524:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008526:	f242 730f 	movw	r3, #9999	; 0x270f
 800852a:	6013      	str	r3, [r2, #0]
 800852c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008530:	4333      	orrs	r3, r6
 8008532:	f000 8592 	beq.w	800905a <_dtoa_r+0xbb2>
 8008536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008538:	b963      	cbnz	r3, 8008554 <_dtoa_r+0xac>
 800853a:	4b92      	ldr	r3, [pc, #584]	; (8008784 <_dtoa_r+0x2dc>)
 800853c:	e022      	b.n	8008584 <_dtoa_r+0xdc>
 800853e:	4b92      	ldr	r3, [pc, #584]	; (8008788 <_dtoa_r+0x2e0>)
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	3308      	adds	r3, #8
 8008544:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008546:	6013      	str	r3, [r2, #0]
 8008548:	9801      	ldr	r0, [sp, #4]
 800854a:	b013      	add	sp, #76	; 0x4c
 800854c:	ecbd 8b04 	vpop	{d8-d9}
 8008550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008554:	4b8b      	ldr	r3, [pc, #556]	; (8008784 <_dtoa_r+0x2dc>)
 8008556:	9301      	str	r3, [sp, #4]
 8008558:	3303      	adds	r3, #3
 800855a:	e7f3      	b.n	8008544 <_dtoa_r+0x9c>
 800855c:	2200      	movs	r2, #0
 800855e:	2300      	movs	r3, #0
 8008560:	4650      	mov	r0, sl
 8008562:	4659      	mov	r1, fp
 8008564:	f7f8 fad0 	bl	8000b08 <__aeabi_dcmpeq>
 8008568:	ec4b ab19 	vmov	d9, sl, fp
 800856c:	4680      	mov	r8, r0
 800856e:	b158      	cbz	r0, 8008588 <_dtoa_r+0xe0>
 8008570:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008572:	2301      	movs	r3, #1
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008578:	2b00      	cmp	r3, #0
 800857a:	f000 856b 	beq.w	8009054 <_dtoa_r+0xbac>
 800857e:	4883      	ldr	r0, [pc, #524]	; (800878c <_dtoa_r+0x2e4>)
 8008580:	6018      	str	r0, [r3, #0]
 8008582:	1e43      	subs	r3, r0, #1
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	e7df      	b.n	8008548 <_dtoa_r+0xa0>
 8008588:	ec4b ab10 	vmov	d0, sl, fp
 800858c:	aa10      	add	r2, sp, #64	; 0x40
 800858e:	a911      	add	r1, sp, #68	; 0x44
 8008590:	4620      	mov	r0, r4
 8008592:	f001 facf 	bl	8009b34 <__d2b>
 8008596:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800859a:	ee08 0a10 	vmov	s16, r0
 800859e:	2d00      	cmp	r5, #0
 80085a0:	f000 8084 	beq.w	80086ac <_dtoa_r+0x204>
 80085a4:	ee19 3a90 	vmov	r3, s19
 80085a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085b0:	4656      	mov	r6, sl
 80085b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085be:	4b74      	ldr	r3, [pc, #464]	; (8008790 <_dtoa_r+0x2e8>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	4630      	mov	r0, r6
 80085c4:	4639      	mov	r1, r7
 80085c6:	f7f7 fe7f 	bl	80002c8 <__aeabi_dsub>
 80085ca:	a365      	add	r3, pc, #404	; (adr r3, 8008760 <_dtoa_r+0x2b8>)
 80085cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d0:	f7f8 f832 	bl	8000638 <__aeabi_dmul>
 80085d4:	a364      	add	r3, pc, #400	; (adr r3, 8008768 <_dtoa_r+0x2c0>)
 80085d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085da:	f7f7 fe77 	bl	80002cc <__adddf3>
 80085de:	4606      	mov	r6, r0
 80085e0:	4628      	mov	r0, r5
 80085e2:	460f      	mov	r7, r1
 80085e4:	f7f7 ffbe 	bl	8000564 <__aeabi_i2d>
 80085e8:	a361      	add	r3, pc, #388	; (adr r3, 8008770 <_dtoa_r+0x2c8>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f8 f823 	bl	8000638 <__aeabi_dmul>
 80085f2:	4602      	mov	r2, r0
 80085f4:	460b      	mov	r3, r1
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7f7 fe67 	bl	80002cc <__adddf3>
 80085fe:	4606      	mov	r6, r0
 8008600:	460f      	mov	r7, r1
 8008602:	f7f8 fac9 	bl	8000b98 <__aeabi_d2iz>
 8008606:	2200      	movs	r2, #0
 8008608:	9000      	str	r0, [sp, #0]
 800860a:	2300      	movs	r3, #0
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f8 fa84 	bl	8000b1c <__aeabi_dcmplt>
 8008614:	b150      	cbz	r0, 800862c <_dtoa_r+0x184>
 8008616:	9800      	ldr	r0, [sp, #0]
 8008618:	f7f7 ffa4 	bl	8000564 <__aeabi_i2d>
 800861c:	4632      	mov	r2, r6
 800861e:	463b      	mov	r3, r7
 8008620:	f7f8 fa72 	bl	8000b08 <__aeabi_dcmpeq>
 8008624:	b910      	cbnz	r0, 800862c <_dtoa_r+0x184>
 8008626:	9b00      	ldr	r3, [sp, #0]
 8008628:	3b01      	subs	r3, #1
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	9b00      	ldr	r3, [sp, #0]
 800862e:	2b16      	cmp	r3, #22
 8008630:	d85a      	bhi.n	80086e8 <_dtoa_r+0x240>
 8008632:	9a00      	ldr	r2, [sp, #0]
 8008634:	4b57      	ldr	r3, [pc, #348]	; (8008794 <_dtoa_r+0x2ec>)
 8008636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	ec51 0b19 	vmov	r0, r1, d9
 8008642:	f7f8 fa6b 	bl	8000b1c <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	d050      	beq.n	80086ec <_dtoa_r+0x244>
 800864a:	9b00      	ldr	r3, [sp, #0]
 800864c:	3b01      	subs	r3, #1
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	930b      	str	r3, [sp, #44]	; 0x2c
 8008654:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008656:	1b5d      	subs	r5, r3, r5
 8008658:	1e6b      	subs	r3, r5, #1
 800865a:	9305      	str	r3, [sp, #20]
 800865c:	bf45      	ittet	mi
 800865e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008662:	9304      	strmi	r3, [sp, #16]
 8008664:	2300      	movpl	r3, #0
 8008666:	2300      	movmi	r3, #0
 8008668:	bf4c      	ite	mi
 800866a:	9305      	strmi	r3, [sp, #20]
 800866c:	9304      	strpl	r3, [sp, #16]
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	db3d      	blt.n	80086f0 <_dtoa_r+0x248>
 8008674:	9b05      	ldr	r3, [sp, #20]
 8008676:	9a00      	ldr	r2, [sp, #0]
 8008678:	920a      	str	r2, [sp, #40]	; 0x28
 800867a:	4413      	add	r3, r2
 800867c:	9305      	str	r3, [sp, #20]
 800867e:	2300      	movs	r3, #0
 8008680:	9307      	str	r3, [sp, #28]
 8008682:	9b06      	ldr	r3, [sp, #24]
 8008684:	2b09      	cmp	r3, #9
 8008686:	f200 8089 	bhi.w	800879c <_dtoa_r+0x2f4>
 800868a:	2b05      	cmp	r3, #5
 800868c:	bfc4      	itt	gt
 800868e:	3b04      	subgt	r3, #4
 8008690:	9306      	strgt	r3, [sp, #24]
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	f1a3 0302 	sub.w	r3, r3, #2
 8008698:	bfcc      	ite	gt
 800869a:	2500      	movgt	r5, #0
 800869c:	2501      	movle	r5, #1
 800869e:	2b03      	cmp	r3, #3
 80086a0:	f200 8087 	bhi.w	80087b2 <_dtoa_r+0x30a>
 80086a4:	e8df f003 	tbb	[pc, r3]
 80086a8:	59383a2d 	.word	0x59383a2d
 80086ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086b0:	441d      	add	r5, r3
 80086b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	bfc1      	itttt	gt
 80086ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80086c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086ca:	bfda      	itte	le
 80086cc:	f1c3 0320 	rsble	r3, r3, #32
 80086d0:	fa06 f003 	lslle.w	r0, r6, r3
 80086d4:	4318      	orrgt	r0, r3
 80086d6:	f7f7 ff35 	bl	8000544 <__aeabi_ui2d>
 80086da:	2301      	movs	r3, #1
 80086dc:	4606      	mov	r6, r0
 80086de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086e2:	3d01      	subs	r5, #1
 80086e4:	930e      	str	r3, [sp, #56]	; 0x38
 80086e6:	e76a      	b.n	80085be <_dtoa_r+0x116>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e7b2      	b.n	8008652 <_dtoa_r+0x1aa>
 80086ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80086ee:	e7b1      	b.n	8008654 <_dtoa_r+0x1ac>
 80086f0:	9b04      	ldr	r3, [sp, #16]
 80086f2:	9a00      	ldr	r2, [sp, #0]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	9304      	str	r3, [sp, #16]
 80086f8:	4253      	negs	r3, r2
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	2300      	movs	r3, #0
 80086fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008700:	e7bf      	b.n	8008682 <_dtoa_r+0x1da>
 8008702:	2300      	movs	r3, #0
 8008704:	9308      	str	r3, [sp, #32]
 8008706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	dc55      	bgt.n	80087b8 <_dtoa_r+0x310>
 800870c:	2301      	movs	r3, #1
 800870e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008712:	461a      	mov	r2, r3
 8008714:	9209      	str	r2, [sp, #36]	; 0x24
 8008716:	e00c      	b.n	8008732 <_dtoa_r+0x28a>
 8008718:	2301      	movs	r3, #1
 800871a:	e7f3      	b.n	8008704 <_dtoa_r+0x25c>
 800871c:	2300      	movs	r3, #0
 800871e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008720:	9308      	str	r3, [sp, #32]
 8008722:	9b00      	ldr	r3, [sp, #0]
 8008724:	4413      	add	r3, r2
 8008726:	9302      	str	r3, [sp, #8]
 8008728:	3301      	adds	r3, #1
 800872a:	2b01      	cmp	r3, #1
 800872c:	9303      	str	r3, [sp, #12]
 800872e:	bfb8      	it	lt
 8008730:	2301      	movlt	r3, #1
 8008732:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008734:	2200      	movs	r2, #0
 8008736:	6042      	str	r2, [r0, #4]
 8008738:	2204      	movs	r2, #4
 800873a:	f102 0614 	add.w	r6, r2, #20
 800873e:	429e      	cmp	r6, r3
 8008740:	6841      	ldr	r1, [r0, #4]
 8008742:	d93d      	bls.n	80087c0 <_dtoa_r+0x318>
 8008744:	4620      	mov	r0, r4
 8008746:	f000 fecd 	bl	80094e4 <_Balloc>
 800874a:	9001      	str	r0, [sp, #4]
 800874c:	2800      	cmp	r0, #0
 800874e:	d13b      	bne.n	80087c8 <_dtoa_r+0x320>
 8008750:	4b11      	ldr	r3, [pc, #68]	; (8008798 <_dtoa_r+0x2f0>)
 8008752:	4602      	mov	r2, r0
 8008754:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008758:	e6c0      	b.n	80084dc <_dtoa_r+0x34>
 800875a:	2301      	movs	r3, #1
 800875c:	e7df      	b.n	800871e <_dtoa_r+0x276>
 800875e:	bf00      	nop
 8008760:	636f4361 	.word	0x636f4361
 8008764:	3fd287a7 	.word	0x3fd287a7
 8008768:	8b60c8b3 	.word	0x8b60c8b3
 800876c:	3fc68a28 	.word	0x3fc68a28
 8008770:	509f79fb 	.word	0x509f79fb
 8008774:	3fd34413 	.word	0x3fd34413
 8008778:	0800bad9 	.word	0x0800bad9
 800877c:	0800baf0 	.word	0x0800baf0
 8008780:	7ff00000 	.word	0x7ff00000
 8008784:	0800bad5 	.word	0x0800bad5
 8008788:	0800bacc 	.word	0x0800bacc
 800878c:	0800baa9 	.word	0x0800baa9
 8008790:	3ff80000 	.word	0x3ff80000
 8008794:	0800bc40 	.word	0x0800bc40
 8008798:	0800bb4b 	.word	0x0800bb4b
 800879c:	2501      	movs	r5, #1
 800879e:	2300      	movs	r3, #0
 80087a0:	9306      	str	r3, [sp, #24]
 80087a2:	9508      	str	r5, [sp, #32]
 80087a4:	f04f 33ff 	mov.w	r3, #4294967295
 80087a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	2312      	movs	r3, #18
 80087b0:	e7b0      	b.n	8008714 <_dtoa_r+0x26c>
 80087b2:	2301      	movs	r3, #1
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	e7f5      	b.n	80087a4 <_dtoa_r+0x2fc>
 80087b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087be:	e7b8      	b.n	8008732 <_dtoa_r+0x28a>
 80087c0:	3101      	adds	r1, #1
 80087c2:	6041      	str	r1, [r0, #4]
 80087c4:	0052      	lsls	r2, r2, #1
 80087c6:	e7b8      	b.n	800873a <_dtoa_r+0x292>
 80087c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	601a      	str	r2, [r3, #0]
 80087ce:	9b03      	ldr	r3, [sp, #12]
 80087d0:	2b0e      	cmp	r3, #14
 80087d2:	f200 809d 	bhi.w	8008910 <_dtoa_r+0x468>
 80087d6:	2d00      	cmp	r5, #0
 80087d8:	f000 809a 	beq.w	8008910 <_dtoa_r+0x468>
 80087dc:	9b00      	ldr	r3, [sp, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dd32      	ble.n	8008848 <_dtoa_r+0x3a0>
 80087e2:	4ab7      	ldr	r2, [pc, #732]	; (8008ac0 <_dtoa_r+0x618>)
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087f0:	9b00      	ldr	r3, [sp, #0]
 80087f2:	05d8      	lsls	r0, r3, #23
 80087f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80087f8:	d516      	bpl.n	8008828 <_dtoa_r+0x380>
 80087fa:	4bb2      	ldr	r3, [pc, #712]	; (8008ac4 <_dtoa_r+0x61c>)
 80087fc:	ec51 0b19 	vmov	r0, r1, d9
 8008800:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008804:	f7f8 f842 	bl	800088c <__aeabi_ddiv>
 8008808:	f007 070f 	and.w	r7, r7, #15
 800880c:	4682      	mov	sl, r0
 800880e:	468b      	mov	fp, r1
 8008810:	2503      	movs	r5, #3
 8008812:	4eac      	ldr	r6, [pc, #688]	; (8008ac4 <_dtoa_r+0x61c>)
 8008814:	b957      	cbnz	r7, 800882c <_dtoa_r+0x384>
 8008816:	4642      	mov	r2, r8
 8008818:	464b      	mov	r3, r9
 800881a:	4650      	mov	r0, sl
 800881c:	4659      	mov	r1, fp
 800881e:	f7f8 f835 	bl	800088c <__aeabi_ddiv>
 8008822:	4682      	mov	sl, r0
 8008824:	468b      	mov	fp, r1
 8008826:	e028      	b.n	800887a <_dtoa_r+0x3d2>
 8008828:	2502      	movs	r5, #2
 800882a:	e7f2      	b.n	8008812 <_dtoa_r+0x36a>
 800882c:	07f9      	lsls	r1, r7, #31
 800882e:	d508      	bpl.n	8008842 <_dtoa_r+0x39a>
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008838:	f7f7 fefe 	bl	8000638 <__aeabi_dmul>
 800883c:	3501      	adds	r5, #1
 800883e:	4680      	mov	r8, r0
 8008840:	4689      	mov	r9, r1
 8008842:	107f      	asrs	r7, r7, #1
 8008844:	3608      	adds	r6, #8
 8008846:	e7e5      	b.n	8008814 <_dtoa_r+0x36c>
 8008848:	f000 809b 	beq.w	8008982 <_dtoa_r+0x4da>
 800884c:	9b00      	ldr	r3, [sp, #0]
 800884e:	4f9d      	ldr	r7, [pc, #628]	; (8008ac4 <_dtoa_r+0x61c>)
 8008850:	425e      	negs	r6, r3
 8008852:	4b9b      	ldr	r3, [pc, #620]	; (8008ac0 <_dtoa_r+0x618>)
 8008854:	f006 020f 	and.w	r2, r6, #15
 8008858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	ec51 0b19 	vmov	r0, r1, d9
 8008864:	f7f7 fee8 	bl	8000638 <__aeabi_dmul>
 8008868:	1136      	asrs	r6, r6, #4
 800886a:	4682      	mov	sl, r0
 800886c:	468b      	mov	fp, r1
 800886e:	2300      	movs	r3, #0
 8008870:	2502      	movs	r5, #2
 8008872:	2e00      	cmp	r6, #0
 8008874:	d17a      	bne.n	800896c <_dtoa_r+0x4c4>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1d3      	bne.n	8008822 <_dtoa_r+0x37a>
 800887a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 8082 	beq.w	8008986 <_dtoa_r+0x4de>
 8008882:	4b91      	ldr	r3, [pc, #580]	; (8008ac8 <_dtoa_r+0x620>)
 8008884:	2200      	movs	r2, #0
 8008886:	4650      	mov	r0, sl
 8008888:	4659      	mov	r1, fp
 800888a:	f7f8 f947 	bl	8000b1c <__aeabi_dcmplt>
 800888e:	2800      	cmp	r0, #0
 8008890:	d079      	beq.n	8008986 <_dtoa_r+0x4de>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d076      	beq.n	8008986 <_dtoa_r+0x4de>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd36      	ble.n	800890c <_dtoa_r+0x464>
 800889e:	9b00      	ldr	r3, [sp, #0]
 80088a0:	4650      	mov	r0, sl
 80088a2:	4659      	mov	r1, fp
 80088a4:	1e5f      	subs	r7, r3, #1
 80088a6:	2200      	movs	r2, #0
 80088a8:	4b88      	ldr	r3, [pc, #544]	; (8008acc <_dtoa_r+0x624>)
 80088aa:	f7f7 fec5 	bl	8000638 <__aeabi_dmul>
 80088ae:	9e02      	ldr	r6, [sp, #8]
 80088b0:	4682      	mov	sl, r0
 80088b2:	468b      	mov	fp, r1
 80088b4:	3501      	adds	r5, #1
 80088b6:	4628      	mov	r0, r5
 80088b8:	f7f7 fe54 	bl	8000564 <__aeabi_i2d>
 80088bc:	4652      	mov	r2, sl
 80088be:	465b      	mov	r3, fp
 80088c0:	f7f7 feba 	bl	8000638 <__aeabi_dmul>
 80088c4:	4b82      	ldr	r3, [pc, #520]	; (8008ad0 <_dtoa_r+0x628>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7f7 fd00 	bl	80002cc <__adddf3>
 80088cc:	46d0      	mov	r8, sl
 80088ce:	46d9      	mov	r9, fp
 80088d0:	4682      	mov	sl, r0
 80088d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d158      	bne.n	800898c <_dtoa_r+0x4e4>
 80088da:	4b7e      	ldr	r3, [pc, #504]	; (8008ad4 <_dtoa_r+0x62c>)
 80088dc:	2200      	movs	r2, #0
 80088de:	4640      	mov	r0, r8
 80088e0:	4649      	mov	r1, r9
 80088e2:	f7f7 fcf1 	bl	80002c8 <__aeabi_dsub>
 80088e6:	4652      	mov	r2, sl
 80088e8:	465b      	mov	r3, fp
 80088ea:	4680      	mov	r8, r0
 80088ec:	4689      	mov	r9, r1
 80088ee:	f7f8 f933 	bl	8000b58 <__aeabi_dcmpgt>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	f040 8295 	bne.w	8008e22 <_dtoa_r+0x97a>
 80088f8:	4652      	mov	r2, sl
 80088fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088fe:	4640      	mov	r0, r8
 8008900:	4649      	mov	r1, r9
 8008902:	f7f8 f90b 	bl	8000b1c <__aeabi_dcmplt>
 8008906:	2800      	cmp	r0, #0
 8008908:	f040 8289 	bne.w	8008e1e <_dtoa_r+0x976>
 800890c:	ec5b ab19 	vmov	sl, fp, d9
 8008910:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008912:	2b00      	cmp	r3, #0
 8008914:	f2c0 8148 	blt.w	8008ba8 <_dtoa_r+0x700>
 8008918:	9a00      	ldr	r2, [sp, #0]
 800891a:	2a0e      	cmp	r2, #14
 800891c:	f300 8144 	bgt.w	8008ba8 <_dtoa_r+0x700>
 8008920:	4b67      	ldr	r3, [pc, #412]	; (8008ac0 <_dtoa_r+0x618>)
 8008922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008926:	e9d3 8900 	ldrd	r8, r9, [r3]
 800892a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	f280 80d5 	bge.w	8008adc <_dtoa_r+0x634>
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f300 80d1 	bgt.w	8008adc <_dtoa_r+0x634>
 800893a:	f040 826f 	bne.w	8008e1c <_dtoa_r+0x974>
 800893e:	4b65      	ldr	r3, [pc, #404]	; (8008ad4 <_dtoa_r+0x62c>)
 8008940:	2200      	movs	r2, #0
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f7 fe77 	bl	8000638 <__aeabi_dmul>
 800894a:	4652      	mov	r2, sl
 800894c:	465b      	mov	r3, fp
 800894e:	f7f8 f8f9 	bl	8000b44 <__aeabi_dcmpge>
 8008952:	9e03      	ldr	r6, [sp, #12]
 8008954:	4637      	mov	r7, r6
 8008956:	2800      	cmp	r0, #0
 8008958:	f040 8245 	bne.w	8008de6 <_dtoa_r+0x93e>
 800895c:	9d01      	ldr	r5, [sp, #4]
 800895e:	2331      	movs	r3, #49	; 0x31
 8008960:	f805 3b01 	strb.w	r3, [r5], #1
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	e240      	b.n	8008dee <_dtoa_r+0x946>
 800896c:	07f2      	lsls	r2, r6, #31
 800896e:	d505      	bpl.n	800897c <_dtoa_r+0x4d4>
 8008970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008974:	f7f7 fe60 	bl	8000638 <__aeabi_dmul>
 8008978:	3501      	adds	r5, #1
 800897a:	2301      	movs	r3, #1
 800897c:	1076      	asrs	r6, r6, #1
 800897e:	3708      	adds	r7, #8
 8008980:	e777      	b.n	8008872 <_dtoa_r+0x3ca>
 8008982:	2502      	movs	r5, #2
 8008984:	e779      	b.n	800887a <_dtoa_r+0x3d2>
 8008986:	9f00      	ldr	r7, [sp, #0]
 8008988:	9e03      	ldr	r6, [sp, #12]
 800898a:	e794      	b.n	80088b6 <_dtoa_r+0x40e>
 800898c:	9901      	ldr	r1, [sp, #4]
 800898e:	4b4c      	ldr	r3, [pc, #304]	; (8008ac0 <_dtoa_r+0x618>)
 8008990:	4431      	add	r1, r6
 8008992:	910d      	str	r1, [sp, #52]	; 0x34
 8008994:	9908      	ldr	r1, [sp, #32]
 8008996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800899a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800899e:	2900      	cmp	r1, #0
 80089a0:	d043      	beq.n	8008a2a <_dtoa_r+0x582>
 80089a2:	494d      	ldr	r1, [pc, #308]	; (8008ad8 <_dtoa_r+0x630>)
 80089a4:	2000      	movs	r0, #0
 80089a6:	f7f7 ff71 	bl	800088c <__aeabi_ddiv>
 80089aa:	4652      	mov	r2, sl
 80089ac:	465b      	mov	r3, fp
 80089ae:	f7f7 fc8b 	bl	80002c8 <__aeabi_dsub>
 80089b2:	9d01      	ldr	r5, [sp, #4]
 80089b4:	4682      	mov	sl, r0
 80089b6:	468b      	mov	fp, r1
 80089b8:	4649      	mov	r1, r9
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7f8 f8ec 	bl	8000b98 <__aeabi_d2iz>
 80089c0:	4606      	mov	r6, r0
 80089c2:	f7f7 fdcf 	bl	8000564 <__aeabi_i2d>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fc7b 	bl	80002c8 <__aeabi_dsub>
 80089d2:	3630      	adds	r6, #48	; 0x30
 80089d4:	f805 6b01 	strb.w	r6, [r5], #1
 80089d8:	4652      	mov	r2, sl
 80089da:	465b      	mov	r3, fp
 80089dc:	4680      	mov	r8, r0
 80089de:	4689      	mov	r9, r1
 80089e0:	f7f8 f89c 	bl	8000b1c <__aeabi_dcmplt>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	d163      	bne.n	8008ab0 <_dtoa_r+0x608>
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	4936      	ldr	r1, [pc, #216]	; (8008ac8 <_dtoa_r+0x620>)
 80089ee:	2000      	movs	r0, #0
 80089f0:	f7f7 fc6a 	bl	80002c8 <__aeabi_dsub>
 80089f4:	4652      	mov	r2, sl
 80089f6:	465b      	mov	r3, fp
 80089f8:	f7f8 f890 	bl	8000b1c <__aeabi_dcmplt>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f040 80b5 	bne.w	8008b6c <_dtoa_r+0x6c4>
 8008a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a04:	429d      	cmp	r5, r3
 8008a06:	d081      	beq.n	800890c <_dtoa_r+0x464>
 8008a08:	4b30      	ldr	r3, [pc, #192]	; (8008acc <_dtoa_r+0x624>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	4659      	mov	r1, fp
 8008a10:	f7f7 fe12 	bl	8000638 <__aeabi_dmul>
 8008a14:	4b2d      	ldr	r3, [pc, #180]	; (8008acc <_dtoa_r+0x624>)
 8008a16:	4682      	mov	sl, r0
 8008a18:	468b      	mov	fp, r1
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	4649      	mov	r1, r9
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f7f7 fe0a 	bl	8000638 <__aeabi_dmul>
 8008a24:	4680      	mov	r8, r0
 8008a26:	4689      	mov	r9, r1
 8008a28:	e7c6      	b.n	80089b8 <_dtoa_r+0x510>
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	4659      	mov	r1, fp
 8008a2e:	f7f7 fe03 	bl	8000638 <__aeabi_dmul>
 8008a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a34:	9d01      	ldr	r5, [sp, #4]
 8008a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a38:	4682      	mov	sl, r0
 8008a3a:	468b      	mov	fp, r1
 8008a3c:	4649      	mov	r1, r9
 8008a3e:	4640      	mov	r0, r8
 8008a40:	f7f8 f8aa 	bl	8000b98 <__aeabi_d2iz>
 8008a44:	4606      	mov	r6, r0
 8008a46:	f7f7 fd8d 	bl	8000564 <__aeabi_i2d>
 8008a4a:	3630      	adds	r6, #48	; 0x30
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fc38 	bl	80002c8 <__aeabi_dsub>
 8008a58:	f805 6b01 	strb.w	r6, [r5], #1
 8008a5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a5e:	429d      	cmp	r5, r3
 8008a60:	4680      	mov	r8, r0
 8008a62:	4689      	mov	r9, r1
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	d124      	bne.n	8008ab4 <_dtoa_r+0x60c>
 8008a6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <_dtoa_r+0x630>)
 8008a6c:	4650      	mov	r0, sl
 8008a6e:	4659      	mov	r1, fp
 8008a70:	f7f7 fc2c 	bl	80002cc <__adddf3>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f8 f86c 	bl	8000b58 <__aeabi_dcmpgt>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d173      	bne.n	8008b6c <_dtoa_r+0x6c4>
 8008a84:	4652      	mov	r2, sl
 8008a86:	465b      	mov	r3, fp
 8008a88:	4913      	ldr	r1, [pc, #76]	; (8008ad8 <_dtoa_r+0x630>)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f7f7 fc1c 	bl	80002c8 <__aeabi_dsub>
 8008a90:	4602      	mov	r2, r0
 8008a92:	460b      	mov	r3, r1
 8008a94:	4640      	mov	r0, r8
 8008a96:	4649      	mov	r1, r9
 8008a98:	f7f8 f840 	bl	8000b1c <__aeabi_dcmplt>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	f43f af35 	beq.w	800890c <_dtoa_r+0x464>
 8008aa2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008aa4:	1e6b      	subs	r3, r5, #1
 8008aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aa8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008aac:	2b30      	cmp	r3, #48	; 0x30
 8008aae:	d0f8      	beq.n	8008aa2 <_dtoa_r+0x5fa>
 8008ab0:	9700      	str	r7, [sp, #0]
 8008ab2:	e049      	b.n	8008b48 <_dtoa_r+0x6a0>
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <_dtoa_r+0x624>)
 8008ab6:	f7f7 fdbf 	bl	8000638 <__aeabi_dmul>
 8008aba:	4680      	mov	r8, r0
 8008abc:	4689      	mov	r9, r1
 8008abe:	e7bd      	b.n	8008a3c <_dtoa_r+0x594>
 8008ac0:	0800bc40 	.word	0x0800bc40
 8008ac4:	0800bc18 	.word	0x0800bc18
 8008ac8:	3ff00000 	.word	0x3ff00000
 8008acc:	40240000 	.word	0x40240000
 8008ad0:	401c0000 	.word	0x401c0000
 8008ad4:	40140000 	.word	0x40140000
 8008ad8:	3fe00000 	.word	0x3fe00000
 8008adc:	9d01      	ldr	r5, [sp, #4]
 8008ade:	4656      	mov	r6, sl
 8008ae0:	465f      	mov	r7, fp
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	4639      	mov	r1, r7
 8008aea:	f7f7 fecf 	bl	800088c <__aeabi_ddiv>
 8008aee:	f7f8 f853 	bl	8000b98 <__aeabi_d2iz>
 8008af2:	4682      	mov	sl, r0
 8008af4:	f7f7 fd36 	bl	8000564 <__aeabi_i2d>
 8008af8:	4642      	mov	r2, r8
 8008afa:	464b      	mov	r3, r9
 8008afc:	f7f7 fd9c 	bl	8000638 <__aeabi_dmul>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b0c:	f7f7 fbdc 	bl	80002c8 <__aeabi_dsub>
 8008b10:	f805 6b01 	strb.w	r6, [r5], #1
 8008b14:	9e01      	ldr	r6, [sp, #4]
 8008b16:	9f03      	ldr	r7, [sp, #12]
 8008b18:	1bae      	subs	r6, r5, r6
 8008b1a:	42b7      	cmp	r7, r6
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	d135      	bne.n	8008b8e <_dtoa_r+0x6e6>
 8008b22:	f7f7 fbd3 	bl	80002cc <__adddf3>
 8008b26:	4642      	mov	r2, r8
 8008b28:	464b      	mov	r3, r9
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	f7f8 f813 	bl	8000b58 <__aeabi_dcmpgt>
 8008b32:	b9d0      	cbnz	r0, 8008b6a <_dtoa_r+0x6c2>
 8008b34:	4642      	mov	r2, r8
 8008b36:	464b      	mov	r3, r9
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 ffe4 	bl	8000b08 <__aeabi_dcmpeq>
 8008b40:	b110      	cbz	r0, 8008b48 <_dtoa_r+0x6a0>
 8008b42:	f01a 0f01 	tst.w	sl, #1
 8008b46:	d110      	bne.n	8008b6a <_dtoa_r+0x6c2>
 8008b48:	4620      	mov	r0, r4
 8008b4a:	ee18 1a10 	vmov	r1, s16
 8008b4e:	f000 fd09 	bl	8009564 <_Bfree>
 8008b52:	2300      	movs	r3, #0
 8008b54:	9800      	ldr	r0, [sp, #0]
 8008b56:	702b      	strb	r3, [r5, #0]
 8008b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	6018      	str	r0, [r3, #0]
 8008b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f43f acf1 	beq.w	8008548 <_dtoa_r+0xa0>
 8008b66:	601d      	str	r5, [r3, #0]
 8008b68:	e4ee      	b.n	8008548 <_dtoa_r+0xa0>
 8008b6a:	9f00      	ldr	r7, [sp, #0]
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	461d      	mov	r5, r3
 8008b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b74:	2a39      	cmp	r2, #57	; 0x39
 8008b76:	d106      	bne.n	8008b86 <_dtoa_r+0x6de>
 8008b78:	9a01      	ldr	r2, [sp, #4]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d1f7      	bne.n	8008b6e <_dtoa_r+0x6c6>
 8008b7e:	9901      	ldr	r1, [sp, #4]
 8008b80:	2230      	movs	r2, #48	; 0x30
 8008b82:	3701      	adds	r7, #1
 8008b84:	700a      	strb	r2, [r1, #0]
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	3201      	adds	r2, #1
 8008b8a:	701a      	strb	r2, [r3, #0]
 8008b8c:	e790      	b.n	8008ab0 <_dtoa_r+0x608>
 8008b8e:	4ba6      	ldr	r3, [pc, #664]	; (8008e28 <_dtoa_r+0x980>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fd51 	bl	8000638 <__aeabi_dmul>
 8008b96:	2200      	movs	r2, #0
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	f7f7 ffb3 	bl	8000b08 <__aeabi_dcmpeq>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d09d      	beq.n	8008ae2 <_dtoa_r+0x63a>
 8008ba6:	e7cf      	b.n	8008b48 <_dtoa_r+0x6a0>
 8008ba8:	9a08      	ldr	r2, [sp, #32]
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	f000 80d7 	beq.w	8008d5e <_dtoa_r+0x8b6>
 8008bb0:	9a06      	ldr	r2, [sp, #24]
 8008bb2:	2a01      	cmp	r2, #1
 8008bb4:	f300 80ba 	bgt.w	8008d2c <_dtoa_r+0x884>
 8008bb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	f000 80b2 	beq.w	8008d24 <_dtoa_r+0x87c>
 8008bc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bc4:	9e07      	ldr	r6, [sp, #28]
 8008bc6:	9d04      	ldr	r5, [sp, #16]
 8008bc8:	9a04      	ldr	r2, [sp, #16]
 8008bca:	441a      	add	r2, r3
 8008bcc:	9204      	str	r2, [sp, #16]
 8008bce:	9a05      	ldr	r2, [sp, #20]
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	441a      	add	r2, r3
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	9205      	str	r2, [sp, #20]
 8008bd8:	f000 fd7c 	bl	80096d4 <__i2b>
 8008bdc:	4607      	mov	r7, r0
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	dd0c      	ble.n	8008bfc <_dtoa_r+0x754>
 8008be2:	9b05      	ldr	r3, [sp, #20]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dd09      	ble.n	8008bfc <_dtoa_r+0x754>
 8008be8:	42ab      	cmp	r3, r5
 8008bea:	9a04      	ldr	r2, [sp, #16]
 8008bec:	bfa8      	it	ge
 8008bee:	462b      	movge	r3, r5
 8008bf0:	1ad2      	subs	r2, r2, r3
 8008bf2:	9204      	str	r2, [sp, #16]
 8008bf4:	9a05      	ldr	r2, [sp, #20]
 8008bf6:	1aed      	subs	r5, r5, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	b31b      	cbz	r3, 8008c48 <_dtoa_r+0x7a0>
 8008c00:	9b08      	ldr	r3, [sp, #32]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 80af 	beq.w	8008d66 <_dtoa_r+0x8be>
 8008c08:	2e00      	cmp	r6, #0
 8008c0a:	dd13      	ble.n	8008c34 <_dtoa_r+0x78c>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4632      	mov	r2, r6
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 fe1f 	bl	8009854 <__pow5mult>
 8008c16:	ee18 2a10 	vmov	r2, s16
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f000 fd6e 	bl	8009700 <__multiply>
 8008c24:	ee18 1a10 	vmov	r1, s16
 8008c28:	4680      	mov	r8, r0
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f000 fc9a 	bl	8009564 <_Bfree>
 8008c30:	ee08 8a10 	vmov	s16, r8
 8008c34:	9b07      	ldr	r3, [sp, #28]
 8008c36:	1b9a      	subs	r2, r3, r6
 8008c38:	d006      	beq.n	8008c48 <_dtoa_r+0x7a0>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fe08 	bl	8009854 <__pow5mult>
 8008c44:	ee08 0a10 	vmov	s16, r0
 8008c48:	2101      	movs	r1, #1
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f000 fd42 	bl	80096d4 <__i2b>
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	4606      	mov	r6, r0
 8008c56:	f340 8088 	ble.w	8008d6a <_dtoa_r+0x8c2>
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 fdf8 	bl	8009854 <__pow5mult>
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	4606      	mov	r6, r0
 8008c6a:	f340 8081 	ble.w	8008d70 <_dtoa_r+0x8c8>
 8008c6e:	f04f 0800 	mov.w	r8, #0
 8008c72:	6933      	ldr	r3, [r6, #16]
 8008c74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c78:	6918      	ldr	r0, [r3, #16]
 8008c7a:	f000 fcdb 	bl	8009634 <__hi0bits>
 8008c7e:	f1c0 0020 	rsb	r0, r0, #32
 8008c82:	9b05      	ldr	r3, [sp, #20]
 8008c84:	4418      	add	r0, r3
 8008c86:	f010 001f 	ands.w	r0, r0, #31
 8008c8a:	f000 8092 	beq.w	8008db2 <_dtoa_r+0x90a>
 8008c8e:	f1c0 0320 	rsb	r3, r0, #32
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	f340 808a 	ble.w	8008dac <_dtoa_r+0x904>
 8008c98:	f1c0 001c 	rsb	r0, r0, #28
 8008c9c:	9b04      	ldr	r3, [sp, #16]
 8008c9e:	4403      	add	r3, r0
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	9b05      	ldr	r3, [sp, #20]
 8008ca4:	4403      	add	r3, r0
 8008ca6:	4405      	add	r5, r0
 8008ca8:	9305      	str	r3, [sp, #20]
 8008caa:	9b04      	ldr	r3, [sp, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd07      	ble.n	8008cc0 <_dtoa_r+0x818>
 8008cb0:	ee18 1a10 	vmov	r1, s16
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f000 fe26 	bl	8009908 <__lshift>
 8008cbc:	ee08 0a10 	vmov	s16, r0
 8008cc0:	9b05      	ldr	r3, [sp, #20]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dd05      	ble.n	8008cd2 <_dtoa_r+0x82a>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 fe1c 	bl	8009908 <__lshift>
 8008cd0:	4606      	mov	r6, r0
 8008cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d06e      	beq.n	8008db6 <_dtoa_r+0x90e>
 8008cd8:	ee18 0a10 	vmov	r0, s16
 8008cdc:	4631      	mov	r1, r6
 8008cde:	f000 fe83 	bl	80099e8 <__mcmp>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	da67      	bge.n	8008db6 <_dtoa_r+0x90e>
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	ee18 1a10 	vmov	r1, s16
 8008cee:	9300      	str	r3, [sp, #0]
 8008cf0:	220a      	movs	r2, #10
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f000 fc57 	bl	80095a8 <__multadd>
 8008cfa:	9b08      	ldr	r3, [sp, #32]
 8008cfc:	ee08 0a10 	vmov	s16, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 81b1 	beq.w	8009068 <_dtoa_r+0xbc0>
 8008d06:	2300      	movs	r3, #0
 8008d08:	4639      	mov	r1, r7
 8008d0a:	220a      	movs	r2, #10
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f000 fc4b 	bl	80095a8 <__multadd>
 8008d12:	9b02      	ldr	r3, [sp, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	4607      	mov	r7, r0
 8008d18:	f300 808e 	bgt.w	8008e38 <_dtoa_r+0x990>
 8008d1c:	9b06      	ldr	r3, [sp, #24]
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	dc51      	bgt.n	8008dc6 <_dtoa_r+0x91e>
 8008d22:	e089      	b.n	8008e38 <_dtoa_r+0x990>
 8008d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d2a:	e74b      	b.n	8008bc4 <_dtoa_r+0x71c>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	1e5e      	subs	r6, r3, #1
 8008d30:	9b07      	ldr	r3, [sp, #28]
 8008d32:	42b3      	cmp	r3, r6
 8008d34:	bfbf      	itttt	lt
 8008d36:	9b07      	ldrlt	r3, [sp, #28]
 8008d38:	9607      	strlt	r6, [sp, #28]
 8008d3a:	1af2      	sublt	r2, r6, r3
 8008d3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d3e:	bfb6      	itet	lt
 8008d40:	189b      	addlt	r3, r3, r2
 8008d42:	1b9e      	subge	r6, r3, r6
 8008d44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d46:	9b03      	ldr	r3, [sp, #12]
 8008d48:	bfb8      	it	lt
 8008d4a:	2600      	movlt	r6, #0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	bfb7      	itett	lt
 8008d50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d58:	1a9d      	sublt	r5, r3, r2
 8008d5a:	2300      	movlt	r3, #0
 8008d5c:	e734      	b.n	8008bc8 <_dtoa_r+0x720>
 8008d5e:	9e07      	ldr	r6, [sp, #28]
 8008d60:	9d04      	ldr	r5, [sp, #16]
 8008d62:	9f08      	ldr	r7, [sp, #32]
 8008d64:	e73b      	b.n	8008bde <_dtoa_r+0x736>
 8008d66:	9a07      	ldr	r2, [sp, #28]
 8008d68:	e767      	b.n	8008c3a <_dtoa_r+0x792>
 8008d6a:	9b06      	ldr	r3, [sp, #24]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	dc18      	bgt.n	8008da2 <_dtoa_r+0x8fa>
 8008d70:	f1ba 0f00 	cmp.w	sl, #0
 8008d74:	d115      	bne.n	8008da2 <_dtoa_r+0x8fa>
 8008d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d7a:	b993      	cbnz	r3, 8008da2 <_dtoa_r+0x8fa>
 8008d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d80:	0d1b      	lsrs	r3, r3, #20
 8008d82:	051b      	lsls	r3, r3, #20
 8008d84:	b183      	cbz	r3, 8008da8 <_dtoa_r+0x900>
 8008d86:	9b04      	ldr	r3, [sp, #16]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	9304      	str	r3, [sp, #16]
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	f04f 0801 	mov.w	r8, #1
 8008d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f47f af6a 	bne.w	8008c72 <_dtoa_r+0x7ca>
 8008d9e:	2001      	movs	r0, #1
 8008da0:	e76f      	b.n	8008c82 <_dtoa_r+0x7da>
 8008da2:	f04f 0800 	mov.w	r8, #0
 8008da6:	e7f6      	b.n	8008d96 <_dtoa_r+0x8ee>
 8008da8:	4698      	mov	r8, r3
 8008daa:	e7f4      	b.n	8008d96 <_dtoa_r+0x8ee>
 8008dac:	f43f af7d 	beq.w	8008caa <_dtoa_r+0x802>
 8008db0:	4618      	mov	r0, r3
 8008db2:	301c      	adds	r0, #28
 8008db4:	e772      	b.n	8008c9c <_dtoa_r+0x7f4>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	dc37      	bgt.n	8008e2c <_dtoa_r+0x984>
 8008dbc:	9b06      	ldr	r3, [sp, #24]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	dd34      	ble.n	8008e2c <_dtoa_r+0x984>
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	9302      	str	r3, [sp, #8]
 8008dc6:	9b02      	ldr	r3, [sp, #8]
 8008dc8:	b96b      	cbnz	r3, 8008de6 <_dtoa_r+0x93e>
 8008dca:	4631      	mov	r1, r6
 8008dcc:	2205      	movs	r2, #5
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fbea 	bl	80095a8 <__multadd>
 8008dd4:	4601      	mov	r1, r0
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	ee18 0a10 	vmov	r0, s16
 8008ddc:	f000 fe04 	bl	80099e8 <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f73f adbb 	bgt.w	800895c <_dtoa_r+0x4b4>
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	9d01      	ldr	r5, [sp, #4]
 8008dea:	43db      	mvns	r3, r3
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	f04f 0800 	mov.w	r8, #0
 8008df2:	4631      	mov	r1, r6
 8008df4:	4620      	mov	r0, r4
 8008df6:	f000 fbb5 	bl	8009564 <_Bfree>
 8008dfa:	2f00      	cmp	r7, #0
 8008dfc:	f43f aea4 	beq.w	8008b48 <_dtoa_r+0x6a0>
 8008e00:	f1b8 0f00 	cmp.w	r8, #0
 8008e04:	d005      	beq.n	8008e12 <_dtoa_r+0x96a>
 8008e06:	45b8      	cmp	r8, r7
 8008e08:	d003      	beq.n	8008e12 <_dtoa_r+0x96a>
 8008e0a:	4641      	mov	r1, r8
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fba9 	bl	8009564 <_Bfree>
 8008e12:	4639      	mov	r1, r7
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 fba5 	bl	8009564 <_Bfree>
 8008e1a:	e695      	b.n	8008b48 <_dtoa_r+0x6a0>
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	4637      	mov	r7, r6
 8008e20:	e7e1      	b.n	8008de6 <_dtoa_r+0x93e>
 8008e22:	9700      	str	r7, [sp, #0]
 8008e24:	4637      	mov	r7, r6
 8008e26:	e599      	b.n	800895c <_dtoa_r+0x4b4>
 8008e28:	40240000 	.word	0x40240000
 8008e2c:	9b08      	ldr	r3, [sp, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 80ca 	beq.w	8008fc8 <_dtoa_r+0xb20>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	dd05      	ble.n	8008e48 <_dtoa_r+0x9a0>
 8008e3c:	4639      	mov	r1, r7
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fd61 	bl	8009908 <__lshift>
 8008e46:	4607      	mov	r7, r0
 8008e48:	f1b8 0f00 	cmp.w	r8, #0
 8008e4c:	d05b      	beq.n	8008f06 <_dtoa_r+0xa5e>
 8008e4e:	6879      	ldr	r1, [r7, #4]
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fb47 	bl	80094e4 <_Balloc>
 8008e56:	4605      	mov	r5, r0
 8008e58:	b928      	cbnz	r0, 8008e66 <_dtoa_r+0x9be>
 8008e5a:	4b87      	ldr	r3, [pc, #540]	; (8009078 <_dtoa_r+0xbd0>)
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e62:	f7ff bb3b 	b.w	80084dc <_dtoa_r+0x34>
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	3202      	adds	r2, #2
 8008e6a:	0092      	lsls	r2, r2, #2
 8008e6c:	f107 010c 	add.w	r1, r7, #12
 8008e70:	300c      	adds	r0, #12
 8008e72:	f7fe fc25 	bl	80076c0 <memcpy>
 8008e76:	2201      	movs	r2, #1
 8008e78:	4629      	mov	r1, r5
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fd44 	bl	8009908 <__lshift>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	f103 0901 	add.w	r9, r3, #1
 8008e86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	f00a 0301 	and.w	r3, sl, #1
 8008e92:	46b8      	mov	r8, r7
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	4607      	mov	r7, r0
 8008e98:	4631      	mov	r1, r6
 8008e9a:	ee18 0a10 	vmov	r0, s16
 8008e9e:	f7ff fa77 	bl	8008390 <quorem>
 8008ea2:	4641      	mov	r1, r8
 8008ea4:	9002      	str	r0, [sp, #8]
 8008ea6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eaa:	ee18 0a10 	vmov	r0, s16
 8008eae:	f000 fd9b 	bl	80099e8 <__mcmp>
 8008eb2:	463a      	mov	r2, r7
 8008eb4:	9003      	str	r0, [sp, #12]
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fdb1 	bl	8009a20 <__mdiff>
 8008ebe:	68c2      	ldr	r2, [r0, #12]
 8008ec0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	bb02      	cbnz	r2, 8008f0a <_dtoa_r+0xa62>
 8008ec8:	4601      	mov	r1, r0
 8008eca:	ee18 0a10 	vmov	r0, s16
 8008ece:	f000 fd8b 	bl	80099e8 <__mcmp>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	9207      	str	r2, [sp, #28]
 8008eda:	f000 fb43 	bl	8009564 <_Bfree>
 8008ede:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008ee2:	ea43 0102 	orr.w	r1, r3, r2
 8008ee6:	9b04      	ldr	r3, [sp, #16]
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	464d      	mov	r5, r9
 8008eec:	d10f      	bne.n	8008f0e <_dtoa_r+0xa66>
 8008eee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ef2:	d02a      	beq.n	8008f4a <_dtoa_r+0xaa2>
 8008ef4:	9b03      	ldr	r3, [sp, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	dd02      	ble.n	8008f00 <_dtoa_r+0xa58>
 8008efa:	9b02      	ldr	r3, [sp, #8]
 8008efc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008f00:	f88b a000 	strb.w	sl, [fp]
 8008f04:	e775      	b.n	8008df2 <_dtoa_r+0x94a>
 8008f06:	4638      	mov	r0, r7
 8008f08:	e7ba      	b.n	8008e80 <_dtoa_r+0x9d8>
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	e7e2      	b.n	8008ed4 <_dtoa_r+0xa2c>
 8008f0e:	9b03      	ldr	r3, [sp, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	db04      	blt.n	8008f1e <_dtoa_r+0xa76>
 8008f14:	9906      	ldr	r1, [sp, #24]
 8008f16:	430b      	orrs	r3, r1
 8008f18:	9904      	ldr	r1, [sp, #16]
 8008f1a:	430b      	orrs	r3, r1
 8008f1c:	d122      	bne.n	8008f64 <_dtoa_r+0xabc>
 8008f1e:	2a00      	cmp	r2, #0
 8008f20:	ddee      	ble.n	8008f00 <_dtoa_r+0xa58>
 8008f22:	ee18 1a10 	vmov	r1, s16
 8008f26:	2201      	movs	r2, #1
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fced 	bl	8009908 <__lshift>
 8008f2e:	4631      	mov	r1, r6
 8008f30:	ee08 0a10 	vmov	s16, r0
 8008f34:	f000 fd58 	bl	80099e8 <__mcmp>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	dc03      	bgt.n	8008f44 <_dtoa_r+0xa9c>
 8008f3c:	d1e0      	bne.n	8008f00 <_dtoa_r+0xa58>
 8008f3e:	f01a 0f01 	tst.w	sl, #1
 8008f42:	d0dd      	beq.n	8008f00 <_dtoa_r+0xa58>
 8008f44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f48:	d1d7      	bne.n	8008efa <_dtoa_r+0xa52>
 8008f4a:	2339      	movs	r3, #57	; 0x39
 8008f4c:	f88b 3000 	strb.w	r3, [fp]
 8008f50:	462b      	mov	r3, r5
 8008f52:	461d      	mov	r5, r3
 8008f54:	3b01      	subs	r3, #1
 8008f56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f5a:	2a39      	cmp	r2, #57	; 0x39
 8008f5c:	d071      	beq.n	8009042 <_dtoa_r+0xb9a>
 8008f5e:	3201      	adds	r2, #1
 8008f60:	701a      	strb	r2, [r3, #0]
 8008f62:	e746      	b.n	8008df2 <_dtoa_r+0x94a>
 8008f64:	2a00      	cmp	r2, #0
 8008f66:	dd07      	ble.n	8008f78 <_dtoa_r+0xad0>
 8008f68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f6c:	d0ed      	beq.n	8008f4a <_dtoa_r+0xaa2>
 8008f6e:	f10a 0301 	add.w	r3, sl, #1
 8008f72:	f88b 3000 	strb.w	r3, [fp]
 8008f76:	e73c      	b.n	8008df2 <_dtoa_r+0x94a>
 8008f78:	9b05      	ldr	r3, [sp, #20]
 8008f7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f7e:	4599      	cmp	r9, r3
 8008f80:	d047      	beq.n	8009012 <_dtoa_r+0xb6a>
 8008f82:	ee18 1a10 	vmov	r1, s16
 8008f86:	2300      	movs	r3, #0
 8008f88:	220a      	movs	r2, #10
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fb0c 	bl	80095a8 <__multadd>
 8008f90:	45b8      	cmp	r8, r7
 8008f92:	ee08 0a10 	vmov	s16, r0
 8008f96:	f04f 0300 	mov.w	r3, #0
 8008f9a:	f04f 020a 	mov.w	r2, #10
 8008f9e:	4641      	mov	r1, r8
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	d106      	bne.n	8008fb2 <_dtoa_r+0xb0a>
 8008fa4:	f000 fb00 	bl	80095a8 <__multadd>
 8008fa8:	4680      	mov	r8, r0
 8008faa:	4607      	mov	r7, r0
 8008fac:	f109 0901 	add.w	r9, r9, #1
 8008fb0:	e772      	b.n	8008e98 <_dtoa_r+0x9f0>
 8008fb2:	f000 faf9 	bl	80095a8 <__multadd>
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4680      	mov	r8, r0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	220a      	movs	r2, #10
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f000 faf2 	bl	80095a8 <__multadd>
 8008fc4:	4607      	mov	r7, r0
 8008fc6:	e7f1      	b.n	8008fac <_dtoa_r+0xb04>
 8008fc8:	9b03      	ldr	r3, [sp, #12]
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	9d01      	ldr	r5, [sp, #4]
 8008fce:	ee18 0a10 	vmov	r0, s16
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	f7ff f9dc 	bl	8008390 <quorem>
 8008fd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	f805 ab01 	strb.w	sl, [r5], #1
 8008fe2:	1aea      	subs	r2, r5, r3
 8008fe4:	9b02      	ldr	r3, [sp, #8]
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	dd09      	ble.n	8008ffe <_dtoa_r+0xb56>
 8008fea:	ee18 1a10 	vmov	r1, s16
 8008fee:	2300      	movs	r3, #0
 8008ff0:	220a      	movs	r2, #10
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 fad8 	bl	80095a8 <__multadd>
 8008ff8:	ee08 0a10 	vmov	s16, r0
 8008ffc:	e7e7      	b.n	8008fce <_dtoa_r+0xb26>
 8008ffe:	9b02      	ldr	r3, [sp, #8]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfc8      	it	gt
 8009004:	461d      	movgt	r5, r3
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	bfd8      	it	le
 800900a:	2501      	movle	r5, #1
 800900c:	441d      	add	r5, r3
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	ee18 1a10 	vmov	r1, s16
 8009016:	2201      	movs	r2, #1
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fc75 	bl	8009908 <__lshift>
 800901e:	4631      	mov	r1, r6
 8009020:	ee08 0a10 	vmov	s16, r0
 8009024:	f000 fce0 	bl	80099e8 <__mcmp>
 8009028:	2800      	cmp	r0, #0
 800902a:	dc91      	bgt.n	8008f50 <_dtoa_r+0xaa8>
 800902c:	d102      	bne.n	8009034 <_dtoa_r+0xb8c>
 800902e:	f01a 0f01 	tst.w	sl, #1
 8009032:	d18d      	bne.n	8008f50 <_dtoa_r+0xaa8>
 8009034:	462b      	mov	r3, r5
 8009036:	461d      	mov	r5, r3
 8009038:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800903c:	2a30      	cmp	r2, #48	; 0x30
 800903e:	d0fa      	beq.n	8009036 <_dtoa_r+0xb8e>
 8009040:	e6d7      	b.n	8008df2 <_dtoa_r+0x94a>
 8009042:	9a01      	ldr	r2, [sp, #4]
 8009044:	429a      	cmp	r2, r3
 8009046:	d184      	bne.n	8008f52 <_dtoa_r+0xaaa>
 8009048:	9b00      	ldr	r3, [sp, #0]
 800904a:	3301      	adds	r3, #1
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	2331      	movs	r3, #49	; 0x31
 8009050:	7013      	strb	r3, [r2, #0]
 8009052:	e6ce      	b.n	8008df2 <_dtoa_r+0x94a>
 8009054:	4b09      	ldr	r3, [pc, #36]	; (800907c <_dtoa_r+0xbd4>)
 8009056:	f7ff ba95 	b.w	8008584 <_dtoa_r+0xdc>
 800905a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800905c:	2b00      	cmp	r3, #0
 800905e:	f47f aa6e 	bne.w	800853e <_dtoa_r+0x96>
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <_dtoa_r+0xbd8>)
 8009064:	f7ff ba8e 	b.w	8008584 <_dtoa_r+0xdc>
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	dcae      	bgt.n	8008fcc <_dtoa_r+0xb24>
 800906e:	9b06      	ldr	r3, [sp, #24]
 8009070:	2b02      	cmp	r3, #2
 8009072:	f73f aea8 	bgt.w	8008dc6 <_dtoa_r+0x91e>
 8009076:	e7a9      	b.n	8008fcc <_dtoa_r+0xb24>
 8009078:	0800bb4b 	.word	0x0800bb4b
 800907c:	0800baa8 	.word	0x0800baa8
 8009080:	0800bacc 	.word	0x0800bacc

08009084 <__sflush_r>:
 8009084:	898a      	ldrh	r2, [r1, #12]
 8009086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	4605      	mov	r5, r0
 800908c:	0710      	lsls	r0, r2, #28
 800908e:	460c      	mov	r4, r1
 8009090:	d458      	bmi.n	8009144 <__sflush_r+0xc0>
 8009092:	684b      	ldr	r3, [r1, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dc05      	bgt.n	80090a4 <__sflush_r+0x20>
 8009098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800909a:	2b00      	cmp	r3, #0
 800909c:	dc02      	bgt.n	80090a4 <__sflush_r+0x20>
 800909e:	2000      	movs	r0, #0
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090a6:	2e00      	cmp	r6, #0
 80090a8:	d0f9      	beq.n	800909e <__sflush_r+0x1a>
 80090aa:	2300      	movs	r3, #0
 80090ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090b0:	682f      	ldr	r7, [r5, #0]
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	d032      	beq.n	800911c <__sflush_r+0x98>
 80090b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	075a      	lsls	r2, r3, #29
 80090bc:	d505      	bpl.n	80090ca <__sflush_r+0x46>
 80090be:	6863      	ldr	r3, [r4, #4]
 80090c0:	1ac0      	subs	r0, r0, r3
 80090c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090c4:	b10b      	cbz	r3, 80090ca <__sflush_r+0x46>
 80090c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090c8:	1ac0      	subs	r0, r0, r3
 80090ca:	2300      	movs	r3, #0
 80090cc:	4602      	mov	r2, r0
 80090ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090d0:	6a21      	ldr	r1, [r4, #32]
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b0      	blx	r6
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	d106      	bne.n	80090ea <__sflush_r+0x66>
 80090dc:	6829      	ldr	r1, [r5, #0]
 80090de:	291d      	cmp	r1, #29
 80090e0:	d82c      	bhi.n	800913c <__sflush_r+0xb8>
 80090e2:	4a2a      	ldr	r2, [pc, #168]	; (800918c <__sflush_r+0x108>)
 80090e4:	40ca      	lsrs	r2, r1
 80090e6:	07d6      	lsls	r6, r2, #31
 80090e8:	d528      	bpl.n	800913c <__sflush_r+0xb8>
 80090ea:	2200      	movs	r2, #0
 80090ec:	6062      	str	r2, [r4, #4]
 80090ee:	04d9      	lsls	r1, r3, #19
 80090f0:	6922      	ldr	r2, [r4, #16]
 80090f2:	6022      	str	r2, [r4, #0]
 80090f4:	d504      	bpl.n	8009100 <__sflush_r+0x7c>
 80090f6:	1c42      	adds	r2, r0, #1
 80090f8:	d101      	bne.n	80090fe <__sflush_r+0x7a>
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	b903      	cbnz	r3, 8009100 <__sflush_r+0x7c>
 80090fe:	6560      	str	r0, [r4, #84]	; 0x54
 8009100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009102:	602f      	str	r7, [r5, #0]
 8009104:	2900      	cmp	r1, #0
 8009106:	d0ca      	beq.n	800909e <__sflush_r+0x1a>
 8009108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800910c:	4299      	cmp	r1, r3
 800910e:	d002      	beq.n	8009116 <__sflush_r+0x92>
 8009110:	4628      	mov	r0, r5
 8009112:	f7fe faeb 	bl	80076ec <_free_r>
 8009116:	2000      	movs	r0, #0
 8009118:	6360      	str	r0, [r4, #52]	; 0x34
 800911a:	e7c1      	b.n	80090a0 <__sflush_r+0x1c>
 800911c:	6a21      	ldr	r1, [r4, #32]
 800911e:	2301      	movs	r3, #1
 8009120:	4628      	mov	r0, r5
 8009122:	47b0      	blx	r6
 8009124:	1c41      	adds	r1, r0, #1
 8009126:	d1c7      	bne.n	80090b8 <__sflush_r+0x34>
 8009128:	682b      	ldr	r3, [r5, #0]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0c4      	beq.n	80090b8 <__sflush_r+0x34>
 800912e:	2b1d      	cmp	r3, #29
 8009130:	d001      	beq.n	8009136 <__sflush_r+0xb2>
 8009132:	2b16      	cmp	r3, #22
 8009134:	d101      	bne.n	800913a <__sflush_r+0xb6>
 8009136:	602f      	str	r7, [r5, #0]
 8009138:	e7b1      	b.n	800909e <__sflush_r+0x1a>
 800913a:	89a3      	ldrh	r3, [r4, #12]
 800913c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	e7ad      	b.n	80090a0 <__sflush_r+0x1c>
 8009144:	690f      	ldr	r7, [r1, #16]
 8009146:	2f00      	cmp	r7, #0
 8009148:	d0a9      	beq.n	800909e <__sflush_r+0x1a>
 800914a:	0793      	lsls	r3, r2, #30
 800914c:	680e      	ldr	r6, [r1, #0]
 800914e:	bf08      	it	eq
 8009150:	694b      	ldreq	r3, [r1, #20]
 8009152:	600f      	str	r7, [r1, #0]
 8009154:	bf18      	it	ne
 8009156:	2300      	movne	r3, #0
 8009158:	eba6 0807 	sub.w	r8, r6, r7
 800915c:	608b      	str	r3, [r1, #8]
 800915e:	f1b8 0f00 	cmp.w	r8, #0
 8009162:	dd9c      	ble.n	800909e <__sflush_r+0x1a>
 8009164:	6a21      	ldr	r1, [r4, #32]
 8009166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009168:	4643      	mov	r3, r8
 800916a:	463a      	mov	r2, r7
 800916c:	4628      	mov	r0, r5
 800916e:	47b0      	blx	r6
 8009170:	2800      	cmp	r0, #0
 8009172:	dc06      	bgt.n	8009182 <__sflush_r+0xfe>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e78e      	b.n	80090a0 <__sflush_r+0x1c>
 8009182:	4407      	add	r7, r0
 8009184:	eba8 0800 	sub.w	r8, r8, r0
 8009188:	e7e9      	b.n	800915e <__sflush_r+0xda>
 800918a:	bf00      	nop
 800918c:	20400001 	.word	0x20400001

08009190 <_fflush_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	690b      	ldr	r3, [r1, #16]
 8009194:	4605      	mov	r5, r0
 8009196:	460c      	mov	r4, r1
 8009198:	b913      	cbnz	r3, 80091a0 <_fflush_r+0x10>
 800919a:	2500      	movs	r5, #0
 800919c:	4628      	mov	r0, r5
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	b118      	cbz	r0, 80091aa <_fflush_r+0x1a>
 80091a2:	6983      	ldr	r3, [r0, #24]
 80091a4:	b90b      	cbnz	r3, 80091aa <_fflush_r+0x1a>
 80091a6:	f000 f887 	bl	80092b8 <__sinit>
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <_fflush_r+0x6c>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	d11b      	bne.n	80091e8 <_fflush_r+0x58>
 80091b0:	686c      	ldr	r4, [r5, #4]
 80091b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0ef      	beq.n	800919a <_fflush_r+0xa>
 80091ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091bc:	07d0      	lsls	r0, r2, #31
 80091be:	d404      	bmi.n	80091ca <_fflush_r+0x3a>
 80091c0:	0599      	lsls	r1, r3, #22
 80091c2:	d402      	bmi.n	80091ca <_fflush_r+0x3a>
 80091c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091c6:	f000 f91a 	bl	80093fe <__retarget_lock_acquire_recursive>
 80091ca:	4628      	mov	r0, r5
 80091cc:	4621      	mov	r1, r4
 80091ce:	f7ff ff59 	bl	8009084 <__sflush_r>
 80091d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091d4:	07da      	lsls	r2, r3, #31
 80091d6:	4605      	mov	r5, r0
 80091d8:	d4e0      	bmi.n	800919c <_fflush_r+0xc>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	059b      	lsls	r3, r3, #22
 80091de:	d4dd      	bmi.n	800919c <_fflush_r+0xc>
 80091e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091e2:	f000 f90d 	bl	8009400 <__retarget_lock_release_recursive>
 80091e6:	e7d9      	b.n	800919c <_fflush_r+0xc>
 80091e8:	4b05      	ldr	r3, [pc, #20]	; (8009200 <_fflush_r+0x70>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	d101      	bne.n	80091f2 <_fflush_r+0x62>
 80091ee:	68ac      	ldr	r4, [r5, #8]
 80091f0:	e7df      	b.n	80091b2 <_fflush_r+0x22>
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <_fflush_r+0x74>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	bf08      	it	eq
 80091f8:	68ec      	ldreq	r4, [r5, #12]
 80091fa:	e7da      	b.n	80091b2 <_fflush_r+0x22>
 80091fc:	0800bb7c 	.word	0x0800bb7c
 8009200:	0800bb9c 	.word	0x0800bb9c
 8009204:	0800bb5c 	.word	0x0800bb5c

08009208 <std>:
 8009208:	2300      	movs	r3, #0
 800920a:	b510      	push	{r4, lr}
 800920c:	4604      	mov	r4, r0
 800920e:	e9c0 3300 	strd	r3, r3, [r0]
 8009212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009216:	6083      	str	r3, [r0, #8]
 8009218:	8181      	strh	r1, [r0, #12]
 800921a:	6643      	str	r3, [r0, #100]	; 0x64
 800921c:	81c2      	strh	r2, [r0, #14]
 800921e:	6183      	str	r3, [r0, #24]
 8009220:	4619      	mov	r1, r3
 8009222:	2208      	movs	r2, #8
 8009224:	305c      	adds	r0, #92	; 0x5c
 8009226:	f7fe fa59 	bl	80076dc <memset>
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <std+0x38>)
 800922c:	6263      	str	r3, [r4, #36]	; 0x24
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <std+0x3c>)
 8009230:	62a3      	str	r3, [r4, #40]	; 0x28
 8009232:	4b05      	ldr	r3, [pc, #20]	; (8009248 <std+0x40>)
 8009234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009236:	4b05      	ldr	r3, [pc, #20]	; (800924c <std+0x44>)
 8009238:	6224      	str	r4, [r4, #32]
 800923a:	6323      	str	r3, [r4, #48]	; 0x30
 800923c:	bd10      	pop	{r4, pc}
 800923e:	bf00      	nop
 8009240:	0800a185 	.word	0x0800a185
 8009244:	0800a1a7 	.word	0x0800a1a7
 8009248:	0800a1df 	.word	0x0800a1df
 800924c:	0800a203 	.word	0x0800a203

08009250 <_cleanup_r>:
 8009250:	4901      	ldr	r1, [pc, #4]	; (8009258 <_cleanup_r+0x8>)
 8009252:	f000 b8af 	b.w	80093b4 <_fwalk_reent>
 8009256:	bf00      	nop
 8009258:	08009191 	.word	0x08009191

0800925c <__sfmoreglue>:
 800925c:	b570      	push	{r4, r5, r6, lr}
 800925e:	2268      	movs	r2, #104	; 0x68
 8009260:	1e4d      	subs	r5, r1, #1
 8009262:	4355      	muls	r5, r2
 8009264:	460e      	mov	r6, r1
 8009266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800926a:	f7fe faab 	bl	80077c4 <_malloc_r>
 800926e:	4604      	mov	r4, r0
 8009270:	b140      	cbz	r0, 8009284 <__sfmoreglue+0x28>
 8009272:	2100      	movs	r1, #0
 8009274:	e9c0 1600 	strd	r1, r6, [r0]
 8009278:	300c      	adds	r0, #12
 800927a:	60a0      	str	r0, [r4, #8]
 800927c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009280:	f7fe fa2c 	bl	80076dc <memset>
 8009284:	4620      	mov	r0, r4
 8009286:	bd70      	pop	{r4, r5, r6, pc}

08009288 <__sfp_lock_acquire>:
 8009288:	4801      	ldr	r0, [pc, #4]	; (8009290 <__sfp_lock_acquire+0x8>)
 800928a:	f000 b8b8 	b.w	80093fe <__retarget_lock_acquire_recursive>
 800928e:	bf00      	nop
 8009290:	20000539 	.word	0x20000539

08009294 <__sfp_lock_release>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__sfp_lock_release+0x8>)
 8009296:	f000 b8b3 	b.w	8009400 <__retarget_lock_release_recursive>
 800929a:	bf00      	nop
 800929c:	20000539 	.word	0x20000539

080092a0 <__sinit_lock_acquire>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__sinit_lock_acquire+0x8>)
 80092a2:	f000 b8ac 	b.w	80093fe <__retarget_lock_acquire_recursive>
 80092a6:	bf00      	nop
 80092a8:	2000053a 	.word	0x2000053a

080092ac <__sinit_lock_release>:
 80092ac:	4801      	ldr	r0, [pc, #4]	; (80092b4 <__sinit_lock_release+0x8>)
 80092ae:	f000 b8a7 	b.w	8009400 <__retarget_lock_release_recursive>
 80092b2:	bf00      	nop
 80092b4:	2000053a 	.word	0x2000053a

080092b8 <__sinit>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	4604      	mov	r4, r0
 80092bc:	f7ff fff0 	bl	80092a0 <__sinit_lock_acquire>
 80092c0:	69a3      	ldr	r3, [r4, #24]
 80092c2:	b11b      	cbz	r3, 80092cc <__sinit+0x14>
 80092c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c8:	f7ff bff0 	b.w	80092ac <__sinit_lock_release>
 80092cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092d0:	6523      	str	r3, [r4, #80]	; 0x50
 80092d2:	4b13      	ldr	r3, [pc, #76]	; (8009320 <__sinit+0x68>)
 80092d4:	4a13      	ldr	r2, [pc, #76]	; (8009324 <__sinit+0x6c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80092da:	42a3      	cmp	r3, r4
 80092dc:	bf04      	itt	eq
 80092de:	2301      	moveq	r3, #1
 80092e0:	61a3      	streq	r3, [r4, #24]
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 f820 	bl	8009328 <__sfp>
 80092e8:	6060      	str	r0, [r4, #4]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f81c 	bl	8009328 <__sfp>
 80092f0:	60a0      	str	r0, [r4, #8]
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 f818 	bl	8009328 <__sfp>
 80092f8:	2200      	movs	r2, #0
 80092fa:	60e0      	str	r0, [r4, #12]
 80092fc:	2104      	movs	r1, #4
 80092fe:	6860      	ldr	r0, [r4, #4]
 8009300:	f7ff ff82 	bl	8009208 <std>
 8009304:	68a0      	ldr	r0, [r4, #8]
 8009306:	2201      	movs	r2, #1
 8009308:	2109      	movs	r1, #9
 800930a:	f7ff ff7d 	bl	8009208 <std>
 800930e:	68e0      	ldr	r0, [r4, #12]
 8009310:	2202      	movs	r2, #2
 8009312:	2112      	movs	r1, #18
 8009314:	f7ff ff78 	bl	8009208 <std>
 8009318:	2301      	movs	r3, #1
 800931a:	61a3      	str	r3, [r4, #24]
 800931c:	e7d2      	b.n	80092c4 <__sinit+0xc>
 800931e:	bf00      	nop
 8009320:	0800ba94 	.word	0x0800ba94
 8009324:	08009251 	.word	0x08009251

08009328 <__sfp>:
 8009328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800932a:	4607      	mov	r7, r0
 800932c:	f7ff ffac 	bl	8009288 <__sfp_lock_acquire>
 8009330:	4b1e      	ldr	r3, [pc, #120]	; (80093ac <__sfp+0x84>)
 8009332:	681e      	ldr	r6, [r3, #0]
 8009334:	69b3      	ldr	r3, [r6, #24]
 8009336:	b913      	cbnz	r3, 800933e <__sfp+0x16>
 8009338:	4630      	mov	r0, r6
 800933a:	f7ff ffbd 	bl	80092b8 <__sinit>
 800933e:	3648      	adds	r6, #72	; 0x48
 8009340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009344:	3b01      	subs	r3, #1
 8009346:	d503      	bpl.n	8009350 <__sfp+0x28>
 8009348:	6833      	ldr	r3, [r6, #0]
 800934a:	b30b      	cbz	r3, 8009390 <__sfp+0x68>
 800934c:	6836      	ldr	r6, [r6, #0]
 800934e:	e7f7      	b.n	8009340 <__sfp+0x18>
 8009350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009354:	b9d5      	cbnz	r5, 800938c <__sfp+0x64>
 8009356:	4b16      	ldr	r3, [pc, #88]	; (80093b0 <__sfp+0x88>)
 8009358:	60e3      	str	r3, [r4, #12]
 800935a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800935e:	6665      	str	r5, [r4, #100]	; 0x64
 8009360:	f000 f84c 	bl	80093fc <__retarget_lock_init_recursive>
 8009364:	f7ff ff96 	bl	8009294 <__sfp_lock_release>
 8009368:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800936c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009370:	6025      	str	r5, [r4, #0]
 8009372:	61a5      	str	r5, [r4, #24]
 8009374:	2208      	movs	r2, #8
 8009376:	4629      	mov	r1, r5
 8009378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800937c:	f7fe f9ae 	bl	80076dc <memset>
 8009380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009388:	4620      	mov	r0, r4
 800938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938c:	3468      	adds	r4, #104	; 0x68
 800938e:	e7d9      	b.n	8009344 <__sfp+0x1c>
 8009390:	2104      	movs	r1, #4
 8009392:	4638      	mov	r0, r7
 8009394:	f7ff ff62 	bl	800925c <__sfmoreglue>
 8009398:	4604      	mov	r4, r0
 800939a:	6030      	str	r0, [r6, #0]
 800939c:	2800      	cmp	r0, #0
 800939e:	d1d5      	bne.n	800934c <__sfp+0x24>
 80093a0:	f7ff ff78 	bl	8009294 <__sfp_lock_release>
 80093a4:	230c      	movs	r3, #12
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	e7ee      	b.n	8009388 <__sfp+0x60>
 80093aa:	bf00      	nop
 80093ac:	0800ba94 	.word	0x0800ba94
 80093b0:	ffff0001 	.word	0xffff0001

080093b4 <_fwalk_reent>:
 80093b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b8:	4606      	mov	r6, r0
 80093ba:	4688      	mov	r8, r1
 80093bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093c0:	2700      	movs	r7, #0
 80093c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093c6:	f1b9 0901 	subs.w	r9, r9, #1
 80093ca:	d505      	bpl.n	80093d8 <_fwalk_reent+0x24>
 80093cc:	6824      	ldr	r4, [r4, #0]
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	d1f7      	bne.n	80093c2 <_fwalk_reent+0xe>
 80093d2:	4638      	mov	r0, r7
 80093d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d8:	89ab      	ldrh	r3, [r5, #12]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d907      	bls.n	80093ee <_fwalk_reent+0x3a>
 80093de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093e2:	3301      	adds	r3, #1
 80093e4:	d003      	beq.n	80093ee <_fwalk_reent+0x3a>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4630      	mov	r0, r6
 80093ea:	47c0      	blx	r8
 80093ec:	4307      	orrs	r7, r0
 80093ee:	3568      	adds	r5, #104	; 0x68
 80093f0:	e7e9      	b.n	80093c6 <_fwalk_reent+0x12>
	...

080093f4 <_localeconv_r>:
 80093f4:	4800      	ldr	r0, [pc, #0]	; (80093f8 <_localeconv_r+0x4>)
 80093f6:	4770      	bx	lr
 80093f8:	20000214 	.word	0x20000214

080093fc <__retarget_lock_init_recursive>:
 80093fc:	4770      	bx	lr

080093fe <__retarget_lock_acquire_recursive>:
 80093fe:	4770      	bx	lr

08009400 <__retarget_lock_release_recursive>:
 8009400:	4770      	bx	lr

08009402 <__swhatbuf_r>:
 8009402:	b570      	push	{r4, r5, r6, lr}
 8009404:	460e      	mov	r6, r1
 8009406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940a:	2900      	cmp	r1, #0
 800940c:	b096      	sub	sp, #88	; 0x58
 800940e:	4614      	mov	r4, r2
 8009410:	461d      	mov	r5, r3
 8009412:	da08      	bge.n	8009426 <__swhatbuf_r+0x24>
 8009414:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	602a      	str	r2, [r5, #0]
 800941c:	061a      	lsls	r2, r3, #24
 800941e:	d410      	bmi.n	8009442 <__swhatbuf_r+0x40>
 8009420:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009424:	e00e      	b.n	8009444 <__swhatbuf_r+0x42>
 8009426:	466a      	mov	r2, sp
 8009428:	f000 ff42 	bl	800a2b0 <_fstat_r>
 800942c:	2800      	cmp	r0, #0
 800942e:	dbf1      	blt.n	8009414 <__swhatbuf_r+0x12>
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009436:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800943a:	425a      	negs	r2, r3
 800943c:	415a      	adcs	r2, r3
 800943e:	602a      	str	r2, [r5, #0]
 8009440:	e7ee      	b.n	8009420 <__swhatbuf_r+0x1e>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	2000      	movs	r0, #0
 8009446:	6023      	str	r3, [r4, #0]
 8009448:	b016      	add	sp, #88	; 0x58
 800944a:	bd70      	pop	{r4, r5, r6, pc}

0800944c <__smakebuf_r>:
 800944c:	898b      	ldrh	r3, [r1, #12]
 800944e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009450:	079d      	lsls	r5, r3, #30
 8009452:	4606      	mov	r6, r0
 8009454:	460c      	mov	r4, r1
 8009456:	d507      	bpl.n	8009468 <__smakebuf_r+0x1c>
 8009458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800945c:	6023      	str	r3, [r4, #0]
 800945e:	6123      	str	r3, [r4, #16]
 8009460:	2301      	movs	r3, #1
 8009462:	6163      	str	r3, [r4, #20]
 8009464:	b002      	add	sp, #8
 8009466:	bd70      	pop	{r4, r5, r6, pc}
 8009468:	ab01      	add	r3, sp, #4
 800946a:	466a      	mov	r2, sp
 800946c:	f7ff ffc9 	bl	8009402 <__swhatbuf_r>
 8009470:	9900      	ldr	r1, [sp, #0]
 8009472:	4605      	mov	r5, r0
 8009474:	4630      	mov	r0, r6
 8009476:	f7fe f9a5 	bl	80077c4 <_malloc_r>
 800947a:	b948      	cbnz	r0, 8009490 <__smakebuf_r+0x44>
 800947c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009480:	059a      	lsls	r2, r3, #22
 8009482:	d4ef      	bmi.n	8009464 <__smakebuf_r+0x18>
 8009484:	f023 0303 	bic.w	r3, r3, #3
 8009488:	f043 0302 	orr.w	r3, r3, #2
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	e7e3      	b.n	8009458 <__smakebuf_r+0xc>
 8009490:	4b0d      	ldr	r3, [pc, #52]	; (80094c8 <__smakebuf_r+0x7c>)
 8009492:	62b3      	str	r3, [r6, #40]	; 0x28
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	6020      	str	r0, [r4, #0]
 8009498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949c:	81a3      	strh	r3, [r4, #12]
 800949e:	9b00      	ldr	r3, [sp, #0]
 80094a0:	6163      	str	r3, [r4, #20]
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	6120      	str	r0, [r4, #16]
 80094a6:	b15b      	cbz	r3, 80094c0 <__smakebuf_r+0x74>
 80094a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094ac:	4630      	mov	r0, r6
 80094ae:	f000 ff11 	bl	800a2d4 <_isatty_r>
 80094b2:	b128      	cbz	r0, 80094c0 <__smakebuf_r+0x74>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	f023 0303 	bic.w	r3, r3, #3
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	89a0      	ldrh	r0, [r4, #12]
 80094c2:	4305      	orrs	r5, r0
 80094c4:	81a5      	strh	r5, [r4, #12]
 80094c6:	e7cd      	b.n	8009464 <__smakebuf_r+0x18>
 80094c8:	08009251 	.word	0x08009251

080094cc <__malloc_lock>:
 80094cc:	4801      	ldr	r0, [pc, #4]	; (80094d4 <__malloc_lock+0x8>)
 80094ce:	f7ff bf96 	b.w	80093fe <__retarget_lock_acquire_recursive>
 80094d2:	bf00      	nop
 80094d4:	20000538 	.word	0x20000538

080094d8 <__malloc_unlock>:
 80094d8:	4801      	ldr	r0, [pc, #4]	; (80094e0 <__malloc_unlock+0x8>)
 80094da:	f7ff bf91 	b.w	8009400 <__retarget_lock_release_recursive>
 80094de:	bf00      	nop
 80094e0:	20000538 	.word	0x20000538

080094e4 <_Balloc>:
 80094e4:	b570      	push	{r4, r5, r6, lr}
 80094e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094e8:	4604      	mov	r4, r0
 80094ea:	460d      	mov	r5, r1
 80094ec:	b976      	cbnz	r6, 800950c <_Balloc+0x28>
 80094ee:	2010      	movs	r0, #16
 80094f0:	f7fe f8de 	bl	80076b0 <malloc>
 80094f4:	4602      	mov	r2, r0
 80094f6:	6260      	str	r0, [r4, #36]	; 0x24
 80094f8:	b920      	cbnz	r0, 8009504 <_Balloc+0x20>
 80094fa:	4b18      	ldr	r3, [pc, #96]	; (800955c <_Balloc+0x78>)
 80094fc:	4818      	ldr	r0, [pc, #96]	; (8009560 <_Balloc+0x7c>)
 80094fe:	2166      	movs	r1, #102	; 0x66
 8009500:	f000 fe96 	bl	800a230 <__assert_func>
 8009504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009508:	6006      	str	r6, [r0, #0]
 800950a:	60c6      	str	r6, [r0, #12]
 800950c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800950e:	68f3      	ldr	r3, [r6, #12]
 8009510:	b183      	cbz	r3, 8009534 <_Balloc+0x50>
 8009512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800951a:	b9b8      	cbnz	r0, 800954c <_Balloc+0x68>
 800951c:	2101      	movs	r1, #1
 800951e:	fa01 f605 	lsl.w	r6, r1, r5
 8009522:	1d72      	adds	r2, r6, #5
 8009524:	0092      	lsls	r2, r2, #2
 8009526:	4620      	mov	r0, r4
 8009528:	f000 fb60 	bl	8009bec <_calloc_r>
 800952c:	b160      	cbz	r0, 8009548 <_Balloc+0x64>
 800952e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009532:	e00e      	b.n	8009552 <_Balloc+0x6e>
 8009534:	2221      	movs	r2, #33	; 0x21
 8009536:	2104      	movs	r1, #4
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fb57 	bl	8009bec <_calloc_r>
 800953e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009540:	60f0      	str	r0, [r6, #12]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e4      	bne.n	8009512 <_Balloc+0x2e>
 8009548:	2000      	movs	r0, #0
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	6802      	ldr	r2, [r0, #0]
 800954e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009552:	2300      	movs	r3, #0
 8009554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009558:	e7f7      	b.n	800954a <_Balloc+0x66>
 800955a:	bf00      	nop
 800955c:	0800bad9 	.word	0x0800bad9
 8009560:	0800bbbc 	.word	0x0800bbbc

08009564 <_Bfree>:
 8009564:	b570      	push	{r4, r5, r6, lr}
 8009566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009568:	4605      	mov	r5, r0
 800956a:	460c      	mov	r4, r1
 800956c:	b976      	cbnz	r6, 800958c <_Bfree+0x28>
 800956e:	2010      	movs	r0, #16
 8009570:	f7fe f89e 	bl	80076b0 <malloc>
 8009574:	4602      	mov	r2, r0
 8009576:	6268      	str	r0, [r5, #36]	; 0x24
 8009578:	b920      	cbnz	r0, 8009584 <_Bfree+0x20>
 800957a:	4b09      	ldr	r3, [pc, #36]	; (80095a0 <_Bfree+0x3c>)
 800957c:	4809      	ldr	r0, [pc, #36]	; (80095a4 <_Bfree+0x40>)
 800957e:	218a      	movs	r1, #138	; 0x8a
 8009580:	f000 fe56 	bl	800a230 <__assert_func>
 8009584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009588:	6006      	str	r6, [r0, #0]
 800958a:	60c6      	str	r6, [r0, #12]
 800958c:	b13c      	cbz	r4, 800959e <_Bfree+0x3a>
 800958e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009590:	6862      	ldr	r2, [r4, #4]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009598:	6021      	str	r1, [r4, #0]
 800959a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	0800bad9 	.word	0x0800bad9
 80095a4:	0800bbbc 	.word	0x0800bbbc

080095a8 <__multadd>:
 80095a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ac:	690d      	ldr	r5, [r1, #16]
 80095ae:	4607      	mov	r7, r0
 80095b0:	460c      	mov	r4, r1
 80095b2:	461e      	mov	r6, r3
 80095b4:	f101 0c14 	add.w	ip, r1, #20
 80095b8:	2000      	movs	r0, #0
 80095ba:	f8dc 3000 	ldr.w	r3, [ip]
 80095be:	b299      	uxth	r1, r3
 80095c0:	fb02 6101 	mla	r1, r2, r1, r6
 80095c4:	0c1e      	lsrs	r6, r3, #16
 80095c6:	0c0b      	lsrs	r3, r1, #16
 80095c8:	fb02 3306 	mla	r3, r2, r6, r3
 80095cc:	b289      	uxth	r1, r1
 80095ce:	3001      	adds	r0, #1
 80095d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095d4:	4285      	cmp	r5, r0
 80095d6:	f84c 1b04 	str.w	r1, [ip], #4
 80095da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095de:	dcec      	bgt.n	80095ba <__multadd+0x12>
 80095e0:	b30e      	cbz	r6, 8009626 <__multadd+0x7e>
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	dc19      	bgt.n	800961c <__multadd+0x74>
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	4638      	mov	r0, r7
 80095ec:	3101      	adds	r1, #1
 80095ee:	f7ff ff79 	bl	80094e4 <_Balloc>
 80095f2:	4680      	mov	r8, r0
 80095f4:	b928      	cbnz	r0, 8009602 <__multadd+0x5a>
 80095f6:	4602      	mov	r2, r0
 80095f8:	4b0c      	ldr	r3, [pc, #48]	; (800962c <__multadd+0x84>)
 80095fa:	480d      	ldr	r0, [pc, #52]	; (8009630 <__multadd+0x88>)
 80095fc:	21b5      	movs	r1, #181	; 0xb5
 80095fe:	f000 fe17 	bl	800a230 <__assert_func>
 8009602:	6922      	ldr	r2, [r4, #16]
 8009604:	3202      	adds	r2, #2
 8009606:	f104 010c 	add.w	r1, r4, #12
 800960a:	0092      	lsls	r2, r2, #2
 800960c:	300c      	adds	r0, #12
 800960e:	f7fe f857 	bl	80076c0 <memcpy>
 8009612:	4621      	mov	r1, r4
 8009614:	4638      	mov	r0, r7
 8009616:	f7ff ffa5 	bl	8009564 <_Bfree>
 800961a:	4644      	mov	r4, r8
 800961c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009620:	3501      	adds	r5, #1
 8009622:	615e      	str	r6, [r3, #20]
 8009624:	6125      	str	r5, [r4, #16]
 8009626:	4620      	mov	r0, r4
 8009628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800962c:	0800bb4b 	.word	0x0800bb4b
 8009630:	0800bbbc 	.word	0x0800bbbc

08009634 <__hi0bits>:
 8009634:	0c03      	lsrs	r3, r0, #16
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	b9d3      	cbnz	r3, 8009670 <__hi0bits+0x3c>
 800963a:	0400      	lsls	r0, r0, #16
 800963c:	2310      	movs	r3, #16
 800963e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009642:	bf04      	itt	eq
 8009644:	0200      	lsleq	r0, r0, #8
 8009646:	3308      	addeq	r3, #8
 8009648:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800964c:	bf04      	itt	eq
 800964e:	0100      	lsleq	r0, r0, #4
 8009650:	3304      	addeq	r3, #4
 8009652:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009656:	bf04      	itt	eq
 8009658:	0080      	lsleq	r0, r0, #2
 800965a:	3302      	addeq	r3, #2
 800965c:	2800      	cmp	r0, #0
 800965e:	db05      	blt.n	800966c <__hi0bits+0x38>
 8009660:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009664:	f103 0301 	add.w	r3, r3, #1
 8009668:	bf08      	it	eq
 800966a:	2320      	moveq	r3, #32
 800966c:	4618      	mov	r0, r3
 800966e:	4770      	bx	lr
 8009670:	2300      	movs	r3, #0
 8009672:	e7e4      	b.n	800963e <__hi0bits+0xa>

08009674 <__lo0bits>:
 8009674:	6803      	ldr	r3, [r0, #0]
 8009676:	f013 0207 	ands.w	r2, r3, #7
 800967a:	4601      	mov	r1, r0
 800967c:	d00b      	beq.n	8009696 <__lo0bits+0x22>
 800967e:	07da      	lsls	r2, r3, #31
 8009680:	d423      	bmi.n	80096ca <__lo0bits+0x56>
 8009682:	0798      	lsls	r0, r3, #30
 8009684:	bf49      	itett	mi
 8009686:	085b      	lsrmi	r3, r3, #1
 8009688:	089b      	lsrpl	r3, r3, #2
 800968a:	2001      	movmi	r0, #1
 800968c:	600b      	strmi	r3, [r1, #0]
 800968e:	bf5c      	itt	pl
 8009690:	600b      	strpl	r3, [r1, #0]
 8009692:	2002      	movpl	r0, #2
 8009694:	4770      	bx	lr
 8009696:	b298      	uxth	r0, r3
 8009698:	b9a8      	cbnz	r0, 80096c6 <__lo0bits+0x52>
 800969a:	0c1b      	lsrs	r3, r3, #16
 800969c:	2010      	movs	r0, #16
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	b90a      	cbnz	r2, 80096a6 <__lo0bits+0x32>
 80096a2:	3008      	adds	r0, #8
 80096a4:	0a1b      	lsrs	r3, r3, #8
 80096a6:	071a      	lsls	r2, r3, #28
 80096a8:	bf04      	itt	eq
 80096aa:	091b      	lsreq	r3, r3, #4
 80096ac:	3004      	addeq	r0, #4
 80096ae:	079a      	lsls	r2, r3, #30
 80096b0:	bf04      	itt	eq
 80096b2:	089b      	lsreq	r3, r3, #2
 80096b4:	3002      	addeq	r0, #2
 80096b6:	07da      	lsls	r2, r3, #31
 80096b8:	d403      	bmi.n	80096c2 <__lo0bits+0x4e>
 80096ba:	085b      	lsrs	r3, r3, #1
 80096bc:	f100 0001 	add.w	r0, r0, #1
 80096c0:	d005      	beq.n	80096ce <__lo0bits+0x5a>
 80096c2:	600b      	str	r3, [r1, #0]
 80096c4:	4770      	bx	lr
 80096c6:	4610      	mov	r0, r2
 80096c8:	e7e9      	b.n	800969e <__lo0bits+0x2a>
 80096ca:	2000      	movs	r0, #0
 80096cc:	4770      	bx	lr
 80096ce:	2020      	movs	r0, #32
 80096d0:	4770      	bx	lr
	...

080096d4 <__i2b>:
 80096d4:	b510      	push	{r4, lr}
 80096d6:	460c      	mov	r4, r1
 80096d8:	2101      	movs	r1, #1
 80096da:	f7ff ff03 	bl	80094e4 <_Balloc>
 80096de:	4602      	mov	r2, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__i2b+0x1a>
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <__i2b+0x24>)
 80096e4:	4805      	ldr	r0, [pc, #20]	; (80096fc <__i2b+0x28>)
 80096e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096ea:	f000 fda1 	bl	800a230 <__assert_func>
 80096ee:	2301      	movs	r3, #1
 80096f0:	6144      	str	r4, [r0, #20]
 80096f2:	6103      	str	r3, [r0, #16]
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	0800bb4b 	.word	0x0800bb4b
 80096fc:	0800bbbc 	.word	0x0800bbbc

08009700 <__multiply>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	4691      	mov	r9, r2
 8009706:	690a      	ldr	r2, [r1, #16]
 8009708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800970c:	429a      	cmp	r2, r3
 800970e:	bfb8      	it	lt
 8009710:	460b      	movlt	r3, r1
 8009712:	460c      	mov	r4, r1
 8009714:	bfbc      	itt	lt
 8009716:	464c      	movlt	r4, r9
 8009718:	4699      	movlt	r9, r3
 800971a:	6927      	ldr	r7, [r4, #16]
 800971c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	6861      	ldr	r1, [r4, #4]
 8009724:	eb07 060a 	add.w	r6, r7, sl
 8009728:	42b3      	cmp	r3, r6
 800972a:	b085      	sub	sp, #20
 800972c:	bfb8      	it	lt
 800972e:	3101      	addlt	r1, #1
 8009730:	f7ff fed8 	bl	80094e4 <_Balloc>
 8009734:	b930      	cbnz	r0, 8009744 <__multiply+0x44>
 8009736:	4602      	mov	r2, r0
 8009738:	4b44      	ldr	r3, [pc, #272]	; (800984c <__multiply+0x14c>)
 800973a:	4845      	ldr	r0, [pc, #276]	; (8009850 <__multiply+0x150>)
 800973c:	f240 115d 	movw	r1, #349	; 0x15d
 8009740:	f000 fd76 	bl	800a230 <__assert_func>
 8009744:	f100 0514 	add.w	r5, r0, #20
 8009748:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800974c:	462b      	mov	r3, r5
 800974e:	2200      	movs	r2, #0
 8009750:	4543      	cmp	r3, r8
 8009752:	d321      	bcc.n	8009798 <__multiply+0x98>
 8009754:	f104 0314 	add.w	r3, r4, #20
 8009758:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800975c:	f109 0314 	add.w	r3, r9, #20
 8009760:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009764:	9202      	str	r2, [sp, #8]
 8009766:	1b3a      	subs	r2, r7, r4
 8009768:	3a15      	subs	r2, #21
 800976a:	f022 0203 	bic.w	r2, r2, #3
 800976e:	3204      	adds	r2, #4
 8009770:	f104 0115 	add.w	r1, r4, #21
 8009774:	428f      	cmp	r7, r1
 8009776:	bf38      	it	cc
 8009778:	2204      	movcc	r2, #4
 800977a:	9201      	str	r2, [sp, #4]
 800977c:	9a02      	ldr	r2, [sp, #8]
 800977e:	9303      	str	r3, [sp, #12]
 8009780:	429a      	cmp	r2, r3
 8009782:	d80c      	bhi.n	800979e <__multiply+0x9e>
 8009784:	2e00      	cmp	r6, #0
 8009786:	dd03      	ble.n	8009790 <__multiply+0x90>
 8009788:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800978c:	2b00      	cmp	r3, #0
 800978e:	d05a      	beq.n	8009846 <__multiply+0x146>
 8009790:	6106      	str	r6, [r0, #16]
 8009792:	b005      	add	sp, #20
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	f843 2b04 	str.w	r2, [r3], #4
 800979c:	e7d8      	b.n	8009750 <__multiply+0x50>
 800979e:	f8b3 a000 	ldrh.w	sl, [r3]
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	d024      	beq.n	80097f2 <__multiply+0xf2>
 80097a8:	f104 0e14 	add.w	lr, r4, #20
 80097ac:	46a9      	mov	r9, r5
 80097ae:	f04f 0c00 	mov.w	ip, #0
 80097b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097b6:	f8d9 1000 	ldr.w	r1, [r9]
 80097ba:	fa1f fb82 	uxth.w	fp, r2
 80097be:	b289      	uxth	r1, r1
 80097c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80097c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097c8:	f8d9 2000 	ldr.w	r2, [r9]
 80097cc:	4461      	add	r1, ip
 80097ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80097d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097da:	b289      	uxth	r1, r1
 80097dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097e0:	4577      	cmp	r7, lr
 80097e2:	f849 1b04 	str.w	r1, [r9], #4
 80097e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097ea:	d8e2      	bhi.n	80097b2 <__multiply+0xb2>
 80097ec:	9a01      	ldr	r2, [sp, #4]
 80097ee:	f845 c002 	str.w	ip, [r5, r2]
 80097f2:	9a03      	ldr	r2, [sp, #12]
 80097f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097f8:	3304      	adds	r3, #4
 80097fa:	f1b9 0f00 	cmp.w	r9, #0
 80097fe:	d020      	beq.n	8009842 <__multiply+0x142>
 8009800:	6829      	ldr	r1, [r5, #0]
 8009802:	f104 0c14 	add.w	ip, r4, #20
 8009806:	46ae      	mov	lr, r5
 8009808:	f04f 0a00 	mov.w	sl, #0
 800980c:	f8bc b000 	ldrh.w	fp, [ip]
 8009810:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009814:	fb09 220b 	mla	r2, r9, fp, r2
 8009818:	4492      	add	sl, r2
 800981a:	b289      	uxth	r1, r1
 800981c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009820:	f84e 1b04 	str.w	r1, [lr], #4
 8009824:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009828:	f8be 1000 	ldrh.w	r1, [lr]
 800982c:	0c12      	lsrs	r2, r2, #16
 800982e:	fb09 1102 	mla	r1, r9, r2, r1
 8009832:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009836:	4567      	cmp	r7, ip
 8009838:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800983c:	d8e6      	bhi.n	800980c <__multiply+0x10c>
 800983e:	9a01      	ldr	r2, [sp, #4]
 8009840:	50a9      	str	r1, [r5, r2]
 8009842:	3504      	adds	r5, #4
 8009844:	e79a      	b.n	800977c <__multiply+0x7c>
 8009846:	3e01      	subs	r6, #1
 8009848:	e79c      	b.n	8009784 <__multiply+0x84>
 800984a:	bf00      	nop
 800984c:	0800bb4b 	.word	0x0800bb4b
 8009850:	0800bbbc 	.word	0x0800bbbc

08009854 <__pow5mult>:
 8009854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009858:	4615      	mov	r5, r2
 800985a:	f012 0203 	ands.w	r2, r2, #3
 800985e:	4606      	mov	r6, r0
 8009860:	460f      	mov	r7, r1
 8009862:	d007      	beq.n	8009874 <__pow5mult+0x20>
 8009864:	4c25      	ldr	r4, [pc, #148]	; (80098fc <__pow5mult+0xa8>)
 8009866:	3a01      	subs	r2, #1
 8009868:	2300      	movs	r3, #0
 800986a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800986e:	f7ff fe9b 	bl	80095a8 <__multadd>
 8009872:	4607      	mov	r7, r0
 8009874:	10ad      	asrs	r5, r5, #2
 8009876:	d03d      	beq.n	80098f4 <__pow5mult+0xa0>
 8009878:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800987a:	b97c      	cbnz	r4, 800989c <__pow5mult+0x48>
 800987c:	2010      	movs	r0, #16
 800987e:	f7fd ff17 	bl	80076b0 <malloc>
 8009882:	4602      	mov	r2, r0
 8009884:	6270      	str	r0, [r6, #36]	; 0x24
 8009886:	b928      	cbnz	r0, 8009894 <__pow5mult+0x40>
 8009888:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <__pow5mult+0xac>)
 800988a:	481e      	ldr	r0, [pc, #120]	; (8009904 <__pow5mult+0xb0>)
 800988c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009890:	f000 fcce 	bl	800a230 <__assert_func>
 8009894:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009898:	6004      	str	r4, [r0, #0]
 800989a:	60c4      	str	r4, [r0, #12]
 800989c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80098a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80098a4:	b94c      	cbnz	r4, 80098ba <__pow5mult+0x66>
 80098a6:	f240 2171 	movw	r1, #625	; 0x271
 80098aa:	4630      	mov	r0, r6
 80098ac:	f7ff ff12 	bl	80096d4 <__i2b>
 80098b0:	2300      	movs	r3, #0
 80098b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098b6:	4604      	mov	r4, r0
 80098b8:	6003      	str	r3, [r0, #0]
 80098ba:	f04f 0900 	mov.w	r9, #0
 80098be:	07eb      	lsls	r3, r5, #31
 80098c0:	d50a      	bpl.n	80098d8 <__pow5mult+0x84>
 80098c2:	4639      	mov	r1, r7
 80098c4:	4622      	mov	r2, r4
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7ff ff1a 	bl	8009700 <__multiply>
 80098cc:	4639      	mov	r1, r7
 80098ce:	4680      	mov	r8, r0
 80098d0:	4630      	mov	r0, r6
 80098d2:	f7ff fe47 	bl	8009564 <_Bfree>
 80098d6:	4647      	mov	r7, r8
 80098d8:	106d      	asrs	r5, r5, #1
 80098da:	d00b      	beq.n	80098f4 <__pow5mult+0xa0>
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	b938      	cbnz	r0, 80098f0 <__pow5mult+0x9c>
 80098e0:	4622      	mov	r2, r4
 80098e2:	4621      	mov	r1, r4
 80098e4:	4630      	mov	r0, r6
 80098e6:	f7ff ff0b 	bl	8009700 <__multiply>
 80098ea:	6020      	str	r0, [r4, #0]
 80098ec:	f8c0 9000 	str.w	r9, [r0]
 80098f0:	4604      	mov	r4, r0
 80098f2:	e7e4      	b.n	80098be <__pow5mult+0x6a>
 80098f4:	4638      	mov	r0, r7
 80098f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098fa:	bf00      	nop
 80098fc:	0800bd08 	.word	0x0800bd08
 8009900:	0800bad9 	.word	0x0800bad9
 8009904:	0800bbbc 	.word	0x0800bbbc

08009908 <__lshift>:
 8009908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800990c:	460c      	mov	r4, r1
 800990e:	6849      	ldr	r1, [r1, #4]
 8009910:	6923      	ldr	r3, [r4, #16]
 8009912:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009916:	68a3      	ldr	r3, [r4, #8]
 8009918:	4607      	mov	r7, r0
 800991a:	4691      	mov	r9, r2
 800991c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009920:	f108 0601 	add.w	r6, r8, #1
 8009924:	42b3      	cmp	r3, r6
 8009926:	db0b      	blt.n	8009940 <__lshift+0x38>
 8009928:	4638      	mov	r0, r7
 800992a:	f7ff fddb 	bl	80094e4 <_Balloc>
 800992e:	4605      	mov	r5, r0
 8009930:	b948      	cbnz	r0, 8009946 <__lshift+0x3e>
 8009932:	4602      	mov	r2, r0
 8009934:	4b2a      	ldr	r3, [pc, #168]	; (80099e0 <__lshift+0xd8>)
 8009936:	482b      	ldr	r0, [pc, #172]	; (80099e4 <__lshift+0xdc>)
 8009938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800993c:	f000 fc78 	bl	800a230 <__assert_func>
 8009940:	3101      	adds	r1, #1
 8009942:	005b      	lsls	r3, r3, #1
 8009944:	e7ee      	b.n	8009924 <__lshift+0x1c>
 8009946:	2300      	movs	r3, #0
 8009948:	f100 0114 	add.w	r1, r0, #20
 800994c:	f100 0210 	add.w	r2, r0, #16
 8009950:	4618      	mov	r0, r3
 8009952:	4553      	cmp	r3, sl
 8009954:	db37      	blt.n	80099c6 <__lshift+0xbe>
 8009956:	6920      	ldr	r0, [r4, #16]
 8009958:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800995c:	f104 0314 	add.w	r3, r4, #20
 8009960:	f019 091f 	ands.w	r9, r9, #31
 8009964:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009968:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800996c:	d02f      	beq.n	80099ce <__lshift+0xc6>
 800996e:	f1c9 0e20 	rsb	lr, r9, #32
 8009972:	468a      	mov	sl, r1
 8009974:	f04f 0c00 	mov.w	ip, #0
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	fa02 f209 	lsl.w	r2, r2, r9
 800997e:	ea42 020c 	orr.w	r2, r2, ip
 8009982:	f84a 2b04 	str.w	r2, [sl], #4
 8009986:	f853 2b04 	ldr.w	r2, [r3], #4
 800998a:	4298      	cmp	r0, r3
 800998c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009990:	d8f2      	bhi.n	8009978 <__lshift+0x70>
 8009992:	1b03      	subs	r3, r0, r4
 8009994:	3b15      	subs	r3, #21
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	3304      	adds	r3, #4
 800999c:	f104 0215 	add.w	r2, r4, #21
 80099a0:	4290      	cmp	r0, r2
 80099a2:	bf38      	it	cc
 80099a4:	2304      	movcc	r3, #4
 80099a6:	f841 c003 	str.w	ip, [r1, r3]
 80099aa:	f1bc 0f00 	cmp.w	ip, #0
 80099ae:	d001      	beq.n	80099b4 <__lshift+0xac>
 80099b0:	f108 0602 	add.w	r6, r8, #2
 80099b4:	3e01      	subs	r6, #1
 80099b6:	4638      	mov	r0, r7
 80099b8:	612e      	str	r6, [r5, #16]
 80099ba:	4621      	mov	r1, r4
 80099bc:	f7ff fdd2 	bl	8009564 <_Bfree>
 80099c0:	4628      	mov	r0, r5
 80099c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099ca:	3301      	adds	r3, #1
 80099cc:	e7c1      	b.n	8009952 <__lshift+0x4a>
 80099ce:	3904      	subs	r1, #4
 80099d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80099d8:	4298      	cmp	r0, r3
 80099da:	d8f9      	bhi.n	80099d0 <__lshift+0xc8>
 80099dc:	e7ea      	b.n	80099b4 <__lshift+0xac>
 80099de:	bf00      	nop
 80099e0:	0800bb4b 	.word	0x0800bb4b
 80099e4:	0800bbbc 	.word	0x0800bbbc

080099e8 <__mcmp>:
 80099e8:	b530      	push	{r4, r5, lr}
 80099ea:	6902      	ldr	r2, [r0, #16]
 80099ec:	690c      	ldr	r4, [r1, #16]
 80099ee:	1b12      	subs	r2, r2, r4
 80099f0:	d10e      	bne.n	8009a10 <__mcmp+0x28>
 80099f2:	f100 0314 	add.w	r3, r0, #20
 80099f6:	3114      	adds	r1, #20
 80099f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009a00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009a04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a08:	42a5      	cmp	r5, r4
 8009a0a:	d003      	beq.n	8009a14 <__mcmp+0x2c>
 8009a0c:	d305      	bcc.n	8009a1a <__mcmp+0x32>
 8009a0e:	2201      	movs	r2, #1
 8009a10:	4610      	mov	r0, r2
 8009a12:	bd30      	pop	{r4, r5, pc}
 8009a14:	4283      	cmp	r3, r0
 8009a16:	d3f3      	bcc.n	8009a00 <__mcmp+0x18>
 8009a18:	e7fa      	b.n	8009a10 <__mcmp+0x28>
 8009a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1e:	e7f7      	b.n	8009a10 <__mcmp+0x28>

08009a20 <__mdiff>:
 8009a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	4606      	mov	r6, r0
 8009a28:	4611      	mov	r1, r2
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	4690      	mov	r8, r2
 8009a2e:	f7ff ffdb 	bl	80099e8 <__mcmp>
 8009a32:	1e05      	subs	r5, r0, #0
 8009a34:	d110      	bne.n	8009a58 <__mdiff+0x38>
 8009a36:	4629      	mov	r1, r5
 8009a38:	4630      	mov	r0, r6
 8009a3a:	f7ff fd53 	bl	80094e4 <_Balloc>
 8009a3e:	b930      	cbnz	r0, 8009a4e <__mdiff+0x2e>
 8009a40:	4b3a      	ldr	r3, [pc, #232]	; (8009b2c <__mdiff+0x10c>)
 8009a42:	4602      	mov	r2, r0
 8009a44:	f240 2132 	movw	r1, #562	; 0x232
 8009a48:	4839      	ldr	r0, [pc, #228]	; (8009b30 <__mdiff+0x110>)
 8009a4a:	f000 fbf1 	bl	800a230 <__assert_func>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a58:	bfa4      	itt	ge
 8009a5a:	4643      	movge	r3, r8
 8009a5c:	46a0      	movge	r8, r4
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a64:	bfa6      	itte	ge
 8009a66:	461c      	movge	r4, r3
 8009a68:	2500      	movge	r5, #0
 8009a6a:	2501      	movlt	r5, #1
 8009a6c:	f7ff fd3a 	bl	80094e4 <_Balloc>
 8009a70:	b920      	cbnz	r0, 8009a7c <__mdiff+0x5c>
 8009a72:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <__mdiff+0x10c>)
 8009a74:	4602      	mov	r2, r0
 8009a76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a7a:	e7e5      	b.n	8009a48 <__mdiff+0x28>
 8009a7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a80:	6926      	ldr	r6, [r4, #16]
 8009a82:	60c5      	str	r5, [r0, #12]
 8009a84:	f104 0914 	add.w	r9, r4, #20
 8009a88:	f108 0514 	add.w	r5, r8, #20
 8009a8c:	f100 0e14 	add.w	lr, r0, #20
 8009a90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a98:	f108 0210 	add.w	r2, r8, #16
 8009a9c:	46f2      	mov	sl, lr
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	f859 3b04 	ldr.w	r3, [r9], #4
 8009aa4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009aa8:	fa1f f883 	uxth.w	r8, r3
 8009aac:	fa11 f18b 	uxtah	r1, r1, fp
 8009ab0:	0c1b      	lsrs	r3, r3, #16
 8009ab2:	eba1 0808 	sub.w	r8, r1, r8
 8009ab6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009aba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009abe:	fa1f f888 	uxth.w	r8, r8
 8009ac2:	1419      	asrs	r1, r3, #16
 8009ac4:	454e      	cmp	r6, r9
 8009ac6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aca:	f84a 3b04 	str.w	r3, [sl], #4
 8009ace:	d8e7      	bhi.n	8009aa0 <__mdiff+0x80>
 8009ad0:	1b33      	subs	r3, r6, r4
 8009ad2:	3b15      	subs	r3, #21
 8009ad4:	f023 0303 	bic.w	r3, r3, #3
 8009ad8:	3304      	adds	r3, #4
 8009ada:	3415      	adds	r4, #21
 8009adc:	42a6      	cmp	r6, r4
 8009ade:	bf38      	it	cc
 8009ae0:	2304      	movcc	r3, #4
 8009ae2:	441d      	add	r5, r3
 8009ae4:	4473      	add	r3, lr
 8009ae6:	469e      	mov	lr, r3
 8009ae8:	462e      	mov	r6, r5
 8009aea:	4566      	cmp	r6, ip
 8009aec:	d30e      	bcc.n	8009b0c <__mdiff+0xec>
 8009aee:	f10c 0203 	add.w	r2, ip, #3
 8009af2:	1b52      	subs	r2, r2, r5
 8009af4:	f022 0203 	bic.w	r2, r2, #3
 8009af8:	3d03      	subs	r5, #3
 8009afa:	45ac      	cmp	ip, r5
 8009afc:	bf38      	it	cc
 8009afe:	2200      	movcc	r2, #0
 8009b00:	441a      	add	r2, r3
 8009b02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009b06:	b17b      	cbz	r3, 8009b28 <__mdiff+0x108>
 8009b08:	6107      	str	r7, [r0, #16]
 8009b0a:	e7a3      	b.n	8009a54 <__mdiff+0x34>
 8009b0c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b10:	fa11 f288 	uxtah	r2, r1, r8
 8009b14:	1414      	asrs	r4, r2, #16
 8009b16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b1a:	b292      	uxth	r2, r2
 8009b1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b20:	f84e 2b04 	str.w	r2, [lr], #4
 8009b24:	1421      	asrs	r1, r4, #16
 8009b26:	e7e0      	b.n	8009aea <__mdiff+0xca>
 8009b28:	3f01      	subs	r7, #1
 8009b2a:	e7ea      	b.n	8009b02 <__mdiff+0xe2>
 8009b2c:	0800bb4b 	.word	0x0800bb4b
 8009b30:	0800bbbc 	.word	0x0800bbbc

08009b34 <__d2b>:
 8009b34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b38:	4689      	mov	r9, r1
 8009b3a:	2101      	movs	r1, #1
 8009b3c:	ec57 6b10 	vmov	r6, r7, d0
 8009b40:	4690      	mov	r8, r2
 8009b42:	f7ff fccf 	bl	80094e4 <_Balloc>
 8009b46:	4604      	mov	r4, r0
 8009b48:	b930      	cbnz	r0, 8009b58 <__d2b+0x24>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <__d2b+0xb0>)
 8009b4e:	4826      	ldr	r0, [pc, #152]	; (8009be8 <__d2b+0xb4>)
 8009b50:	f240 310a 	movw	r1, #778	; 0x30a
 8009b54:	f000 fb6c 	bl	800a230 <__assert_func>
 8009b58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b60:	bb35      	cbnz	r5, 8009bb0 <__d2b+0x7c>
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	9301      	str	r3, [sp, #4]
 8009b66:	d028      	beq.n	8009bba <__d2b+0x86>
 8009b68:	4668      	mov	r0, sp
 8009b6a:	9600      	str	r6, [sp, #0]
 8009b6c:	f7ff fd82 	bl	8009674 <__lo0bits>
 8009b70:	9900      	ldr	r1, [sp, #0]
 8009b72:	b300      	cbz	r0, 8009bb6 <__d2b+0x82>
 8009b74:	9a01      	ldr	r2, [sp, #4]
 8009b76:	f1c0 0320 	rsb	r3, r0, #32
 8009b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7e:	430b      	orrs	r3, r1
 8009b80:	40c2      	lsrs	r2, r0
 8009b82:	6163      	str	r3, [r4, #20]
 8009b84:	9201      	str	r2, [sp, #4]
 8009b86:	9b01      	ldr	r3, [sp, #4]
 8009b88:	61a3      	str	r3, [r4, #24]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bf14      	ite	ne
 8009b8e:	2202      	movne	r2, #2
 8009b90:	2201      	moveq	r2, #1
 8009b92:	6122      	str	r2, [r4, #16]
 8009b94:	b1d5      	cbz	r5, 8009bcc <__d2b+0x98>
 8009b96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b9a:	4405      	add	r5, r0
 8009b9c:	f8c9 5000 	str.w	r5, [r9]
 8009ba0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009ba4:	f8c8 0000 	str.w	r0, [r8]
 8009ba8:	4620      	mov	r0, r4
 8009baa:	b003      	add	sp, #12
 8009bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bb4:	e7d5      	b.n	8009b62 <__d2b+0x2e>
 8009bb6:	6161      	str	r1, [r4, #20]
 8009bb8:	e7e5      	b.n	8009b86 <__d2b+0x52>
 8009bba:	a801      	add	r0, sp, #4
 8009bbc:	f7ff fd5a 	bl	8009674 <__lo0bits>
 8009bc0:	9b01      	ldr	r3, [sp, #4]
 8009bc2:	6163      	str	r3, [r4, #20]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	6122      	str	r2, [r4, #16]
 8009bc8:	3020      	adds	r0, #32
 8009bca:	e7e3      	b.n	8009b94 <__d2b+0x60>
 8009bcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bd4:	f8c9 0000 	str.w	r0, [r9]
 8009bd8:	6918      	ldr	r0, [r3, #16]
 8009bda:	f7ff fd2b 	bl	8009634 <__hi0bits>
 8009bde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009be2:	e7df      	b.n	8009ba4 <__d2b+0x70>
 8009be4:	0800bb4b 	.word	0x0800bb4b
 8009be8:	0800bbbc 	.word	0x0800bbbc

08009bec <_calloc_r>:
 8009bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bee:	fba1 2402 	umull	r2, r4, r1, r2
 8009bf2:	b94c      	cbnz	r4, 8009c08 <_calloc_r+0x1c>
 8009bf4:	4611      	mov	r1, r2
 8009bf6:	9201      	str	r2, [sp, #4]
 8009bf8:	f7fd fde4 	bl	80077c4 <_malloc_r>
 8009bfc:	9a01      	ldr	r2, [sp, #4]
 8009bfe:	4605      	mov	r5, r0
 8009c00:	b930      	cbnz	r0, 8009c10 <_calloc_r+0x24>
 8009c02:	4628      	mov	r0, r5
 8009c04:	b003      	add	sp, #12
 8009c06:	bd30      	pop	{r4, r5, pc}
 8009c08:	220c      	movs	r2, #12
 8009c0a:	6002      	str	r2, [r0, #0]
 8009c0c:	2500      	movs	r5, #0
 8009c0e:	e7f8      	b.n	8009c02 <_calloc_r+0x16>
 8009c10:	4621      	mov	r1, r4
 8009c12:	f7fd fd63 	bl	80076dc <memset>
 8009c16:	e7f4      	b.n	8009c02 <_calloc_r+0x16>

08009c18 <__ssputs_r>:
 8009c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	688e      	ldr	r6, [r1, #8]
 8009c1e:	429e      	cmp	r6, r3
 8009c20:	4682      	mov	sl, r0
 8009c22:	460c      	mov	r4, r1
 8009c24:	4690      	mov	r8, r2
 8009c26:	461f      	mov	r7, r3
 8009c28:	d838      	bhi.n	8009c9c <__ssputs_r+0x84>
 8009c2a:	898a      	ldrh	r2, [r1, #12]
 8009c2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c30:	d032      	beq.n	8009c98 <__ssputs_r+0x80>
 8009c32:	6825      	ldr	r5, [r4, #0]
 8009c34:	6909      	ldr	r1, [r1, #16]
 8009c36:	eba5 0901 	sub.w	r9, r5, r1
 8009c3a:	6965      	ldr	r5, [r4, #20]
 8009c3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c44:	3301      	adds	r3, #1
 8009c46:	444b      	add	r3, r9
 8009c48:	106d      	asrs	r5, r5, #1
 8009c4a:	429d      	cmp	r5, r3
 8009c4c:	bf38      	it	cc
 8009c4e:	461d      	movcc	r5, r3
 8009c50:	0553      	lsls	r3, r2, #21
 8009c52:	d531      	bpl.n	8009cb8 <__ssputs_r+0xa0>
 8009c54:	4629      	mov	r1, r5
 8009c56:	f7fd fdb5 	bl	80077c4 <_malloc_r>
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	b950      	cbnz	r0, 8009c74 <__ssputs_r+0x5c>
 8009c5e:	230c      	movs	r3, #12
 8009c60:	f8ca 3000 	str.w	r3, [sl]
 8009c64:	89a3      	ldrh	r3, [r4, #12]
 8009c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6a:	81a3      	strh	r3, [r4, #12]
 8009c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	6921      	ldr	r1, [r4, #16]
 8009c76:	464a      	mov	r2, r9
 8009c78:	f7fd fd22 	bl	80076c0 <memcpy>
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	6126      	str	r6, [r4, #16]
 8009c8a:	6165      	str	r5, [r4, #20]
 8009c8c:	444e      	add	r6, r9
 8009c8e:	eba5 0509 	sub.w	r5, r5, r9
 8009c92:	6026      	str	r6, [r4, #0]
 8009c94:	60a5      	str	r5, [r4, #8]
 8009c96:	463e      	mov	r6, r7
 8009c98:	42be      	cmp	r6, r7
 8009c9a:	d900      	bls.n	8009c9e <__ssputs_r+0x86>
 8009c9c:	463e      	mov	r6, r7
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	f000 fb4a 	bl	800a33c <memmove>
 8009ca8:	68a3      	ldr	r3, [r4, #8]
 8009caa:	1b9b      	subs	r3, r3, r6
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	4433      	add	r3, r6
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	2000      	movs	r0, #0
 8009cb6:	e7db      	b.n	8009c70 <__ssputs_r+0x58>
 8009cb8:	462a      	mov	r2, r5
 8009cba:	f000 fb59 	bl	800a370 <_realloc_r>
 8009cbe:	4606      	mov	r6, r0
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	d1e1      	bne.n	8009c88 <__ssputs_r+0x70>
 8009cc4:	6921      	ldr	r1, [r4, #16]
 8009cc6:	4650      	mov	r0, sl
 8009cc8:	f7fd fd10 	bl	80076ec <_free_r>
 8009ccc:	e7c7      	b.n	8009c5e <__ssputs_r+0x46>
	...

08009cd0 <_svfiprintf_r>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	4698      	mov	r8, r3
 8009cd6:	898b      	ldrh	r3, [r1, #12]
 8009cd8:	061b      	lsls	r3, r3, #24
 8009cda:	b09d      	sub	sp, #116	; 0x74
 8009cdc:	4607      	mov	r7, r0
 8009cde:	460d      	mov	r5, r1
 8009ce0:	4614      	mov	r4, r2
 8009ce2:	d50e      	bpl.n	8009d02 <_svfiprintf_r+0x32>
 8009ce4:	690b      	ldr	r3, [r1, #16]
 8009ce6:	b963      	cbnz	r3, 8009d02 <_svfiprintf_r+0x32>
 8009ce8:	2140      	movs	r1, #64	; 0x40
 8009cea:	f7fd fd6b 	bl	80077c4 <_malloc_r>
 8009cee:	6028      	str	r0, [r5, #0]
 8009cf0:	6128      	str	r0, [r5, #16]
 8009cf2:	b920      	cbnz	r0, 8009cfe <_svfiprintf_r+0x2e>
 8009cf4:	230c      	movs	r3, #12
 8009cf6:	603b      	str	r3, [r7, #0]
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	e0d1      	b.n	8009ea2 <_svfiprintf_r+0x1d2>
 8009cfe:	2340      	movs	r3, #64	; 0x40
 8009d00:	616b      	str	r3, [r5, #20]
 8009d02:	2300      	movs	r3, #0
 8009d04:	9309      	str	r3, [sp, #36]	; 0x24
 8009d06:	2320      	movs	r3, #32
 8009d08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d10:	2330      	movs	r3, #48	; 0x30
 8009d12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ebc <_svfiprintf_r+0x1ec>
 8009d16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d1a:	f04f 0901 	mov.w	r9, #1
 8009d1e:	4623      	mov	r3, r4
 8009d20:	469a      	mov	sl, r3
 8009d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d26:	b10a      	cbz	r2, 8009d2c <_svfiprintf_r+0x5c>
 8009d28:	2a25      	cmp	r2, #37	; 0x25
 8009d2a:	d1f9      	bne.n	8009d20 <_svfiprintf_r+0x50>
 8009d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d30:	d00b      	beq.n	8009d4a <_svfiprintf_r+0x7a>
 8009d32:	465b      	mov	r3, fp
 8009d34:	4622      	mov	r2, r4
 8009d36:	4629      	mov	r1, r5
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7ff ff6d 	bl	8009c18 <__ssputs_r>
 8009d3e:	3001      	adds	r0, #1
 8009d40:	f000 80aa 	beq.w	8009e98 <_svfiprintf_r+0x1c8>
 8009d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d46:	445a      	add	r2, fp
 8009d48:	9209      	str	r2, [sp, #36]	; 0x24
 8009d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 80a2 	beq.w	8009e98 <_svfiprintf_r+0x1c8>
 8009d54:	2300      	movs	r3, #0
 8009d56:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d5e:	f10a 0a01 	add.w	sl, sl, #1
 8009d62:	9304      	str	r3, [sp, #16]
 8009d64:	9307      	str	r3, [sp, #28]
 8009d66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d6a:	931a      	str	r3, [sp, #104]	; 0x68
 8009d6c:	4654      	mov	r4, sl
 8009d6e:	2205      	movs	r2, #5
 8009d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d74:	4851      	ldr	r0, [pc, #324]	; (8009ebc <_svfiprintf_r+0x1ec>)
 8009d76:	f7f6 fa53 	bl	8000220 <memchr>
 8009d7a:	9a04      	ldr	r2, [sp, #16]
 8009d7c:	b9d8      	cbnz	r0, 8009db6 <_svfiprintf_r+0xe6>
 8009d7e:	06d0      	lsls	r0, r2, #27
 8009d80:	bf44      	itt	mi
 8009d82:	2320      	movmi	r3, #32
 8009d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d88:	0711      	lsls	r1, r2, #28
 8009d8a:	bf44      	itt	mi
 8009d8c:	232b      	movmi	r3, #43	; 0x2b
 8009d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d92:	f89a 3000 	ldrb.w	r3, [sl]
 8009d96:	2b2a      	cmp	r3, #42	; 0x2a
 8009d98:	d015      	beq.n	8009dc6 <_svfiprintf_r+0xf6>
 8009d9a:	9a07      	ldr	r2, [sp, #28]
 8009d9c:	4654      	mov	r4, sl
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f04f 0c0a 	mov.w	ip, #10
 8009da4:	4621      	mov	r1, r4
 8009da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009daa:	3b30      	subs	r3, #48	; 0x30
 8009dac:	2b09      	cmp	r3, #9
 8009dae:	d94e      	bls.n	8009e4e <_svfiprintf_r+0x17e>
 8009db0:	b1b0      	cbz	r0, 8009de0 <_svfiprintf_r+0x110>
 8009db2:	9207      	str	r2, [sp, #28]
 8009db4:	e014      	b.n	8009de0 <_svfiprintf_r+0x110>
 8009db6:	eba0 0308 	sub.w	r3, r0, r8
 8009dba:	fa09 f303 	lsl.w	r3, r9, r3
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	46a2      	mov	sl, r4
 8009dc4:	e7d2      	b.n	8009d6c <_svfiprintf_r+0x9c>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	1d19      	adds	r1, r3, #4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	9103      	str	r1, [sp, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfbb      	ittet	lt
 8009dd2:	425b      	neglt	r3, r3
 8009dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8009dd8:	9307      	strge	r3, [sp, #28]
 8009dda:	9307      	strlt	r3, [sp, #28]
 8009ddc:	bfb8      	it	lt
 8009dde:	9204      	strlt	r2, [sp, #16]
 8009de0:	7823      	ldrb	r3, [r4, #0]
 8009de2:	2b2e      	cmp	r3, #46	; 0x2e
 8009de4:	d10c      	bne.n	8009e00 <_svfiprintf_r+0x130>
 8009de6:	7863      	ldrb	r3, [r4, #1]
 8009de8:	2b2a      	cmp	r3, #42	; 0x2a
 8009dea:	d135      	bne.n	8009e58 <_svfiprintf_r+0x188>
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	1d1a      	adds	r2, r3, #4
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	9203      	str	r2, [sp, #12]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfb8      	it	lt
 8009df8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dfc:	3402      	adds	r4, #2
 8009dfe:	9305      	str	r3, [sp, #20]
 8009e00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ecc <_svfiprintf_r+0x1fc>
 8009e04:	7821      	ldrb	r1, [r4, #0]
 8009e06:	2203      	movs	r2, #3
 8009e08:	4650      	mov	r0, sl
 8009e0a:	f7f6 fa09 	bl	8000220 <memchr>
 8009e0e:	b140      	cbz	r0, 8009e22 <_svfiprintf_r+0x152>
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	eba0 000a 	sub.w	r0, r0, sl
 8009e16:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	4303      	orrs	r3, r0
 8009e1e:	3401      	adds	r4, #1
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e26:	4826      	ldr	r0, [pc, #152]	; (8009ec0 <_svfiprintf_r+0x1f0>)
 8009e28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e2c:	2206      	movs	r2, #6
 8009e2e:	f7f6 f9f7 	bl	8000220 <memchr>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	d038      	beq.n	8009ea8 <_svfiprintf_r+0x1d8>
 8009e36:	4b23      	ldr	r3, [pc, #140]	; (8009ec4 <_svfiprintf_r+0x1f4>)
 8009e38:	bb1b      	cbnz	r3, 8009e82 <_svfiprintf_r+0x1b2>
 8009e3a:	9b03      	ldr	r3, [sp, #12]
 8009e3c:	3307      	adds	r3, #7
 8009e3e:	f023 0307 	bic.w	r3, r3, #7
 8009e42:	3308      	adds	r3, #8
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e48:	4433      	add	r3, r6
 8009e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4c:	e767      	b.n	8009d1e <_svfiprintf_r+0x4e>
 8009e4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e52:	460c      	mov	r4, r1
 8009e54:	2001      	movs	r0, #1
 8009e56:	e7a5      	b.n	8009da4 <_svfiprintf_r+0xd4>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	3401      	adds	r4, #1
 8009e5c:	9305      	str	r3, [sp, #20]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	f04f 0c0a 	mov.w	ip, #10
 8009e64:	4620      	mov	r0, r4
 8009e66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6a:	3a30      	subs	r2, #48	; 0x30
 8009e6c:	2a09      	cmp	r2, #9
 8009e6e:	d903      	bls.n	8009e78 <_svfiprintf_r+0x1a8>
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0c5      	beq.n	8009e00 <_svfiprintf_r+0x130>
 8009e74:	9105      	str	r1, [sp, #20]
 8009e76:	e7c3      	b.n	8009e00 <_svfiprintf_r+0x130>
 8009e78:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e7f0      	b.n	8009e64 <_svfiprintf_r+0x194>
 8009e82:	ab03      	add	r3, sp, #12
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	462a      	mov	r2, r5
 8009e88:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <_svfiprintf_r+0x1f8>)
 8009e8a:	a904      	add	r1, sp, #16
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f7fd fdad 	bl	80079ec <_printf_float>
 8009e92:	1c42      	adds	r2, r0, #1
 8009e94:	4606      	mov	r6, r0
 8009e96:	d1d6      	bne.n	8009e46 <_svfiprintf_r+0x176>
 8009e98:	89ab      	ldrh	r3, [r5, #12]
 8009e9a:	065b      	lsls	r3, r3, #25
 8009e9c:	f53f af2c 	bmi.w	8009cf8 <_svfiprintf_r+0x28>
 8009ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea2:	b01d      	add	sp, #116	; 0x74
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	ab03      	add	r3, sp, #12
 8009eaa:	9300      	str	r3, [sp, #0]
 8009eac:	462a      	mov	r2, r5
 8009eae:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <_svfiprintf_r+0x1f8>)
 8009eb0:	a904      	add	r1, sp, #16
 8009eb2:	4638      	mov	r0, r7
 8009eb4:	f7fe f83e 	bl	8007f34 <_printf_i>
 8009eb8:	e7eb      	b.n	8009e92 <_svfiprintf_r+0x1c2>
 8009eba:	bf00      	nop
 8009ebc:	0800bd14 	.word	0x0800bd14
 8009ec0:	0800bd1e 	.word	0x0800bd1e
 8009ec4:	080079ed 	.word	0x080079ed
 8009ec8:	08009c19 	.word	0x08009c19
 8009ecc:	0800bd1a 	.word	0x0800bd1a

08009ed0 <__sfputc_r>:
 8009ed0:	6893      	ldr	r3, [r2, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	b410      	push	{r4}
 8009ed8:	6093      	str	r3, [r2, #8]
 8009eda:	da08      	bge.n	8009eee <__sfputc_r+0x1e>
 8009edc:	6994      	ldr	r4, [r2, #24]
 8009ede:	42a3      	cmp	r3, r4
 8009ee0:	db01      	blt.n	8009ee6 <__sfputc_r+0x16>
 8009ee2:	290a      	cmp	r1, #10
 8009ee4:	d103      	bne.n	8009eee <__sfputc_r+0x1e>
 8009ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009eea:	f7fe b991 	b.w	8008210 <__swbuf_r>
 8009eee:	6813      	ldr	r3, [r2, #0]
 8009ef0:	1c58      	adds	r0, r3, #1
 8009ef2:	6010      	str	r0, [r2, #0]
 8009ef4:	7019      	strb	r1, [r3, #0]
 8009ef6:	4608      	mov	r0, r1
 8009ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009efc:	4770      	bx	lr

08009efe <__sfputs_r>:
 8009efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	18d5      	adds	r5, r2, r3
 8009f08:	42ac      	cmp	r4, r5
 8009f0a:	d101      	bne.n	8009f10 <__sfputs_r+0x12>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e007      	b.n	8009f20 <__sfputs_r+0x22>
 8009f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f14:	463a      	mov	r2, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7ff ffda 	bl	8009ed0 <__sfputc_r>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d1f3      	bne.n	8009f08 <__sfputs_r+0xa>
 8009f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f24 <_vfiprintf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	460d      	mov	r5, r1
 8009f2a:	b09d      	sub	sp, #116	; 0x74
 8009f2c:	4614      	mov	r4, r2
 8009f2e:	4698      	mov	r8, r3
 8009f30:	4606      	mov	r6, r0
 8009f32:	b118      	cbz	r0, 8009f3c <_vfiprintf_r+0x18>
 8009f34:	6983      	ldr	r3, [r0, #24]
 8009f36:	b90b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x18>
 8009f38:	f7ff f9be 	bl	80092b8 <__sinit>
 8009f3c:	4b89      	ldr	r3, [pc, #548]	; (800a164 <_vfiprintf_r+0x240>)
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	d11b      	bne.n	8009f7a <_vfiprintf_r+0x56>
 8009f42:	6875      	ldr	r5, [r6, #4]
 8009f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x32>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x32>
 8009f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f52:	f7ff fa54 	bl	80093fe <__retarget_lock_acquire_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	071b      	lsls	r3, r3, #28
 8009f5a:	d501      	bpl.n	8009f60 <_vfiprintf_r+0x3c>
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	b9eb      	cbnz	r3, 8009f9c <_vfiprintf_r+0x78>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f7fe f9a6 	bl	80082b4 <__swsetup_r>
 8009f68:	b1c0      	cbz	r0, 8009f9c <_vfiprintf_r+0x78>
 8009f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f6c:	07dc      	lsls	r4, r3, #31
 8009f6e:	d50e      	bpl.n	8009f8e <_vfiprintf_r+0x6a>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b01d      	add	sp, #116	; 0x74
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	4b7b      	ldr	r3, [pc, #492]	; (800a168 <_vfiprintf_r+0x244>)
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	d101      	bne.n	8009f84 <_vfiprintf_r+0x60>
 8009f80:	68b5      	ldr	r5, [r6, #8]
 8009f82:	e7df      	b.n	8009f44 <_vfiprintf_r+0x20>
 8009f84:	4b79      	ldr	r3, [pc, #484]	; (800a16c <_vfiprintf_r+0x248>)
 8009f86:	429d      	cmp	r5, r3
 8009f88:	bf08      	it	eq
 8009f8a:	68f5      	ldreq	r5, [r6, #12]
 8009f8c:	e7da      	b.n	8009f44 <_vfiprintf_r+0x20>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	0598      	lsls	r0, r3, #22
 8009f92:	d4ed      	bmi.n	8009f70 <_vfiprintf_r+0x4c>
 8009f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f96:	f7ff fa33 	bl	8009400 <__retarget_lock_release_recursive>
 8009f9a:	e7e9      	b.n	8009f70 <_vfiprintf_r+0x4c>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009faa:	2330      	movs	r3, #48	; 0x30
 8009fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a170 <_vfiprintf_r+0x24c>
 8009fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb4:	f04f 0901 	mov.w	r9, #1
 8009fb8:	4623      	mov	r3, r4
 8009fba:	469a      	mov	sl, r3
 8009fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc0:	b10a      	cbz	r2, 8009fc6 <_vfiprintf_r+0xa2>
 8009fc2:	2a25      	cmp	r2, #37	; 0x25
 8009fc4:	d1f9      	bne.n	8009fba <_vfiprintf_r+0x96>
 8009fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fca:	d00b      	beq.n	8009fe4 <_vfiprintf_r+0xc0>
 8009fcc:	465b      	mov	r3, fp
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ff93 	bl	8009efe <__sfputs_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f000 80aa 	beq.w	800a132 <_vfiprintf_r+0x20e>
 8009fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe0:	445a      	add	r2, fp
 8009fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 80a2 	beq.w	800a132 <_vfiprintf_r+0x20e>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff8:	f10a 0a01 	add.w	sl, sl, #1
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a004:	931a      	str	r3, [sp, #104]	; 0x68
 800a006:	4654      	mov	r4, sl
 800a008:	2205      	movs	r2, #5
 800a00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00e:	4858      	ldr	r0, [pc, #352]	; (800a170 <_vfiprintf_r+0x24c>)
 800a010:	f7f6 f906 	bl	8000220 <memchr>
 800a014:	9a04      	ldr	r2, [sp, #16]
 800a016:	b9d8      	cbnz	r0, 800a050 <_vfiprintf_r+0x12c>
 800a018:	06d1      	lsls	r1, r2, #27
 800a01a:	bf44      	itt	mi
 800a01c:	2320      	movmi	r3, #32
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a022:	0713      	lsls	r3, r2, #28
 800a024:	bf44      	itt	mi
 800a026:	232b      	movmi	r3, #43	; 0x2b
 800a028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02c:	f89a 3000 	ldrb.w	r3, [sl]
 800a030:	2b2a      	cmp	r3, #42	; 0x2a
 800a032:	d015      	beq.n	800a060 <_vfiprintf_r+0x13c>
 800a034:	9a07      	ldr	r2, [sp, #28]
 800a036:	4654      	mov	r4, sl
 800a038:	2000      	movs	r0, #0
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4621      	mov	r1, r4
 800a040:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a044:	3b30      	subs	r3, #48	; 0x30
 800a046:	2b09      	cmp	r3, #9
 800a048:	d94e      	bls.n	800a0e8 <_vfiprintf_r+0x1c4>
 800a04a:	b1b0      	cbz	r0, 800a07a <_vfiprintf_r+0x156>
 800a04c:	9207      	str	r2, [sp, #28]
 800a04e:	e014      	b.n	800a07a <_vfiprintf_r+0x156>
 800a050:	eba0 0308 	sub.w	r3, r0, r8
 800a054:	fa09 f303 	lsl.w	r3, r9, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	46a2      	mov	sl, r4
 800a05e:	e7d2      	b.n	800a006 <_vfiprintf_r+0xe2>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	1d19      	adds	r1, r3, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	9103      	str	r1, [sp, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbb      	ittet	lt
 800a06c:	425b      	neglt	r3, r3
 800a06e:	f042 0202 	orrlt.w	r2, r2, #2
 800a072:	9307      	strge	r3, [sp, #28]
 800a074:	9307      	strlt	r3, [sp, #28]
 800a076:	bfb8      	it	lt
 800a078:	9204      	strlt	r2, [sp, #16]
 800a07a:	7823      	ldrb	r3, [r4, #0]
 800a07c:	2b2e      	cmp	r3, #46	; 0x2e
 800a07e:	d10c      	bne.n	800a09a <_vfiprintf_r+0x176>
 800a080:	7863      	ldrb	r3, [r4, #1]
 800a082:	2b2a      	cmp	r3, #42	; 0x2a
 800a084:	d135      	bne.n	800a0f2 <_vfiprintf_r+0x1ce>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	9203      	str	r2, [sp, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfb8      	it	lt
 800a092:	f04f 33ff 	movlt.w	r3, #4294967295
 800a096:	3402      	adds	r4, #2
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a180 <_vfiprintf_r+0x25c>
 800a09e:	7821      	ldrb	r1, [r4, #0]
 800a0a0:	2203      	movs	r2, #3
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	f7f6 f8bc 	bl	8000220 <memchr>
 800a0a8:	b140      	cbz	r0, 800a0bc <_vfiprintf_r+0x198>
 800a0aa:	2340      	movs	r3, #64	; 0x40
 800a0ac:	eba0 000a 	sub.w	r0, r0, sl
 800a0b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	4303      	orrs	r3, r0
 800a0b8:	3401      	adds	r4, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c0:	482c      	ldr	r0, [pc, #176]	; (800a174 <_vfiprintf_r+0x250>)
 800a0c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c6:	2206      	movs	r2, #6
 800a0c8:	f7f6 f8aa 	bl	8000220 <memchr>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d03f      	beq.n	800a150 <_vfiprintf_r+0x22c>
 800a0d0:	4b29      	ldr	r3, [pc, #164]	; (800a178 <_vfiprintf_r+0x254>)
 800a0d2:	bb1b      	cbnz	r3, 800a11c <_vfiprintf_r+0x1f8>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	3307      	adds	r3, #7
 800a0d8:	f023 0307 	bic.w	r3, r3, #7
 800a0dc:	3308      	adds	r3, #8
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	443b      	add	r3, r7
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	e767      	b.n	8009fb8 <_vfiprintf_r+0x94>
 800a0e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e7a5      	b.n	800a03e <_vfiprintf_r+0x11a>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f04f 0c0a 	mov.w	ip, #10
 800a0fe:	4620      	mov	r0, r4
 800a100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a104:	3a30      	subs	r2, #48	; 0x30
 800a106:	2a09      	cmp	r2, #9
 800a108:	d903      	bls.n	800a112 <_vfiprintf_r+0x1ee>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c5      	beq.n	800a09a <_vfiprintf_r+0x176>
 800a10e:	9105      	str	r1, [sp, #20]
 800a110:	e7c3      	b.n	800a09a <_vfiprintf_r+0x176>
 800a112:	fb0c 2101 	mla	r1, ip, r1, r2
 800a116:	4604      	mov	r4, r0
 800a118:	2301      	movs	r3, #1
 800a11a:	e7f0      	b.n	800a0fe <_vfiprintf_r+0x1da>
 800a11c:	ab03      	add	r3, sp, #12
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	462a      	mov	r2, r5
 800a122:	4b16      	ldr	r3, [pc, #88]	; (800a17c <_vfiprintf_r+0x258>)
 800a124:	a904      	add	r1, sp, #16
 800a126:	4630      	mov	r0, r6
 800a128:	f7fd fc60 	bl	80079ec <_printf_float>
 800a12c:	4607      	mov	r7, r0
 800a12e:	1c78      	adds	r0, r7, #1
 800a130:	d1d6      	bne.n	800a0e0 <_vfiprintf_r+0x1bc>
 800a132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a134:	07d9      	lsls	r1, r3, #31
 800a136:	d405      	bmi.n	800a144 <_vfiprintf_r+0x220>
 800a138:	89ab      	ldrh	r3, [r5, #12]
 800a13a:	059a      	lsls	r2, r3, #22
 800a13c:	d402      	bmi.n	800a144 <_vfiprintf_r+0x220>
 800a13e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a140:	f7ff f95e 	bl	8009400 <__retarget_lock_release_recursive>
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	065b      	lsls	r3, r3, #25
 800a148:	f53f af12 	bmi.w	8009f70 <_vfiprintf_r+0x4c>
 800a14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14e:	e711      	b.n	8009f74 <_vfiprintf_r+0x50>
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	462a      	mov	r2, r5
 800a156:	4b09      	ldr	r3, [pc, #36]	; (800a17c <_vfiprintf_r+0x258>)
 800a158:	a904      	add	r1, sp, #16
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7fd feea 	bl	8007f34 <_printf_i>
 800a160:	e7e4      	b.n	800a12c <_vfiprintf_r+0x208>
 800a162:	bf00      	nop
 800a164:	0800bb7c 	.word	0x0800bb7c
 800a168:	0800bb9c 	.word	0x0800bb9c
 800a16c:	0800bb5c 	.word	0x0800bb5c
 800a170:	0800bd14 	.word	0x0800bd14
 800a174:	0800bd1e 	.word	0x0800bd1e
 800a178:	080079ed 	.word	0x080079ed
 800a17c:	08009eff 	.word	0x08009eff
 800a180:	0800bd1a 	.word	0x0800bd1a

0800a184 <__sread>:
 800a184:	b510      	push	{r4, lr}
 800a186:	460c      	mov	r4, r1
 800a188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18c:	f000 f920 	bl	800a3d0 <_read_r>
 800a190:	2800      	cmp	r0, #0
 800a192:	bfab      	itete	ge
 800a194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a196:	89a3      	ldrhlt	r3, [r4, #12]
 800a198:	181b      	addge	r3, r3, r0
 800a19a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a19e:	bfac      	ite	ge
 800a1a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a1a2:	81a3      	strhlt	r3, [r4, #12]
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <__swrite>:
 800a1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	05db      	lsls	r3, r3, #23
 800a1b0:	4605      	mov	r5, r0
 800a1b2:	460c      	mov	r4, r1
 800a1b4:	4616      	mov	r6, r2
 800a1b6:	d505      	bpl.n	800a1c4 <__swrite+0x1e>
 800a1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1bc:	2302      	movs	r3, #2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f000 f898 	bl	800a2f4 <_lseek_r>
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ce:	81a3      	strh	r3, [r4, #12]
 800a1d0:	4632      	mov	r2, r6
 800a1d2:	463b      	mov	r3, r7
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1da:	f000 b817 	b.w	800a20c <_write_r>

0800a1de <__sseek>:
 800a1de:	b510      	push	{r4, lr}
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e6:	f000 f885 	bl	800a2f4 <_lseek_r>
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	bf15      	itete	ne
 800a1f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1fa:	81a3      	strheq	r3, [r4, #12]
 800a1fc:	bf18      	it	ne
 800a1fe:	81a3      	strhne	r3, [r4, #12]
 800a200:	bd10      	pop	{r4, pc}

0800a202 <__sclose>:
 800a202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a206:	f000 b831 	b.w	800a26c <_close_r>
	...

0800a20c <_write_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d07      	ldr	r5, [pc, #28]	; (800a22c <_write_r+0x20>)
 800a210:	4604      	mov	r4, r0
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	2200      	movs	r2, #0
 800a218:	602a      	str	r2, [r5, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7f9 f94b 	bl	80034b6 <_write>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_write_r+0x1e>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_write_r+0x1e>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	2000053c 	.word	0x2000053c

0800a230 <__assert_func>:
 800a230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a232:	4614      	mov	r4, r2
 800a234:	461a      	mov	r2, r3
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__assert_func+0x2c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4605      	mov	r5, r0
 800a23c:	68d8      	ldr	r0, [r3, #12]
 800a23e:	b14c      	cbz	r4, 800a254 <__assert_func+0x24>
 800a240:	4b07      	ldr	r3, [pc, #28]	; (800a260 <__assert_func+0x30>)
 800a242:	9100      	str	r1, [sp, #0]
 800a244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a248:	4906      	ldr	r1, [pc, #24]	; (800a264 <__assert_func+0x34>)
 800a24a:	462b      	mov	r3, r5
 800a24c:	f000 f81e 	bl	800a28c <fiprintf>
 800a250:	f000 f8dd 	bl	800a40e <abort>
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <__assert_func+0x38>)
 800a256:	461c      	mov	r4, r3
 800a258:	e7f3      	b.n	800a242 <__assert_func+0x12>
 800a25a:	bf00      	nop
 800a25c:	200000c0 	.word	0x200000c0
 800a260:	0800bd25 	.word	0x0800bd25
 800a264:	0800bd32 	.word	0x0800bd32
 800a268:	0800bd60 	.word	0x0800bd60

0800a26c <_close_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d06      	ldr	r5, [pc, #24]	; (800a288 <_close_r+0x1c>)
 800a270:	2300      	movs	r3, #0
 800a272:	4604      	mov	r4, r0
 800a274:	4608      	mov	r0, r1
 800a276:	602b      	str	r3, [r5, #0]
 800a278:	f7f9 f939 	bl	80034ee <_close>
 800a27c:	1c43      	adds	r3, r0, #1
 800a27e:	d102      	bne.n	800a286 <_close_r+0x1a>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	b103      	cbz	r3, 800a286 <_close_r+0x1a>
 800a284:	6023      	str	r3, [r4, #0]
 800a286:	bd38      	pop	{r3, r4, r5, pc}
 800a288:	2000053c 	.word	0x2000053c

0800a28c <fiprintf>:
 800a28c:	b40e      	push	{r1, r2, r3}
 800a28e:	b503      	push	{r0, r1, lr}
 800a290:	4601      	mov	r1, r0
 800a292:	ab03      	add	r3, sp, #12
 800a294:	4805      	ldr	r0, [pc, #20]	; (800a2ac <fiprintf+0x20>)
 800a296:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29a:	6800      	ldr	r0, [r0, #0]
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	f7ff fe41 	bl	8009f24 <_vfiprintf_r>
 800a2a2:	b002      	add	sp, #8
 800a2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a8:	b003      	add	sp, #12
 800a2aa:	4770      	bx	lr
 800a2ac:	200000c0 	.word	0x200000c0

0800a2b0 <_fstat_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d07      	ldr	r5, [pc, #28]	; (800a2d0 <_fstat_r+0x20>)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	602b      	str	r3, [r5, #0]
 800a2be:	f7f9 f922 	bl	8003506 <_fstat>
 800a2c2:	1c43      	adds	r3, r0, #1
 800a2c4:	d102      	bne.n	800a2cc <_fstat_r+0x1c>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	b103      	cbz	r3, 800a2cc <_fstat_r+0x1c>
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	bd38      	pop	{r3, r4, r5, pc}
 800a2ce:	bf00      	nop
 800a2d0:	2000053c 	.word	0x2000053c

0800a2d4 <_isatty_r>:
 800a2d4:	b538      	push	{r3, r4, r5, lr}
 800a2d6:	4d06      	ldr	r5, [pc, #24]	; (800a2f0 <_isatty_r+0x1c>)
 800a2d8:	2300      	movs	r3, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	602b      	str	r3, [r5, #0]
 800a2e0:	f7f9 f921 	bl	8003526 <_isatty>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_isatty_r+0x1a>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_isatty_r+0x1a>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	2000053c 	.word	0x2000053c

0800a2f4 <_lseek_r>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4d07      	ldr	r5, [pc, #28]	; (800a314 <_lseek_r+0x20>)
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	2200      	movs	r2, #0
 800a300:	602a      	str	r2, [r5, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	f7f9 f91a 	bl	800353c <_lseek>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_lseek_r+0x1e>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_lseek_r+0x1e>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	2000053c 	.word	0x2000053c

0800a318 <__ascii_mbtowc>:
 800a318:	b082      	sub	sp, #8
 800a31a:	b901      	cbnz	r1, 800a31e <__ascii_mbtowc+0x6>
 800a31c:	a901      	add	r1, sp, #4
 800a31e:	b142      	cbz	r2, 800a332 <__ascii_mbtowc+0x1a>
 800a320:	b14b      	cbz	r3, 800a336 <__ascii_mbtowc+0x1e>
 800a322:	7813      	ldrb	r3, [r2, #0]
 800a324:	600b      	str	r3, [r1, #0]
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	1e10      	subs	r0, r2, #0
 800a32a:	bf18      	it	ne
 800a32c:	2001      	movne	r0, #1
 800a32e:	b002      	add	sp, #8
 800a330:	4770      	bx	lr
 800a332:	4610      	mov	r0, r2
 800a334:	e7fb      	b.n	800a32e <__ascii_mbtowc+0x16>
 800a336:	f06f 0001 	mvn.w	r0, #1
 800a33a:	e7f8      	b.n	800a32e <__ascii_mbtowc+0x16>

0800a33c <memmove>:
 800a33c:	4288      	cmp	r0, r1
 800a33e:	b510      	push	{r4, lr}
 800a340:	eb01 0402 	add.w	r4, r1, r2
 800a344:	d902      	bls.n	800a34c <memmove+0x10>
 800a346:	4284      	cmp	r4, r0
 800a348:	4623      	mov	r3, r4
 800a34a:	d807      	bhi.n	800a35c <memmove+0x20>
 800a34c:	1e43      	subs	r3, r0, #1
 800a34e:	42a1      	cmp	r1, r4
 800a350:	d008      	beq.n	800a364 <memmove+0x28>
 800a352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a35a:	e7f8      	b.n	800a34e <memmove+0x12>
 800a35c:	4402      	add	r2, r0
 800a35e:	4601      	mov	r1, r0
 800a360:	428a      	cmp	r2, r1
 800a362:	d100      	bne.n	800a366 <memmove+0x2a>
 800a364:	bd10      	pop	{r4, pc}
 800a366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a36a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a36e:	e7f7      	b.n	800a360 <memmove+0x24>

0800a370 <_realloc_r>:
 800a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a374:	4680      	mov	r8, r0
 800a376:	4614      	mov	r4, r2
 800a378:	460e      	mov	r6, r1
 800a37a:	b921      	cbnz	r1, 800a386 <_realloc_r+0x16>
 800a37c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a380:	4611      	mov	r1, r2
 800a382:	f7fd ba1f 	b.w	80077c4 <_malloc_r>
 800a386:	b92a      	cbnz	r2, 800a394 <_realloc_r+0x24>
 800a388:	f7fd f9b0 	bl	80076ec <_free_r>
 800a38c:	4625      	mov	r5, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a394:	f000 f842 	bl	800a41c <_malloc_usable_size_r>
 800a398:	4284      	cmp	r4, r0
 800a39a:	4607      	mov	r7, r0
 800a39c:	d802      	bhi.n	800a3a4 <_realloc_r+0x34>
 800a39e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3a2:	d812      	bhi.n	800a3ca <_realloc_r+0x5a>
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	f7fd fa0c 	bl	80077c4 <_malloc_r>
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d0ed      	beq.n	800a38e <_realloc_r+0x1e>
 800a3b2:	42bc      	cmp	r4, r7
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	bf28      	it	cs
 800a3ba:	463a      	movcs	r2, r7
 800a3bc:	f7fd f980 	bl	80076c0 <memcpy>
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4640      	mov	r0, r8
 800a3c4:	f7fd f992 	bl	80076ec <_free_r>
 800a3c8:	e7e1      	b.n	800a38e <_realloc_r+0x1e>
 800a3ca:	4635      	mov	r5, r6
 800a3cc:	e7df      	b.n	800a38e <_realloc_r+0x1e>
	...

0800a3d0 <_read_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_read_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f9 f84c 	bl	800347c <_read>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_read_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_read_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	2000053c 	.word	0x2000053c

0800a3f4 <__ascii_wctomb>:
 800a3f4:	b149      	cbz	r1, 800a40a <__ascii_wctomb+0x16>
 800a3f6:	2aff      	cmp	r2, #255	; 0xff
 800a3f8:	bf85      	ittet	hi
 800a3fa:	238a      	movhi	r3, #138	; 0x8a
 800a3fc:	6003      	strhi	r3, [r0, #0]
 800a3fe:	700a      	strbls	r2, [r1, #0]
 800a400:	f04f 30ff 	movhi.w	r0, #4294967295
 800a404:	bf98      	it	ls
 800a406:	2001      	movls	r0, #1
 800a408:	4770      	bx	lr
 800a40a:	4608      	mov	r0, r1
 800a40c:	4770      	bx	lr

0800a40e <abort>:
 800a40e:	b508      	push	{r3, lr}
 800a410:	2006      	movs	r0, #6
 800a412:	f000 f833 	bl	800a47c <raise>
 800a416:	2001      	movs	r0, #1
 800a418:	f7f9 f826 	bl	8003468 <_exit>

0800a41c <_malloc_usable_size_r>:
 800a41c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a420:	1f18      	subs	r0, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	bfbc      	itt	lt
 800a426:	580b      	ldrlt	r3, [r1, r0]
 800a428:	18c0      	addlt	r0, r0, r3
 800a42a:	4770      	bx	lr

0800a42c <_raise_r>:
 800a42c:	291f      	cmp	r1, #31
 800a42e:	b538      	push	{r3, r4, r5, lr}
 800a430:	4604      	mov	r4, r0
 800a432:	460d      	mov	r5, r1
 800a434:	d904      	bls.n	800a440 <_raise_r+0x14>
 800a436:	2316      	movs	r3, #22
 800a438:	6003      	str	r3, [r0, #0]
 800a43a:	f04f 30ff 	mov.w	r0, #4294967295
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a442:	b112      	cbz	r2, 800a44a <_raise_r+0x1e>
 800a444:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a448:	b94b      	cbnz	r3, 800a45e <_raise_r+0x32>
 800a44a:	4620      	mov	r0, r4
 800a44c:	f000 f830 	bl	800a4b0 <_getpid_r>
 800a450:	462a      	mov	r2, r5
 800a452:	4601      	mov	r1, r0
 800a454:	4620      	mov	r0, r4
 800a456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a45a:	f000 b817 	b.w	800a48c <_kill_r>
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d00a      	beq.n	800a478 <_raise_r+0x4c>
 800a462:	1c59      	adds	r1, r3, #1
 800a464:	d103      	bne.n	800a46e <_raise_r+0x42>
 800a466:	2316      	movs	r3, #22
 800a468:	6003      	str	r3, [r0, #0]
 800a46a:	2001      	movs	r0, #1
 800a46c:	e7e7      	b.n	800a43e <_raise_r+0x12>
 800a46e:	2400      	movs	r4, #0
 800a470:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a474:	4628      	mov	r0, r5
 800a476:	4798      	blx	r3
 800a478:	2000      	movs	r0, #0
 800a47a:	e7e0      	b.n	800a43e <_raise_r+0x12>

0800a47c <raise>:
 800a47c:	4b02      	ldr	r3, [pc, #8]	; (800a488 <raise+0xc>)
 800a47e:	4601      	mov	r1, r0
 800a480:	6818      	ldr	r0, [r3, #0]
 800a482:	f7ff bfd3 	b.w	800a42c <_raise_r>
 800a486:	bf00      	nop
 800a488:	200000c0 	.word	0x200000c0

0800a48c <_kill_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d07      	ldr	r5, [pc, #28]	; (800a4ac <_kill_r+0x20>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	4611      	mov	r1, r2
 800a498:	602b      	str	r3, [r5, #0]
 800a49a:	f7f8 ffd5 	bl	8003448 <_kill>
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	d102      	bne.n	800a4a8 <_kill_r+0x1c>
 800a4a2:	682b      	ldr	r3, [r5, #0]
 800a4a4:	b103      	cbz	r3, 800a4a8 <_kill_r+0x1c>
 800a4a6:	6023      	str	r3, [r4, #0]
 800a4a8:	bd38      	pop	{r3, r4, r5, pc}
 800a4aa:	bf00      	nop
 800a4ac:	2000053c 	.word	0x2000053c

0800a4b0 <_getpid_r>:
 800a4b0:	f7f8 bfc2 	b.w	8003438 <_getpid>

0800a4b4 <_init>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	bf00      	nop
 800a4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ba:	bc08      	pop	{r3}
 800a4bc:	469e      	mov	lr, r3
 800a4be:	4770      	bx	lr

0800a4c0 <_fini>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr
