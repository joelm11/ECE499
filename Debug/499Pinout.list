
499Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004004  0800a4c8  0800a4c8  0001a4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4cc  0800e4cc  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4cc  0800e4cc  0001e4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4d4  0800e4d4  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4d4  0800e4d4  0001e4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4d8  0800e4d8  0001e4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800e4dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000290  0800e76c  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  0800e76c  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136e2  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345b  00000000  00000000  000339a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  00036e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000380a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180c6  00000000  00000000  00039170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185e2  00000000  00000000  00051236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000844ac  00000000  00000000  00069818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edcc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d8c  00000000  00000000  000edd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000290 	.word	0x20000290
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4ac 	.word	0x0800a4ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000294 	.word	0x20000294
 800020c:	0800a4ac 	.word	0x0800a4ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Controller_Init>:
#include "Control.h"

// Initialize controller terms to 0 for first output calcs
void Controller_Init(PIController *sys)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

	// Define controller variables
	sys->integrator = 0.0f;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
	sys->prev_error = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
	sys->prev_meas = 0.0f;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
	sys->out = 0.0f;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <Controller_Update>:

// Calculate controller output and update stored values
float Controller_Update(PIController *sys, float setpoint, float measurement)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fcc:	edc7 0a01 	vstr	s1, [r7, #4]

	float error, proportional;

	// Find error signal
	error = setpoint - measurement;
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	edc7 7a05 	vstr	s15, [r7, #20]

	// Calculate proportional term
	proportional = sys->Kp * error;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate integral term
	sys->integrator = sys->integrator + 0.5f * sys->Ki * sys->T * (error + sys->prev_error);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	ed93 7a07 	vldr	s14, [r3, #28]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ffe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001002:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edd3 7a06 	vldr	s15, [r3, #24]
 800100c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	ed93 6a08 	vldr	s12, [r3, #32]
 8001016:	edd7 7a05 	vldr	s15, [r7, #20]
 800101a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800101e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edc3 7a07 	vstr	s15, [r3, #28]

	// Clamp integral term (saturating)
	if (sys->integrator > sys->lim_max_int) {
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	edd3 7a03 	vldr	s15, [r3, #12]
 8001038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	dd04      	ble.n	800104c <Controller_Update+0x8c>

		sys->integrator = sys->lim_max_int;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	61da      	str	r2, [r3, #28]
 800104a:	e00e      	b.n	800106a <Controller_Update+0xaa>

	} else if (sys->integrator < sys->lim_min_int) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	edd3 7a02 	vldr	s15, [r3, #8]
 8001058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d503      	bpl.n	800106a <Controller_Update+0xaa>

		sys->integrator = sys->lim_min_int;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	61da      	str	r2, [r3, #28]
	}

	// Calculate controller output
	sys->out = proportional + sys->integrator;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001070:	edd7 7a04 	vldr	s15, [r7, #16]
 8001074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Clamp controller output (saturating)
	if (sys->out > sys->lim_max) {
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edd3 7a05 	vldr	s15, [r3, #20]
 800108a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd04      	ble.n	800109e <Controller_Update+0xde>

		sys->out = sys->lim_max;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	695a      	ldr	r2, [r3, #20]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
 800109c:	e00e      	b.n	80010bc <Controller_Update+0xfc>

	} else if (sys->out < sys->lim_min) {
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d503      	bpl.n	80010bc <Controller_Update+0xfc>

		sys->out = sys->lim_min;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28

	}

	// Update prev values for next iteration
	sys->prev_error = error;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	621a      	str	r2, [r3, #32]
	sys->prev_meas = measurement;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24

	return sys->out;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010cc:	ee07 3a90 	vmov	s15, r3

}
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 80010ea:	1df9      	adds	r1, r7, #7
 80010ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010f0:	2201      	movs	r2, #1
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <DEV_SPI_WRite+0x20>)
 80010f4:	f005 f895 	bl	8006222 <HAL_SPI_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000035c 	.word	0x2000035c

08001104 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <DEV_Module_Init+0x28>)
 800110e:	f003 f8b3 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2108      	movs	r1, #8
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <DEV_Module_Init+0x28>)
 8001118:	f003 f8ae 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <DEV_Module_Init+0x28>)
 8001122:	f003 f8a9 	bl	8004278 <HAL_GPIO_WritePin>
//    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		return 0;
 8001126:	2300      	movs	r3, #0
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40020000 	.word	0x40020000

08001130 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4604      	mov	r4, r0
 8001138:	4608      	mov	r0, r1
 800113a:	4611      	mov	r1, r2
 800113c:	461a      	mov	r2, r3
 800113e:	4623      	mov	r3, r4
 8001140:	80fb      	strh	r3, [r7, #6]
 8001142:	4603      	mov	r3, r0
 8001144:	80bb      	strh	r3, [r7, #4]
 8001146:	460b      	mov	r3, r1
 8001148:	807b      	strh	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800114e:	4a1c      	ldr	r2, [pc, #112]	; (80011c0 <Paint_NewImage+0x90>)
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8001154:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <Paint_NewImage+0x90>)
 8001156:	88bb      	ldrh	r3, [r7, #4]
 8001158:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800115a:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <Paint_NewImage+0x90>)
 800115c:	883b      	ldrh	r3, [r7, #0]
 800115e:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <Paint_NewImage+0x90>)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001166:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <Paint_NewImage+0x90>)
 8001168:	88bb      	ldrh	r3, [r7, #4]
 800116a:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <Paint_NewImage+0x90>)
 800116e:	8a5b      	ldrh	r3, [r3, #18]
 8001170:	b29b      	uxth	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <Paint_NewImage+0x90>)
 8001176:	8a9b      	ldrh	r3, [r3, #20]
 8001178:	b29b      	uxth	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	4811      	ldr	r0, [pc, #68]	; (80011c4 <Paint_NewImage+0x94>)
 800117e:	f006 fffb 	bl	8008178 <iprintf>
   
    Paint.Rotate = Rotate;
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <Paint_NewImage+0x90>)
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <Paint_NewImage+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <Paint_NewImage+0x6a>
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	2bb4      	cmp	r3, #180	; 0xb4
 8001198:	d106      	bne.n	80011a8 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <Paint_NewImage+0x90>)
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <Paint_NewImage+0x90>)
 80011a2:	88bb      	ldrh	r3, [r7, #4]
 80011a4:	80d3      	strh	r3, [r2, #6]
 80011a6:	e006      	b.n	80011b6 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 80011a8:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <Paint_NewImage+0x90>)
 80011aa:	88bb      	ldrh	r3, [r7, #4]
 80011ac:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <Paint_NewImage+0x90>)
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	80d3      	strh	r3, [r2, #6]
    }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002ac 	.word	0x200002ac
 80011c4:	0800a4c8 	.word	0x0800a4c8

080011c8 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 80011d0:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <Paint_SetClearFuntion+0x1c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002c8 	.word	0x200002c8

080011e8 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <Paint_SetDisplayFuntion+0x1c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200002c4 	.word	0x200002c4

08001208 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
 8001212:	460b      	mov	r3, r1
 8001214:	80bb      	strh	r3, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800121a:	4b4f      	ldr	r3, [pc, #316]	; (8001358 <Paint_SetPixel+0x150>)
 800121c:	889b      	ldrh	r3, [r3, #4]
 800121e:	b29b      	uxth	r3, r3
 8001220:	88fa      	ldrh	r2, [r7, #6]
 8001222:	429a      	cmp	r2, r3
 8001224:	f200 808d 	bhi.w	8001342 <Paint_SetPixel+0x13a>
 8001228:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <Paint_SetPixel+0x150>)
 800122a:	88db      	ldrh	r3, [r3, #6]
 800122c:	b29b      	uxth	r3, r3
 800122e:	88ba      	ldrh	r2, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	f200 8086 	bhi.w	8001342 <Paint_SetPixel+0x13a>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <Paint_SetPixel+0x150>)
 8001238:	89db      	ldrh	r3, [r3, #14]
 800123a:	b29b      	uxth	r3, r3
 800123c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001240:	d02c      	beq.n	800129c <Paint_SetPixel+0x94>
 8001242:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001246:	dc7e      	bgt.n	8001346 <Paint_SetPixel+0x13e>
 8001248:	2bb4      	cmp	r3, #180	; 0xb4
 800124a:	d016      	beq.n	800127a <Paint_SetPixel+0x72>
 800124c:	2bb4      	cmp	r3, #180	; 0xb4
 800124e:	dc7a      	bgt.n	8001346 <Paint_SetPixel+0x13e>
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <Paint_SetPixel+0x52>
 8001254:	2b5a      	cmp	r3, #90	; 0x5a
 8001256:	d005      	beq.n	8001264 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8001258:	e075      	b.n	8001346 <Paint_SetPixel+0x13e>
        X = Xpoint;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	81bb      	strh	r3, [r7, #12]
        break;
 8001262:	e026      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8001264:	4b3c      	ldr	r3, [pc, #240]	; (8001358 <Paint_SetPixel+0x150>)
 8001266:	891b      	ldrh	r3, [r3, #8]
 8001268:	b29a      	uxth	r2, r3
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	81bb      	strh	r3, [r7, #12]
        break;
 8001278:	e01b      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 800127a:	4b37      	ldr	r3, [pc, #220]	; (8001358 <Paint_SetPixel+0x150>)
 800127c:	891b      	ldrh	r3, [r3, #8]
 800127e:	b29a      	uxth	r2, r3
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800128a:	4b33      	ldr	r3, [pc, #204]	; (8001358 <Paint_SetPixel+0x150>)
 800128c:	895b      	ldrh	r3, [r3, #10]
 800128e:	b29a      	uxth	r2, r3
 8001290:	88bb      	ldrh	r3, [r7, #4]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	81bb      	strh	r3, [r7, #12]
        break;
 800129a:	e00a      	b.n	80012b2 <Paint_SetPixel+0xaa>
        X = Ypoint;
 800129c:	88bb      	ldrh	r3, [r7, #4]
 800129e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <Paint_SetPixel+0x150>)
 80012a2:	895b      	ldrh	r3, [r3, #10]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	3b01      	subs	r3, #1
 80012ae:	81bb      	strh	r3, [r7, #12]
        break;
 80012b0:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80012b2:	4b29      	ldr	r3, [pc, #164]	; (8001358 <Paint_SetPixel+0x150>)
 80012b4:	8a1b      	ldrh	r3, [r3, #16]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d846      	bhi.n	800134a <Paint_SetPixel+0x142>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <Paint_SetPixel+0xbc>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	0800131b 	.word	0x0800131b
 80012c8:	080012d5 	.word	0x080012d5
 80012cc:	080012e7 	.word	0x080012e7
 80012d0:	080012f9 	.word	0x080012f9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80012d4:	4b20      	ldr	r3, [pc, #128]	; (8001358 <Paint_SetPixel+0x150>)
 80012d6:	891b      	ldrh	r3, [r3, #8]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	89fb      	ldrh	r3, [r7, #14]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3b01      	subs	r3, #1
 80012e2:	81fb      	strh	r3, [r7, #14]
        break;
 80012e4:	e01a      	b.n	800131c <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <Paint_SetPixel+0x150>)
 80012e8:	895b      	ldrh	r3, [r3, #10]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	89bb      	ldrh	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	81bb      	strh	r3, [r7, #12]
        break;
 80012f6:	e011      	b.n	800131c <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <Paint_SetPixel+0x150>)
 80012fa:	891b      	ldrh	r3, [r3, #8]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	89fb      	ldrh	r3, [r7, #14]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <Paint_SetPixel+0x150>)
 800130a:	895b      	ldrh	r3, [r3, #10]
 800130c:	b29a      	uxth	r2, r3
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	81bb      	strh	r3, [r7, #12]
        break;
 8001318:	e000      	b.n	800131c <Paint_SetPixel+0x114>
        break;
 800131a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <Paint_SetPixel+0x150>)
 800131e:	891b      	ldrh	r3, [r3, #8]
 8001320:	b29b      	uxth	r3, r3
 8001322:	89fa      	ldrh	r2, [r7, #14]
 8001324:	429a      	cmp	r2, r3
 8001326:	d812      	bhi.n	800134e <Paint_SetPixel+0x146>
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <Paint_SetPixel+0x150>)
 800132a:	895b      	ldrh	r3, [r3, #10]
 800132c:	b29b      	uxth	r3, r3
 800132e:	89ba      	ldrh	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d80c      	bhi.n	800134e <Paint_SetPixel+0x146>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <Paint_SetPixel+0x154>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	887a      	ldrh	r2, [r7, #2]
 800133a:	89b9      	ldrh	r1, [r7, #12]
 800133c:	89f8      	ldrh	r0, [r7, #14]
 800133e:	4798      	blx	r3
 8001340:	e006      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 8001342:	bf00      	nop
 8001344:	e004      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 8001346:	bf00      	nop
 8001348:	e002      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 800134a:	bf00      	nop
 800134c:	e000      	b.n	8001350 <Paint_SetPixel+0x148>
        return;
 800134e:	bf00      	nop
}
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200002ac 	.word	0x200002ac
 800135c:	200002c4 	.word	0x200002c4

08001360 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	4611      	mov	r1, r2
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	80fb      	strh	r3, [r7, #6]
 8001372:	4603      	mov	r3, r0
 8001374:	80bb      	strh	r3, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
 800137a:	4613      	mov	r3, r2
 800137c:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++) {
 800137e:	88bb      	ldrh	r3, [r7, #4]
 8001380:	81bb      	strh	r3, [r7, #12]
 8001382:	e012      	b.n	80013aa <Paint_ClearWindows+0x4a>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	81fb      	strh	r3, [r7, #14]
 8001388:	e008      	b.n	800139c <Paint_ClearWindows+0x3c>
            Paint_SetPixel(X, Y, Color);
 800138a:	8c3a      	ldrh	r2, [r7, #32]
 800138c:	89b9      	ldrh	r1, [r7, #12]
 800138e:	89fb      	ldrh	r3, [r7, #14]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff39 	bl	8001208 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++) {//8 pixel =  1 byte
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	3301      	adds	r3, #1
 800139a:	81fb      	strh	r3, [r7, #14]
 800139c:	89fa      	ldrh	r2, [r7, #14]
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d3f2      	bcc.n	800138a <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++) {
 80013a4:	89bb      	ldrh	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	81bb      	strh	r3, [r7, #12]
 80013aa:	89ba      	ldrh	r2, [r7, #12]
 80013ac:	883b      	ldrh	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3e8      	bcc.n	8001384 <Paint_ClearWindows+0x24>
        }
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}

080013bc <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	4611      	mov	r1, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	4623      	mov	r3, r4
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	4603      	mov	r3, r0
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]
 80013d6:	4613      	mov	r3, r2
 80013d8:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80013da:	4b43      	ldr	r3, [pc, #268]	; (80014e8 <Paint_DrawPoint+0x12c>)
 80013dc:	889b      	ldrh	r3, [r3, #4]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	88fa      	ldrh	r2, [r7, #6]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d87b      	bhi.n	80014de <Paint_DrawPoint+0x122>
 80013e6:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <Paint_DrawPoint+0x12c>)
 80013e8:	88db      	ldrh	r3, [r3, #6]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	88ba      	ldrh	r2, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d875      	bhi.n	80014de <Paint_DrawPoint+0x122>
//        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
        return;
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND) {
 80013f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d144      	bne.n	8001484 <Paint_DrawPoint+0xc8>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 80013fa:	2300      	movs	r3, #0
 80013fc:	81fb      	strh	r3, [r7, #14]
 80013fe:	e039      	b.n	8001474 <Paint_DrawPoint+0xb8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 8001400:	2300      	movs	r3, #0
 8001402:	81bb      	strh	r3, [r7, #12]
 8001404:	e029      	b.n	800145a <Paint_DrawPoint+0x9e>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140c:	441a      	add	r2, r3
 800140e:	787b      	ldrb	r3, [r7, #1]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	db28      	blt.n	8001468 <Paint_DrawPoint+0xac>
 8001416:	88ba      	ldrh	r2, [r7, #4]
 8001418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141c:	441a      	add	r2, r3
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	db20      	blt.n	8001468 <Paint_DrawPoint+0xac>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8001426:	89fa      	ldrh	r2, [r7, #14]
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4413      	add	r3, r2
 800142c:	b29a      	uxth	r2, r3
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	b29b      	uxth	r3, r3
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	b298      	uxth	r0, r3
 8001436:	89ba      	ldrh	r2, [r7, #12]
 8001438:	88bb      	ldrh	r3, [r7, #4]
 800143a:	4413      	add	r3, r2
 800143c:	b29a      	uxth	r2, r3
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	b29b      	uxth	r3, r3
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	887a      	ldrh	r2, [r7, #2]
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fedd 	bl	8001208 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800144e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001452:	b29b      	uxth	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	81bb      	strh	r3, [r7, #12]
 800145a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800145e:	787b      	ldrb	r3, [r7, #1]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	429a      	cmp	r2, r3
 8001466:	dbce      	blt.n	8001406 <Paint_DrawPoint+0x4a>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++) {
 8001468:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800146c:	b29b      	uxth	r3, r3
 800146e:	3301      	adds	r3, #1
 8001470:	b29b      	uxth	r3, r3
 8001472:	81fb      	strh	r3, [r7, #14]
 8001474:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	3b01      	subs	r3, #1
 800147e:	429a      	cmp	r2, r3
 8001480:	dbbe      	blt.n	8001400 <Paint_DrawPoint+0x44>
 8001482:	e02d      	b.n	80014e0 <Paint_DrawPoint+0x124>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 8001484:	2300      	movs	r3, #0
 8001486:	81fb      	strh	r3, [r7, #14]
 8001488:	e023      	b.n	80014d2 <Paint_DrawPoint+0x116>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800148a:	2300      	movs	r3, #0
 800148c:	81bb      	strh	r3, [r7, #12]
 800148e:	e015      	b.n	80014bc <Paint_DrawPoint+0x100>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 8001490:	89fa      	ldrh	r2, [r7, #14]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4413      	add	r3, r2
 8001496:	b29b      	uxth	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b298      	uxth	r0, r3
 800149c:	89ba      	ldrh	r2, [r7, #12]
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	3b01      	subs	r3, #1
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	887a      	ldrh	r2, [r7, #2]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff feac 	bl	8001208 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 80014b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	3301      	adds	r3, #1
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	81bb      	strh	r3, [r7, #12]
 80014bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbe4      	blt.n	8001490 <Paint_DrawPoint+0xd4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 80014c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	81fb      	strh	r3, [r7, #14]
 80014d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d6:	787b      	ldrb	r3, [r7, #1]
 80014d8:	429a      	cmp	r2, r3
 80014da:	dbd6      	blt.n	800148a <Paint_DrawPoint+0xce>
 80014dc:	e000      	b.n	80014e0 <Paint_DrawPoint+0x124>
        return;
 80014de:	bf00      	nop
            }
        }
    }
}
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002ac 	.word	0x200002ac

080014ec <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 80014ec:	b590      	push	{r4, r7, lr}
 80014ee:	b08d      	sub	sp, #52	; 0x34
 80014f0:	af02      	add	r7, sp, #8
 80014f2:	4604      	mov	r4, r0
 80014f4:	4608      	mov	r0, r1
 80014f6:	4611      	mov	r1, r2
 80014f8:	461a      	mov	r2, r3
 80014fa:	4623      	mov	r3, r4
 80014fc:	80fb      	strh	r3, [r7, #6]
 80014fe:	4603      	mov	r3, r0
 8001500:	80bb      	strh	r3, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
 8001506:	4613      	mov	r3, r2
 8001508:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <Paint_DrawLine+0x154>)
 800150c:	889b      	ldrh	r3, [r3, #4]
 800150e:	b29b      	uxth	r3, r3
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	429a      	cmp	r2, r3
 8001514:	f200 808c 	bhi.w	8001630 <Paint_DrawLine+0x144>
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <Paint_DrawLine+0x154>)
 800151a:	88db      	ldrh	r3, [r3, #6]
 800151c:	b29b      	uxth	r3, r3
 800151e:	88ba      	ldrh	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	f200 8085 	bhi.w	8001630 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <Paint_DrawLine+0x154>)
 8001528:	889b      	ldrh	r3, [r3, #4]
 800152a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	429a      	cmp	r2, r3
 8001530:	d87e      	bhi.n	8001630 <Paint_DrawLine+0x144>
        Xend > Paint.Width || Yend > Paint.Height) {
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <Paint_DrawLine+0x154>)
 8001534:	88db      	ldrh	r3, [r3, #6]
 8001536:	b29b      	uxth	r3, r3
 8001538:	883a      	ldrh	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d878      	bhi.n	8001630 <Paint_DrawLine+0x144>
//        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
        return;
    }

    UWORD Xpoint = Xstart;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	bfb8      	it	lt
 8001550:	425b      	neglt	r3, r3
 8001552:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 8001554:	883a      	ldrh	r2, [r7, #0]
 8001556:	88bb      	ldrh	r3, [r7, #4]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	bfb8      	it	lt
 800155e:	425b      	neglt	r3, r3
 8001560:	425b      	negs	r3, r3
 8001562:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 8001564:	88fa      	ldrh	r2, [r7, #6]
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	429a      	cmp	r2, r3
 800156a:	d201      	bcs.n	8001570 <Paint_DrawLine+0x84>
 800156c:	2301      	movs	r3, #1
 800156e:	e001      	b.n	8001574 <Paint_DrawLine+0x88>
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 8001576:	88ba      	ldrh	r2, [r7, #4]
 8001578:	883b      	ldrh	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d201      	bcs.n	8001582 <Paint_DrawLine+0x96>
 800157e:	2301      	movs	r3, #1
 8001580:	e001      	b.n	8001586 <Paint_DrawLine+0x9a>
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
 8001586:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 8001594:	7ffb      	ldrb	r3, [r7, #31]
 8001596:	3301      	adds	r3, #1
 8001598:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800159a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d118      	bne.n	80015d4 <Paint_DrawLine+0xe8>
 80015a2:	7ffa      	ldrb	r2, [r7, #31]
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <Paint_DrawLine+0x158>)
 80015a6:	fba3 1302 	umull	r1, r3, r3, r2
 80015aa:	0859      	lsrs	r1, r3, #1
 80015ac:	460b      	mov	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	440b      	add	r3, r1
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <Paint_DrawLine+0xe8>
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 80015ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015be:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015c0:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80015c2:	2201      	movs	r2, #1
 80015c4:	9200      	str	r2, [sp, #0]
 80015c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ca:	f7ff fef7 	bl	80013bc <Paint_DrawPoint>
            Dotted_Len = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	77fb      	strb	r3, [r7, #31]
 80015d2:	e008      	b.n	80015e6 <Paint_DrawLine+0xfa>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 80015d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80015da:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80015dc:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80015de:	2401      	movs	r4, #1
 80015e0:	9400      	str	r4, [sp, #0]
 80015e2:	f7ff feeb 	bl	80013bc <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dc0c      	bgt.n	800160a <Paint_DrawLine+0x11e>
            if (Xpoint == Xend)
 80015f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d01d      	beq.n	8001634 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	b29a      	uxth	r2, r3
 8001604:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001606:	4413      	add	r3, r2
 8001608:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbbf      	blt.n	8001594 <Paint_DrawLine+0xa8>
            if (Ypoint == Yend)
 8001614:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001616:	883b      	ldrh	r3, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d00d      	beq.n	8001638 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	4413      	add	r3, r2
 8001622:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	b29a      	uxth	r2, r3
 8001628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800162a:	4413      	add	r3, r2
 800162c:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800162e:	e7b1      	b.n	8001594 <Paint_DrawLine+0xa8>
        return;
 8001630:	bf00      	nop
 8001632:	e002      	b.n	800163a <Paint_DrawLine+0x14e>
                break;
 8001634:	bf00      	nop
 8001636:	e000      	b.n	800163a <Paint_DrawLine+0x14e>
                break;
 8001638:	bf00      	nop
        }
    }
}
 800163a:	372c      	adds	r7, #44	; 0x2c
 800163c:	46bd      	mov	sp, r7
 800163e:	bd90      	pop	{r4, r7, pc}
 8001640:	200002ac 	.word	0x200002ac
 8001644:	aaaaaaab 	.word	0xaaaaaaab

08001648 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4603      	mov	r3, r0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	460b      	mov	r3, r1
 8001656:	81bb      	strh	r3, [r7, #12]
 8001658:	4613      	mov	r3, r2
 800165a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800165c:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <Paint_DrawChar+0x150>)
 800165e:	889b      	ldrh	r3, [r3, #4]
 8001660:	b29b      	uxth	r3, r3
 8001662:	89fa      	ldrh	r2, [r7, #14]
 8001664:	429a      	cmp	r2, r3
 8001666:	f200 8092 	bhi.w	800178e <Paint_DrawChar+0x146>
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <Paint_DrawChar+0x150>)
 800166c:	88db      	ldrh	r3, [r3, #6]
 800166e:	b29b      	uxth	r3, r3
 8001670:	89ba      	ldrh	r2, [r7, #12]
 8001672:	429a      	cmp	r2, r3
 8001674:	f200 808b 	bhi.w	800178e <Paint_DrawChar+0x146>
//        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	3b20      	subs	r3, #32
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	88d2      	ldrh	r2, [r2, #6]
 8001680:	fb02 f303 	mul.w	r3, r2, r3
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	8892      	ldrh	r2, [r2, #4]
 8001688:	08d2      	lsrs	r2, r2, #3
 800168a:	b292      	uxth	r2, r2
 800168c:	4611      	mov	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	8892      	ldrh	r2, [r2, #4]
 8001692:	f002 0207 	and.w	r2, r2, #7
 8001696:	b292      	uxth	r2, r2
 8001698:	2a00      	cmp	r2, #0
 800169a:	bf14      	ite	ne
 800169c:	2201      	movne	r2, #1
 800169e:	2200      	moveq	r2, #0
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440a      	add	r2, r1
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	4413      	add	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	83fb      	strh	r3, [r7, #30]
 80016b8:	e063      	b.n	8001782 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	83bb      	strh	r3, [r7, #28]
 80016be:	e04e      	b.n	800175e <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80016c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d118      	bne.n	80016fc <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4619      	mov	r1, r3
 80016d0:	8bbb      	ldrh	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	fa42 f303 	asr.w	r3, r2, r3
 80016dc:	400b      	ands	r3, r1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d031      	beq.n	8001746 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80016e2:	89fa      	ldrh	r2, [r7, #14]
 80016e4:	8bbb      	ldrh	r3, [r7, #28]
 80016e6:	4413      	add	r3, r2
 80016e8:	b298      	uxth	r0, r3
 80016ea:	89ba      	ldrh	r2, [r7, #12]
 80016ec:	8bfb      	ldrh	r3, [r7, #30]
 80016ee:	4413      	add	r3, r2
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fd87 	bl	8001208 <Paint_SetPixel>
 80016fa:	e024      	b.n	8001746 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	8bbb      	ldrh	r3, [r7, #28]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	fa42 f303 	asr.w	r3, r2, r3
 800170e:	400b      	ands	r3, r1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00c      	beq.n	800172e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001714:	89fa      	ldrh	r2, [r7, #14]
 8001716:	8bbb      	ldrh	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	b298      	uxth	r0, r3
 800171c:	89ba      	ldrh	r2, [r7, #12]
 800171e:	8bfb      	ldrh	r3, [r7, #30]
 8001720:	4413      	add	r3, r2
 8001722:	b29b      	uxth	r3, r3
 8001724:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fd6e 	bl	8001208 <Paint_SetPixel>
 800172c:	e00b      	b.n	8001746 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800172e:	89fa      	ldrh	r2, [r7, #14]
 8001730:	8bbb      	ldrh	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	b298      	uxth	r0, r3
 8001736:	89ba      	ldrh	r2, [r7, #12]
 8001738:	8bfb      	ldrh	r3, [r7, #30]
 800173a:	4413      	add	r3, r2
 800173c:	b29b      	uxth	r3, r3
 800173e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff fd61 	bl	8001208 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 8001746:	8bbb      	ldrh	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	b29b      	uxth	r3, r3
 800174e:	2b07      	cmp	r3, #7
 8001750:	d102      	bne.n	8001758 <Paint_DrawChar+0x110>
                ptr++;
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	3301      	adds	r3, #1
 8001756:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8001758:	8bbb      	ldrh	r3, [r7, #28]
 800175a:	3301      	adds	r3, #1
 800175c:	83bb      	strh	r3, [r7, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	889b      	ldrh	r3, [r3, #4]
 8001762:	8bba      	ldrh	r2, [r7, #28]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3ab      	bcc.n	80016c0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	889b      	ldrh	r3, [r3, #4]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <Paint_DrawChar+0x134>
            ptr++;
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	3301      	adds	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800177c:	8bfb      	ldrh	r3, [r7, #30]
 800177e:	3301      	adds	r3, #1
 8001780:	83fb      	strh	r3, [r7, #30]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	88db      	ldrh	r3, [r3, #6]
 8001786:	8bfa      	ldrh	r2, [r7, #30]
 8001788:	429a      	cmp	r2, r3
 800178a:	d396      	bcc.n	80016ba <Paint_DrawChar+0x72>
 800178c:	e000      	b.n	8001790 <Paint_DrawChar+0x148>
        return;
 800178e:	bf00      	nop
    }// Write all
}
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002ac 	.word	0x200002ac

0800179c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4603      	mov	r3, r0
 80017a8:	81fb      	strh	r3, [r7, #14]
 80017aa:	460b      	mov	r3, r1
 80017ac:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80017b2:	89bb      	ldrh	r3, [r7, #12]
 80017b4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017b8:	889b      	ldrh	r3, [r3, #4]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	89fa      	ldrh	r2, [r7, #14]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d83b      	bhi.n	800183a <Paint_DrawString_EN+0x9e>
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017c4:	88db      	ldrh	r3, [r3, #6]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	89ba      	ldrh	r2, [r7, #12]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d835      	bhi.n	800183a <Paint_DrawString_EN+0x9e>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 80017ce:	e02f      	b.n	8001830 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80017d0:	8afb      	ldrh	r3, [r7, #22]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	8892      	ldrh	r2, [r2, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017da:	8892      	ldrh	r2, [r2, #4]
 80017dc:	b292      	uxth	r2, r2
 80017de:	4293      	cmp	r3, r2
 80017e0:	dd06      	ble.n	80017f0 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	88da      	ldrh	r2, [r3, #6]
 80017ea:	8abb      	ldrh	r3, [r7, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80017f0:	8abb      	ldrh	r3, [r7, #20]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	88d2      	ldrh	r2, [r2, #6]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <Paint_DrawString_EN+0xa8>)
 80017fa:	88d2      	ldrh	r2, [r2, #6]
 80017fc:	b292      	uxth	r2, r2
 80017fe:	4293      	cmp	r3, r2
 8001800:	dd03      	ble.n	800180a <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8001806:	89bb      	ldrh	r3, [r7, #12]
 8001808:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	781a      	ldrb	r2, [r3, #0]
 800180e:	8ab9      	ldrh	r1, [r7, #20]
 8001810:	8af8      	ldrh	r0, [r7, #22]
 8001812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	8c3b      	ldrh	r3, [r7, #32]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f7ff ff14 	bl	8001648 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	889a      	ldrh	r2, [r3, #4]
 800182a:	8afb      	ldrh	r3, [r7, #22]
 800182c:	4413      	add	r3, r2
 800182e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1cb      	bne.n	80017d0 <Paint_DrawString_EN+0x34>
 8001838:	e000      	b.n	800183c <Paint_DrawString_EN+0xa0>
        return;
 800183a:	bf00      	nop
    }
}
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002ac 	.word	0x200002ac

08001848 <Paint_DrawImage>:
//
//}


void Paint_DrawImage(const uint16_t *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	4608      	mov	r0, r1
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	4603      	mov	r3, r0
 8001858:	817b      	strh	r3, [r7, #10]
 800185a:	460b      	mov	r3, r1
 800185c:	813b      	strh	r3, [r7, #8]
 800185e:	4613      	mov	r3, r2
 8001860:	80fb      	strh	r3, [r7, #6]
    int i,j;
    	for(i = 0; i < H_Image; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e025      	b.n	80018b4 <Paint_DrawImage+0x6c>
    		for(j = 0; j < W_Image; j++) {
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	e01b      	b.n	80018a6 <Paint_DrawImage+0x5e>
    			Paint_SetPixel(xStart + i, yStart + j, *(image + (i * W_Image + 1) + j));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	b29a      	uxth	r2, r3
 8001872:	897b      	ldrh	r3, [r7, #10]
 8001874:	4413      	add	r3, r2
 8001876:	b298      	uxth	r0, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	b29a      	uxth	r2, r3
 800187c:	893b      	ldrh	r3, [r7, #8]
 800187e:	4413      	add	r3, r2
 8001880:	b299      	uxth	r1, r3
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	461a      	mov	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	3301      	adds	r3, #1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4413      	add	r3, r2
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	f7ff fcb4 	bl	8001208 <Paint_SetPixel>
    		for(j = 0; j < W_Image; j++) {
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	3301      	adds	r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	dbdf      	blt.n	800186e <Paint_DrawImage+0x26>
    	for(i = 0; i < H_Image; i++) {
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	8c3b      	ldrh	r3, [r7, #32]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbd5      	blt.n	8001868 <Paint_DrawImage+0x20>
    		}
		}
}
 80018bc:	bf00      	nop
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 80018cc:	2201      	movs	r2, #1
 80018ce:	2140      	movs	r1, #64	; 0x40
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <LCD_1IN8_Reset+0x38>)
 80018d2:	f002 fcd1 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80018d6:	2064      	movs	r0, #100	; 0x64
 80018d8:	f002 fa0c 	bl	8003cf4 <HAL_Delay>
    LCD_1IN8_RST_0;
 80018dc:	2200      	movs	r2, #0
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <LCD_1IN8_Reset+0x38>)
 80018e2:	f002 fcc9 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80018e6:	2064      	movs	r0, #100	; 0x64
 80018e8:	f002 fa04 	bl	8003cf4 <HAL_Delay>
    LCD_1IN8_RST_1;
 80018ec:	2201      	movs	r2, #1
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <LCD_1IN8_Reset+0x38>)
 80018f2:	f002 fcc1 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80018f6:	2064      	movs	r0, #100	; 0x64
 80018f8:	f002 f9fc 	bl	8003cf4 <HAL_Delay>
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020000 	.word	0x40020000

08001904 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800190e:	2200      	movs	r2, #0
 8001910:	2110      	movs	r1, #16
 8001912:	4808      	ldr	r0, [pc, #32]	; (8001934 <LCD_1IN8_WriteReg+0x30>)
 8001914:	f002 fcb0 	bl	8004278 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8001918:	2200      	movs	r2, #0
 800191a:	2108      	movs	r1, #8
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <LCD_1IN8_WriteReg+0x30>)
 800191e:	f002 fcab 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fbdb 	bl	80010e0 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020000 	.word	0x40020000

08001938 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 8001942:	2201      	movs	r2, #1
 8001944:	2110      	movs	r1, #16
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <LCD_1IN8_WriteData_8Bit+0x38>)
 8001948:	f002 fc96 	bl	8004278 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800194c:	2200      	movs	r2, #0
 800194e:	2108      	movs	r1, #8
 8001950:	4807      	ldr	r0, [pc, #28]	; (8001970 <LCD_1IN8_WriteData_8Bit+0x38>)
 8001952:	f002 fc91 	bl	8004278 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbc1 	bl	80010e0 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800195e:	2201      	movs	r2, #1
 8001960:	2108      	movs	r1, #8
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <LCD_1IN8_WriteData_8Bit+0x38>)
 8001964:	f002 fc88 	bl	8004278 <HAL_GPIO_WritePin>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40020000 	.word	0x40020000

08001974 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

static void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 8001980:	2201      	movs	r2, #1
 8001982:	2110      	movs	r1, #16
 8001984:	480e      	ldr	r0, [pc, #56]	; (80019c0 <LCD_1IN8_WriteData_NLen16Bit+0x4c>)
 8001986:	f002 fc77 	bl	8004278 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	e00e      	b.n	80019ae <LCD_1IN8_WriteData_NLen16Bit+0x3a>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fba1 	bl	80010e0 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fb9c 	bl	80010e0 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d3ec      	bcc.n	8001990 <LCD_1IN8_WriteData_NLen16Bit+0x1c>
    }
    //LCD_1IN8_CS_1;
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40020000 	.word	0x40020000

080019c4 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 80019c8:	20b1      	movs	r0, #177	; 0xb1
 80019ca:	f7ff ff9b 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff ffb2 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80019d4:	202c      	movs	r0, #44	; 0x2c
 80019d6:	f7ff ffaf 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80019da:	202d      	movs	r0, #45	; 0x2d
 80019dc:	f7ff ffac 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 80019e0:	20b2      	movs	r0, #178	; 0xb2
 80019e2:	f7ff ff8f 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80019e6:	2001      	movs	r0, #1
 80019e8:	f7ff ffa6 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80019ec:	202c      	movs	r0, #44	; 0x2c
 80019ee:	f7ff ffa3 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80019f2:	202d      	movs	r0, #45	; 0x2d
 80019f4:	f7ff ffa0 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 80019f8:	20b3      	movs	r0, #179	; 0xb3
 80019fa:	f7ff ff83 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ff9a 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001a04:	202c      	movs	r0, #44	; 0x2c
 8001a06:	f7ff ff97 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001a0a:	202d      	movs	r0, #45	; 0x2d
 8001a0c:	f7ff ff94 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f7ff ff91 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001a16:	202c      	movs	r0, #44	; 0x2c
 8001a18:	f7ff ff8e 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001a1c:	202d      	movs	r0, #45	; 0x2d
 8001a1e:	f7ff ff8b 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 8001a22:	20b4      	movs	r0, #180	; 0xb4
 8001a24:	f7ff ff6e 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001a28:	2007      	movs	r0, #7
 8001a2a:	f7ff ff85 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 8001a2e:	20c0      	movs	r0, #192	; 0xc0
 8001a30:	f7ff ff68 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 8001a34:	20a2      	movs	r0, #162	; 0xa2
 8001a36:	f7ff ff7f 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f7ff ff7c 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 8001a40:	2084      	movs	r0, #132	; 0x84
 8001a42:	f7ff ff79 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 8001a46:	20c1      	movs	r0, #193	; 0xc1
 8001a48:	f7ff ff5c 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 8001a4c:	20c5      	movs	r0, #197	; 0xc5
 8001a4e:	f7ff ff73 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 8001a52:	20c2      	movs	r0, #194	; 0xc2
 8001a54:	f7ff ff56 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 8001a58:	200a      	movs	r0, #10
 8001a5a:	f7ff ff6d 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff ff6a 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 8001a64:	20c3      	movs	r0, #195	; 0xc3
 8001a66:	f7ff ff4d 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8001a6a:	208a      	movs	r0, #138	; 0x8a
 8001a6c:	f7ff ff64 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 8001a70:	202a      	movs	r0, #42	; 0x2a
 8001a72:	f7ff ff61 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 8001a76:	20c4      	movs	r0, #196	; 0xc4
 8001a78:	f7ff ff44 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8001a7c:	208a      	movs	r0, #138	; 0x8a
 8001a7e:	f7ff ff5b 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 8001a82:	20ee      	movs	r0, #238	; 0xee
 8001a84:	f7ff ff58 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8001a88:	20c5      	movs	r0, #197	; 0xc5
 8001a8a:	f7ff ff3b 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 8001a8e:	200e      	movs	r0, #14
 8001a90:	f7ff ff52 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8001a94:	20e0      	movs	r0, #224	; 0xe0
 8001a96:	f7ff ff35 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001a9a:	200f      	movs	r0, #15
 8001a9c:	f7ff ff4c 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 8001aa0:	201a      	movs	r0, #26
 8001aa2:	f7ff ff49 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f7ff ff46 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 8001aac:	2018      	movs	r0, #24
 8001aae:	f7ff ff43 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 8001ab2:	202f      	movs	r0, #47	; 0x2f
 8001ab4:	f7ff ff40 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 8001ab8:	2028      	movs	r0, #40	; 0x28
 8001aba:	f7ff ff3d 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 8001abe:	2020      	movs	r0, #32
 8001ac0:	f7ff ff3a 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 8001ac4:	2022      	movs	r0, #34	; 0x22
 8001ac6:	f7ff ff37 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 8001aca:	201f      	movs	r0, #31
 8001acc:	f7ff ff34 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8001ad0:	201b      	movs	r0, #27
 8001ad2:	f7ff ff31 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 8001ad6:	2023      	movs	r0, #35	; 0x23
 8001ad8:	f7ff ff2e 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 8001adc:	2037      	movs	r0, #55	; 0x37
 8001ade:	f7ff ff2b 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff ff28 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001ae8:	2007      	movs	r0, #7
 8001aea:	f7ff ff25 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f7ff ff22 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001af4:	2010      	movs	r0, #16
 8001af6:	f7ff ff1f 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 8001afa:	20e1      	movs	r0, #225	; 0xe1
 8001afc:	f7ff ff02 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001b00:	200f      	movs	r0, #15
 8001b02:	f7ff ff19 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8001b06:	201b      	movs	r0, #27
 8001b08:	f7ff ff16 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001b0c:	200f      	movs	r0, #15
 8001b0e:	f7ff ff13 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 8001b12:	2017      	movs	r0, #23
 8001b14:	f7ff ff10 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8001b18:	2033      	movs	r0, #51	; 0x33
 8001b1a:	f7ff ff0d 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 8001b1e:	202c      	movs	r0, #44	; 0x2c
 8001b20:	f7ff ff0a 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8001b24:	2029      	movs	r0, #41	; 0x29
 8001b26:	f7ff ff07 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 8001b2a:	202e      	movs	r0, #46	; 0x2e
 8001b2c:	f7ff ff04 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001b30:	2030      	movs	r0, #48	; 0x30
 8001b32:	f7ff ff01 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001b36:	2030      	movs	r0, #48	; 0x30
 8001b38:	f7ff fefe 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 8001b3c:	2039      	movs	r0, #57	; 0x39
 8001b3e:	f7ff fefb 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 8001b42:	203f      	movs	r0, #63	; 0x3f
 8001b44:	f7ff fef8 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fef5 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001b4e:	2007      	movs	r0, #7
 8001b50:	f7ff fef2 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f7ff feef 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001b5a:	2010      	movs	r0, #16
 8001b5c:	f7ff feec 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 8001b60:	20f0      	movs	r0, #240	; 0xf0
 8001b62:	f7ff fecf 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff fee6 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 8001b6c:	20f6      	movs	r0, #246	; 0xf6
 8001b6e:	f7ff fec9 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff fee0 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8001b78:	203a      	movs	r0, #58	; 0x3a
 8001b7a:	f7ff fec3 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f7ff feda 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 8001b92:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d008      	beq.n	8001bb0 <LCD_1IN8_SetGramScanWay+0x28>
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <LCD_1IN8_SetGramScanWay+0x28>
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d002      	beq.n	8001bb0 <LCD_1IN8_SetGramScanWay+0x28>
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d10c      	bne.n	8001bca <LCD_1IN8_SetGramScanWay+0x42>
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 8001bb0:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;		
 8001bb6:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bb8:	22a0      	movs	r2, #160	; 0xa0
 8001bba:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 8001bbc:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	811a      	strh	r2, [r3, #8]
 8001bc8:	e00b      	b.n	8001be2 <LCD_1IN8_SetGramScanWay+0x5a>
	}else{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bcc:	22a0      	movs	r2, #160	; 0xa0
 8001bce:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001bde:	2202      	movs	r2, #2
 8001be0:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 8001be2:	2300      	movs	r3, #0
 8001be4:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b07      	cmp	r3, #7
 8001bea:	d82b      	bhi.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <LCD_1IN8_SetGramScanWay+0x6c>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c15 	.word	0x08001c15
 8001bf8:	08001c1b 	.word	0x08001c1b
 8001bfc:	08001c21 	.word	0x08001c21
 8001c00:	08001c27 	.word	0x08001c27
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	08001c33 	.word	0x08001c33
 8001c0c:	08001c39 	.word	0x08001c39
 8001c10:	08001c3f 	.word	0x08001c3f
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8001c14:	2300      	movs	r3, #0
 8001c16:	81fb      	strh	r3, [r7, #14]
        break;
 8001c18:	e014      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	81fb      	strh	r3, [r7, #14]
        break;
 8001c1e:	e011      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	81fb      	strh	r3, [r7, #14]
        break;
 8001c24:	e00e      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 8001c26:	23c0      	movs	r3, #192	; 0xc0
 8001c28:	81fb      	strh	r3, [r7, #14]
        break;
 8001c2a:	e00b      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	81fb      	strh	r3, [r7, #14]
        break;
 8001c30:	e008      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8001c32:	2360      	movs	r3, #96	; 0x60
 8001c34:	81fb      	strh	r3, [r7, #14]
        break;
 8001c36:	e005      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8001c38:	23a0      	movs	r3, #160	; 0xa0
 8001c3a:	81fb      	strh	r3, [r7, #14]
        break;
 8001c3c:	e002      	b.n	8001c44 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8001c3e:	23e0      	movs	r3, #224	; 0xe0
 8001c40:	81fb      	strh	r3, [r7, #14]
        break;
 8001c42:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8001c44:	2036      	movs	r0, #54	; 0x36
 8001c46:	f7ff fe5d 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8001c4a:	89fb      	ldrh	r3, [r7, #14]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f023 0308 	bic.w	r3, r3, #8
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fe6f 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200002cc 	.word	0x200002cc

08001c68 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 8001c72:	f7ff fe29 	bl	80018c8 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 8001c76:	f7ff fea5 	bl	80019c4 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff83 	bl	8001b88 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 8001c82:	20c8      	movs	r0, #200	; 0xc8
 8001c84:	f002 f836 	bl	8003cf4 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8001c88:	2011      	movs	r0, #17
 8001c8a:	f7ff fe3b 	bl	8001904 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 8001c8e:	2078      	movs	r0, #120	; 0x78
 8001c90:	f002 f830 	bl	8003cf4 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8001c94:	2029      	movs	r0, #41	; 0x29
 8001c96:	f7ff fe35 	bl	8001904 <LCD_1IN8_WriteReg>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4604      	mov	r4, r0
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	80fb      	strh	r3, [r7, #6]
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	80bb      	strh	r3, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 8001cc2:	202a      	movs	r0, #42	; 0x2a
 8001cc4:	f7ff fe1e 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fe35 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <LCD_1IN8_SetWindows+0xa8>)
 8001cd4:	88db      	ldrh	r3, [r3, #6]
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4413      	add	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe2b 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f7ff fe28 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <LCD_1IN8_SetWindows+0xa8>)
 8001cee:	88db      	ldrh	r3, [r3, #6]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	4413      	add	r3, r2
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fe1c 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8001d00:	202b      	movs	r0, #43	; 0x2b
 8001d02:	f7ff fdff 	bl	8001904 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff fe16 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <LCD_1IN8_SetWindows+0xa8>)
 8001d12:	891b      	ldrh	r3, [r3, #8]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fe0c 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7ff fe09 	bl	8001938 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001d26:	883b      	ldrh	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <LCD_1IN8_SetWindows+0xa8>)
 8001d2c:	891b      	ldrh	r3, [r3, #8]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fdfd 	bl	8001938 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8001d3e:	202c      	movs	r0, #44	; 0x2c
 8001d40:	f7ff fde0 	bl	8001904 <LCD_1IN8_WriteReg>

}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	200002cc 	.word	0x200002cc

08001d50 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	460a      	mov	r2, r1
 8001d5a:	80fb      	strh	r3, [r7, #6]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8001d60:	88bb      	ldrh	r3, [r7, #4]
 8001d62:	88fa      	ldrh	r2, [r7, #6]
 8001d64:	88b9      	ldrh	r1, [r7, #4]
 8001d66:	88f8      	ldrh	r0, [r7, #6]
 8001d68:	f7ff ff9c 	bl	8001ca4 <LCD_1IN8_SetWindows>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	80bb      	strh	r3, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8001d86:	88bb      	ldrh	r3, [r7, #4]
 8001d88:	887a      	ldrh	r2, [r7, #2]
 8001d8a:	fb03 f202 	mul.w	r2, r3, r2
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fdee 	bl	8001974 <LCD_1IN8_WriteData_NLen16Bit>
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]
 8001daa:	460b      	mov	r3, r1
 8001dac:	80bb      	strh	r3, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) ) {
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <LCD_1IN8_DrawPaint+0x48>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	88fa      	ldrh	r2, [r7, #6]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d810      	bhi.n	8001dde <LCD_1IN8_DrawPaint+0x3e>
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	; (8001de8 <LCD_1IN8_DrawPaint+0x48>)
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	88ba      	ldrh	r2, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d80b      	bhi.n	8001dde <LCD_1IN8_DrawPaint+0x3e>
        LCD_1IN8_SetCursor (Xpoint, Ypoint);
 8001dc6:	88ba      	ldrh	r2, [r7, #4]
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ffbf 	bl	8001d50 <LCD_1IN8_SetCursor>
        LCD_1IN8_SetColor ( Color , 1 , 1);
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ffcb 	bl	8001d74 <LCD_1IN8_SetColor>
    }
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200002cc 	.word	0x200002cc

08001dec <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, LCD_1IN8_WIDTH, LCD_1IN8_HEIGHT);
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	22a0      	movs	r2, #160	; 0xa0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff ff51 	bl	8001ca4 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8001e02:	2201      	movs	r2, #1
 8001e04:	2110      	movs	r1, #16
 8001e06:	4813      	ldr	r0, [pc, #76]	; (8001e54 <LCD_1IN8_Clear+0x68>)
 8001e08:	f002 fa36 	bl	8004278 <HAL_GPIO_WritePin>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	81fb      	strh	r3, [r7, #14]
 8001e10:	e017      	b.n	8001e42 <LCD_1IN8_Clear+0x56>
	{
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001e12:	2300      	movs	r3, #0
 8001e14:	81bb      	strh	r3, [r7, #12]
 8001e16:	e00e      	b.n	8001e36 <LCD_1IN8_Clear+0x4a>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f95f 	bl	80010e0 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff f958 	bl	80010e0 <DEV_SPI_WRite>
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001e30:	89bb      	ldrh	r3, [r7, #12]
 8001e32:	3301      	adds	r3, #1
 8001e34:	81bb      	strh	r3, [r7, #12]
 8001e36:	89bb      	ldrh	r3, [r7, #12]
 8001e38:	2b9f      	cmp	r3, #159	; 0x9f
 8001e3a:	d9ed      	bls.n	8001e18 <LCD_1IN8_Clear+0x2c>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	81fb      	strh	r3, [r7, #14]
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	2b7f      	cmp	r3, #127	; 0x7f
 8001e46:	d9e4      	bls.n	8001e12 <LCD_1IN8_Clear+0x26>
			
		}
	}
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020000 	.word	0x40020000

08001e58 <LCD_updt_temps>:
char set_preh_time_BUFFER[]=	{' ',' ','1','.','0','6','\0'};

/*
 *  Update measured temperatures
 */
void LCD_updt_temps(volatile float *cur_plt_tmp, volatile float *cur_amb_tmp){
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	LCD_data.CUR_PLT_TMP= *cur_plt_tmp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <LCD_updt_temps+0x28>)
 8001e68:	6153      	str	r3, [r2, #20]
	LCD_data.CUR_AMB_TMP= *cur_amb_tmp;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <LCD_updt_temps+0x28>)
 8001e70:	6193      	str	r3, [r2, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200002d8 	.word	0x200002d8

08001e84 <LCD_usr_inputs>:

/*
 *  Update configurable variables
 */
void LCD_usr_inputs(volatile float* set_preheat_tmp, volatile float* set_preheat_tim,
					volatile float* set_reflow_tmp, volatile float* set_reflow_tim) {
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	603b      	str	r3, [r7, #0]

    LCD_data.SET_REFL_TMP = *set_reflow_tmp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <LCD_usr_inputs+0x3c>)
 8001e98:	6053      	str	r3, [r2, #4]
    LCD_data.SET_PRE_TMP = *set_preheat_tmp;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a08      	ldr	r2, [pc, #32]	; (8001ec0 <LCD_usr_inputs+0x3c>)
 8001ea0:	6093      	str	r3, [r2, #8]
    LCD_data.PREHEAT_TIME = *set_preheat_tim;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <LCD_usr_inputs+0x3c>)
 8001ea8:	60d3      	str	r3, [r2, #12]
    LCD_data.REFLOW_TIME = *set_reflow_tim;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <LCD_usr_inputs+0x3c>)
 8001eb0:	6113      	str	r3, [r2, #16]

}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200002d8 	.word	0x200002d8

08001ec4 <LCD_init>:
}

/*
 * Initialize LCD with a black screen, and LCD_data
 */
void LCD_init(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
		//Power up LCD
		//HAL_GPIO_WritePin(DISP_DIS_GPIO_Port, DISP_DIS_Pin, 0);		//Power up LCD
		HAL_Delay(100);
 8001ec8:	2064      	movs	r0, #100	; 0x64
 8001eca:	f001 ff13 	bl	8003cf4 <HAL_Delay>

		// Begin LCD Init
		DEV_Module_Init();
 8001ece:	f7ff f919 	bl	8001104 <DEV_Module_Init>
		LCD_1IN8_Init(SCAN_DIR_DFT);
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f7ff fec8 	bl	8001c68 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7ff ff87 	bl	8001dec <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8001ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	20a0      	movs	r0, #160	; 0xa0
 8001ee8:	f7ff f922 	bl	8001130 <Paint_NewImage>
		Paint_SetClearFuntion(LCD_1IN8_Clear);
 8001eec:	4811      	ldr	r0, [pc, #68]	; (8001f34 <LCD_init+0x70>)
 8001eee:	f7ff f96b 	bl	80011c8 <Paint_SetClearFuntion>
		Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8001ef2:	4811      	ldr	r0, [pc, #68]	; (8001f38 <LCD_init+0x74>)
 8001ef4:	f7ff f978 	bl	80011e8 <Paint_SetDisplayFuntion>

		LCD_data.CUR_AMB_TMP=255;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <LCD_init+0x78>)
 8001efa:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <LCD_init+0x7c>)
 8001efc:	619a      	str	r2, [r3, #24]
		LCD_data.CUR_PLT_TMP=255;
 8001efe:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <LCD_init+0x78>)
 8001f00:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <LCD_init+0x7c>)
 8001f02:	615a      	str	r2, [r3, #20]
		LCD_data.SET_REFL_TMP=255;
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <LCD_init+0x78>)
 8001f06:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <LCD_init+0x7c>)
 8001f08:	605a      	str	r2, [r3, #4]
		LCD_data.REFLOW_TIME=255;
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <LCD_init+0x78>)
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <LCD_init+0x7c>)
 8001f0e:	611a      	str	r2, [r3, #16]
		LCD_data.SET_PRE_TMP=255;
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <LCD_init+0x78>)
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LCD_init+0x7c>)
 8001f14:	609a      	str	r2, [r3, #8]
		LCD_data.REFLOW_TIME=255;
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <LCD_init+0x78>)
 8001f18:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <LCD_init+0x7c>)
 8001f1a:	611a      	str	r2, [r3, #16]
		LCD_data.STATE=0;
 8001f1c:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <LCD_init+0x78>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	771a      	strb	r2, [r3, #28]
		LCD_data.flags=0;
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <LCD_init+0x78>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	801a      	strh	r2, [r3, #0]

		LCD_Set_State(0);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f000 fa31 	bl	8002390 <LCD_Set_State>
	return;
 8001f2e:	bf00      	nop
}
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	08001ded 	.word	0x08001ded
 8001f38:	08001da1 	.word	0x08001da1
 8001f3c:	200002d8 	.word	0x200002d8
 8001f40:	437f0000 	.word	0x437f0000

08001f44 <LCD_Format>:

/*
 *  Format float as xxx.xx from x.xx/xx.xx/xxx.xx for display on LCD
 *  Returns 1 if successful 0 if failed to format
 */
uint8_t LCD_Format(char *string_ptr, float number){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	ed87 0a00 	vstr	s0, [r7]
	sprintf(string_ptr, "%.2f", number);
 8001f50:	6838      	ldr	r0, [r7, #0]
 8001f52:	f7fe fb19 	bl	8000588 <__aeabi_f2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	492c      	ldr	r1, [pc, #176]	; (800200c <LCD_Format+0xc8>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f006 f933 	bl	80081c8 <siprintf>
	char temp_buffer[]={' ',' ','x','.','x','x','\0'};
 8001f62:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <LCD_Format+0xcc>)
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f6c:	6018      	str	r0, [r3, #0]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	8019      	strh	r1, [r3, #0]
 8001f72:	3302      	adds	r3, #2
 8001f74:	0c0a      	lsrs	r2, r1, #16
 8001f76:	701a      	strb	r2, [r3, #0]
	uint8_t temp_pos = 3;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	75fb      	strb	r3, [r7, #23]
	uint8_t i;

	//Parse through elements
	for(i=0;i<(TEMP_RES+1);i++){
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	75bb      	strb	r3, [r7, #22]
 8001f80:	e03c      	b.n	8001ffc <LCD_Format+0xb8>

		//Find the decimal
		if(*string_ptr=='.'){
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b2e      	cmp	r3, #46	; 0x2e
 8001f88:	d132      	bne.n	8001ff0 <LCD_Format+0xac>

			//Next two digits are the ".xx"
			temp_buffer[4]=*(string_ptr+1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	785b      	ldrb	r3, [r3, #1]
 8001f8e:	743b      	strb	r3, [r7, #16]
			temp_buffer[5]=*(string_ptr+2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	789b      	ldrb	r3, [r3, #2]
 8001f94:	747b      	strb	r3, [r7, #17]

			//Populate temp_buffer with correct stuff
			while(i>0){
 8001f96:	e00f      	b.n	8001fb8 <LCD_Format+0x74>
				temp_pos--;
 8001f98:	7dfb      	ldrb	r3, [r7, #23]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	75fb      	strb	r3, [r7, #23]
				i--;
 8001f9e:	7dbb      	ldrb	r3, [r7, #22]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	75bb      	strb	r3, [r7, #22]
				string_ptr--;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
				temp_buffer[temp_pos]=*(string_ptr);
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	443b      	add	r3, r7
 8001fb4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			while(i>0){
 8001fb8:	7dbb      	ldrb	r3, [r7, #22]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ec      	bne.n	8001f98 <LCD_Format+0x54>
			}

			//push all temp_buffer data into the string, just finna hard code
			*(string_ptr)	=temp_buffer[0];
 8001fbe:	7b3a      	ldrb	r2, [r7, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	701a      	strb	r2, [r3, #0]
			*(string_ptr+1)	=temp_buffer[1];
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	7b7a      	ldrb	r2, [r7, #13]
 8001fca:	701a      	strb	r2, [r3, #0]
			*(string_ptr+2)	=temp_buffer[2];
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	7bba      	ldrb	r2, [r7, #14]
 8001fd2:	701a      	strb	r2, [r3, #0]
			*(string_ptr+3)	=temp_buffer[3];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3303      	adds	r3, #3
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	701a      	strb	r2, [r3, #0]
			*(string_ptr+4)	=temp_buffer[4];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	7c3a      	ldrb	r2, [r7, #16]
 8001fe2:	701a      	strb	r2, [r3, #0]
			*(string_ptr+5)	=temp_buffer[5];
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3305      	adds	r3, #5
 8001fe8:	7c7a      	ldrb	r2, [r7, #17]
 8001fea:	701a      	strb	r2, [r3, #0]

			//Text string is formatted
			return 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e009      	b.n	8002004 <LCD_Format+0xc0>
		}

		//Check next element
		string_ptr++;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	607b      	str	r3, [r7, #4]
	for(i=0;i<(TEMP_RES+1);i++){
 8001ff6:	7dbb      	ldrb	r3, [r7, #22]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	75bb      	strb	r3, [r7, #22]
 8001ffc:	7dbb      	ldrb	r3, [r7, #22]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d9bf      	bls.n	8001f82 <LCD_Format+0x3e>
	}

return 0;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	0800a594 	.word	0x0800a594
 8002010:	0800a59c 	.word	0x0800a59c

08002014 <LCD_Refresh>:
/*
 *  Updates LCD based on contents of LCD_Data struct
 *  NOTES:
 *  	- Using using black background and white foreground clears whatever previous test was on that line
 */
void LCD_Refresh(uint8_t cur_STATE){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af02      	add	r7, sp, #8
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	LCD_data.STATE=cur_STATE;
 800201e:	4a9f      	ldr	r2, [pc, #636]	; (800229c <LCD_Refresh+0x288>)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	7713      	strb	r3, [r2, #28]

	//If the state machine changed reconfigure GUI
	if(PREV_STATE != LCD_data.STATE){
 8002024:	4b9d      	ldr	r3, [pc, #628]	; (800229c <LCD_Refresh+0x288>)
 8002026:	7f1b      	ldrb	r3, [r3, #28]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b9d      	ldr	r3, [pc, #628]	; (80022a0 <LCD_Refresh+0x28c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d00a      	beq.n	8002048 <LCD_Refresh+0x34>
		LCD_Set_State(LCD_data.STATE);
 8002032:	4b9a      	ldr	r3, [pc, #616]	; (800229c <LCD_Refresh+0x288>)
 8002034:	7f1b      	ldrb	r3, [r3, #28]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f9a9 	bl	8002390 <LCD_Set_State>
		PREV_STATE=LCD_data.STATE;
 800203e:	4b97      	ldr	r3, [pc, #604]	; (800229c <LCD_Refresh+0x288>)
 8002040:	7f1b      	ldrb	r3, [r3, #28]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	4b96      	ldr	r3, [pc, #600]	; (80022a0 <LCD_Refresh+0x28c>)
 8002046:	701a      	strb	r2, [r3, #0]
	}

	//	Main state machine for LCD refresh
	switch(LCD_data.STATE){
 8002048:	4b94      	ldr	r3, [pc, #592]	; (800229c <LCD_Refresh+0x288>)
 800204a:	7f1b      	ldrb	r3, [r3, #28]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b03      	cmp	r3, #3
 8002050:	f200 8111 	bhi.w	8002276 <LCD_Refresh+0x262>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <LCD_Refresh+0x48>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	080020dd 	.word	0x080020dd
 8002064:	080021af 	.word	0x080021af
 8002068:	08002229 	.word	0x08002229

	//Initial boot up
	case 0:
		if((LCD_data.flags & 0x80) ==0x80 )
 800206c:	4b8b      	ldr	r3, [pc, #556]	; (800229c <LCD_Refresh+0x288>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b29b      	uxth	r3, r3
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b80      	cmp	r3, #128	; 0x80
 8002078:	d10a      	bne.n	8002090 <LCD_Refresh+0x7c>
			Paint_DrawString_EN(26, 104, "OKAY", &Font8, BLACK, WHITE);
 800207a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <LCD_Refresh+0x290>)
 8002086:	4a88      	ldr	r2, [pc, #544]	; (80022a8 <LCD_Refresh+0x294>)
 8002088:	2168      	movs	r1, #104	; 0x68
 800208a:	201a      	movs	r0, #26
 800208c:	f7ff fb86 	bl	800179c <Paint_DrawString_EN>
		if((LCD_data.flags & 0x40) ==0x40 )
 8002090:	4b82      	ldr	r3, [pc, #520]	; (800229c <LCD_Refresh+0x288>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d10a      	bne.n	80020b4 <LCD_Refresh+0xa0>
			Paint_DrawString_EN(46, 112, "OKAY", &Font8, BLACK, WHITE);
 800209e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	2300      	movs	r3, #0
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <LCD_Refresh+0x290>)
 80020aa:	4a7f      	ldr	r2, [pc, #508]	; (80022a8 <LCD_Refresh+0x294>)
 80020ac:	2170      	movs	r1, #112	; 0x70
 80020ae:	202e      	movs	r0, #46	; 0x2e
 80020b0:	f7ff fb74 	bl	800179c <Paint_DrawString_EN>
		if((LCD_data.flags & 0x20) ==0x20 )
 80020b4:	4b79      	ldr	r3, [pc, #484]	; (800229c <LCD_Refresh+0x288>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f040 80e5 	bne.w	800228e <LCD_Refresh+0x27a>
			Paint_DrawString_EN(46, 120, "OKAY", &Font8, BLACK, WHITE);
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	4b75      	ldr	r3, [pc, #468]	; (80022a4 <LCD_Refresh+0x290>)
 80020d0:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <LCD_Refresh+0x294>)
 80020d2:	2178      	movs	r1, #120	; 0x78
 80020d4:	202e      	movs	r0, #46	; 0x2e
 80020d6:	f7ff fb61 	bl	800179c <Paint_DrawString_EN>



		break;
 80020da:	e0d8      	b.n	800228e <LCD_Refresh+0x27a>

	//Configure Hot plate
	case 1:
		LCD_Format(set_preh_temp_BUFFER,LCD_data.SET_PRE_TMP);
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <LCD_Refresh+0x288>)
 80020de:	edd3 7a02 	vldr	s15, [r3, #8]
 80020e2:	eeb0 0a67 	vmov.f32	s0, s15
 80020e6:	4871      	ldr	r0, [pc, #452]	; (80022ac <LCD_Refresh+0x298>)
 80020e8:	f7ff ff2c 	bl	8001f44 <LCD_Format>
		LCD_Format(set_preh_time_BUFFER,LCD_data.PREHEAT_TIME);
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <LCD_Refresh+0x288>)
 80020ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	486e      	ldr	r0, [pc, #440]	; (80022b0 <LCD_Refresh+0x29c>)
 80020f8:	f7ff ff24 	bl	8001f44 <LCD_Format>
		LCD_Format(set_refl_temp_BUFFER,LCD_data.SET_REFL_TMP);
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <LCD_Refresh+0x288>)
 80020fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002102:	eeb0 0a67 	vmov.f32	s0, s15
 8002106:	486b      	ldr	r0, [pc, #428]	; (80022b4 <LCD_Refresh+0x2a0>)
 8002108:	f7ff ff1c 	bl	8001f44 <LCD_Format>
		LCD_Format(set_refl_time_BUFFER,LCD_data.REFLOW_TIME);
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <LCD_Refresh+0x288>)
 800210e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	4868      	ldr	r0, [pc, #416]	; (80022b8 <LCD_Refresh+0x2a4>)
 8002118:	f7ff ff14 	bl	8001f44 <LCD_Format>
//
//			default:
//				break;
//		}

		Paint_DrawString_EN(71, 24, set_preh_temp_BUFFER, &Font12, BLACK, WHITE >> (set_user_temp_flag == 0));
 800211c:	4b67      	ldr	r3, [pc, #412]	; (80022bc <LCD_Refresh+0x2a8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <LCD_Refresh+0x116>
 8002124:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002128:	e001      	b.n	800212e <LCD_Refresh+0x11a>
 800212a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2300      	movs	r3, #0
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	4b62      	ldr	r3, [pc, #392]	; (80022c0 <LCD_Refresh+0x2ac>)
 8002136:	4a5d      	ldr	r2, [pc, #372]	; (80022ac <LCD_Refresh+0x298>)
 8002138:	2118      	movs	r1, #24
 800213a:	2047      	movs	r0, #71	; 0x47
 800213c:	f7ff fb2e 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 48, set_preh_time_BUFFER, &Font12, BLACK, WHITE >> (set_user_temp_flag == 1));
 8002140:	4b5e      	ldr	r3, [pc, #376]	; (80022bc <LCD_Refresh+0x2a8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <LCD_Refresh+0x13a>
 8002148:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800214c:	e001      	b.n	8002152 <LCD_Refresh+0x13e>
 800214e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2300      	movs	r3, #0
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <LCD_Refresh+0x2ac>)
 800215a:	4a55      	ldr	r2, [pc, #340]	; (80022b0 <LCD_Refresh+0x29c>)
 800215c:	2130      	movs	r1, #48	; 0x30
 800215e:	2047      	movs	r0, #71	; 0x47
 8002160:	f7ff fb1c 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 72, set_refl_temp_BUFFER, &Font12, BLACK, WHITE >> (set_user_temp_flag == 2));
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <LCD_Refresh+0x2a8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d102      	bne.n	8002172 <LCD_Refresh+0x15e>
 800216c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002170:	e001      	b.n	8002176 <LCD_Refresh+0x162>
 8002172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4b50      	ldr	r3, [pc, #320]	; (80022c0 <LCD_Refresh+0x2ac>)
 800217e:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <LCD_Refresh+0x2a0>)
 8002180:	2148      	movs	r1, #72	; 0x48
 8002182:	2047      	movs	r0, #71	; 0x47
 8002184:	f7ff fb0a 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(71, 96, set_refl_time_BUFFER, &Font12, BLACK, WHITE >> (set_user_temp_flag == 3));
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <LCD_Refresh+0x2a8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d102      	bne.n	8002196 <LCD_Refresh+0x182>
 8002190:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002194:	e001      	b.n	800219a <LCD_Refresh+0x186>
 8002196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2300      	movs	r3, #0
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <LCD_Refresh+0x2ac>)
 80021a2:	4a45      	ldr	r2, [pc, #276]	; (80022b8 <LCD_Refresh+0x2a4>)
 80021a4:	2160      	movs	r1, #96	; 0x60
 80021a6:	2047      	movs	r0, #71	; 0x47
 80021a8:	f7ff faf8 	bl	800179c <Paint_DrawString_EN>
		break;
 80021ac:	e072      	b.n	8002294 <LCD_Refresh+0x280>

	//Hot Plate Heating Graph
	case 2:
		LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <LCD_Refresh+0x288>)
 80021b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	4842      	ldr	r0, [pc, #264]	; (80022c4 <LCD_Refresh+0x2b0>)
 80021ba:	f7ff fec3 	bl	8001f44 <LCD_Format>
		Paint_DrawString_EN(1, 120,  plt_tmp_BUFFER, &Font8, BLACK, WHITE);
 80021be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2300      	movs	r3, #0
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <LCD_Refresh+0x290>)
 80021ca:	4a3e      	ldr	r2, [pc, #248]	; (80022c4 <LCD_Refresh+0x2b0>)
 80021cc:	2178      	movs	r1, #120	; 0x78
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7ff fae4 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawPoint(X_POS,(LIVE_TMP_Y-(LCD_data.CUR_PLT_TMP/2)), RED, DOT_PIXEL_1X1, DOT_FILL_AROUND);	//Add point to graph
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <LCD_Refresh+0x2b4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b298      	uxth	r0, r3
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <LCD_Refresh+0x288>)
 80021dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80021e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021e8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80022cc <LCD_Refresh+0x2b8>
 80021ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	b299      	uxth	r1, r3
 80021fa:	2301      	movs	r3, #1
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	2301      	movs	r3, #1
 8002200:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002204:	f7ff f8da 	bl	80013bc <Paint_DrawPoint>
		X_POS++;
 8002208:	4b2f      	ldr	r3, [pc, #188]	; (80022c8 <LCD_Refresh+0x2b4>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	b2da      	uxtb	r2, r3
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <LCD_Refresh+0x2b4>)
 8002212:	701a      	strb	r2, [r3, #0]
		if(X_POS>160){					//Increment xpos of live graph point
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <LCD_Refresh+0x2b4>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2ba0      	cmp	r3, #160	; 0xa0
 800221a:	d93a      	bls.n	8002292 <LCD_Refresh+0x27e>
			LCD_Clear_Plot();
 800221c:	f000 f85c 	bl	80022d8 <LCD_Clear_Plot>
			X_POS=LIVE_TMP_X+1;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <LCD_Refresh+0x2b4>)
 8002222:	2219      	movs	r2, #25
 8002224:	701a      	strb	r2, [r3, #0]
		}

		break;
 8002226:	e034      	b.n	8002292 <LCD_Refresh+0x27e>

	//Hot Plate Heating Values (same data as case 2 just no graph)
	case 3:
		LCD_Format(amb_tmp_BUFFER,LCD_data.CUR_AMB_TMP);
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <LCD_Refresh+0x288>)
 800222a:	edd3 7a06 	vldr	s15, [r3, #24]
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	4827      	ldr	r0, [pc, #156]	; (80022d0 <LCD_Refresh+0x2bc>)
 8002234:	f7ff fe86 	bl	8001f44 <LCD_Format>
		LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <LCD_Refresh+0x288>)
 800223a:	edd3 7a05 	vldr	s15, [r3, #20]
 800223e:	eeb0 0a67 	vmov.f32	s0, s15
 8002242:	4820      	ldr	r0, [pc, #128]	; (80022c4 <LCD_Refresh+0x2b0>)
 8002244:	f7ff fe7e 	bl	8001f44 <LCD_Format>
		Paint_DrawString_EN(98, 88,  plt_tmp_BUFFER, &Font12, BLACK, WHITE);
 8002248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <LCD_Refresh+0x2ac>)
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <LCD_Refresh+0x2b0>)
 8002256:	2158      	movs	r1, #88	; 0x58
 8002258:	2062      	movs	r0, #98	; 0x62
 800225a:	f7ff fa9f 	bl	800179c <Paint_DrawString_EN>
		Paint_DrawString_EN(98, 104,  amb_tmp_BUFFER, &Font12, BLACK, WHITE);
 800225e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2300      	movs	r3, #0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <LCD_Refresh+0x2ac>)
 800226a:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <LCD_Refresh+0x2bc>)
 800226c:	2168      	movs	r1, #104	; 0x68
 800226e:	2062      	movs	r0, #98	; 0x62
 8002270:	f7ff fa94 	bl	800179c <Paint_DrawString_EN>
		break;
 8002274:	e00e      	b.n	8002294 <LCD_Refresh+0x280>

	//Catch of invalid state
	default:
		Paint_DrawString_EN(1, 1, "DEFAULT", &Font8, BLACK, WHITE);
 8002276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	2300      	movs	r3, #0
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <LCD_Refresh+0x290>)
 8002282:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <LCD_Refresh+0x2c0>)
 8002284:	2101      	movs	r1, #1
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff fa88 	bl	800179c <Paint_DrawString_EN>
		break;
 800228c:	e002      	b.n	8002294 <LCD_Refresh+0x280>
		break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <LCD_Refresh+0x280>
		break;
 8002292:	bf00      	nop
	}

}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	200002d8 	.word	0x200002d8
 80022a0:	200002d6 	.word	0x200002d6
 80022a4:	20000044 	.word	0x20000044
 80022a8:	0800a5a4 	.word	0x0800a5a4
 80022ac:	20000024 	.word	0x20000024
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	20000014 	.word	0x20000014
 80022b8:	2000001c 	.word	0x2000001c
 80022bc:	20000358 	.word	0x20000358
 80022c0:	20000034 	.word	0x20000034
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	20000000 	.word	0x20000000
 80022cc:	42f00000 	.word	0x42f00000
 80022d0:	20000004 	.word	0x20000004
 80022d4:	0800a5ac 	.word	0x0800a5ac

080022d8 <LCD_Clear_Plot>:

/*
 * Clears the graph area for state 2
 */
void LCD_Clear_Plot(){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af04      	add	r7, sp, #16
	Paint_ClearWindows(LIVE_TMP_X, 0, LCD_1IN8_WIDTH, LIVE_TMP_Y-1, BLACK);	//Clear graph area
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2377      	movs	r3, #119	; 0x77
 80022e4:	22a0      	movs	r2, #160	; 0xa0
 80022e6:	2100      	movs	r1, #0
 80022e8:	2018      	movs	r0, #24
 80022ea:	f7ff f839 	bl	8001360 <Paint_ClearWindows>

	//grid lines for temp
	Paint_DrawLine(LIVE_TMP_X+1, 104, LCD_1IN8_WIDTH, 104, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80022ee:	2301      	movs	r3, #1
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2301      	movs	r3, #1
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	f248 4330 	movw	r3, #33840	; 0x8430
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2368      	movs	r3, #104	; 0x68
 80022fe:	22a0      	movs	r2, #160	; 0xa0
 8002300:	2168      	movs	r1, #104	; 0x68
 8002302:	2019      	movs	r0, #25
 8002304:	f7ff f8f2 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  88, LCD_1IN8_WIDTH,  88, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002308:	2301      	movs	r3, #1
 800230a:	9302      	str	r3, [sp, #8]
 800230c:	2301      	movs	r3, #1
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	f248 4330 	movw	r3, #33840	; 0x8430
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2358      	movs	r3, #88	; 0x58
 8002318:	22a0      	movs	r2, #160	; 0xa0
 800231a:	2158      	movs	r1, #88	; 0x58
 800231c:	2019      	movs	r0, #25
 800231e:	f7ff f8e5 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  72, LCD_1IN8_WIDTH,  72, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002322:	2301      	movs	r3, #1
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f248 4330 	movw	r3, #33840	; 0x8430
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2348      	movs	r3, #72	; 0x48
 8002332:	22a0      	movs	r2, #160	; 0xa0
 8002334:	2148      	movs	r1, #72	; 0x48
 8002336:	2019      	movs	r0, #25
 8002338:	f7ff f8d8 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  56, LCD_1IN8_WIDTH,  56, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800233c:	2301      	movs	r3, #1
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	f248 4330 	movw	r3, #33840	; 0x8430
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2338      	movs	r3, #56	; 0x38
 800234c:	22a0      	movs	r2, #160	; 0xa0
 800234e:	2138      	movs	r1, #56	; 0x38
 8002350:	2019      	movs	r0, #25
 8002352:	f7ff f8cb 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  40, LCD_1IN8_WIDTH,  40, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002356:	2301      	movs	r3, #1
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2301      	movs	r3, #1
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	f248 4330 	movw	r3, #33840	; 0x8430
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	2328      	movs	r3, #40	; 0x28
 8002366:	22a0      	movs	r2, #160	; 0xa0
 8002368:	2128      	movs	r1, #40	; 0x28
 800236a:	2019      	movs	r0, #25
 800236c:	f7ff f8be 	bl	80014ec <Paint_DrawLine>
	Paint_DrawLine(LIVE_TMP_X+1,  24, LCD_1IN8_WIDTH,  24, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002370:	2301      	movs	r3, #1
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	2301      	movs	r3, #1
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	f248 4330 	movw	r3, #33840	; 0x8430
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2318      	movs	r3, #24
 8002380:	22a0      	movs	r2, #160	; 0xa0
 8002382:	2118      	movs	r1, #24
 8002384:	2019      	movs	r0, #25
 8002386:	f7ff f8b1 	bl	80014ec <Paint_DrawLine>
	//Paint_DrawLine(LIVE_TMP_X+1,   8, LCD_1IN8_WIDTH,   8, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);

	/*Might be better to store datapoints somewhere and just clear those instead of whole window*/
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <LCD_Set_State>:

/*
 *  Some new states require the LCD to be cleared before new text can be added
 *  This function clears the LCD and configures it for the NEW STATE
 */
void LCD_Set_State(uint8_t test_STATE){
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af04      	add	r7, sp, #16
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
	PREV_STATE=test_STATE;
 800239a:	4a9b      	ldr	r2, [pc, #620]	; (8002608 <LCD_Set_State+0x278>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	7013      	strb	r3, [r2, #0]

	//Main Switch Case
	switch(test_STATE){
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	f200 81c3 	bhi.w	800272e <LCD_Set_State+0x39e>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <LCD_Set_State+0x20>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	08002405 	.word	0x08002405
 80023b8:	08002465 	.word	0x08002465
 80023bc:	0800265d 	.word	0x0800265d
		//Initial boot up
		case 0:
			LCD_1IN8_Clear(BLACK);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7ff fd13 	bl	8001dec <LCD_1IN8_Clear>
//			Paint_DrawString_EN(123,1, "STATE 0", &Font8, BLACK, WHITE);
			Paint_DrawString_EN(1, 12, "THE HOT POTATO", &Font16, BLACK, WHITE);
 80023c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ca:	9301      	str	r3, [sp, #4]
 80023cc:	2300      	movs	r3, #0
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	4b8e      	ldr	r3, [pc, #568]	; (800260c <LCD_Set_State+0x27c>)
 80023d2:	4a8f      	ldr	r2, [pc, #572]	; (8002610 <LCD_Set_State+0x280>)
 80023d4:	210c      	movs	r1, #12
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7ff f9e0 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(24, 36, "SMD REFLOW", &Font16, BLACK, WHITE);
 80023dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2300      	movs	r3, #0
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	4b89      	ldr	r3, [pc, #548]	; (800260c <LCD_Set_State+0x27c>)
 80023e8:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <LCD_Set_State+0x284>)
 80023ea:	2124      	movs	r1, #36	; 0x24
 80023ec:	2018      	movs	r0, #24
 80023ee:	f7ff f9d5 	bl	800179c <Paint_DrawString_EN>
//			Paint_DrawString_EN(1, 96, "Initialization:", &Font8, BLACK, WHITE);
//			Paint_DrawString_EN(1, 104, "IMU: ...", &Font8, BLACK, WHITE);
//			Paint_DrawString_EN(1, 112, "TEMP #1: ...", &Font8, BLACK, WHITE);
//			Paint_DrawString_EN(1, 120, "TEMP #2: ...", &Font8, BLACK, WHITE);
			Paint_DrawImage(&gImage_70X70, 50, 50, 80, 62);
 80023f2:	233e      	movs	r3, #62	; 0x3e
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2350      	movs	r3, #80	; 0x50
 80023f8:	2232      	movs	r2, #50	; 0x32
 80023fa:	2132      	movs	r1, #50	; 0x32
 80023fc:	4886      	ldr	r0, [pc, #536]	; (8002618 <LCD_Set_State+0x288>)
 80023fe:	f7ff fa23 	bl	8001848 <Paint_DrawImage>
			break;
 8002402:	e1a3      	b.n	800274c <LCD_Set_State+0x3bc>

		//Configure Hot plate
		case 1:
			LCD_1IN8_Clear(BLACK);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff fcf1 	bl	8001dec <LCD_1IN8_Clear>
//			Paint_DrawString_EN(120,1, "STATE 1", &Font8, BLACK, WHITE);
			Paint_DrawString_EN(1, 24, "Set P_Temp:       `C", &Font12, BLACK, WHITE);
 800240a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2300      	movs	r3, #0
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	4b81      	ldr	r3, [pc, #516]	; (800261c <LCD_Set_State+0x28c>)
 8002416:	4a82      	ldr	r2, [pc, #520]	; (8002620 <LCD_Set_State+0x290>)
 8002418:	2118      	movs	r1, #24
 800241a:	2001      	movs	r0, #1
 800241c:	f7ff f9be 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 48, "Set P_Tim:        min", &Font12, BLACK, WHITE);
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2300      	movs	r3, #0
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4b7c      	ldr	r3, [pc, #496]	; (800261c <LCD_Set_State+0x28c>)
 800242c:	4a7d      	ldr	r2, [pc, #500]	; (8002624 <LCD_Set_State+0x294>)
 800242e:	2130      	movs	r1, #48	; 0x30
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff f9b3 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72, "Set R_Temp:       `C", &Font12, BLACK, WHITE);
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	4b76      	ldr	r3, [pc, #472]	; (800261c <LCD_Set_State+0x28c>)
 8002442:	4a79      	ldr	r2, [pc, #484]	; (8002628 <LCD_Set_State+0x298>)
 8002444:	2148      	movs	r1, #72	; 0x48
 8002446:	2001      	movs	r0, #1
 8002448:	f7ff f9a8 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 96, "Set R_Tim:        min", &Font12, BLACK, WHITE);
 800244c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b71      	ldr	r3, [pc, #452]	; (800261c <LCD_Set_State+0x28c>)
 8002458:	4a74      	ldr	r2, [pc, #464]	; (800262c <LCD_Set_State+0x29c>)
 800245a:	2160      	movs	r1, #96	; 0x60
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff f99d 	bl	800179c <Paint_DrawString_EN>
			break;
 8002462:	e173      	b.n	800274c <LCD_Set_State+0x3bc>

		//Hot Plate Heating
		case 2:
			LCD_1IN8_Clear(BLACK);
 8002464:	2000      	movs	r0, #0
 8002466:	f7ff fcc1 	bl	8001dec <LCD_1IN8_Clear>
//			Paint_DrawString_EN(120, 1, "STATE 2", &Font8, BLACK, WHITE);
			Paint_DrawString_EN(1, 1, "Temp", &Font8, BLACK, WHITE);
 800246a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2300      	movs	r3, #0
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4b6e      	ldr	r3, [pc, #440]	; (8002630 <LCD_Set_State+0x2a0>)
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <LCD_Set_State+0x2a4>)
 8002478:	2101      	movs	r1, #1
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff f98e 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 9, "`C", &Font8, BLACK, WHITE);
 8002480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	2300      	movs	r3, #0
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4b69      	ldr	r3, [pc, #420]	; (8002630 <LCD_Set_State+0x2a0>)
 800248c:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <LCD_Set_State+0x2a8>)
 800248e:	2109      	movs	r1, #9
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff f983 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(80, 120, "Time", &Font8, BLACK, WHITE);
 8002496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4b63      	ldr	r3, [pc, #396]	; (8002630 <LCD_Set_State+0x2a0>)
 80024a2:	4a66      	ldr	r2, [pc, #408]	; (800263c <LCD_Set_State+0x2ac>)
 80024a4:	2178      	movs	r1, #120	; 0x78
 80024a6:	2050      	movs	r0, #80	; 0x50
 80024a8:	f7ff f978 	bl	800179c <Paint_DrawString_EN>

			//main xy axis
			Paint_DrawLine(LIVE_TMP_X, 16, LIVE_TMP_X, LIVE_TMP_Y, YELLOW, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80024ac:	2300      	movs	r3, #0
 80024ae:	9302      	str	r3, [sp, #8]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2378      	movs	r3, #120	; 0x78
 80024bc:	2218      	movs	r2, #24
 80024be:	2110      	movs	r1, #16
 80024c0:	2018      	movs	r0, #24
 80024c2:	f7ff f813 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(0, LIVE_TMP_Y, LCD_1IN8_WIDTH, LIVE_TMP_Y, YELLOW, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80024c6:	2300      	movs	r3, #0
 80024c8:	9302      	str	r3, [sp, #8]
 80024ca:	2301      	movs	r3, #1
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2378      	movs	r3, #120	; 0x78
 80024d6:	22a0      	movs	r2, #160	; 0xa0
 80024d8:	2178      	movs	r1, #120	; 0x78
 80024da:	2000      	movs	r0, #0
 80024dc:	f7ff f806 	bl	80014ec <Paint_DrawLine>

			//Temp markings
			Paint_DrawString_EN(1,104-5, " 32", &Font8, BLACK, WHITE);
 80024e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	2300      	movs	r3, #0
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	4b51      	ldr	r3, [pc, #324]	; (8002630 <LCD_Set_State+0x2a0>)
 80024ec:	4a54      	ldr	r2, [pc, #336]	; (8002640 <LCD_Set_State+0x2b0>)
 80024ee:	2163      	movs	r1, #99	; 0x63
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff f953 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 88-5, " 64", &Font8, BLACK, WHITE);
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <LCD_Set_State+0x2a0>)
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <LCD_Set_State+0x2b4>)
 8002504:	2153      	movs	r1, #83	; 0x53
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff f948 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72-5, " 96", &Font8, BLACK, WHITE);
 800250c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <LCD_Set_State+0x2a0>)
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <LCD_Set_State+0x2b8>)
 800251a:	2143      	movs	r1, #67	; 0x43
 800251c:	2001      	movs	r0, #1
 800251e:	f7ff f93d 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 56-5, "128", &Font8, BLACK, WHITE);
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	2300      	movs	r3, #0
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <LCD_Set_State+0x2a0>)
 800252e:	4a47      	ldr	r2, [pc, #284]	; (800264c <LCD_Set_State+0x2bc>)
 8002530:	2133      	movs	r1, #51	; 0x33
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f932 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 40-5, "160", &Font8, BLACK, WHITE);
 8002538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <LCD_Set_State+0x2a0>)
 8002544:	4a42      	ldr	r2, [pc, #264]	; (8002650 <LCD_Set_State+0x2c0>)
 8002546:	2123      	movs	r1, #35	; 0x23
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff f927 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 24-5, "192", &Font8, BLACK, WHITE);
 800254e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2300      	movs	r3, #0
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <LCD_Set_State+0x2a0>)
 800255a:	4a3e      	ldr	r2, [pc, #248]	; (8002654 <LCD_Set_State+0x2c4>)
 800255c:	2113      	movs	r1, #19
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff f91c 	bl	800179c <Paint_DrawString_EN>
			//Paint_DrawString_EN(1,  8, "224", &Font8, BLACK, WHITE);

			//grid lines for temp
			Paint_DrawLine(LIVE_TMP_X+1, 104, 160, 104, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002564:	2301      	movs	r3, #1
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	2301      	movs	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	f248 4330 	movw	r3, #33840	; 0x8430
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	2368      	movs	r3, #104	; 0x68
 8002574:	22a0      	movs	r2, #160	; 0xa0
 8002576:	2168      	movs	r1, #104	; 0x68
 8002578:	2019      	movs	r0, #25
 800257a:	f7fe ffb7 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  88, 160,  88, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 800257e:	2301      	movs	r3, #1
 8002580:	9302      	str	r3, [sp, #8]
 8002582:	2301      	movs	r3, #1
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	f248 4330 	movw	r3, #33840	; 0x8430
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2358      	movs	r3, #88	; 0x58
 800258e:	22a0      	movs	r2, #160	; 0xa0
 8002590:	2158      	movs	r1, #88	; 0x58
 8002592:	2019      	movs	r0, #25
 8002594:	f7fe ffaa 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  72, 160,  72, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 8002598:	2301      	movs	r3, #1
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	2301      	movs	r3, #1
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	f248 4330 	movw	r3, #33840	; 0x8430
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2348      	movs	r3, #72	; 0x48
 80025a8:	22a0      	movs	r2, #160	; 0xa0
 80025aa:	2148      	movs	r1, #72	; 0x48
 80025ac:	2019      	movs	r0, #25
 80025ae:	f7fe ff9d 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  56, 160,  56, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80025b2:	2301      	movs	r3, #1
 80025b4:	9302      	str	r3, [sp, #8]
 80025b6:	2301      	movs	r3, #1
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	f248 4330 	movw	r3, #33840	; 0x8430
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2338      	movs	r3, #56	; 0x38
 80025c2:	22a0      	movs	r2, #160	; 0xa0
 80025c4:	2138      	movs	r1, #56	; 0x38
 80025c6:	2019      	movs	r0, #25
 80025c8:	f7fe ff90 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  40, 160,  40, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80025cc:	2301      	movs	r3, #1
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	2301      	movs	r3, #1
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	f248 4330 	movw	r3, #33840	; 0x8430
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2328      	movs	r3, #40	; 0x28
 80025dc:	22a0      	movs	r2, #160	; 0xa0
 80025de:	2128      	movs	r1, #40	; 0x28
 80025e0:	2019      	movs	r0, #25
 80025e2:	f7fe ff83 	bl	80014ec <Paint_DrawLine>
			Paint_DrawLine(LIVE_TMP_X+1,  24, 160,  24, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);
 80025e6:	2301      	movs	r3, #1
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	f248 4330 	movw	r3, #33840	; 0x8430
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	2318      	movs	r3, #24
 80025f6:	22a0      	movs	r2, #160	; 0xa0
 80025f8:	2118      	movs	r1, #24
 80025fa:	2019      	movs	r0, #25
 80025fc:	f7fe ff76 	bl	80014ec <Paint_DrawLine>
			//Paint_DrawLine(LIVE_TMP_X,   8, 160,   8, GRAY, DOT_PIXEL_1X1, LINE_STYLE_DOTTED);

			X_POS = LIVE_TMP_X+1;			//reset temp graphing position;
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <LCD_Set_State+0x2c8>)
 8002602:	2219      	movs	r2, #25
 8002604:	701a      	strb	r2, [r3, #0]
			break;
 8002606:	e0a1      	b.n	800274c <LCD_Set_State+0x3bc>
 8002608:	200002d6 	.word	0x200002d6
 800260c:	2000003c 	.word	0x2000003c
 8002610:	0800a5b4 	.word	0x0800a5b4
 8002614:	0800a5c4 	.word	0x0800a5c4
 8002618:	0800a6cc 	.word	0x0800a6cc
 800261c:	20000034 	.word	0x20000034
 8002620:	0800a5d0 	.word	0x0800a5d0
 8002624:	0800a5e8 	.word	0x0800a5e8
 8002628:	0800a600 	.word	0x0800a600
 800262c:	0800a618 	.word	0x0800a618
 8002630:	20000044 	.word	0x20000044
 8002634:	0800a630 	.word	0x0800a630
 8002638:	0800a638 	.word	0x0800a638
 800263c:	0800a63c 	.word	0x0800a63c
 8002640:	0800a644 	.word	0x0800a644
 8002644:	0800a648 	.word	0x0800a648
 8002648:	0800a64c 	.word	0x0800a64c
 800264c:	0800a650 	.word	0x0800a650
 8002650:	0800a654 	.word	0x0800a654
 8002654:	0800a658 	.word	0x0800a658
 8002658:	20000000 	.word	0x20000000

		//Another Temp Display
		case 3:
			LCD_1IN8_Clear(BLACK);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fbc5 	bl	8001dec <LCD_1IN8_Clear>
//			Paint_DrawString_EN(120, 1, "STATE 3", &Font8, BLACK, WHITE);
			LCD_Format(set_refl_temp_BUFFER,LCD_data.SET_REFL_TMP);
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <LCD_Set_State+0x3c4>)
 8002664:	edd3 7a01 	vldr	s15, [r3, #4]
 8002668:	eeb0 0a67 	vmov.f32	s0, s15
 800266c:	483a      	ldr	r0, [pc, #232]	; (8002758 <LCD_Set_State+0x3c8>)
 800266e:	f7ff fc69 	bl	8001f44 <LCD_Format>
			LCD_Format(plt_tmp_BUFFER,LCD_data.CUR_PLT_TMP);
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <LCD_Set_State+0x3c4>)
 8002674:	edd3 7a05 	vldr	s15, [r3, #20]
 8002678:	eeb0 0a67 	vmov.f32	s0, s15
 800267c:	4837      	ldr	r0, [pc, #220]	; (800275c <LCD_Set_State+0x3cc>)
 800267e:	f7ff fc61 	bl	8001f44 <LCD_Format>
			LCD_Format(amb_tmp_BUFFER,LCD_data.CUR_AMB_TMP);
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <LCD_Set_State+0x3c4>)
 8002684:	edd3 7a06 	vldr	s15, [r3, #24]
 8002688:	eeb0 0a67 	vmov.f32	s0, s15
 800268c:	4834      	ldr	r0, [pc, #208]	; (8002760 <LCD_Set_State+0x3d0>)
 800268e:	f7ff fc59 	bl	8001f44 <LCD_Format>
			Paint_DrawString_EN(24, 8,  "Sensor Readings", &Font12, BLACK, WHITE);
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2300      	movs	r3, #0
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <LCD_Set_State+0x3d4>)
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <LCD_Set_State+0x3d8>)
 80026a0:	2108      	movs	r1, #8
 80026a2:	2018      	movs	r0, #24
 80026a4:	f7ff f87a 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 72,  "Plate Target:       `C", &Font12, BLACK, WHITE);
 80026a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <LCD_Set_State+0x3d4>)
 80026b4:	4a2d      	ldr	r2, [pc, #180]	; (800276c <LCD_Set_State+0x3dc>)
 80026b6:	2148      	movs	r1, #72	; 0x48
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7ff f86f 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 72,  set_refl_temp_BUFFER, &Font12, BLACK, WHITE);
 80026be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	2300      	movs	r3, #0
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <LCD_Set_State+0x3d4>)
 80026ca:	4a23      	ldr	r2, [pc, #140]	; (8002758 <LCD_Set_State+0x3c8>)
 80026cc:	2148      	movs	r1, #72	; 0x48
 80026ce:	2062      	movs	r0, #98	; 0x62
 80026d0:	f7ff f864 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 88,  "Plate Live:         `C", &Font12, BLACK, WHITE);
 80026d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2300      	movs	r3, #0
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <LCD_Set_State+0x3d4>)
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <LCD_Set_State+0x3e0>)
 80026e2:	2158      	movs	r1, #88	; 0x58
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff f859 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 88,  plt_tmp_BUFFER, &Font12, BLACK, WHITE);
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <LCD_Set_State+0x3d4>)
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <LCD_Set_State+0x3cc>)
 80026f8:	2158      	movs	r1, #88	; 0x58
 80026fa:	2062      	movs	r0, #98	; 0x62
 80026fc:	f7ff f84e 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(1, 104, "Ambient Live:       `C", &Font12, BLACK, WHITE);
 8002700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <LCD_Set_State+0x3d4>)
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <LCD_Set_State+0x3e4>)
 800270e:	2168      	movs	r1, #104	; 0x68
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff f843 	bl	800179c <Paint_DrawString_EN>
			Paint_DrawString_EN(98, 104,  amb_tmp_BUFFER, &Font12, BLACK, WHITE);
 8002716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2300      	movs	r3, #0
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <LCD_Set_State+0x3d4>)
 8002722:	4a0f      	ldr	r2, [pc, #60]	; (8002760 <LCD_Set_State+0x3d0>)
 8002724:	2168      	movs	r1, #104	; 0x68
 8002726:	2062      	movs	r0, #98	; 0x62
 8002728:	f7ff f838 	bl	800179c <Paint_DrawString_EN>
			break;
 800272c:	e00e      	b.n	800274c <LCD_Set_State+0x3bc>

		//Catch of invalid state
		default:
			LCD_1IN8_Clear(BLACK);
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff fb5c 	bl	8001dec <LCD_1IN8_Clear>
			Paint_DrawString_EN(1, 48, "**State Machine Error**", &Font12, BLACK, WHITE);
 8002734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <LCD_Set_State+0x3d4>)
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <LCD_Set_State+0x3e8>)
 8002742:	2130      	movs	r1, #48	; 0x30
 8002744:	2001      	movs	r0, #1
 8002746:	f7ff f829 	bl	800179c <Paint_DrawString_EN>
			break;
 800274a:	bf00      	nop
	}

return;
 800274c:	bf00      	nop
}
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200002d8 	.word	0x200002d8
 8002758:	20000014 	.word	0x20000014
 800275c:	2000000c 	.word	0x2000000c
 8002760:	20000004 	.word	0x20000004
 8002764:	20000034 	.word	0x20000034
 8002768:	0800a65c 	.word	0x0800a65c
 800276c:	0800a66c 	.word	0x0800a66c
 8002770:	0800a684 	.word	0x0800a684
 8002774:	0800a69c 	.word	0x0800a69c
 8002778:	0800a6b4 	.word	0x0800a6b4

0800277c <PWM_Update>:
#include "PWM_Config.h"

// Update dutycycle of PWM signal. Frequency of PWM signal is hardcoded for now
void PWM_Update(TIM_HandleTypeDef *Timer, uint32_t Timer_Channel, float Duty_Cycle)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	ed87 0a01 	vstr	s0, [r7, #4]
	uint16_t tim_period, ccr_val;

	tim_period = __HAL_TIM_GET_AUTORELOAD(Timer);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	82bb      	strh	r3, [r7, #20]

	// If requested DC is 0, turn PWM off
	if (Duty_Cycle == 0) {
 8002792:	edd7 7a01 	vldr	s15, [r7, #4]
 8002796:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	d104      	bne.n	80027aa <PWM_Update+0x2e>

		HAL_TIM_PWM_Stop(Timer, Timer_Channel);
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f004 f9bc 	bl	8006b20 <HAL_TIM_PWM_Stop>

		return;
 80027a8:	e034      	b.n	8002814 <PWM_Update+0x98>

	} else {

		ccr_val = Duty_Cycle * tim_period;
 80027aa:	8abb      	ldrh	r3, [r7, #20]
 80027ac:	ee07 3a90 	vmov	s15, r3
 80027b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c0:	ee17 3a90 	vmov	r3, s15
 80027c4:	82fb      	strh	r3, [r7, #22]

		// Catch undefined case where DC would be >= 100%
		if (ccr_val >= tim_period) {
 80027c6:	8afa      	ldrh	r2, [r7, #22]
 80027c8:	8abb      	ldrh	r3, [r7, #20]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d301      	bcc.n	80027d2 <PWM_Update+0x56>

			ccr_val = tim_period;	// Probably get rid of this
 80027ce:	8abb      	ldrh	r3, [r7, #20]
 80027d0:	82fb      	strh	r3, [r7, #22]

		}

		// Update PWM Duty Cycle
		__HAL_TIM_SET_COMPARE(Timer, Timer_Channel, ccr_val);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <PWM_Update+0x66>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	8afa      	ldrh	r2, [r7, #22]
 80027de:	635a      	str	r2, [r3, #52]	; 0x34
 80027e0:	e013      	b.n	800280a <PWM_Update+0x8e>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d104      	bne.n	80027f2 <PWM_Update+0x76>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	8afb      	ldrh	r3, [r7, #22]
 80027ee:	6393      	str	r3, [r2, #56]	; 0x38
 80027f0:	e00b      	b.n	800280a <PWM_Update+0x8e>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d104      	bne.n	8002802 <PWM_Update+0x86>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	8afb      	ldrh	r3, [r7, #22]
 80027fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002800:	e003      	b.n	800280a <PWM_Update+0x8e>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	8afb      	ldrh	r3, [r7, #22]
 8002808:	6413      	str	r3, [r2, #64]	; 0x40

		// Ensure PWM is running
		HAL_TIM_PWM_Start(Timer, Timer_Channel);
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f004 f8e9 	bl	80069e4 <HAL_TIM_PWM_Start>

	}

	return;
 8002812:	bf00      	nop

};
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
	...

0800281c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	4b4f      	ldr	r3, [pc, #316]	; (8002974 <MX_GPIO_Init+0x158>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a4e      	ldr	r2, [pc, #312]	; (8002974 <MX_GPIO_Init+0x158>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b4c      	ldr	r3, [pc, #304]	; (8002974 <MX_GPIO_Init+0x158>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	4b48      	ldr	r3, [pc, #288]	; (8002974 <MX_GPIO_Init+0x158>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a47      	ldr	r2, [pc, #284]	; (8002974 <MX_GPIO_Init+0x158>)
 8002858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <MX_GPIO_Init+0x158>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b41      	ldr	r3, [pc, #260]	; (8002974 <MX_GPIO_Init+0x158>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a40      	ldr	r2, [pc, #256]	; (8002974 <MX_GPIO_Init+0x158>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <MX_GPIO_Init+0x158>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b3a      	ldr	r3, [pc, #232]	; (8002974 <MX_GPIO_Init+0x158>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <MX_GPIO_Init+0x158>)
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b37      	ldr	r3, [pc, #220]	; (8002974 <MX_GPIO_Init+0x158>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 80028a2:	2200      	movs	r2, #0
 80028a4:	f242 31b0 	movw	r1, #9136	; 0x23b0
 80028a8:	4833      	ldr	r0, [pc, #204]	; (8002978 <MX_GPIO_Init+0x15c>)
 80028aa:	f001 fce5 	bl	8004278 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2158      	movs	r1, #88	; 0x58
 80028b2:	4832      	ldr	r0, [pc, #200]	; (800297c <MX_GPIO_Init+0x160>)
 80028b4:	f001 fce0 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 80028b8:	f242 33b0 	movw	r3, #9136	; 0x23b0
 80028bc:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4829      	ldr	r0, [pc, #164]	; (8002978 <MX_GPIO_Init+0x15c>)
 80028d2:	f001 fb45 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80028d6:	2358      	movs	r3, #88	; 0x58
 80028d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028da:	2301      	movs	r3, #1
 80028dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e2:	2300      	movs	r3, #0
 80028e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	f107 0314 	add.w	r3, r7, #20
 80028ea:	4619      	mov	r1, r3
 80028ec:	4823      	ldr	r0, [pc, #140]	; (800297c <MX_GPIO_Init+0x160>)
 80028ee:	f001 fb37 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin|IMU_INT1_Pin|IMU_INT2_Pin;
 80028f2:	2307      	movs	r3, #7
 80028f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002900:	f107 0314 	add.w	r3, r7, #20
 8002904:	4619      	mov	r1, r3
 8002906:	481e      	ldr	r0, [pc, #120]	; (8002980 <MX_GPIO_Init+0x164>)
 8002908:	f001 fb2a 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEB_B_Pin;
 800290c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEB_B_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	4619      	mov	r1, r3
 8002920:	4817      	ldr	r0, [pc, #92]	; (8002980 <MX_GPIO_Init+0x164>)
 8002922:	f001 fb1d 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEB_A_Pin|ROT_SW_Pin;
 8002926:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800292a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800292c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4810      	ldr	r0, [pc, #64]	; (8002980 <MX_GPIO_Init+0x164>)
 800293e:	f001 fb0f 	bl	8003f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEL_0_Pin|SEL_1_Pin|PG_3V3_Pin;
 8002942:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 8002946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4619      	mov	r1, r3
 8002956:	4809      	ldr	r0, [pc, #36]	; (800297c <MX_GPIO_Init+0x160>)
 8002958:	f001 fb02 	bl	8003f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2100      	movs	r1, #0
 8002960:	2028      	movs	r0, #40	; 0x28
 8002962:	f001 fac6 	bl	8003ef2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002966:	2028      	movs	r0, #40	; 0x28
 8002968:	f001 fadf 	bl	8003f2a <HAL_NVIC_EnableIRQ>

}
 800296c:	bf00      	nop
 800296e:	3728      	adds	r7, #40	; 0x28
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40020000 	.word	0x40020000
 8002980:	40020400 	.word	0x40020400

08002984 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <MX_I2C1_Init+0x50>)
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <MX_I2C1_Init+0x54>)
 800298c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800298e:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_I2C1_Init+0x50>)
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <MX_I2C1_Init+0x58>)
 8002992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_I2C1_Init+0x50>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_I2C1_Init+0x50>)
 800299c:	2200      	movs	r2, #0
 800299e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029a8:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80029ae:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029b4:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029bc:	2200      	movs	r2, #0
 80029be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029c0:	4804      	ldr	r0, [pc, #16]	; (80029d4 <MX_I2C1_Init+0x50>)
 80029c2:	f001 fcb1 	bl	8004328 <HAL_I2C_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80029cc:	f000 faae 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d0:	bf00      	nop
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	200002f8 	.word	0x200002f8
 80029d8:	40005400 	.word	0x40005400
 80029dc:	000186a0 	.word	0x000186a0

080029e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_I2C_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1e:	23c0      	movs	r3, #192	; 0xc0
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <HAL_I2C_MspInit+0x8c>)
 8002a3a:	f001 fa91 	bl	8003f60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005400 	.word	0x40005400
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40020400 	.word	0x40020400

08002a70 <read_ambient_temp>:

/* USER CODE BEGIN 1 */

/*	Routine for reading TMP75	*/
float read_ambient_temp()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8

	uint8_t ambient_sens_addr = 0x48 << 1;	// Note address needs to be shifted by 1 bit in this protocol
 8002a76:	2390      	movs	r3, #144	; 0x90
 8002a78:	73fb      	strb	r3, [r7, #15]
	uint8_t tempr_reg = 0x00, conf_reg = 0x01;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73bb      	strb	r3, [r7, #14]
	uint8_t tempr_data_buff[2];
	int final_tempr = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]

	// Routine as described for dataread from MLX90614 DS
	HAL_I2C_Master_Transmit(&hi2c1, ambient_sens_addr, &tempr_reg, 1, 500);
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	b299      	uxth	r1, r3
 8002a8a:	1dfa      	adds	r2, r7, #7
 8002a8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2301      	movs	r3, #1
 8002a94:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <read_ambient_temp+0x74>)
 8002a96:	f001 fd8b 	bl	80045b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ambient_sens_addr, tempr_data_buff, 2, 500);
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
 8002a9c:	b299      	uxth	r1, r3
 8002a9e:	1d3a      	adds	r2, r7, #4
 8002aa0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	480e      	ldr	r0, [pc, #56]	; (8002ae4 <read_ambient_temp+0x74>)
 8002aaa:	f001 fe7f 	bl	80047ac <HAL_I2C_Master_Receive>
	final_tempr = (tempr_data_buff[0] << 4) | (tempr_data_buff[1]);
 8002aae:	793b      	ldrb	r3, [r7, #4]
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	797a      	ldrb	r2, [r7, #5]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]

	// Configuration register defaults to highest res with scale factor of .0625
	return final_tempr * .0625;
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f7fd fd53 	bl	8000564 <__aeabi_i2d>
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <read_ambient_temp+0x78>)
 8002ac4:	f7fd fdb8 	bl	8000638 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f88a 	bl	8000be8 <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	ee07 3a90 	vmov	s15, r3
}
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	200002f8 	.word	0x200002f8
 8002ae8:	3fb00000 	.word	0x3fb00000
 8002aec:	00000000 	.word	0x00000000

08002af0 <read_plate_temp>:

/*	Routine for reading IR Temp Sensor MLX90614		*/
float read_plate_temp()
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af04      	add	r7, sp, #16

	uint8_t ir_sens_addr = 0x5A << 1;	// Note address needs to be shifted by 1 bit in this protocol
 8002af6:	23b4      	movs	r3, #180	; 0xb4
 8002af8:	73fb      	strb	r3, [r7, #15]
	uint8_t t_amb_addr = 0x06, t_obj_addr = 0x07;
 8002afa:	2306      	movs	r3, #6
 8002afc:	73bb      	strb	r3, [r7, #14]
 8002afe:	2307      	movs	r3, #7
 8002b00:	737b      	strb	r3, [r7, #13]
	uint8_t tempr_data_buff[3];
	int final_tempr = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]

	// Routine as described for dataread from MLX90614 DS
	// TODO: May need to program temperature range and emissivity constant within EEPROM (see DS for protocol)
	HAL_I2C_Mem_Read(&hi2c1, ir_sens_addr, t_obj_addr, 1, tempr_data_buff, 3, 100);	// Note use this function it is better somehow
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	b299      	uxth	r1, r3
 8002b0a:	7b7b      	ldrb	r3, [r7, #13]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	2364      	movs	r3, #100	; 0x64
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2303      	movs	r3, #3
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	481c      	ldr	r0, [pc, #112]	; (8002b90 <read_plate_temp+0xa0>)
 8002b1e:	f002 f86b 	bl	8004bf8 <HAL_I2C_Mem_Read>

	// Final temperature = Tobj * .02 - 273.15
	final_tempr = (tempr_data_buff[1] << 8 | tempr_data_buff[0]) * .02;	// Result in Kelvin
 8002b22:	797b      	ldrb	r3, [r7, #5]
 8002b24:	021b      	lsls	r3, r3, #8
 8002b26:	793a      	ldrb	r2, [r7, #4]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd1a 	bl	8000564 <__aeabi_i2d>
 8002b30:	a313      	add	r3, pc, #76	; (adr r3, 8002b80 <read_plate_temp+0x90>)
 8002b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b36:	f7fd fd7f 	bl	8000638 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f829 	bl	8000b98 <__aeabi_d2iz>
 8002b46:	4603      	mov	r3, r0
 8002b48:	60bb      	str	r3, [r7, #8]
	final_tempr -= 273.15;
 8002b4a:	68b8      	ldr	r0, [r7, #8]
 8002b4c:	f7fd fd0a 	bl	8000564 <__aeabi_i2d>
 8002b50:	a30d      	add	r3, pc, #52	; (adr r3, 8002b88 <read_plate_temp+0x98>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fbb7 	bl	80002c8 <__aeabi_dsub>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f819 	bl	8000b98 <__aeabi_d2iz>
 8002b66:	4603      	mov	r3, r0
 8002b68:	60bb      	str	r3, [r7, #8]

	return final_tempr;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	47ae147b 	.word	0x47ae147b
 8002b84:	3f947ae1 	.word	0x3f947ae1
 8002b88:	66666666 	.word	0x66666666
 8002b8c:	40711266 	.word	0x40711266
 8002b90:	200002f8 	.word	0x200002f8

08002b94 <System_Initialization>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* Initialize peripherals, fan, and hotplate, control systems in off state, LCD display IDLE */
void System_Initialization()
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

	/* Disable all peripherals */
	HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_SET);	// Disable sensors
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	4812      	ldr	r0, [pc, #72]	; (8002be8 <System_Initialization+0x54>)
 8002b9e:	f001 fb6b 	bl	8004278 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);		// Disable hotplate voltage
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba8:	480f      	ldr	r0, [pc, #60]	; (8002be8 <System_Initialization+0x54>)
 8002baa:	f001 fb65 	bl	8004278 <HAL_GPIO_WritePin>
	PWM_Update(fan_pwm, TIM_CHANNEL_1, 1);								// Disable fan (100% DC)
 8002bae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <System_Initialization+0x58>)
 8002bb6:	f7ff fde1 	bl	800277c <PWM_Update>
	PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 1);							// Disable hotplate (100% DC)
 8002bba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <System_Initialization+0x5c>)
 8002bc2:	f7ff fddb 	bl	800277c <PWM_Update>

	/* Initialize control structures */
	Controller_Init(&fan);
 8002bc6:	480b      	ldr	r0, [pc, #44]	; (8002bf4 <System_Initialization+0x60>)
 8002bc8:	f7fe f9e0 	bl	8000f8c <Controller_Init>
	Controller_Init(&hotplate);
 8002bcc:	480a      	ldr	r0, [pc, #40]	; (8002bf8 <System_Initialization+0x64>)
 8002bce:	f7fe f9dd 	bl	8000f8c <Controller_Init>

	/* Initialize LCD */
	LCD_init();
 8002bd2:	f7ff f977 	bl	8001ec4 <LCD_init>
	LCD_Refresh(STATE);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <System_Initialization+0x68>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fa19 	bl	8002014 <LCD_Refresh>

};
 8002be2:	bf00      	nop
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40020800 	.word	0x40020800
 8002bec:	2000049c 	.word	0x2000049c
 8002bf0:	200003c4 	.word	0x200003c4
 8002bf4:	2000005c 	.word	0x2000005c
 8002bf8:	20000088 	.word	0x20000088
 8002bfc:	20000354 	.word	0x20000354

08002c00 <update_temps>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Update current system temperatures */
void update_temps()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	  measured_amb_temp = read_ambient_temp();
 8002c04:	f7ff ff34 	bl	8002a70 <read_ambient_temp>
 8002c08:	eef0 7a40 	vmov.f32	s15, s0
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <update_temps+0x24>)
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
	  measured_hotplate_temp = read_plate_temp();
 8002c12:	f7ff ff6d 	bl	8002af0 <read_plate_temp>
 8002c16:	eef0 7a40 	vmov.f32	s15, s0
 8002c1a:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <update_temps+0x28>)
 8002c1c:	edc3 7a00 	vstr	s15, [r3]
};
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	2000034c 	.word	0x2000034c
 8002c28:	20000350 	.word	0x20000350

08002c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c32:	f000 ffed 	bl	8003c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c36:	f000 f90d 	bl	8002e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c3a:	f7ff fdef 	bl	800281c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c3e:	f7ff fea1 	bl	8002984 <MX_I2C1_Init>
  MX_TIM5_Init();
 8002c42:	f000 fd51 	bl	80036e8 <MX_TIM5_Init>
  MX_SPI1_Init();
 8002c46:	f000 f977 	bl	8002f38 <MX_SPI1_Init>
  MX_TIM9_Init();
 8002c4a:	f000 fddb 	bl	8003804 <MX_TIM9_Init>
  MX_TIM1_Init();
 8002c4e:	f000 fcc7 	bl	80035e0 <MX_TIM1_Init>
  MX_TIM11_Init();
 8002c52:	f000 fe35 	bl	80038c0 <MX_TIM11_Init>
  MX_TIM6_Init();
 8002c56:	f000 fd9f 	bl	8003798 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /** Initialize System **/
  System_Initialization();
 8002c5a:	f7ff ff9b 	bl	8002b94 <System_Initialization>

  /** Take measurements for calculation of PI gain constants **/
//  ZN_Tuning();

  // Initialize local variables
  int heating_stage = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
  int graph_refresh = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /** SYSTEM STATE MACHINE **/
	  switch (STATE)
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <main+0x1f4>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d04e      	beq.n	8002d0c <main+0xe0>
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f300 80d3 	bgt.w	8002e1a <main+0x1ee>
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <main+0x52>
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d022      	beq.n	8002cc2 <main+0x96>

						  }

		  default :

			  break;
 8002c7c:	e0cd      	b.n	8002e1a <main+0x1ee>
			  LCD_Refresh(STATE);
 8002c7e:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <main+0x1f4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f9c5 	bl	8002014 <LCD_Refresh>
			  heating_stage = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	607b      	str	r3, [r7, #4]
			  graph_refresh = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	603b      	str	r3, [r7, #0]
				HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_SET);	// Disable sensors
 8002c92:	2201      	movs	r2, #1
 8002c94:	2110      	movs	r1, #16
 8002c96:	4863      	ldr	r0, [pc, #396]	; (8002e24 <main+0x1f8>)
 8002c98:	f001 faee 	bl	8004278 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_SET);		// Disable hotplate voltage
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ca2:	4860      	ldr	r0, [pc, #384]	; (8002e24 <main+0x1f8>)
 8002ca4:	f001 fae8 	bl	8004278 <HAL_GPIO_WritePin>
				PWM_Update(fan_pwm, TIM_CHANNEL_1, 1);								// Disable fan (100% DC)
 8002ca8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002cac:	2100      	movs	r1, #0
 8002cae:	485e      	ldr	r0, [pc, #376]	; (8002e28 <main+0x1fc>)
 8002cb0:	f7ff fd64 	bl	800277c <PWM_Update>
				PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 1);							// Disable hotplate (100% DC)
 8002cb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	485c      	ldr	r0, [pc, #368]	; (8002e2c <main+0x200>)
 8002cbc:	f7ff fd5e 	bl	800277c <PWM_Update>
			  break;
 8002cc0:	e0ac      	b.n	8002e1c <main+0x1f0>
			  HAL_GPIO_WritePin(EN_12V_GPIO_Port, EN_12V_Pin, GPIO_PIN_RESET);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc8:	4856      	ldr	r0, [pc, #344]	; (8002e24 <main+0x1f8>)
 8002cca:	f001 fad5 	bl	8004278 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(SENS_DIS_GPIO_Port, SENS_DIS_Pin, GPIO_PIN_RESET);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2110      	movs	r1, #16
 8002cd2:	4854      	ldr	r0, [pc, #336]	; (8002e24 <main+0x1f8>)
 8002cd4:	f001 fad0 	bl	8004278 <HAL_GPIO_WritePin>
			  PWM_Update(fan_pwm, TIM_CHANNEL_1, .5);
 8002cd8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4852      	ldr	r0, [pc, #328]	; (8002e28 <main+0x1fc>)
 8002ce0:	f7ff fd4c 	bl	800277c <PWM_Update>
			  HAL_GPIO_WritePin(DISP_DIS_GPIO_Port, DISP_DIS_Pin, GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2120      	movs	r1, #32
 8002ce8:	484e      	ldr	r0, [pc, #312]	; (8002e24 <main+0x1f8>)
 8002cea:	f001 fac5 	bl	8004278 <HAL_GPIO_WritePin>
			  LCD_usr_inputs(&user_preheat_temp, &user_preheat_time, &user_temp, &user_reflow_time);
 8002cee:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <main+0x204>)
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <main+0x208>)
 8002cf2:	4951      	ldr	r1, [pc, #324]	; (8002e38 <main+0x20c>)
 8002cf4:	4851      	ldr	r0, [pc, #324]	; (8002e3c <main+0x210>)
 8002cf6:	f7ff f8c5 	bl	8001e84 <LCD_usr_inputs>
			  LCD_Refresh(STATE);
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <main+0x1f4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f987 	bl	8002014 <LCD_Refresh>
			  update_temps();
 8002d06:	f7ff ff7b 	bl	8002c00 <update_temps>
			  break;
 8002d0a:	e087      	b.n	8002e1c <main+0x1f0>
				  if (graph_refresh == 0) {	// Scuffed timerless version of slowing refresh rate
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <main+0xfa>
					  LCD_updt_temps(&measured_hotplate_temp, &measured_amb_temp);
 8002d12:	494b      	ldr	r1, [pc, #300]	; (8002e40 <main+0x214>)
 8002d14:	484b      	ldr	r0, [pc, #300]	; (8002e44 <main+0x218>)
 8002d16:	f7ff f89f 	bl	8001e58 <LCD_updt_temps>
					  LCD_Refresh(STATE);
 8002d1a:	4b41      	ldr	r3, [pc, #260]	; (8002e20 <main+0x1f4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f977 	bl	8002014 <LCD_Refresh>
				  graph_refresh = (graph_refresh + 1) % 100;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	4a47      	ldr	r2, [pc, #284]	; (8002e48 <main+0x21c>)
 8002d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d30:	1151      	asrs	r1, r2, #5
 8002d32:	17da      	asrs	r2, r3, #31
 8002d34:	1a8a      	subs	r2, r1, r2
 8002d36:	2164      	movs	r1, #100	; 0x64
 8002d38:	fb01 f202 	mul.w	r2, r1, r2
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	603b      	str	r3, [r7, #0]
				  update_temps();
 8002d40:	f7ff ff5e 	bl	8002c00 <update_temps>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d862      	bhi.n	8002e10 <main+0x1e4>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <main+0x124>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d8d 	.word	0x08002d8d
 8002d58:	08002db7 	.word	0x08002db7
 8002d5c:	08002de3 	.word	0x08002de3
							  if (measured_hotplate_temp < user_temp) {
 8002d60:	4b38      	ldr	r3, [pc, #224]	; (8002e44 <main+0x218>)
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	4b33      	ldr	r3, [pc, #204]	; (8002e34 <main+0x208>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d74:	d506      	bpl.n	8002d84 <main+0x158>
								  PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 0.0);	// Max plate by turning FET off
 8002d76:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8002e4c <main+0x220>
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	482b      	ldr	r0, [pc, #172]	; (8002e2c <main+0x200>)
 8002d7e:	f7ff fcfd 	bl	800277c <PWM_Update>
							  break;
 8002d82:	e04a      	b.n	8002e1a <main+0x1ee>
								  heating_stage++;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3301      	adds	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
							  break;
 8002d8a:	e046      	b.n	8002e1a <main+0x1ee>
							  if (HAL_TIM_Base_GetState(control_timer) != HAL_TIM_STATE_BUSY) {
 8002d8c:	4830      	ldr	r0, [pc, #192]	; (8002e50 <main+0x224>)
 8002d8e:	f004 f983 	bl	8007098 <HAL_TIM_Base_GetState>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d002      	beq.n	8002d9e <main+0x172>
								  start_preheat();
 8002d98:	f000 f974 	bl	8003084 <start_preheat>
							  break;
 8002d9c:	e03a      	b.n	8002e14 <main+0x1e8>
							  }	else if ( preheat_status() ){	// If preheat time has been completed
 8002d9e:	f000 f9a9 	bl	80030f4 <preheat_status>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d035      	beq.n	8002e14 <main+0x1e8>
								  HAL_TIM_Base_Stop_IT(control_timer);
 8002da8:	4829      	ldr	r0, [pc, #164]	; (8002e50 <main+0x224>)
 8002daa:	f003 fd4d 	bl	8006848 <HAL_TIM_Base_Stop_IT>
								  heating_stage++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3301      	adds	r3, #1
 8002db2:	607b      	str	r3, [r7, #4]
							  break;
 8002db4:	e02e      	b.n	8002e14 <main+0x1e8>
							  if (measured_hotplate_temp < user_temp) {
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <main+0x218>)
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <main+0x208>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dca:	d506      	bpl.n	8002dda <main+0x1ae>
								  PWM_Update(hotplate_pwm, TIM_CHANNEL_1, 0.0);	// Max plate by turning FET off
 8002dcc:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002e4c <main+0x220>
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4816      	ldr	r0, [pc, #88]	; (8002e2c <main+0x200>)
 8002dd4:	f7ff fcd2 	bl	800277c <PWM_Update>
							  break;
 8002dd8:	e01f      	b.n	8002e1a <main+0x1ee>
								  heating_stage++;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
							  break;
 8002de0:	e01b      	b.n	8002e1a <main+0x1ee>
							  if (HAL_TIM_Base_GetState(control_timer) != HAL_TIM_STATE_BUSY) {
 8002de2:	481b      	ldr	r0, [pc, #108]	; (8002e50 <main+0x224>)
 8002de4:	f004 f958 	bl	8007098 <HAL_TIM_Base_GetState>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d002      	beq.n	8002df4 <main+0x1c8>
								  start_reflow();
 8002dee:	f000 f965 	bl	80030bc <start_reflow>
							  break;
 8002df2:	e011      	b.n	8002e18 <main+0x1ec>
							  }	else if ( reflow_status() ){	// If reflow time has been completed
 8002df4:	f000 f98a 	bl	800310c <reflow_status>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <main+0x1ec>
								  HAL_TIM_Base_Stop_IT(control_timer);
 8002dfe:	4814      	ldr	r0, [pc, #80]	; (8002e50 <main+0x224>)
 8002e00:	f003 fd22 	bl	8006848 <HAL_TIM_Base_Stop_IT>
								  heating_stage = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
								  STATE = 0;
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <main+0x1f4>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
							  break;
 8002e0e:	e003      	b.n	8002e18 <main+0x1ec>
							  break;
 8002e10:	bf00      	nop
 8002e12:	e002      	b.n	8002e1a <main+0x1ee>
							  break;
 8002e14:	bf00      	nop
 8002e16:	e000      	b.n	8002e1a <main+0x1ee>
							  break;
 8002e18:	bf00      	nop
			  break;
 8002e1a:	bf00      	nop
	  switch (STATE)
 8002e1c:	e723      	b.n	8002c66 <main+0x3a>
 8002e1e:	bf00      	nop
 8002e20:	20000354 	.word	0x20000354
 8002e24:	40020800 	.word	0x40020800
 8002e28:	2000049c 	.word	0x2000049c
 8002e2c:	200003c4 	.word	0x200003c4
 8002e30:	20000058 	.word	0x20000058
 8002e34:	2000004c 	.word	0x2000004c
 8002e38:	20000054 	.word	0x20000054
 8002e3c:	20000050 	.word	0x20000050
 8002e40:	2000034c 	.word	0x2000034c
 8002e44:	20000350 	.word	0x20000350
 8002e48:	51eb851f 	.word	0x51eb851f
 8002e4c:	00000000 	.word	0x00000000
 8002e50:	2000040c 	.word	0x2000040c

08002e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b094      	sub	sp, #80	; 0x50
 8002e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5a:	f107 031c 	add.w	r3, r7, #28
 8002e5e:	2234      	movs	r2, #52	; 0x34
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 fc36 	bl	80076d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e68:	f107 0308 	add.w	r3, r7, #8
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	60da      	str	r2, [r3, #12]
 8002e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <SystemClock_Config+0xd0>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4a28      	ldr	r2, [pc, #160]	; (8002f24 <SystemClock_Config+0xd0>)
 8002e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <SystemClock_Config+0xd0>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e94:	2300      	movs	r3, #0
 8002e96:	603b      	str	r3, [r7, #0]
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <SystemClock_Config+0xd4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <SystemClock_Config+0xd4>)
 8002e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <SystemClock_Config+0xd4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002eac:	603b      	str	r3, [r7, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002eb8:	2310      	movs	r3, #16
 8002eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002ec8:	2360      	movs	r3, #96	; 0x60
 8002eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed8:	f107 031c 	add.w	r3, r7, #28
 8002edc:	4618      	mov	r0, r3
 8002ede:	f002 fe93 	bl	8005c08 <HAL_RCC_OscConfig>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ee8:	f000 f820 	bl	8002f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eec:	230f      	movs	r3, #15
 8002eee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 fcb0 	bl	8005870 <HAL_RCC_ClockConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f16:	f000 f809 	bl	8002f2c <Error_Handler>
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	3750      	adds	r7, #80	; 0x50
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40007000 	.word	0x40007000

08002f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f30:	b672      	cpsid	i
}
 8002f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <Error_Handler+0x8>
	...

08002f38 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f3e:	4a18      	ldr	r2, [pc, #96]	; (8002fa0 <MX_SPI1_Init+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f42:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f56:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f84:	220f      	movs	r2, #15
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f88:	4804      	ldr	r0, [pc, #16]	; (8002f9c <MX_SPI1_Init+0x64>)
 8002f8a:	f003 f8c1 	bl	8006110 <HAL_SPI_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f94:	f7ff ffca 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f98:	bf00      	nop
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000035c 	.word	0x2000035c
 8002fa0:	40013000 	.word	0x40013000

08002fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a19      	ldr	r2, [pc, #100]	; (8003028 <HAL_SPI_MspInit+0x84>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12b      	bne.n	800301e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_SPI_MspInit+0x88>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ffe:	23a0      	movs	r3, #160	; 0xa0
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800300e:	2305      	movs	r3, #5
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4805      	ldr	r0, [pc, #20]	; (8003030 <HAL_SPI_MspInit+0x8c>)
 800301a:	f000 ffa1 	bl	8003f60 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800301e:	bf00      	nop
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40013000 	.word	0x40013000
 800302c:	40023800 	.word	0x40023800
 8003030:	40020000 	.word	0x40020000

08003034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	607b      	str	r3, [r7, #4]
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_MspInit+0x4c>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <HAL_MspInit+0x4c>)
 8003044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003048:	6453      	str	r3, [r2, #68]	; 0x44
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_MspInit+0x4c>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_MspInit+0x4c>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_MspInit+0x4c>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_MspInit+0x4c>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <start_preheat>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void start_preheat()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
	heat_complete = 0;
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <start_preheat+0x28>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
	heat_time = user_preheat_time;
 800308e:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <start_preheat+0x2c>)
 8003090:	edd3 7a00 	vldr	s15, [r3]
 8003094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003098:	ee17 2a90 	vmov	r2, s15
 800309c:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <start_preheat+0x30>)
 800309e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(control_timer);
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <start_preheat+0x34>)
 80030a2:	f003 fb83 	bl	80067ac <HAL_TIM_Base_Start_IT>

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	200003bc 	.word	0x200003bc
 80030b0:	20000054 	.word	0x20000054
 80030b4:	200003b8 	.word	0x200003b8
 80030b8:	2000040c 	.word	0x2000040c

080030bc <start_reflow>:
void start_reflow()
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0

	heat_complete = 0;
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <start_reflow+0x28>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
	heat_time = user_reflow_time;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <start_reflow+0x2c>)
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d0:	ee17 2a90 	vmov	r2, s15
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <start_reflow+0x30>)
 80030d6:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(control_timer);
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <start_reflow+0x34>)
 80030da:	f003 fb67 	bl	80067ac <HAL_TIM_Base_Start_IT>

}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200003bc 	.word	0x200003bc
 80030e8:	20000058 	.word	0x20000058
 80030ec:	200003b8 	.word	0x200003b8
 80030f0:	2000040c 	.word	0x2000040c

080030f4 <preheat_status>:
int preheat_status()
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
	return heat_complete;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <preheat_status+0x14>)
 80030fa:	681b      	ldr	r3, [r3, #0]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	200003bc 	.word	0x200003bc

0800310c <reflow_status>:
int reflow_status()
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	return heat_complete;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <reflow_status+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200003bc 	.word	0x200003bc

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <NMI_Handler+0x4>

0800312a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800312e:	e7fe      	b.n	800312e <HardFault_Handler+0x4>

08003130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler+0x4>

08003136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800313a:	e7fe      	b.n	800313a <BusFault_Handler+0x4>

0800313c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003140:	e7fe      	b.n	8003140 <UsageFault_Handler+0x4>

08003142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003170:	f000 fda0 	bl	8003cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}

08003178 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800317e:	f003 fd33 	bl	8006be8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8003182:	4803      	ldr	r0, [pc, #12]	; (8003190 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8003184:	f003 fd30 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200003c4 	.word	0x200003c4
 8003190:	2000049c 	.word	0x2000049c

08003194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* BEGIN INTERRUPT MASKING FOR ENCODER */

	// Check pushbutton
	if(!HAL_GPIO_ReadPin(GPIOB, ROT_SW_Pin)) {
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	4868      	ldr	r0, [pc, #416]	; (8003340 <EXTI15_10_IRQHandler+0x1ac>)
 800319e:	f001 f853 	bl	8004248 <HAL_GPIO_ReadPin>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d135      	bne.n	8003214 <EXTI15_10_IRQHandler+0x80>

		// If pushbutton pressed, start a timer to check for a hold
		HAL_TIM_Base_Start(&htim6);
 80031a8:	4866      	ldr	r0, [pc, #408]	; (8003344 <EXTI15_10_IRQHandler+0x1b0>)
 80031aa:	f003 fa91 	bl	80066d0 <HAL_TIM_Base_Start>
		while(__HAL_TIM_GET_COUNTER(&htim6) < 5000);
 80031ae:	bf00      	nop
 80031b0:	4b64      	ldr	r3, [pc, #400]	; (8003344 <EXTI15_10_IRQHandler+0x1b0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	f241 3287 	movw	r2, #4999	; 0x1387
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d9f8      	bls.n	80031b0 <EXTI15_10_IRQHandler+0x1c>

		// If the button has been held for the length of the timer, change state
		if(!HAL_GPIO_ReadPin(GPIOB, ROT_SW_Pin)) {
 80031be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c2:	485f      	ldr	r0, [pc, #380]	; (8003340 <EXTI15_10_IRQHandler+0x1ac>)
 80031c4:	f001 f840 	bl	8004248 <HAL_GPIO_ReadPin>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10e      	bne.n	80031ec <EXTI15_10_IRQHandler+0x58>

			STATE = (STATE + 1) % 3;
 80031ce:	4b5e      	ldr	r3, [pc, #376]	; (8003348 <EXTI15_10_IRQHandler+0x1b4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	1c59      	adds	r1, r3, #1
 80031d4:	4b5d      	ldr	r3, [pc, #372]	; (800334c <EXTI15_10_IRQHandler+0x1b8>)
 80031d6:	fb83 3201 	smull	r3, r2, r3, r1
 80031da:	17cb      	asrs	r3, r1, #31
 80031dc:	1ad2      	subs	r2, r2, r3
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	1aca      	subs	r2, r1, r3
 80031e6:	4b58      	ldr	r3, [pc, #352]	; (8003348 <EXTI15_10_IRQHandler+0x1b4>)
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e00b      	b.n	8003204 <EXTI15_10_IRQHandler+0x70>

		}	else {	// Otherwise, the button was tapped to set other parameter

				set_user_temp_flag = (set_user_temp_flag + 1) % 4;
 80031ec:	4b58      	ldr	r3, [pc, #352]	; (8003350 <EXTI15_10_IRQHandler+0x1bc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	425a      	negs	r2, r3
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	f002 0203 	and.w	r2, r2, #3
 80031fc:	bf58      	it	pl
 80031fe:	4253      	negpl	r3, r2
 8003200:	4a53      	ldr	r2, [pc, #332]	; (8003350 <EXTI15_10_IRQHandler+0x1bc>)
 8003202:	6013      	str	r3, [r2, #0]

		}

		// Reset the timer for the next iteration
		HAL_TIM_Base_Stop(&htim6);
 8003204:	484f      	ldr	r0, [pc, #316]	; (8003344 <EXTI15_10_IRQHandler+0x1b0>)
 8003206:	f003 faa9 	bl	800675c <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COUNTER(&htim6, 0);
 800320a:	4b4e      	ldr	r3, [pc, #312]	; (8003344 <EXTI15_10_IRQHandler+0x1b0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	; 0x24
 8003212:	e08a      	b.n	800332a <EXTI15_10_IRQHandler+0x196>

	} else {	// If the pushbutton didn't trigger the interrupt, one of the rotary encoder twists must have

		// If CW, A goes LO first while B is HI
		if(!HAL_GPIO_ReadPin(GPIOB, DEB_A_Pin) && HAL_GPIO_ReadPin(GPIOB, DEB_B_Pin)) {
 8003214:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003218:	4849      	ldr	r0, [pc, #292]	; (8003340 <EXTI15_10_IRQHandler+0x1ac>)
 800321a:	f001 f815 	bl	8004248 <HAL_GPIO_ReadPin>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d145      	bne.n	80032b0 <EXTI15_10_IRQHandler+0x11c>
 8003224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003228:	4845      	ldr	r0, [pc, #276]	; (8003340 <EXTI15_10_IRQHandler+0x1ac>)
 800322a:	f001 f80d 	bl	8004248 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d03d      	beq.n	80032b0 <EXTI15_10_IRQHandler+0x11c>

			// Update whichever variable is selected on the display
			switch (set_user_temp_flag) {
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <EXTI15_10_IRQHandler+0x1bc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d837      	bhi.n	80032ac <EXTI15_10_IRQHandler+0x118>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <EXTI15_10_IRQHandler+0xb0>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003255 	.word	0x08003255
 8003248:	0800326b 	.word	0x0800326b
 800324c:	08003281 	.word	0x08003281
 8003250:	08003297 	.word	0x08003297

			case 0:
				user_preheat_temp++;
 8003254:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <EXTI15_10_IRQHandler+0x1c0>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800325e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003262:	4b3c      	ldr	r3, [pc, #240]	; (8003354 <EXTI15_10_IRQHandler+0x1c0>)
 8003264:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003268:	e021      	b.n	80032ae <EXTI15_10_IRQHandler+0x11a>
			case 1:
				user_preheat_time++;
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <EXTI15_10_IRQHandler+0x1c4>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003278:	4b37      	ldr	r3, [pc, #220]	; (8003358 <EXTI15_10_IRQHandler+0x1c4>)
 800327a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800327e:	e016      	b.n	80032ae <EXTI15_10_IRQHandler+0x11a>
			case 2:
				user_temp++;
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <EXTI15_10_IRQHandler+0x1c8>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800328a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800328e:	4b33      	ldr	r3, [pc, #204]	; (800335c <EXTI15_10_IRQHandler+0x1c8>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003294:	e00b      	b.n	80032ae <EXTI15_10_IRQHandler+0x11a>
			case 3:
				user_reflow_time++;
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <EXTI15_10_IRQHandler+0x1cc>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032a4:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <EXTI15_10_IRQHandler+0x1cc>)
 80032a6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80032aa:	e000      	b.n	80032ae <EXTI15_10_IRQHandler+0x11a>
			default:
				break;
 80032ac:	bf00      	nop
			switch (set_user_temp_flag) {
 80032ae:	e03c      	b.n	800332a <EXTI15_10_IRQHandler+0x196>


		} else { 	// Otherwise it is a CCW rotation

			// Update whichever variable is selected on the display
			switch (set_user_temp_flag) {
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <EXTI15_10_IRQHandler+0x1bc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d837      	bhi.n	8003328 <EXTI15_10_IRQHandler+0x194>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <EXTI15_10_IRQHandler+0x12c>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032d1 	.word	0x080032d1
 80032c4:	080032e7 	.word	0x080032e7
 80032c8:	080032fd 	.word	0x080032fd
 80032cc:	08003313 	.word	0x08003313

			case 0:
				user_preheat_temp--;
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <EXTI15_10_IRQHandler+0x1c0>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032de:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <EXTI15_10_IRQHandler+0x1c0>)
 80032e0:	edc3 7a00 	vstr	s15, [r3]
				break;
 80032e4:	e021      	b.n	800332a <EXTI15_10_IRQHandler+0x196>
			case 1:
				user_preheat_time--;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <EXTI15_10_IRQHandler+0x1c4>)
 80032e8:	edd3 7a00 	vldr	s15, [r3]
 80032ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <EXTI15_10_IRQHandler+0x1c4>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
				break;
 80032fa:	e016      	b.n	800332a <EXTI15_10_IRQHandler+0x196>
			case 2:
				user_temp--;
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <EXTI15_10_IRQHandler+0x1c8>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <EXTI15_10_IRQHandler+0x1c8>)
 800330c:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003310:	e00b      	b.n	800332a <EXTI15_10_IRQHandler+0x196>
			case 3:
				user_reflow_time--;
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <EXTI15_10_IRQHandler+0x1cc>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800331c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <EXTI15_10_IRQHandler+0x1cc>)
 8003322:	edc3 7a00 	vstr	s15, [r3]
				break;
 8003326:	e000      	b.n	800332a <EXTI15_10_IRQHandler+0x196>
			default:
				break;
 8003328:	bf00      	nop
	}

	/* END INTERRUPT MASKING FOR ENCODER */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DEB_A_Pin);
 800332a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800332e:	f000 ffd7 	bl	80042e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 8003332:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003336:	f000 ffd3 	bl	80042e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	40020400 	.word	0x40020400
 8003344:	20000454 	.word	0x20000454
 8003348:	20000354 	.word	0x20000354
 800334c:	55555556 	.word	0x55555556
 8003350:	20000358 	.word	0x20000358
 8003354:	20000050 	.word	0x20000050
 8003358:	20000054 	.word	0x20000054
 800335c:	2000004c 	.word	0x2000004c
 8003360:	20000058 	.word	0x20000058

08003364 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

	/* For a given amount of time, keep temperatures stable */
	if ( tick_counter <  ( heat_time * 5)) {	// Keep in mind timer interrupts configured for 5 Hz.
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <TIM5_IRQHandler+0x9c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <TIM5_IRQHandler+0xa0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	dd36      	ble.n	80033e8 <TIM5_IRQHandler+0x84>

			// DEBUG
			HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800337a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800337e:	4822      	ldr	r0, [pc, #136]	; (8003408 <TIM5_IRQHandler+0xa4>)
 8003380:	f000 ff93 	bl	80042aa <HAL_GPIO_TogglePin>

//			// Update temps
//			update_temps();

			// Update fan speed
			Controller_Update(&fan, 30.0, measured_amb_temp);
 8003384:	4b21      	ldr	r3, [pc, #132]	; (800340c <TIM5_IRQHandler+0xa8>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	eef0 0a67 	vmov.f32	s1, s15
 800338e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <TIM5_IRQHandler+0xac>)
 8003394:	f7fd fe14 	bl	8000fc0 <Controller_Update>
			PWM_Update(fan_pwm, TIM_CHANNEL_1, fan.out);
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <TIM5_IRQHandler+0xac>)
 800339a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800339e:	eeb0 0a67 	vmov.f32	s0, s15
 80033a2:	2100      	movs	r1, #0
 80033a4:	481b      	ldr	r0, [pc, #108]	; (8003414 <TIM5_IRQHandler+0xb0>)
 80033a6:	f7ff f9e9 	bl	800277c <PWM_Update>

			// Update plate temperature
			Controller_Update(&hotplate, user_temp, measured_hotplate_temp);
 80033aa:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <TIM5_IRQHandler+0xb4>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	4b1a      	ldr	r3, [pc, #104]	; (800341c <TIM5_IRQHandler+0xb8>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	eef0 0a47 	vmov.f32	s1, s14
 80033ba:	eeb0 0a67 	vmov.f32	s0, s15
 80033be:	4818      	ldr	r0, [pc, #96]	; (8003420 <TIM5_IRQHandler+0xbc>)
 80033c0:	f7fd fdfe 	bl	8000fc0 <Controller_Update>
			PWM_Update(hotplate_pwm, TIM_CHANNEL_1, hotplate.out);
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <TIM5_IRQHandler+0xbc>)
 80033c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80033ca:	eeb0 0a67 	vmov.f32	s0, s15
 80033ce:	2100      	movs	r1, #0
 80033d0:	4814      	ldr	r0, [pc, #80]	; (8003424 <TIM5_IRQHandler+0xc0>)
 80033d2:	f7ff f9d3 	bl	800277c <PWM_Update>

		heat_complete = 0;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <TIM5_IRQHandler+0xc4>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
		tick_counter++;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <TIM5_IRQHandler+0xa0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a08      	ldr	r2, [pc, #32]	; (8003404 <TIM5_IRQHandler+0xa0>)
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e005      	b.n	80033f4 <TIM5_IRQHandler+0x90>

	} else { 	// Else we must have reached tick count, reset counter

		tick_counter = 0;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <TIM5_IRQHandler+0xa0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

		// Set heating cycle complete flag
		heat_complete = 1;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <TIM5_IRQHandler+0xc4>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	601a      	str	r2, [r3, #0]




  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033f4:	480d      	ldr	r0, [pc, #52]	; (800342c <TIM5_IRQHandler+0xc8>)
 80033f6:	f003 fbf7 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200003b8 	.word	0x200003b8
 8003404:	200003b4 	.word	0x200003b4
 8003408:	40020800 	.word	0x40020800
 800340c:	2000034c 	.word	0x2000034c
 8003410:	2000005c 	.word	0x2000005c
 8003414:	2000049c 	.word	0x2000049c
 8003418:	2000004c 	.word	0x2000004c
 800341c:	20000350 	.word	0x20000350
 8003420:	20000088 	.word	0x20000088
 8003424:	200003c4 	.word	0x200003c4
 8003428:	200003bc 	.word	0x200003bc
 800342c:	2000040c 	.word	0x2000040c

08003430 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
	return 1;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <_kill>:

int _kill(int pid, int sig)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800344a:	f004 f903 	bl	8007654 <__errno>
 800344e:	4603      	mov	r3, r0
 8003450:	2216      	movs	r2, #22
 8003452:	601a      	str	r2, [r3, #0]
	return -1;
 8003454:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003458:	4618      	mov	r0, r3
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <_exit>:

void _exit (int status)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003468:	f04f 31ff 	mov.w	r1, #4294967295
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ffe7 	bl	8003440 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003472:	e7fe      	b.n	8003472 <_exit+0x12>

08003474 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e00a      	b.n	800349c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003486:	f3af 8000 	nop.w
 800348a:	4601      	mov	r1, r0
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	1c5a      	adds	r2, r3, #1
 8003490:	60ba      	str	r2, [r7, #8]
 8003492:	b2ca      	uxtb	r2, r1
 8003494:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3301      	adds	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	dbf0      	blt.n	8003486 <_read+0x12>
	}

return len;
 80034a4:	687b      	ldr	r3, [r7, #4]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	e009      	b.n	80034d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	60ba      	str	r2, [r7, #8]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	3301      	adds	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dbf1      	blt.n	80034c0 <_write+0x12>
	}
	return len;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <_close>:

int _close(int file)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
	return -1;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800350e:	605a      	str	r2, [r3, #4]
	return 0;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <_isatty>:

int _isatty(int file)
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
	return 1;
 8003526:	2301      	movs	r3, #1
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	return 0;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <_sbrk+0x5c>)
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <_sbrk+0x60>)
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003564:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <_sbrk+0x64>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <_sbrk+0x64>)
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <_sbrk+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003572:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	429a      	cmp	r2, r3
 800357e:	d207      	bcs.n	8003590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003580:	f004 f868 	bl	8007654 <__errno>
 8003584:	4603      	mov	r3, r0
 8003586:	220c      	movs	r2, #12
 8003588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e009      	b.n	80035a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <_sbrk+0x64>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003596:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <_sbrk+0x64>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <_sbrk+0x64>)
 80035a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035a2:	68fb      	ldr	r3, [r7, #12]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20008000 	.word	0x20008000
 80035b0:	00000400 	.word	0x00000400
 80035b4:	200003c0 	.word	0x200003c0
 80035b8:	20000540 	.word	0x20000540

080035bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <SystemInit+0x20>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	4a05      	ldr	r2, [pc, #20]	; (80035dc <SystemInit+0x20>)
 80035c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b092      	sub	sp, #72	; 0x48
 80035e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	60da      	str	r2, [r3, #12]
 80035fe:	611a      	str	r2, [r3, #16]
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	2220      	movs	r2, #32
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f004 f862 	bl	80076d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003610:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003612:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <MX_TIM1_Init+0x104>)
 8003614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8003616:	4b32      	ldr	r3, [pc, #200]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800361c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800361e:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 96;
 8003624:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003626:	2260      	movs	r2, #96	; 0x60
 8003628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800362a:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <MX_TIM1_Init+0x100>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003632:	2200      	movs	r2, #0
 8003634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800363c:	4828      	ldr	r0, [pc, #160]	; (80036e0 <MX_TIM1_Init+0x100>)
 800363e:	f003 f981 	bl	8006944 <HAL_TIM_PWM_Init>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003648:	f7ff fc70 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003650:	2300      	movs	r3, #0
 8003652:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003654:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003658:	4619      	mov	r1, r3
 800365a:	4821      	ldr	r0, [pc, #132]	; (80036e0 <MX_TIM1_Init+0x100>)
 800365c:	f003 ff3a 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003666:	f7ff fc61 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800366a:	2360      	movs	r3, #96	; 0x60
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003672:	2300      	movs	r3, #0
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003676:	2300      	movs	r3, #0
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800367a:	2300      	movs	r3, #0
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368a:	2200      	movs	r2, #0
 800368c:	4619      	mov	r1, r3
 800368e:	4814      	ldr	r0, [pc, #80]	; (80036e0 <MX_TIM1_Init+0x100>)
 8003690:	f003 fc0e 	bl	8006eb0 <HAL_TIM_PWM_ConfigChannel>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800369a:	f7ff fc47 	bl	8002f2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80036b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4807      	ldr	r0, [pc, #28]	; (80036e0 <MX_TIM1_Init+0x100>)
 80036c2:	f003 ff61 	bl	8007588 <HAL_TIMEx_ConfigBreakDeadTime>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80036cc:	f7ff fc2e 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80036d0:	4803      	ldr	r0, [pc, #12]	; (80036e0 <MX_TIM1_Init+0x100>)
 80036d2:	f000 f9e9 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 80036d6:	bf00      	nop
 80036d8:	3748      	adds	r7, #72	; 0x48
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	200003c4 	.word	0x200003c4
 80036e4:	40010000 	.word	0x40010000

080036e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_Init 0 */
	// This is configured for a period of .45 seconds rn
	// Right now TIM5 is used for timing control of system events
  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ee:	f107 0320 	add.w	r3, r7, #32
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	60da      	str	r2, [r3, #12]
 8003704:	611a      	str	r2, [r3, #16]
 8003706:	615a      	str	r2, [r3, #20]
 8003708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <MX_TIM5_Init+0xa8>)
 800370c:	4a21      	ldr	r2, [pc, #132]	; (8003794 <MX_TIM5_Init+0xac>)
 800370e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10000;
 8003710:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003712:	f242 7210 	movw	r2, #10000	; 0x2710
 8003716:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003718:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <MX_TIM5_Init+0xa8>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1920;
 800371e:	4b1c      	ldr	r3, [pc, #112]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003720:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8003724:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <MX_TIM5_Init+0xa8>)
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8003732:	4817      	ldr	r0, [pc, #92]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003734:	f003 f8b7 	bl	80068a6 <HAL_TIM_OC_Init>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800373e:	f7ff fbf5 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800374a:	f107 0320 	add.w	r3, r7, #32
 800374e:	4619      	mov	r1, r3
 8003750:	480f      	ldr	r0, [pc, #60]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003752:	f003 febf 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 800375c:	f7ff fbe6 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003760:	2300      	movs	r3, #0
 8003762:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	2200      	movs	r2, #0
 8003774:	4619      	mov	r1, r3
 8003776:	4806      	ldr	r0, [pc, #24]	; (8003790 <MX_TIM5_Init+0xa8>)
 8003778:	f003 fb3e 	bl	8006df8 <HAL_TIM_OC_ConfigChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8003782:	f7ff fbd3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003786:	bf00      	nop
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000040c 	.word	0x2000040c
 8003794:	40000c00 	.word	0x40000c00

08003798 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379e:	463b      	mov	r3, r7
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037a6:	4b15      	ldr	r3, [pc, #84]	; (80037fc <MX_TIM6_Init+0x64>)
 80037a8:	4a15      	ldr	r2, [pc, #84]	; (8003800 <MX_TIM6_Init+0x68>)
 80037aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9600;
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <MX_TIM6_Init+0x64>)
 80037ae:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037b2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <MX_TIM6_Init+0x64>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <MX_TIM6_Init+0x64>)
 80037bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <MX_TIM6_Init+0x64>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <MX_TIM6_Init+0x64>)
 80037ca:	f002 ff31 	bl	8006630 <HAL_TIM_Base_Init>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037d4:	f7ff fbaa 	bl	8002f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037dc:	2300      	movs	r3, #0
 80037de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037e0:	463b      	mov	r3, r7
 80037e2:	4619      	mov	r1, r3
 80037e4:	4805      	ldr	r0, [pc, #20]	; (80037fc <MX_TIM6_Init+0x64>)
 80037e6:	f003 fe75 	bl	80074d4 <HAL_TIMEx_MasterConfigSynchronization>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037f0:	f7ff fb9c 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000454 	.word	0x20000454
 8003800:	40001000 	.word	0x40001000

08003804 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
 8003818:	615a      	str	r2, [r3, #20]
 800381a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800381c:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <MX_TIM9_Init+0xb4>)
 800381e:	4a27      	ldr	r2, [pc, #156]	; (80038bc <MX_TIM9_Init+0xb8>)
 8003820:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1000;
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <MX_TIM9_Init+0xb4>)
 8003824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003828:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382a:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <MX_TIM9_Init+0xb4>)
 800382c:	2200      	movs	r2, #0
 800382e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 480;
 8003830:	4b21      	ldr	r3, [pc, #132]	; (80038b8 <MX_TIM9_Init+0xb4>)
 8003832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003836:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <MX_TIM9_Init+0xb4>)
 800383a:	2200      	movs	r2, #0
 800383c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <MX_TIM9_Init+0xb4>)
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003844:	481c      	ldr	r0, [pc, #112]	; (80038b8 <MX_TIM9_Init+0xb4>)
 8003846:	f003 f87d 	bl	8006944 <HAL_TIM_PWM_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 8003850:	f7ff fb6c 	bl	8002f2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8003854:	4818      	ldr	r0, [pc, #96]	; (80038b8 <MX_TIM9_Init+0xb4>)
 8003856:	f003 f826 	bl	80068a6 <HAL_TIM_OC_Init>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8003860:	f7ff fb64 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003864:	2360      	movs	r3, #96	; 0x60
 8003866:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 240;
 8003868:	23f0      	movs	r3, #240	; 0xf0
 800386a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	2200      	movs	r2, #0
 8003878:	4619      	mov	r1, r3
 800387a:	480f      	ldr	r0, [pc, #60]	; (80038b8 <MX_TIM9_Init+0xb4>)
 800387c:	f003 fb18 	bl	8006eb0 <HAL_TIM_PWM_ConfigChannel>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 8003886:	f7ff fb51 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800388a:	2300      	movs	r3, #0
 800388c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	2204      	movs	r2, #4
 8003896:	4619      	mov	r1, r3
 8003898:	4807      	ldr	r0, [pc, #28]	; (80038b8 <MX_TIM9_Init+0xb4>)
 800389a:	f003 faad 	bl	8006df8 <HAL_TIM_OC_ConfigChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM9_Init+0xa4>
  {
    Error_Handler();
 80038a4:	f7ff fb42 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80038a8:	4803      	ldr	r0, [pc, #12]	; (80038b8 <MX_TIM9_Init+0xb4>)
 80038aa:	f000 f8fd 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 80038ae:	bf00      	nop
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	2000049c 	.word	0x2000049c
 80038bc:	40014000 	.word	0x40014000

080038c0 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80038c6:	1d3b      	adds	r3, r7, #4
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
 80038d4:	615a      	str	r2, [r3, #20]
 80038d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <MX_TIM11_Init+0x94>)
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <MX_TIM11_Init+0x98>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80038de:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <MX_TIM11_Init+0x94>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <MX_TIM11_Init+0x94>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 34359;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <MX_TIM11_Init+0x94>)
 80038ec:	f248 6237 	movw	r2, #34359	; 0x8637
 80038f0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <MX_TIM11_Init+0x94>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f8:	4b16      	ldr	r3, [pc, #88]	; (8003954 <MX_TIM11_Init+0x94>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80038fe:	4815      	ldr	r0, [pc, #84]	; (8003954 <MX_TIM11_Init+0x94>)
 8003900:	f002 fe96 	bl	8006630 <HAL_TIM_Base_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800390a:	f7ff fb0f 	bl	8002f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800390e:	4811      	ldr	r0, [pc, #68]	; (8003954 <MX_TIM11_Init+0x94>)
 8003910:	f003 f818 	bl	8006944 <HAL_TIM_PWM_Init>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800391a:	f7ff fb07 	bl	8002f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800391e:	2360      	movs	r3, #96	; 0x60
 8003920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 17179;
 8003922:	f244 331b 	movw	r3, #17179	; 0x431b
 8003926:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003930:	1d3b      	adds	r3, r7, #4
 8003932:	2200      	movs	r2, #0
 8003934:	4619      	mov	r1, r3
 8003936:	4807      	ldr	r0, [pc, #28]	; (8003954 <MX_TIM11_Init+0x94>)
 8003938:	f003 faba 	bl	8006eb0 <HAL_TIM_PWM_ConfigChannel>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8003942:	f7ff faf3 	bl	8002f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8003946:	4803      	ldr	r0, [pc, #12]	; (8003954 <MX_TIM11_Init+0x94>)
 8003948:	f000 f8ae 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 800394c:	bf00      	nop
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	200004e4 	.word	0x200004e4
 8003958:	40014800 	.word	0x40014800

0800395c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_TIM_PWM_MspInit+0x80>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d116      	bne.n	800399c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6453      	str	r3, [r2, #68]	; 0x44
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800398a:	2200      	movs	r2, #0
 800398c:	2100      	movs	r1, #0
 800398e:	2018      	movs	r0, #24
 8003990:	f000 faaf 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003994:	2018      	movs	r0, #24
 8003996:	f000 fac8 	bl	8003f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800399a:	e01a      	b.n	80039d2 <HAL_TIM_PWM_MspInit+0x76>
  else if(tim_pwmHandle->Instance==TIM9)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <HAL_TIM_PWM_MspInit+0x88>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d115      	bne.n	80039d2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6453      	str	r3, [r2, #68]	; 0x44
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <HAL_TIM_PWM_MspInit+0x84>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	2100      	movs	r1, #0
 80039c6:	2018      	movs	r0, #24
 80039c8:	f000 fa93 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80039cc:	2018      	movs	r0, #24
 80039ce:	f000 faac 	bl	8003f2a <HAL_NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40010000 	.word	0x40010000
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40014000 	.word	0x40014000

080039e8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM5)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <HAL_TIM_OC_MspInit+0x48>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d115      	bne.n	8003a26 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_TIM_OC_MspInit+0x4c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <HAL_TIM_OC_MspInit+0x4c>)
 8003a04:	f043 0308 	orr.w	r3, r3, #8
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_TIM_OC_MspInit+0x4c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2101      	movs	r1, #1
 8003a1a:	2032      	movs	r0, #50	; 0x32
 8003a1c:	f000 fa69 	bl	8003ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003a20:	2032      	movs	r0, #50	; 0x32
 8003a22:	f000 fa82 	bl	8003f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40000c00 	.word	0x40000c00
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIM_Base_MspInit+0x64>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10e      	bne.n	8003a68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8003a66:	e012      	b.n	8003a8e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0d      	ldr	r2, [pc, #52]	; (8003aa4 <HAL_TIM_Base_MspInit+0x6c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10d      	bne.n	8003a8e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a09      	ldr	r2, [pc, #36]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <HAL_TIM_Base_MspInit+0x68>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40001000 	.word	0x40001000
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40014800 	.word	0x40014800

08003aa8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	; 0x28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 0314 	add.w	r3, r7, #20
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a37      	ldr	r2, [pc, #220]	; (8003ba4 <HAL_TIM_MspPostInit+0xfc>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d11f      	bne.n	8003b0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a35      	ldr	r2, [pc, #212]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PLATE_PWM_Pin;
 8003ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003af8:	2301      	movs	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PLATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8003afc:	f107 0314 	add.w	r3, r7, #20
 8003b00:	4619      	mov	r1, r3
 8003b02:	482a      	ldr	r0, [pc, #168]	; (8003bac <HAL_TIM_MspPostInit+0x104>)
 8003b04:	f000 fa2c 	bl	8003f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8003b08:	e047      	b.n	8003b9a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM9)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <HAL_TIM_MspPostInit+0x108>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d11e      	bne.n	8003b52 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b14:	2300      	movs	r3, #0
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	4b23      	ldr	r3, [pc, #140]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	4a22      	ldr	r2, [pc, #136]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	6313      	str	r3, [r2, #48]	; 0x30
 8003b24:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003b30:	2304      	movs	r3, #4
 8003b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003b40:	2303      	movs	r3, #3
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b44:	f107 0314 	add.w	r3, r7, #20
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4818      	ldr	r0, [pc, #96]	; (8003bac <HAL_TIM_MspPostInit+0x104>)
 8003b4c:	f000 fa08 	bl	8003f60 <HAL_GPIO_Init>
}
 8003b50:	e023      	b.n	8003b9a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM11)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_TIM_MspPostInit+0x10c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d11e      	bne.n	8003b9a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60bb      	str	r3, [r7, #8]
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b66:	f043 0304 	orr.w	r3, r3, #4
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6c:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_TIM_MspPostInit+0x100>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 8003b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b8e:	f107 0314 	add.w	r3, r7, #20
 8003b92:	4619      	mov	r1, r3
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <HAL_TIM_MspPostInit+0x110>)
 8003b96:	f000 f9e3 	bl	8003f60 <HAL_GPIO_Init>
}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40010000 	.word	0x40010000
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40020800 	.word	0x40020800

08003bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bc2:	490e      	ldr	r1, [pc, #56]	; (8003bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bc4:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc8:	e002      	b.n	8003bd0 <LoopCopyDataInit>

08003bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bce:	3304      	adds	r3, #4

08003bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bd4:	d3f9      	bcc.n	8003bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bd6:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bd8:	4c0b      	ldr	r4, [pc, #44]	; (8003c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bdc:	e001      	b.n	8003be2 <LoopFillZerobss>

08003bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be0:	3204      	adds	r2, #4

08003be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003be4:	d3fb      	bcc.n	8003bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003be6:	f7ff fce9 	bl	80035bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bea:	f003 fd39 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bee:	f7ff f81d 	bl	8002c2c <main>
  bx  lr    
 8003bf2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003bf4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bfc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8003c00:	0800e4dc 	.word	0x0800e4dc
  ldr r2, =_sbss
 8003c04:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8003c08:	20000540 	.word	0x20000540

08003c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c0c:	e7fe      	b.n	8003c0c <ADC_IRQHandler>
	...

08003c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_Init+0x40>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0d      	ldr	r2, [pc, #52]	; (8003c50 <HAL_Init+0x40>)
 8003c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_Init+0x40>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <HAL_Init+0x40>)
 8003c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_Init+0x40>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_Init+0x40>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c38:	2003      	movs	r0, #3
 8003c3a:	f000 f94f 	bl	8003edc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c3e:	200f      	movs	r0, #15
 8003c40:	f000 f808 	bl	8003c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c44:	f7ff f9f6 	bl	8003034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023c00 	.word	0x40023c00

08003c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c5c:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <HAL_InitTick+0x54>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_InitTick+0x58>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 f967 	bl	8003f46 <HAL_SYSTICK_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e00e      	b.n	8003ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b0f      	cmp	r3, #15
 8003c86:	d80a      	bhi.n	8003c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c88:	2200      	movs	r2, #0
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	f000 f92f 	bl	8003ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c94:	4a06      	ldr	r2, [pc, #24]	; (8003cb0 <HAL_InitTick+0x5c>)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200000b4 	.word	0x200000b4
 8003cac:	200000bc 	.word	0x200000bc
 8003cb0:	200000b8 	.word	0x200000b8

08003cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_IncTick+0x20>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_IncTick+0x24>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_IncTick+0x24>)
 8003cc6:	6013      	str	r3, [r2, #0]
}
 8003cc8:	bf00      	nop
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200000bc 	.word	0x200000bc
 8003cd8:	2000052c 	.word	0x2000052c

08003cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return uwTick;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_GetTick+0x14>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000052c 	.word	0x2000052c

08003cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7ff ffee 	bl	8003cdc <HAL_GetTick>
 8003d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d005      	beq.n	8003d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_Delay+0x44>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d1a:	bf00      	nop
 8003d1c:	f7ff ffde 	bl	8003cdc <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d8f7      	bhi.n	8003d1c <HAL_Delay+0x28>
  {
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200000bc 	.word	0x200000bc

08003d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <__NVIC_SetPriorityGrouping+0x44>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d6e:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <__NVIC_SetPriorityGrouping+0x44>)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	60d3      	str	r3, [r2, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <__NVIC_GetPriorityGrouping+0x18>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 0307 	and.w	r3, r3, #7
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	db0b      	blt.n	8003dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <__NVIC_EnableIRQ+0x38>)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	; (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	; (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
         );
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d301      	bcc.n	8003eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e00f      	b.n	8003ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eae:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <SysTick_Config+0x40>)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eb6:	210f      	movs	r1, #15
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebc:	f7ff ff8e 	bl	8003ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <SysTick_Config+0x40>)
 8003ec8:	2207      	movs	r2, #7
 8003eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000e010 	.word	0xe000e010

08003edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff29 	bl	8003d3c <__NVIC_SetPriorityGrouping>
}
 8003eea:	bf00      	nop
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b086      	sub	sp, #24
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f04:	f7ff ff3e 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 8003f08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f7ff ff8e 	bl	8003e30 <NVIC_EncodePriority>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff ff5d 	bl	8003ddc <__NVIC_SetPriority>
}
 8003f22:	bf00      	nop
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff31 	bl	8003da0 <__NVIC_EnableIRQ>
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff ffa2 	bl	8003e98 <SysTick_Config>
 8003f54:	4603      	mov	r3, r0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b089      	sub	sp, #36	; 0x24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	e14d      	b.n	8004218 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	f040 813c 	bne.w	8004212 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d005      	beq.n	8003fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d130      	bne.n	8004014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	f003 0201 	and.w	r2, r3, #1
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b03      	cmp	r3, #3
 800401e:	d017      	beq.n	8004050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	2203      	movs	r2, #3
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4313      	orrs	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d123      	bne.n	80040a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	08da      	lsrs	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3208      	adds	r2, #8
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	220f      	movs	r2, #15
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	08da      	lsrs	r2, r3, #3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3208      	adds	r2, #8
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2203      	movs	r2, #3
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4013      	ands	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8096 	beq.w	8004212 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b51      	ldr	r3, [pc, #324]	; (8004230 <HAL_GPIO_Init+0x2d0>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ee:	4a50      	ldr	r2, [pc, #320]	; (8004230 <HAL_GPIO_Init+0x2d0>)
 80040f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040f4:	6453      	str	r3, [r2, #68]	; 0x44
 80040f6:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <HAL_GPIO_Init+0x2d0>)
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004102:	4a4c      	ldr	r2, [pc, #304]	; (8004234 <HAL_GPIO_Init+0x2d4>)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	089b      	lsrs	r3, r3, #2
 8004108:	3302      	adds	r3, #2
 800410a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	220f      	movs	r2, #15
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	43db      	mvns	r3, r3
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	4013      	ands	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a43      	ldr	r2, [pc, #268]	; (8004238 <HAL_GPIO_Init+0x2d8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00d      	beq.n	800414a <HAL_GPIO_Init+0x1ea>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a42      	ldr	r2, [pc, #264]	; (800423c <HAL_GPIO_Init+0x2dc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <HAL_GPIO_Init+0x1e6>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a41      	ldr	r2, [pc, #260]	; (8004240 <HAL_GPIO_Init+0x2e0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_GPIO_Init+0x1e2>
 800413e:	2302      	movs	r3, #2
 8004140:	e004      	b.n	800414c <HAL_GPIO_Init+0x1ec>
 8004142:	2307      	movs	r3, #7
 8004144:	e002      	b.n	800414c <HAL_GPIO_Init+0x1ec>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_GPIO_Init+0x1ec>
 800414a:	2300      	movs	r3, #0
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	f002 0203 	and.w	r2, r2, #3
 8004152:	0092      	lsls	r2, r2, #2
 8004154:	4093      	lsls	r3, r2
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800415c:	4935      	ldr	r1, [pc, #212]	; (8004234 <HAL_GPIO_Init+0x2d4>)
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	089b      	lsrs	r3, r3, #2
 8004162:	3302      	adds	r3, #2
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	43db      	mvns	r3, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4013      	ands	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800418e:	4a2d      	ldr	r2, [pc, #180]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	43db      	mvns	r3, r3
 800419e:	69ba      	ldr	r2, [r7, #24]
 80041a0:	4013      	ands	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041b8:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041be:	4b21      	ldr	r3, [pc, #132]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041e2:	4a18      	ldr	r2, [pc, #96]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_GPIO_Init+0x2e4>)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	2b0f      	cmp	r3, #15
 800421c:	f67f aeae 	bls.w	8003f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	3724      	adds	r7, #36	; 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40023800 	.word	0x40023800
 8004234:	40013800 	.word	0x40013800
 8004238:	40020000 	.word	0x40020000
 800423c:	40020400 	.word	0x40020400
 8004240:	40020800 	.word	0x40020800
 8004244:	40013c00 	.word	0x40013c00

08004248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e001      	b.n	800426a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004288:	787b      	ldrb	r3, [r7, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800428e:	887a      	ldrh	r2, [r7, #2]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004294:	e003      	b.n	800429e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	041a      	lsls	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	619a      	str	r2, [r3, #24]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	460b      	mov	r3, r1
 80042b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042bc:	887a      	ldrh	r2, [r7, #2]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4013      	ands	r3, r2
 80042c2:	041a      	lsls	r2, r3, #16
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	43d9      	mvns	r1, r3
 80042c8:	887b      	ldrh	r3, [r7, #2]
 80042ca:	400b      	ands	r3, r1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042f6:	4a05      	ldr	r2, [pc, #20]	; (800430c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f806 	bl	8004310 <HAL_GPIO_EXTI_Callback>
  }
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12b      	b.n	8004592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fb46 	bl	80029e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	; 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800438a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800438c:	f001 fc28 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a81      	ldr	r2, [pc, #516]	; (800459c <HAL_I2C_Init+0x274>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d807      	bhi.n	80043ac <HAL_I2C_Init+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a80      	ldr	r2, [pc, #512]	; (80045a0 <HAL_I2C_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e006      	b.n	80043ba <HAL_I2C_Init+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7d      	ldr	r2, [pc, #500]	; (80045a4 <HAL_I2C_Init+0x27c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0e7      	b.n	8004592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a78      	ldr	r2, [pc, #480]	; (80045a8 <HAL_I2C_Init+0x280>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	; (800459c <HAL_I2C_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <HAL_I2C_Init+0xd4>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	e009      	b.n	8004410 <HAL_I2C_Init+0xe8>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a69      	ldr	r2, [pc, #420]	; (80045ac <HAL_I2C_Init+0x284>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004422:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	495c      	ldr	r1, [pc, #368]	; (800459c <HAL_I2C_Init+0x274>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d819      	bhi.n	8004464 <HAL_I2C_Init+0x13c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb1 f3f3 	udiv	r3, r1, r3
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004444:	400b      	ands	r3, r1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_I2C_Init+0x138>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fbb1 f3f3 	udiv	r3, r1, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	e051      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004460:	2304      	movs	r3, #4
 8004462:	e04f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_I2C_Init+0x168>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Init+0x18e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x196>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_I2C_Init+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1e58      	subs	r0, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044e2:	e00f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6809      	ldr	r1, [r1, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004532:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6911      	ldr	r1, [r2, #16]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000186a0 	.word	0x000186a0
 80045a0:	001e847f 	.word	0x001e847f
 80045a4:	003d08ff 	.word	0x003d08ff
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7ff fb8a 	bl	8003cdc <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	f040 80e0 	bne.w	8004798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	4970      	ldr	r1, [pc, #448]	; (80047a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 ff66 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0d3      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x50>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0cc      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d007      	beq.n	8004626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	; 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2210      	movs	r2, #16
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	893a      	ldrh	r2, [r7, #8]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a50      	ldr	r2, [pc, #320]	; (80047a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004668:	8979      	ldrh	r1, [r7, #10]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fce8 	bl	8005044 <I2C_MasterRequestWrite>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08d      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004694:	e066      	b.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 ffe0 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_I2C_Master_Transmit+0x188>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d017      	beq.n	8004738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 ffd0 	bl	80056e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e01a      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d194      	bne.n	8004696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	00100002 	.word	0x00100002
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08c      	sub	sp, #48	; 0x30
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	461a      	mov	r2, r3
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
 80047bc:	4613      	mov	r3, r2
 80047be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c0:	f7ff fa8c 	bl	8003cdc <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	f040 820b 	bne.w	8004bea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	2319      	movs	r3, #25
 80047da:	2201      	movs	r2, #1
 80047dc:	497c      	ldr	r1, [pc, #496]	; (80049d0 <HAL_I2C_Master_Receive+0x224>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fe68 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
 80047ec:	e1fe      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_I2C_Master_Receive+0x50>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e1f7      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d007      	beq.n	8004822 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f042 0201 	orr.w	r2, r2, #1
 8004820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2222      	movs	r2, #34	; 0x22
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2210      	movs	r2, #16
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	893a      	ldrh	r2, [r7, #8]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a5c      	ldr	r2, [pc, #368]	; (80049d4 <HAL_I2C_Master_Receive+0x228>)
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004864:	8979      	ldrh	r1, [r7, #10]
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fc6c 	bl	8005148 <I2C_MasterRequestRead>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e1b8      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	2b00      	cmp	r3, #0
 8004880:	d113      	bne.n	80048aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	e18c      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d11b      	bne.n	80048ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e16c      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d11b      	bne.n	800492a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	e14c      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004938:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004950:	e138      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004956:	2b03      	cmp	r3, #3
 8004958:	f200 80f1 	bhi.w	8004b3e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	2b01      	cmp	r3, #1
 8004962:	d123      	bne.n	80049ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 fefb 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e139      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049aa:	e10b      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d14e      	bne.n	8004a52 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	2200      	movs	r2, #0
 80049bc:	4906      	ldr	r1, [pc, #24]	; (80049d8 <HAL_I2C_Master_Receive+0x22c>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fd78 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e10e      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
 80049ce:	bf00      	nop
 80049d0:	00100002 	.word	0x00100002
 80049d4:	ffff0000 	.word	0xffff0000
 80049d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a50:	e0b8      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4966      	ldr	r1, [pc, #408]	; (8004bf4 <HAL_I2C_Master_Receive+0x448>)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 fd29 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0bf      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	494f      	ldr	r1, [pc, #316]	; (8004bf4 <HAL_I2C_Master_Receive+0x448>)
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 fcfb 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e091      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b3c:	e042      	b.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fe0e 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e04c      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d118      	bne.n	8004bc4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f47f aec2 	bne.w	8004952 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e000      	b.n	8004bec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
  }
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3728      	adds	r7, #40	; 0x28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	00010004 	.word	0x00010004

08004bf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	817b      	strh	r3, [r7, #10]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	813b      	strh	r3, [r7, #8]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c12:	f7ff f863 	bl	8003cdc <HAL_GetTick>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	f040 8208 	bne.w	8005036 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2319      	movs	r3, #25
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	497b      	ldr	r1, [pc, #492]	; (8004e1c <HAL_I2C_Mem_Read+0x224>)
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 fc3f 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e1fb      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x56>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e1f4      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d007      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2222      	movs	r2, #34	; 0x22
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4a5b      	ldr	r2, [pc, #364]	; (8004e20 <HAL_I2C_Mem_Read+0x228>)
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb6:	88f8      	ldrh	r0, [r7, #6]
 8004cb8:	893a      	ldrh	r2, [r7, #8]
 8004cba:	8979      	ldrh	r1, [r7, #10]
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	9301      	str	r3, [sp, #4]
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fb0c 	bl	80052e4 <I2C_RequestMemoryRead>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e1b0      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d113      	bne.n	8004d06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	623b      	str	r3, [r7, #32]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e184      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d11b      	bne.n	8004d46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e164      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d11b      	bne.n	8004d86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61bb      	str	r3, [r7, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	e144      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d9c:	e138      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	f200 80f1 	bhi.w	8004f8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d123      	bne.n	8004df8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fcd5 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e139      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df6:	e10b      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d14e      	bne.n	8004e9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	2200      	movs	r2, #0
 8004e08:	4906      	ldr	r1, [pc, #24]	; (8004e24 <HAL_I2C_Mem_Read+0x22c>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fb52 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e10e      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
 8004e1a:	bf00      	nop
 8004e1c:	00100002 	.word	0x00100002
 8004e20:	ffff0000 	.word	0xffff0000
 8004e24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e9c:	e0b8      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4966      	ldr	r1, [pc, #408]	; (8005040 <HAL_I2C_Mem_Read+0x448>)
 8004ea8:	68f8      	ldr	r0, [r7, #12]
 8004eaa:	f000 fb03 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e0bf      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2200      	movs	r2, #0
 8004f02:	494f      	ldr	r1, [pc, #316]	; (8005040 <HAL_I2C_Mem_Read+0x448>)
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 fad5 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e091      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	b2d2      	uxtb	r2, r2
 8004f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f88:	e042      	b.n	8005010 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fbe8 	bl	8005764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e04c      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d118      	bne.n	8005010 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	f47f aec2 	bne.w	8004d9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	e000      	b.n	8005038 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
  }
}
 8005038:	4618      	mov	r0, r3
 800503a:	3728      	adds	r7, #40	; 0x28
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	00010004 	.word	0x00010004

08005044 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	607a      	str	r2, [r7, #4]
 800504e:	603b      	str	r3, [r7, #0]
 8005050:	460b      	mov	r3, r1
 8005052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d006      	beq.n	800506e <I2C_MasterRequestWrite+0x2a>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d003      	beq.n	800506e <I2C_MasterRequestWrite+0x2a>
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800506c:	d108      	bne.n	8005080 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	e00b      	b.n	8005098 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b12      	cmp	r3, #18
 8005086:	d107      	bne.n	8005098 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005096:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f000 fa05 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00d      	beq.n	80050cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	d103      	bne.n	80050c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e035      	b.n	8005138 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d4:	d108      	bne.n	80050e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050d6:	897b      	ldrh	r3, [r7, #10]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050e4:	611a      	str	r2, [r3, #16]
 80050e6:	e01b      	b.n	8005120 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050e8:	897b      	ldrh	r3, [r7, #10]
 80050ea:	11db      	asrs	r3, r3, #7
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	f003 0306 	and.w	r3, r3, #6
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f063 030f 	orn	r3, r3, #15
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	490e      	ldr	r1, [pc, #56]	; (8005140 <I2C_MasterRequestWrite+0xfc>)
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 fa2b 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e010      	b.n	8005138 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005116:	897b      	ldrh	r3, [r7, #10]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4907      	ldr	r1, [pc, #28]	; (8005144 <I2C_MasterRequestWrite+0x100>)
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 fa1b 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3718      	adds	r7, #24
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	00010008 	.word	0x00010008
 8005144:	00010002 	.word	0x00010002

08005148 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b088      	sub	sp, #32
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	460b      	mov	r3, r1
 8005156:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d006      	beq.n	8005182 <I2C_MasterRequestRead+0x3a>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d003      	beq.n	8005182 <I2C_MasterRequestRead+0x3a>
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005180:	d108      	bne.n	8005194 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e00b      	b.n	80051ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	2b11      	cmp	r3, #17
 800519a:	d107      	bne.n	80051ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f97b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00d      	beq.n	80051e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d103      	bne.n	80051dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e079      	b.n	80052d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e8:	d108      	bne.n	80051fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051ea:	897b      	ldrh	r3, [r7, #10]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	f043 0301 	orr.w	r3, r3, #1
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	611a      	str	r2, [r3, #16]
 80051fa:	e05f      	b.n	80052bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051fc:	897b      	ldrh	r3, [r7, #10]
 80051fe:	11db      	asrs	r3, r3, #7
 8005200:	b2db      	uxtb	r3, r3
 8005202:	f003 0306 	and.w	r3, r3, #6
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f063 030f 	orn	r3, r3, #15
 800520c:	b2da      	uxtb	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4930      	ldr	r1, [pc, #192]	; (80052dc <I2C_MasterRequestRead+0x194>)
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f9a1 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e054      	b.n	80052d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	b2da      	uxtb	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4929      	ldr	r1, [pc, #164]	; (80052e0 <I2C_MasterRequestRead+0x198>)
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f991 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e044      	b.n	80052d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800526e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f919 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005296:	d103      	bne.n	80052a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e017      	b.n	80052d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	11db      	asrs	r3, r3, #7
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f063 030e 	orn	r3, r3, #14
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4907      	ldr	r1, [pc, #28]	; (80052e0 <I2C_MasterRequestRead+0x198>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f94d 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	00010008 	.word	0x00010008
 80052e0:	00010002 	.word	0x00010002

080052e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	4608      	mov	r0, r1
 80052ee:	4611      	mov	r1, r2
 80052f0:	461a      	mov	r2, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	817b      	strh	r3, [r7, #10]
 80052f6:	460b      	mov	r3, r1
 80052f8:	813b      	strh	r3, [r7, #8]
 80052fa:	4613      	mov	r3, r2
 80052fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800530c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2200      	movs	r2, #0
 8005326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8c2 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005344:	d103      	bne.n	800534e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e0aa      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	4952      	ldr	r1, [pc, #328]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f8fa 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e097      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 f964 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e076      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	e021      	b.n	8005410 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f93e 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e050      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005412:	6a39      	ldr	r1, [r7, #32]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f923 	bl	8005660 <I2C_WaitOnTXEFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b04      	cmp	r3, #4
 8005426:	d107      	bne.n	8005438 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005436:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e035      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800544a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f82b 	bl	80054b4 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d103      	bne.n	800547c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e013      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	6a3a      	ldr	r2, [r7, #32]
 8005494:	4906      	ldr	r1, [pc, #24]	; (80054b0 <I2C_RequestMemoryRead+0x1cc>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f863 	bl	8005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010002 	.word	0x00010002

080054b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054c4:	e025      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d021      	beq.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fe fc05 	bl	8003cdc <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d116      	bne.n	8005512 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f043 0220 	orr.w	r2, r3, #32
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e023      	b.n	800555a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10d      	bne.n	8005538 <I2C_WaitOnFlagUntilTimeout+0x84>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	43da      	mvns	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	e00c      	b.n	8005552 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	429a      	cmp	r2, r3
 8005556:	d0b6      	beq.n	80054c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b084      	sub	sp, #16
 8005566:	af00      	add	r7, sp, #0
 8005568:	60f8      	str	r0, [r7, #12]
 800556a:	60b9      	str	r1, [r7, #8]
 800556c:	607a      	str	r2, [r7, #4]
 800556e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005570:	e051      	b.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005580:	d123      	bne.n	80055ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005590:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800559a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f043 0204 	orr.w	r2, r3, #4
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e046      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d021      	beq.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fe fb83 	bl	8003cdc <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d116      	bne.n	8005616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f043 0220 	orr.w	r2, r3, #32
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e020      	b.n	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d10c      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	43da      	mvns	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	bf14      	ite	ne
 8005632:	2301      	movne	r3, #1
 8005634:	2300      	moveq	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	e00b      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	43da      	mvns	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4013      	ands	r3, r2
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	bf14      	ite	ne
 800564c:	2301      	movne	r3, #1
 800564e:	2300      	moveq	r3, #0
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d18d      	bne.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800566c:	e02d      	b.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8ce 	bl	8005810 <I2C_IsAcknowledgeFailed>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e02d      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d021      	beq.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fe fb29 	bl	8003cdc <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d116      	bne.n	80056ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f043 0220 	orr.w	r2, r3, #32
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e007      	b.n	80056da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d1ca      	bne.n	800566e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056ee:	e02d      	b.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f88d 	bl	8005810 <I2C_IsAcknowledgeFailed>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e02d      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005706:	d021      	beq.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fe fae8 	bl	8003cdc <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d116      	bne.n	800574c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	f043 0220 	orr.w	r2, r3, #32
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e007      	b.n	800575c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b04      	cmp	r3, #4
 8005758:	d1ca      	bne.n	80056f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005770:	e042      	b.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b10      	cmp	r3, #16
 800577e:	d119      	bne.n	80057b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2220      	movs	r2, #32
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e029      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b4:	f7fe fa92 	bl	8003cdc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d302      	bcc.n	80057ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d116      	bne.n	80057f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f043 0220 	orr.w	r2, r3, #32
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e007      	b.n	8005808 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	d1b5      	bne.n	8005772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005826:	d11b      	bne.n	8005860 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005830:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2220      	movs	r2, #32
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f043 0204 	orr.w	r2, r3, #4
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b68      	ldr	r3, [pc, #416]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90c      	bls.n	80058ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a58      	ldr	r2, [pc, #352]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d003      	beq.n	800592e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e06f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e067      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4934      	ldr	r1, [pc, #208]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fe f9bc 	bl	8003cdc <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fe f9b8 	bl	8003cdc <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20c      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe f91c 	bl	8003c54 <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	0800e0d8 	.word	0x0800e0d8
 8005a34:	200000b4 	.word	0x200000b4
 8005a38:	200000b8 	.word	0x200000b8

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b090      	sub	sp, #64	; 0x40
 8005a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	637b      	str	r3, [r7, #52]	; 0x34
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x40>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 80a1 	bhi.w	8005ba8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e09b      	b.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b53      	ldr	r3, [pc, #332]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005a74:	e09b      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a76:	4b53      	ldr	r3, [pc, #332]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a7a:	e098      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7c:	4b4f      	ldr	r3, [pc, #316]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	4b4d      	ldr	r3, [pc, #308]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d028      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a92:	4b4a      	ldr	r3, [pc, #296]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	2200      	movs	r2, #0
 8005a9a:	623b      	str	r3, [r7, #32]
 8005a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4b47      	ldr	r3, [pc, #284]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005aa8:	fb03 f201 	mul.w	r2, r3, r1
 8005aac:	2300      	movs	r3, #0
 8005aae:	fb00 f303 	mul.w	r3, r0, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	4a43      	ldr	r2, [pc, #268]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ab6:	fba0 1202 	umull	r1, r2, r0, r2
 8005aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005abc:	460a      	mov	r2, r1
 8005abe:	62ba      	str	r2, [r7, #40]	; 0x28
 8005ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ac2:	4413      	add	r3, r2
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	2200      	movs	r2, #0
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	61fa      	str	r2, [r7, #28]
 8005ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ad6:	f7fb f8d7 	bl	8000c88 <__aeabi_uldivmod>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4613      	mov	r3, r2
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ae2:	e053      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ae4:	4b35      	ldr	r3, [pc, #212]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	099b      	lsrs	r3, r3, #6
 8005aea:	2200      	movs	r2, #0
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	617a      	str	r2, [r7, #20]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005af6:	f04f 0b00 	mov.w	fp, #0
 8005afa:	4652      	mov	r2, sl
 8005afc:	465b      	mov	r3, fp
 8005afe:	f04f 0000 	mov.w	r0, #0
 8005b02:	f04f 0100 	mov.w	r1, #0
 8005b06:	0159      	lsls	r1, r3, #5
 8005b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b0c:	0150      	lsls	r0, r2, #5
 8005b0e:	4602      	mov	r2, r0
 8005b10:	460b      	mov	r3, r1
 8005b12:	ebb2 080a 	subs.w	r8, r2, sl
 8005b16:	eb63 090b 	sbc.w	r9, r3, fp
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005b26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005b2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005b2e:	ebb2 0408 	subs.w	r4, r2, r8
 8005b32:	eb63 0509 	sbc.w	r5, r3, r9
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	00eb      	lsls	r3, r5, #3
 8005b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b44:	00e2      	lsls	r2, r4, #3
 8005b46:	4614      	mov	r4, r2
 8005b48:	461d      	mov	r5, r3
 8005b4a:	eb14 030a 	adds.w	r3, r4, sl
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	eb45 030b 	adc.w	r3, r5, fp
 8005b54:	607b      	str	r3, [r7, #4]
 8005b56:	f04f 0200 	mov.w	r2, #0
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b62:	4629      	mov	r1, r5
 8005b64:	028b      	lsls	r3, r1, #10
 8005b66:	4621      	mov	r1, r4
 8005b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	028a      	lsls	r2, r1, #10
 8005b70:	4610      	mov	r0, r2
 8005b72:	4619      	mov	r1, r3
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	2200      	movs	r2, #0
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	60fa      	str	r2, [r7, #12]
 8005b7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b80:	f7fb f882 	bl	8000c88 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4613      	mov	r3, r2
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b8c:	4b0b      	ldr	r3, [pc, #44]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x180>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	0c1b      	lsrs	r3, r3, #16
 8005b92:	f003 0303 	and.w	r3, r3, #3
 8005b96:	3301      	adds	r3, #1
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005b9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ba6:	e002      	b.n	8005bae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ba8:	4b05      	ldr	r3, [pc, #20]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3740      	adds	r7, #64	; 0x40
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bba:	bf00      	nop
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	018cba80 	.word	0x018cba80

08005bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	200000b4 	.word	0x200000b4

08005be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005be4:	f7ff fff0 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	0a9b      	lsrs	r3, r3, #10
 8005bf0:	f003 0307 	and.w	r3, r3, #7
 8005bf4:	4903      	ldr	r1, [pc, #12]	; (8005c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	40023800 	.word	0x40023800
 8005c04:	0800e0e8 	.word	0x0800e0e8

08005c08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e273      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d075      	beq.n	8005d12 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c26:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f003 030c 	and.w	r3, r3, #12
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d00c      	beq.n	8005c4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c32:	4b85      	ldr	r3, [pc, #532]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c3a:	2b08      	cmp	r3, #8
 8005c3c:	d112      	bne.n	8005c64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c3e:	4b82      	ldr	r3, [pc, #520]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4a:	d10b      	bne.n	8005c64 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	4b7e      	ldr	r3, [pc, #504]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d05b      	beq.n	8005d10 <HAL_RCC_OscConfig+0x108>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d157      	bne.n	8005d10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e24e      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6c:	d106      	bne.n	8005c7c <HAL_RCC_OscConfig+0x74>
 8005c6e:	4b76      	ldr	r3, [pc, #472]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a75      	ldr	r2, [pc, #468]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e01d      	b.n	8005cb8 <HAL_RCC_OscConfig+0xb0>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x98>
 8005c86:	4b70      	ldr	r3, [pc, #448]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6f      	ldr	r2, [pc, #444]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	4b6d      	ldr	r3, [pc, #436]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6c      	ldr	r2, [pc, #432]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e00b      	b.n	8005cb8 <HAL_RCC_OscConfig+0xb0>
 8005ca0:	4b69      	ldr	r3, [pc, #420]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a68      	ldr	r2, [pc, #416]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	4b66      	ldr	r3, [pc, #408]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d013      	beq.n	8005ce8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fe f80c 	bl	8003cdc <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc8:	f7fe f808 	bl	8003cdc <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b64      	cmp	r3, #100	; 0x64
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e213      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cda:	4b5b      	ldr	r3, [pc, #364]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0xc0>
 8005ce6:	e014      	b.n	8005d12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce8:	f7fd fff8 	bl	8003cdc <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fd fff4 	bl	8003cdc <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	; 0x64
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1ff      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d02:	4b51      	ldr	r3, [pc, #324]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xe8>
 8005d0e:	e000      	b.n	8005d12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d063      	beq.n	8005de6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d1e:	4b4a      	ldr	r3, [pc, #296]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00b      	beq.n	8005d42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d2a:	4b47      	ldr	r3, [pc, #284]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d11c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d36:	4b44      	ldr	r3, [pc, #272]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d116      	bne.n	8005d70 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d42:	4b41      	ldr	r3, [pc, #260]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_RCC_OscConfig+0x152>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e1d3      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5a:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4937      	ldr	r1, [pc, #220]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d6e:	e03a      	b.n	8005de6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d020      	beq.n	8005dba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d78:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fd ffad 	bl	8003cdc <HAL_GetTick>
 8005d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d86:	f7fd ffa9 	bl	8003cdc <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e1b4      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d98:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005da4:	4b28      	ldr	r3, [pc, #160]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	00db      	lsls	r3, r3, #3
 8005db2:	4925      	ldr	r1, [pc, #148]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	600b      	str	r3, [r1, #0]
 8005db8:	e015      	b.n	8005de6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dba:	4b24      	ldr	r3, [pc, #144]	; (8005e4c <HAL_RCC_OscConfig+0x244>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc0:	f7fd ff8c 	bl	8003cdc <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005dc8:	f7fd ff88 	bl	8003cdc <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e193      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dda:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f0      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d036      	beq.n	8005e60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d016      	beq.n	8005e28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <HAL_RCC_OscConfig+0x248>)
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fd ff6c 	bl	8003cdc <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e08:	f7fd ff68 	bl	8003cdc <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e173      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <HAL_RCC_OscConfig+0x240>)
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f0      	beq.n	8005e08 <HAL_RCC_OscConfig+0x200>
 8005e26:	e01b      	b.n	8005e60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e28:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <HAL_RCC_OscConfig+0x248>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fd ff55 	bl	8003cdc <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e34:	e00e      	b.n	8005e54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fd ff51 	bl	8003cdc <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d907      	bls.n	8005e54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e15c      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	42470000 	.word	0x42470000
 8005e50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e54:	4b8a      	ldr	r3, [pc, #552]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1ea      	bne.n	8005e36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0304 	and.w	r3, r3, #4
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8097 	beq.w	8005f9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e72:	4b83      	ldr	r3, [pc, #524]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10f      	bne.n	8005e9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
 8005e82:	4b7f      	ldr	r3, [pc, #508]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	4a7e      	ldr	r2, [pc, #504]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e8e:	4b7c      	ldr	r3, [pc, #496]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e96:	60bb      	str	r3, [r7, #8]
 8005e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e9e:	4b79      	ldr	r3, [pc, #484]	; (8006084 <HAL_RCC_OscConfig+0x47c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d118      	bne.n	8005edc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eaa:	4b76      	ldr	r3, [pc, #472]	; (8006084 <HAL_RCC_OscConfig+0x47c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a75      	ldr	r2, [pc, #468]	; (8006084 <HAL_RCC_OscConfig+0x47c>)
 8005eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eb6:	f7fd ff11 	bl	8003cdc <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ebe:	f7fd ff0d 	bl	8003cdc <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e118      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed0:	4b6c      	ldr	r3, [pc, #432]	; (8006084 <HAL_RCC_OscConfig+0x47c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x2ea>
 8005ee4:	4b66      	ldr	r3, [pc, #408]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4a65      	ldr	r2, [pc, #404]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ef0:	e01c      	b.n	8005f2c <HAL_RCC_OscConfig+0x324>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	d10c      	bne.n	8005f14 <HAL_RCC_OscConfig+0x30c>
 8005efa:	4b61      	ldr	r3, [pc, #388]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a60      	ldr	r2, [pc, #384]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f00:	f043 0304 	orr.w	r3, r3, #4
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
 8005f06:	4b5e      	ldr	r3, [pc, #376]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0a:	4a5d      	ldr	r2, [pc, #372]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6713      	str	r3, [r2, #112]	; 0x70
 8005f12:	e00b      	b.n	8005f2c <HAL_RCC_OscConfig+0x324>
 8005f14:	4b5a      	ldr	r3, [pc, #360]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f18:	4a59      	ldr	r2, [pc, #356]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f1a:	f023 0301 	bic.w	r3, r3, #1
 8005f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f20:	4b57      	ldr	r3, [pc, #348]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f24:	4a56      	ldr	r2, [pc, #344]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f26:	f023 0304 	bic.w	r3, r3, #4
 8005f2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d015      	beq.n	8005f60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f34:	f7fd fed2 	bl	8003cdc <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f3a:	e00a      	b.n	8005f52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f3c:	f7fd fece 	bl	8003cdc <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e0d7      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f52:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0ee      	beq.n	8005f3c <HAL_RCC_OscConfig+0x334>
 8005f5e:	e014      	b.n	8005f8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fd febc 	bl	8003cdc <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f66:	e00a      	b.n	8005f7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f68:	f7fd feb8 	bl	8003cdc <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e0c1      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f7e:	4b40      	ldr	r3, [pc, #256]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1ee      	bne.n	8005f68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f90:	4b3b      	ldr	r3, [pc, #236]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	4a3a      	ldr	r2, [pc, #232]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80ad 	beq.w	8006100 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fa6:	4b36      	ldr	r3, [pc, #216]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 030c 	and.w	r3, r3, #12
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d060      	beq.n	8006074 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d145      	bne.n	8006046 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fba:	4b33      	ldr	r3, [pc, #204]	; (8006088 <HAL_RCC_OscConfig+0x480>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fe8c 	bl	8003cdc <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fc8:	f7fd fe88 	bl	8003cdc <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e093      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fda:	4b29      	ldr	r3, [pc, #164]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69da      	ldr	r2, [r3, #28]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	019b      	lsls	r3, r3, #6
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	3b01      	subs	r3, #1
 8006000:	041b      	lsls	r3, r3, #16
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	071b      	lsls	r3, r3, #28
 8006012:	491b      	ldr	r1, [pc, #108]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8006014:	4313      	orrs	r3, r2
 8006016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_RCC_OscConfig+0x480>)
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601e:	f7fd fe5d 	bl	8003cdc <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006026:	f7fd fe59 	bl	8003cdc <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e064      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006038:	4b11      	ldr	r3, [pc, #68]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0f0      	beq.n	8006026 <HAL_RCC_OscConfig+0x41e>
 8006044:	e05c      	b.n	8006100 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006046:	4b10      	ldr	r3, [pc, #64]	; (8006088 <HAL_RCC_OscConfig+0x480>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fd fe46 	bl	8003cdc <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006054:	f7fd fe42 	bl	8003cdc <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e04d      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_OscConfig+0x478>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x44c>
 8006072:	e045      	b.n	8006100 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d107      	bne.n	800608c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e040      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
 8006080:	40023800 	.word	0x40023800
 8006084:	40007000 	.word	0x40007000
 8006088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800608c:	4b1f      	ldr	r3, [pc, #124]	; (800610c <HAL_RCC_OscConfig+0x504>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d030      	beq.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d129      	bne.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d122      	bne.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060bc:	4013      	ands	r3, r2
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d119      	bne.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	3b01      	subs	r3, #1
 80060d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d10f      	bne.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e07b      	b.n	800621a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	d108      	bne.n	800613c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006132:	d009      	beq.n	8006148 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	61da      	str	r2, [r3, #28]
 800613a:	e005      	b.n	8006148 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fc ff1e 	bl	8002fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619a:	431a      	orrs	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	431a      	orrs	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061b8:	431a      	orrs	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061cc:	ea42 0103 	orr.w	r1, r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	0c1b      	lsrs	r3, r3, #16
 80061e6:	f003 0104 	and.w	r1, r3, #4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	f003 0210 	and.w	r2, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	69da      	ldr	r2, [r3, #28]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006208:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006222:	b580      	push	{r7, lr}
 8006224:	b088      	sub	sp, #32
 8006226:	af00      	add	r7, sp, #0
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	603b      	str	r3, [r7, #0]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_SPI_Transmit+0x22>
 8006240:	2302      	movs	r3, #2
 8006242:	e126      	b.n	8006492 <HAL_SPI_Transmit+0x270>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800624c:	f7fd fd46 	bl	8003cdc <HAL_GetTick>
 8006250:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d002      	beq.n	8006268 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006266:	e10b      	b.n	8006480 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_SPI_Transmit+0x52>
 800626e:	88fb      	ldrh	r3, [r7, #6]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d102      	bne.n	800627a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006278:	e102      	b.n	8006480 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2203      	movs	r2, #3
 800627e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	88fa      	ldrh	r2, [r7, #6]
 8006298:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c0:	d10f      	bne.n	80062e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d007      	beq.n	8006300 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006308:	d14b      	bne.n	80063a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_SPI_Transmit+0xf6>
 8006312:	8afb      	ldrh	r3, [r7, #22]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d13e      	bne.n	8006396 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	881a      	ldrh	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	1c9a      	adds	r2, r3, #2
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800633c:	e02b      	b.n	8006396 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d112      	bne.n	8006372 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	1c9a      	adds	r2, r3, #2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006370:	e011      	b.n	8006396 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006372:	f7fd fcb3 	bl	8003cdc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d803      	bhi.n	800638a <HAL_SPI_Transmit+0x168>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Transmit+0x16e>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006394:	e074      	b.n	8006480 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1ce      	bne.n	800633e <HAL_SPI_Transmit+0x11c>
 80063a0:	e04c      	b.n	800643c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_SPI_Transmit+0x18e>
 80063aa:	8afb      	ldrh	r3, [r7, #22]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d140      	bne.n	8006432 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	7812      	ldrb	r2, [r2, #0]
 80063bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80063d6:	e02c      	b.n	8006432 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 0302 	and.w	r3, r3, #2
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d113      	bne.n	800640e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	7812      	ldrb	r2, [r2, #0]
 80063f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006402:	b29b      	uxth	r3, r3
 8006404:	3b01      	subs	r3, #1
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	86da      	strh	r2, [r3, #54]	; 0x36
 800640c:	e011      	b.n	8006432 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800640e:	f7fd fc65 	bl	8003cdc <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d803      	bhi.n	8006426 <HAL_SPI_Transmit+0x204>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d102      	bne.n	800642c <HAL_SPI_Transmit+0x20a>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006430:	e026      	b.n	8006480 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1cd      	bne.n	80063d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f8b3 	bl	80065ac <SPI_EndRxTxTransaction>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10a      	bne.n	8006470 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e000      	b.n	8006480 <HAL_SPI_Transmit+0x25e>
  }

error:
 800647e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006490:	7ffb      	ldrb	r3, [r7, #31]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064ac:	f7fd fc16 	bl	8003cdc <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4413      	add	r3, r2
 80064ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064bc:	f7fd fc0e 	bl	8003cdc <HAL_GetTick>
 80064c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064c2:	4b39      	ldr	r3, [pc, #228]	; (80065a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	015b      	lsls	r3, r3, #5
 80064c8:	0d1b      	lsrs	r3, r3, #20
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064d2:	e054      	b.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d050      	beq.n	800657e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80064dc:	f7fd fbfe 	bl	8003cdc <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	69fa      	ldr	r2, [r7, #28]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d902      	bls.n	80064f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d13d      	bne.n	800656e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006500:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800650a:	d111      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006514:	d004      	beq.n	8006520 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651e:	d107      	bne.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800652e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006538:	d10f      	bne.n	800655a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006548:	601a      	str	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006558:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e017      	b.n	800659e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	3b01      	subs	r3, #1
 800657c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	429a      	cmp	r2, r3
 800659a:	d19b      	bne.n	80064d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200000b4 	.word	0x200000b4

080065ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b088      	sub	sp, #32
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <SPI_EndRxTxTransaction+0x7c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <SPI_EndRxTxTransaction+0x80>)
 80065be:	fba2 2303 	umull	r2, r3, r2, r3
 80065c2:	0d5b      	lsrs	r3, r3, #21
 80065c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d6:	d112      	bne.n	80065fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff ff5a 	bl	800649c <SPI_WaitFlagStateUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d016      	beq.n	800661c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f2:	f043 0220 	orr.w	r2, r3, #32
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	3b01      	subs	r3, #1
 8006608:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d0f2      	beq.n	80065fe <SPI_EndRxTxTransaction+0x52>
 8006618:	e000      	b.n	800661c <SPI_EndRxTxTransaction+0x70>
        break;
 800661a:	bf00      	nop
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200000b4 	.word	0x200000b4
 800662c:	165e9f81 	.word	0x165e9f81

08006630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e041      	b.n	80066c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fd f9ee 	bl	8003a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 fd20 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d001      	beq.n	80066e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02d      	b.n	8006744 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a16      	ldr	r2, [pc, #88]	; (8006750 <HAL_TIM_Base_Start+0x80>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d009      	beq.n	800670e <HAL_TIM_Base_Start+0x3e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a15      	ldr	r2, [pc, #84]	; (8006754 <HAL_TIM_Base_Start+0x84>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d004      	beq.n	800670e <HAL_TIM_Base_Start+0x3e>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a13      	ldr	r2, [pc, #76]	; (8006758 <HAL_TIM_Base_Start+0x88>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b06      	cmp	r3, #6
 800671e:	d010      	beq.n	8006742 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006730:	e007      	b.n	8006742 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0201 	orr.w	r2, r2, #1
 8006740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40010000 	.word	0x40010000
 8006754:	40000c00 	.word	0x40000c00
 8006758:	40014000 	.word	0x40014000

0800675c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	f241 1311 	movw	r3, #4369	; 0x1111
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10f      	bne.n	8006794 <HAL_TIM_Base_Stop+0x38>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6a1a      	ldr	r2, [r3, #32]
 800677a:	f240 4344 	movw	r3, #1092	; 0x444
 800677e:	4013      	ands	r3, r2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d107      	bne.n	8006794 <HAL_TIM_Base_Stop+0x38>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0201 	bic.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d001      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e035      	b.n	8006830 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0201 	orr.w	r2, r2, #1
 80067da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a16      	ldr	r2, [pc, #88]	; (800683c <HAL_TIM_Base_Start_IT+0x90>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_TIM_Base_Start_IT+0x4e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a15      	ldr	r2, [pc, #84]	; (8006840 <HAL_TIM_Base_Start_IT+0x94>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_TIM_Base_Start_IT+0x4e>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a13      	ldr	r2, [pc, #76]	; (8006844 <HAL_TIM_Base_Start_IT+0x98>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d111      	bne.n	800681e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b06      	cmp	r3, #6
 800680a:	d010      	beq.n	800682e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800681c:	e007      	b.n	800682e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0201 	orr.w	r2, r2, #1
 800682c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40010000 	.word	0x40010000
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40014000 	.word	0x40014000

08006848 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0201 	bic.w	r2, r2, #1
 800685e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6a1a      	ldr	r2, [r3, #32]
 8006866:	f241 1311 	movw	r3, #4369	; 0x1111
 800686a:	4013      	ands	r3, r2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10f      	bne.n	8006890 <HAL_TIM_Base_Stop_IT+0x48>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6a1a      	ldr	r2, [r3, #32]
 8006876:	f240 4344 	movw	r3, #1092	; 0x444
 800687a:	4013      	ands	r3, r2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <HAL_TIM_Base_Stop_IT+0x48>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e041      	b.n	800693c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fd f88b 	bl	80039e8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3304      	adds	r3, #4
 80068e2:	4619      	mov	r1, r3
 80068e4:	4610      	mov	r0, r2
 80068e6:	f000 fbe5 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e041      	b.n	80069da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fc fff6 	bl	800395c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f000 fb96 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <HAL_TIM_PWM_Start+0x24>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e022      	b.n	8006a4e <HAL_TIM_PWM_Start+0x6a>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d109      	bne.n	8006a22 <HAL_TIM_PWM_Start+0x3e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	bf14      	ite	ne
 8006a1a:	2301      	movne	r3, #1
 8006a1c:	2300      	moveq	r3, #0
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	e015      	b.n	8006a4e <HAL_TIM_PWM_Start+0x6a>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d109      	bne.n	8006a3c <HAL_TIM_PWM_Start+0x58>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e008      	b.n	8006a4e <HAL_TIM_PWM_Start+0x6a>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d001      	beq.n	8006a56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e059      	b.n	8006b0a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <HAL_TIM_PWM_Start+0x82>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a64:	e013      	b.n	8006a8e <HAL_TIM_PWM_Start+0xaa>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d104      	bne.n	8006a76 <HAL_TIM_PWM_Start+0x92>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a74:	e00b      	b.n	8006a8e <HAL_TIM_PWM_Start+0xaa>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d104      	bne.n	8006a86 <HAL_TIM_PWM_Start+0xa2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a84:	e003      	b.n	8006a8e <HAL_TIM_PWM_Start+0xaa>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2201      	movs	r2, #1
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fcf6 	bl	8007488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a1c      	ldr	r2, [pc, #112]	; (8006b14 <HAL_TIM_PWM_Start+0x130>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d107      	bne.n	8006ab6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <HAL_TIM_PWM_Start+0x130>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_TIM_PWM_Start+0xf0>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a14      	ldr	r2, [pc, #80]	; (8006b18 <HAL_TIM_PWM_Start+0x134>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIM_PWM_Start+0xf0>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <HAL_TIM_PWM_Start+0x138>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d111      	bne.n	8006af8 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b06      	cmp	r3, #6
 8006ae4:	d010      	beq.n	8006b08 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	e007      	b.n	8006b08 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000c00 	.word	0x40000c00
 8006b1c:	40014000 	.word	0x40014000

08006b20 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fca8 	bl	8007488 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a29      	ldr	r2, [pc, #164]	; (8006be4 <HAL_TIM_PWM_Stop+0xc4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d117      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10f      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6a1a      	ldr	r2, [r3, #32]
 8006b58:	f240 4344 	movw	r3, #1092	; 0x444
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <HAL_TIM_PWM_Stop+0x52>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6a1a      	ldr	r2, [r3, #32]
 8006b78:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x82>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	f240 4344 	movw	r3, #1092	; 0x444
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <HAL_TIM_PWM_Stop+0x82>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0201 	bic.w	r2, r2, #1
 8006ba0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Stop+0x92>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bb0:	e013      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Stop+0xa2>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bc0:	e00b      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d104      	bne.n	8006bd2 <HAL_TIM_PWM_Stop+0xb2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bd0:	e003      	b.n	8006bda <HAL_TIM_PWM_Stop+0xba>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40010000 	.word	0x40010000

08006be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0202 	mvn.w	r2, #2
 8006c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa16 	bl	800705c <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fa08 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fa19 	bl	8007070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0204 	mvn.w	r2, #4
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f9ec 	bl	800705c <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f9de 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f9ef 	bl	8007070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0308 	and.w	r3, r3, #8
 8006ca2:	2b08      	cmp	r3, #8
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0308 	and.w	r3, r3, #8
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0208 	mvn.w	r2, #8
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f003 0303 	and.w	r3, r3, #3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9c2 	bl	800705c <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9b4 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f9c5 	bl	8007070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0310 	and.w	r3, r3, #16
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d122      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d11b      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0210 	mvn.w	r2, #16
 8006d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2208      	movs	r2, #8
 8006d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d003      	beq.n	8006d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f998 	bl	800705c <HAL_TIM_IC_CaptureCallback>
 8006d2c:	e005      	b.n	8006d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f98a 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f99b 	bl	8007070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0301 	and.w	r3, r3, #1
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10e      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d107      	bne.n	8006d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0201 	mvn.w	r2, #1
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f964 	bl	8007034 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d76:	2b80      	cmp	r3, #128	; 0x80
 8006d78:	d10e      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d84:	2b80      	cmp	r3, #128	; 0x80
 8006d86:	d107      	bne.n	8006d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fc54 	bl	8007640 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b40      	cmp	r3, #64	; 0x40
 8006da4:	d10e      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d107      	bne.n	8006dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f960 	bl	8007084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d10e      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d107      	bne.n	8006df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0220 	mvn.w	r2, #32
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc1e 	bl	800762c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df0:	bf00      	nop
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e048      	b.n	8006ea8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b0c      	cmp	r3, #12
 8006e22:	d839      	bhi.n	8006e98 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006e24:	a201      	add	r2, pc, #4	; (adr r2, 8006e2c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e2a:	bf00      	nop
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e99 	.word	0x08006e99
 8006e34:	08006e99 	.word	0x08006e99
 8006e38:	08006e99 	.word	0x08006e99
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e99 	.word	0x08006e99
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006e99 	.word	0x08006e99
 8006e4c:	08006e7d 	.word	0x08006e7d
 8006e50:	08006e99 	.word	0x08006e99
 8006e54:	08006e99 	.word	0x08006e99
 8006e58:	08006e99 	.word	0x08006e99
 8006e5c:	08006e8b 	.word	0x08006e8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 f982 	bl	8007170 <TIM_OC1_SetConfig>
      break;
 8006e6c:	e017      	b.n	8006e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 f9e1 	bl	800723c <TIM_OC2_SetConfig>
      break;
 8006e7a:	e010      	b.n	8006e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fa46 	bl	8007314 <TIM_OC3_SetConfig>
      break;
 8006e88:	e009      	b.n	8006e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 faa9 	bl	80073e8 <TIM_OC4_SetConfig>
      break;
 8006e96:	e002      	b.n	8006e9e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d101      	bne.n	8006ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eca:	2302      	movs	r3, #2
 8006ecc:	e0ae      	b.n	800702c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	f200 809f 	bhi.w	800701c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	0800701d 	.word	0x0800701d
 8006eec:	0800701d 	.word	0x0800701d
 8006ef0:	0800701d 	.word	0x0800701d
 8006ef4:	08006f59 	.word	0x08006f59
 8006ef8:	0800701d 	.word	0x0800701d
 8006efc:	0800701d 	.word	0x0800701d
 8006f00:	0800701d 	.word	0x0800701d
 8006f04:	08006f9b 	.word	0x08006f9b
 8006f08:	0800701d 	.word	0x0800701d
 8006f0c:	0800701d 	.word	0x0800701d
 8006f10:	0800701d 	.word	0x0800701d
 8006f14:	08006fdb 	.word	0x08006fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f926 	bl	8007170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0208 	orr.w	r2, r2, #8
 8006f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699a      	ldr	r2, [r3, #24]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0204 	bic.w	r2, r2, #4
 8006f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6999      	ldr	r1, [r3, #24]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	691a      	ldr	r2, [r3, #16]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	619a      	str	r2, [r3, #24]
      break;
 8006f56:	e064      	b.n	8007022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f96c 	bl	800723c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6999      	ldr	r1, [r3, #24]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	021a      	lsls	r2, r3, #8
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	619a      	str	r2, [r3, #24]
      break;
 8006f98:	e043      	b.n	8007022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f9b7 	bl	8007314 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0208 	orr.w	r2, r2, #8
 8006fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0204 	bic.w	r2, r2, #4
 8006fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69d9      	ldr	r1, [r3, #28]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	691a      	ldr	r2, [r3, #16]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	61da      	str	r2, [r3, #28]
      break;
 8006fd8:	e023      	b.n	8007022 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fa01 	bl	80073e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69d9      	ldr	r1, [r3, #28]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	021a      	lsls	r2, r3, #8
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	61da      	str	r2, [r3, #28]
      break;
 800701a:	e002      	b.n	8007022 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  return htim->State;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a6:	b2db      	uxtb	r3, r3
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a26      	ldr	r2, [pc, #152]	; (8007160 <TIM_Base_SetConfig+0xac>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d003      	beq.n	80070d4 <TIM_Base_SetConfig+0x20>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a25      	ldr	r2, [pc, #148]	; (8007164 <TIM_Base_SetConfig+0xb0>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d108      	bne.n	80070e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a1d      	ldr	r2, [pc, #116]	; (8007160 <TIM_Base_SetConfig+0xac>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00b      	beq.n	8007106 <TIM_Base_SetConfig+0x52>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a1c      	ldr	r2, [pc, #112]	; (8007164 <TIM_Base_SetConfig+0xb0>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <TIM_Base_SetConfig+0x52>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1b      	ldr	r2, [pc, #108]	; (8007168 <TIM_Base_SetConfig+0xb4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_Base_SetConfig+0x52>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a1a      	ldr	r2, [pc, #104]	; (800716c <TIM_Base_SetConfig+0xb8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a08      	ldr	r2, [pc, #32]	; (8007160 <TIM_Base_SetConfig+0xac>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d103      	bne.n	800714c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	615a      	str	r2, [r3, #20]
}
 8007152:	bf00      	nop
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40010000 	.word	0x40010000
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40014000 	.word	0x40014000
 800716c:	40014800 	.word	0x40014800

08007170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 0303 	bic.w	r3, r3, #3
 80071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f023 0302 	bic.w	r3, r3, #2
 80071b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	; (8007238 <TIM_OC1_SetConfig+0xc8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d10c      	bne.n	80071e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0308 	bic.w	r3, r3, #8
 80071d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f023 0304 	bic.w	r3, r3, #4
 80071e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a13      	ldr	r2, [pc, #76]	; (8007238 <TIM_OC1_SetConfig+0xc8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d111      	bne.n	8007212 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	4313      	orrs	r3, r2
 8007206:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	621a      	str	r2, [r3, #32]
}
 800722c:	bf00      	nop
 800722e:	371c      	adds	r7, #28
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	40010000 	.word	0x40010000

0800723c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800723c:	b480      	push	{r7}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	f023 0210 	bic.w	r2, r3, #16
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	021b      	lsls	r3, r3, #8
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0320 	bic.w	r3, r3, #32
 8007286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a1e      	ldr	r2, [pc, #120]	; (8007310 <TIM_OC2_SetConfig+0xd4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d10d      	bne.n	80072b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a15      	ldr	r2, [pc, #84]	; (8007310 <TIM_OC2_SetConfig+0xd4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d113      	bne.n	80072e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	40010000 	.word	0x40010000

08007314 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0303 	bic.w	r3, r3, #3
 800734a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800735c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <TIM_OC3_SetConfig+0xd0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d10d      	bne.n	800738e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	021b      	lsls	r3, r3, #8
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800738c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a14      	ldr	r2, [pc, #80]	; (80073e4 <TIM_OC3_SetConfig+0xd0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d113      	bne.n	80073be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800739c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	621a      	str	r2, [r3, #32]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40010000 	.word	0x40010000

080073e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	69db      	ldr	r3, [r3, #28]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800741e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	021b      	lsls	r3, r3, #8
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	031b      	lsls	r3, r3, #12
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a10      	ldr	r2, [pc, #64]	; (8007484 <TIM_OC4_SetConfig+0x9c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d109      	bne.n	800745c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800744e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	019b      	lsls	r3, r3, #6
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	621a      	str	r2, [r3, #32]
}
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40010000 	.word	0x40010000

08007488 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	2201      	movs	r2, #1
 800749c:	fa02 f303 	lsl.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1a      	ldr	r2, [r3, #32]
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	43db      	mvns	r3, r3
 80074aa:	401a      	ands	r2, r3
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a1a      	ldr	r2, [r3, #32]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f003 031f 	and.w	r3, r3, #31
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	fa01 f303 	lsl.w	r3, r1, r3
 80074c0:	431a      	orrs	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e041      	b.n	8007570 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a14      	ldr	r2, [pc, #80]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d009      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a12      	ldr	r2, [pc, #72]	; (8007580 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d004      	beq.n	8007544 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a11      	ldr	r2, [pc, #68]	; (8007584 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d10c      	bne.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800754a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	4313      	orrs	r3, r2
 8007554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40010000 	.word	0x40010000
 8007580:	40000c00 	.word	0x40000c00
 8007584:	40014000 	.word	0x40014000

08007588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e03d      	b.n	8007620 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800761e:	2300      	movs	r3, #0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	; (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	200000c0 	.word	0x200000c0

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	; (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	; (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	; (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	; (80076a4 <__libc_init_array+0x44>)
 8007674:	f002 ff1a 	bl	800a4ac <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	0800e4d4 	.word	0x0800e4d4
 800769c:	0800e4d4 	.word	0x0800e4d4
 80076a0:	0800e4d4 	.word	0x0800e4d4
 80076a4:	0800e4d8 	.word	0x0800e4d8

080076a8 <malloc>:
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <malloc+0xc>)
 80076aa:	4601      	mov	r1, r0
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	f000 b885 	b.w	80077bc <_malloc_r>
 80076b2:	bf00      	nop
 80076b4:	200000c0 	.word	0x200000c0

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <memset>:
 80076d4:	4402      	add	r2, r0
 80076d6:	4603      	mov	r3, r0
 80076d8:	4293      	cmp	r3, r2
 80076da:	d100      	bne.n	80076de <memset+0xa>
 80076dc:	4770      	bx	lr
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7f9      	b.n	80076d8 <memset+0x4>

080076e4 <_free_r>:
 80076e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d044      	beq.n	8007774 <_free_r+0x90>
 80076ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076ee:	9001      	str	r0, [sp, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f1a1 0404 	sub.w	r4, r1, #4
 80076f6:	bfb8      	it	lt
 80076f8:	18e4      	addlt	r4, r4, r3
 80076fa:	f001 fee3 	bl	80094c4 <__malloc_lock>
 80076fe:	4a1e      	ldr	r2, [pc, #120]	; (8007778 <_free_r+0x94>)
 8007700:	9801      	ldr	r0, [sp, #4]
 8007702:	6813      	ldr	r3, [r2, #0]
 8007704:	b933      	cbnz	r3, 8007714 <_free_r+0x30>
 8007706:	6063      	str	r3, [r4, #4]
 8007708:	6014      	str	r4, [r2, #0]
 800770a:	b003      	add	sp, #12
 800770c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007710:	f001 bede 	b.w	80094d0 <__malloc_unlock>
 8007714:	42a3      	cmp	r3, r4
 8007716:	d908      	bls.n	800772a <_free_r+0x46>
 8007718:	6825      	ldr	r5, [r4, #0]
 800771a:	1961      	adds	r1, r4, r5
 800771c:	428b      	cmp	r3, r1
 800771e:	bf01      	itttt	eq
 8007720:	6819      	ldreq	r1, [r3, #0]
 8007722:	685b      	ldreq	r3, [r3, #4]
 8007724:	1949      	addeq	r1, r1, r5
 8007726:	6021      	streq	r1, [r4, #0]
 8007728:	e7ed      	b.n	8007706 <_free_r+0x22>
 800772a:	461a      	mov	r2, r3
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	b10b      	cbz	r3, 8007734 <_free_r+0x50>
 8007730:	42a3      	cmp	r3, r4
 8007732:	d9fa      	bls.n	800772a <_free_r+0x46>
 8007734:	6811      	ldr	r1, [r2, #0]
 8007736:	1855      	adds	r5, r2, r1
 8007738:	42a5      	cmp	r5, r4
 800773a:	d10b      	bne.n	8007754 <_free_r+0x70>
 800773c:	6824      	ldr	r4, [r4, #0]
 800773e:	4421      	add	r1, r4
 8007740:	1854      	adds	r4, r2, r1
 8007742:	42a3      	cmp	r3, r4
 8007744:	6011      	str	r1, [r2, #0]
 8007746:	d1e0      	bne.n	800770a <_free_r+0x26>
 8007748:	681c      	ldr	r4, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	6053      	str	r3, [r2, #4]
 800774e:	4421      	add	r1, r4
 8007750:	6011      	str	r1, [r2, #0]
 8007752:	e7da      	b.n	800770a <_free_r+0x26>
 8007754:	d902      	bls.n	800775c <_free_r+0x78>
 8007756:	230c      	movs	r3, #12
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	e7d6      	b.n	800770a <_free_r+0x26>
 800775c:	6825      	ldr	r5, [r4, #0]
 800775e:	1961      	adds	r1, r4, r5
 8007760:	428b      	cmp	r3, r1
 8007762:	bf04      	itt	eq
 8007764:	6819      	ldreq	r1, [r3, #0]
 8007766:	685b      	ldreq	r3, [r3, #4]
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	bf04      	itt	eq
 800776c:	1949      	addeq	r1, r1, r5
 800776e:	6021      	streq	r1, [r4, #0]
 8007770:	6054      	str	r4, [r2, #4]
 8007772:	e7ca      	b.n	800770a <_free_r+0x26>
 8007774:	b003      	add	sp, #12
 8007776:	bd30      	pop	{r4, r5, pc}
 8007778:	20000530 	.word	0x20000530

0800777c <sbrk_aligned>:
 800777c:	b570      	push	{r4, r5, r6, lr}
 800777e:	4e0e      	ldr	r6, [pc, #56]	; (80077b8 <sbrk_aligned+0x3c>)
 8007780:	460c      	mov	r4, r1
 8007782:	6831      	ldr	r1, [r6, #0]
 8007784:	4605      	mov	r5, r0
 8007786:	b911      	cbnz	r1, 800778e <sbrk_aligned+0x12>
 8007788:	f000 fd0e 	bl	80081a8 <_sbrk_r>
 800778c:	6030      	str	r0, [r6, #0]
 800778e:	4621      	mov	r1, r4
 8007790:	4628      	mov	r0, r5
 8007792:	f000 fd09 	bl	80081a8 <_sbrk_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	d00a      	beq.n	80077b0 <sbrk_aligned+0x34>
 800779a:	1cc4      	adds	r4, r0, #3
 800779c:	f024 0403 	bic.w	r4, r4, #3
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d007      	beq.n	80077b4 <sbrk_aligned+0x38>
 80077a4:	1a21      	subs	r1, r4, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fcfe 	bl	80081a8 <_sbrk_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d101      	bne.n	80077b4 <sbrk_aligned+0x38>
 80077b0:	f04f 34ff 	mov.w	r4, #4294967295
 80077b4:	4620      	mov	r0, r4
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	20000534 	.word	0x20000534

080077bc <_malloc_r>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	1ccd      	adds	r5, r1, #3
 80077c2:	f025 0503 	bic.w	r5, r5, #3
 80077c6:	3508      	adds	r5, #8
 80077c8:	2d0c      	cmp	r5, #12
 80077ca:	bf38      	it	cc
 80077cc:	250c      	movcc	r5, #12
 80077ce:	2d00      	cmp	r5, #0
 80077d0:	4607      	mov	r7, r0
 80077d2:	db01      	blt.n	80077d8 <_malloc_r+0x1c>
 80077d4:	42a9      	cmp	r1, r5
 80077d6:	d905      	bls.n	80077e4 <_malloc_r+0x28>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	2600      	movs	r6, #0
 80077de:	4630      	mov	r0, r6
 80077e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e4:	4e2e      	ldr	r6, [pc, #184]	; (80078a0 <_malloc_r+0xe4>)
 80077e6:	f001 fe6d 	bl	80094c4 <__malloc_lock>
 80077ea:	6833      	ldr	r3, [r6, #0]
 80077ec:	461c      	mov	r4, r3
 80077ee:	bb34      	cbnz	r4, 800783e <_malloc_r+0x82>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4638      	mov	r0, r7
 80077f4:	f7ff ffc2 	bl	800777c <sbrk_aligned>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	4604      	mov	r4, r0
 80077fc:	d14d      	bne.n	800789a <_malloc_r+0xde>
 80077fe:	6834      	ldr	r4, [r6, #0]
 8007800:	4626      	mov	r6, r4
 8007802:	2e00      	cmp	r6, #0
 8007804:	d140      	bne.n	8007888 <_malloc_r+0xcc>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	4631      	mov	r1, r6
 800780a:	4638      	mov	r0, r7
 800780c:	eb04 0803 	add.w	r8, r4, r3
 8007810:	f000 fcca 	bl	80081a8 <_sbrk_r>
 8007814:	4580      	cmp	r8, r0
 8007816:	d13a      	bne.n	800788e <_malloc_r+0xd2>
 8007818:	6821      	ldr	r1, [r4, #0]
 800781a:	3503      	adds	r5, #3
 800781c:	1a6d      	subs	r5, r5, r1
 800781e:	f025 0503 	bic.w	r5, r5, #3
 8007822:	3508      	adds	r5, #8
 8007824:	2d0c      	cmp	r5, #12
 8007826:	bf38      	it	cc
 8007828:	250c      	movcc	r5, #12
 800782a:	4629      	mov	r1, r5
 800782c:	4638      	mov	r0, r7
 800782e:	f7ff ffa5 	bl	800777c <sbrk_aligned>
 8007832:	3001      	adds	r0, #1
 8007834:	d02b      	beq.n	800788e <_malloc_r+0xd2>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	442b      	add	r3, r5
 800783a:	6023      	str	r3, [r4, #0]
 800783c:	e00e      	b.n	800785c <_malloc_r+0xa0>
 800783e:	6822      	ldr	r2, [r4, #0]
 8007840:	1b52      	subs	r2, r2, r5
 8007842:	d41e      	bmi.n	8007882 <_malloc_r+0xc6>
 8007844:	2a0b      	cmp	r2, #11
 8007846:	d916      	bls.n	8007876 <_malloc_r+0xba>
 8007848:	1961      	adds	r1, r4, r5
 800784a:	42a3      	cmp	r3, r4
 800784c:	6025      	str	r5, [r4, #0]
 800784e:	bf18      	it	ne
 8007850:	6059      	strne	r1, [r3, #4]
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	bf08      	it	eq
 8007856:	6031      	streq	r1, [r6, #0]
 8007858:	5162      	str	r2, [r4, r5]
 800785a:	604b      	str	r3, [r1, #4]
 800785c:	4638      	mov	r0, r7
 800785e:	f104 060b 	add.w	r6, r4, #11
 8007862:	f001 fe35 	bl	80094d0 <__malloc_unlock>
 8007866:	f026 0607 	bic.w	r6, r6, #7
 800786a:	1d23      	adds	r3, r4, #4
 800786c:	1af2      	subs	r2, r6, r3
 800786e:	d0b6      	beq.n	80077de <_malloc_r+0x22>
 8007870:	1b9b      	subs	r3, r3, r6
 8007872:	50a3      	str	r3, [r4, r2]
 8007874:	e7b3      	b.n	80077de <_malloc_r+0x22>
 8007876:	6862      	ldr	r2, [r4, #4]
 8007878:	42a3      	cmp	r3, r4
 800787a:	bf0c      	ite	eq
 800787c:	6032      	streq	r2, [r6, #0]
 800787e:	605a      	strne	r2, [r3, #4]
 8007880:	e7ec      	b.n	800785c <_malloc_r+0xa0>
 8007882:	4623      	mov	r3, r4
 8007884:	6864      	ldr	r4, [r4, #4]
 8007886:	e7b2      	b.n	80077ee <_malloc_r+0x32>
 8007888:	4634      	mov	r4, r6
 800788a:	6876      	ldr	r6, [r6, #4]
 800788c:	e7b9      	b.n	8007802 <_malloc_r+0x46>
 800788e:	230c      	movs	r3, #12
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	4638      	mov	r0, r7
 8007894:	f001 fe1c 	bl	80094d0 <__malloc_unlock>
 8007898:	e7a1      	b.n	80077de <_malloc_r+0x22>
 800789a:	6025      	str	r5, [r4, #0]
 800789c:	e7de      	b.n	800785c <_malloc_r+0xa0>
 800789e:	bf00      	nop
 80078a0:	20000530 	.word	0x20000530

080078a4 <__cvt>:
 80078a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	ec55 4b10 	vmov	r4, r5, d0
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	460e      	mov	r6, r1
 80078b0:	4619      	mov	r1, r3
 80078b2:	462b      	mov	r3, r5
 80078b4:	bfbb      	ittet	lt
 80078b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80078ba:	461d      	movlt	r5, r3
 80078bc:	2300      	movge	r3, #0
 80078be:	232d      	movlt	r3, #45	; 0x2d
 80078c0:	700b      	strb	r3, [r1, #0]
 80078c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80078c8:	4691      	mov	r9, r2
 80078ca:	f023 0820 	bic.w	r8, r3, #32
 80078ce:	bfbc      	itt	lt
 80078d0:	4622      	movlt	r2, r4
 80078d2:	4614      	movlt	r4, r2
 80078d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078d8:	d005      	beq.n	80078e6 <__cvt+0x42>
 80078da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078de:	d100      	bne.n	80078e2 <__cvt+0x3e>
 80078e0:	3601      	adds	r6, #1
 80078e2:	2102      	movs	r1, #2
 80078e4:	e000      	b.n	80078e8 <__cvt+0x44>
 80078e6:	2103      	movs	r1, #3
 80078e8:	ab03      	add	r3, sp, #12
 80078ea:	9301      	str	r3, [sp, #4]
 80078ec:	ab02      	add	r3, sp, #8
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	ec45 4b10 	vmov	d0, r4, r5
 80078f4:	4653      	mov	r3, sl
 80078f6:	4632      	mov	r2, r6
 80078f8:	f000 fdd2 	bl	80084a0 <_dtoa_r>
 80078fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007900:	4607      	mov	r7, r0
 8007902:	d102      	bne.n	800790a <__cvt+0x66>
 8007904:	f019 0f01 	tst.w	r9, #1
 8007908:	d022      	beq.n	8007950 <__cvt+0xac>
 800790a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800790e:	eb07 0906 	add.w	r9, r7, r6
 8007912:	d110      	bne.n	8007936 <__cvt+0x92>
 8007914:	783b      	ldrb	r3, [r7, #0]
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d10a      	bne.n	8007930 <__cvt+0x8c>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f9 f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 8007926:	b918      	cbnz	r0, 8007930 <__cvt+0x8c>
 8007928:	f1c6 0601 	rsb	r6, r6, #1
 800792c:	f8ca 6000 	str.w	r6, [sl]
 8007930:	f8da 3000 	ldr.w	r3, [sl]
 8007934:	4499      	add	r9, r3
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	4620      	mov	r0, r4
 800793c:	4629      	mov	r1, r5
 800793e:	f7f9 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 8007942:	b108      	cbz	r0, 8007948 <__cvt+0xa4>
 8007944:	f8cd 900c 	str.w	r9, [sp, #12]
 8007948:	2230      	movs	r2, #48	; 0x30
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	454b      	cmp	r3, r9
 800794e:	d307      	bcc.n	8007960 <__cvt+0xbc>
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007954:	1bdb      	subs	r3, r3, r7
 8007956:	4638      	mov	r0, r7
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	b004      	add	sp, #16
 800795c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007960:	1c59      	adds	r1, r3, #1
 8007962:	9103      	str	r1, [sp, #12]
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e7f0      	b.n	800794a <__cvt+0xa6>

08007968 <__exponent>:
 8007968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800796a:	4603      	mov	r3, r0
 800796c:	2900      	cmp	r1, #0
 800796e:	bfb8      	it	lt
 8007970:	4249      	neglt	r1, r1
 8007972:	f803 2b02 	strb.w	r2, [r3], #2
 8007976:	bfb4      	ite	lt
 8007978:	222d      	movlt	r2, #45	; 0x2d
 800797a:	222b      	movge	r2, #43	; 0x2b
 800797c:	2909      	cmp	r1, #9
 800797e:	7042      	strb	r2, [r0, #1]
 8007980:	dd2a      	ble.n	80079d8 <__exponent+0x70>
 8007982:	f10d 0407 	add.w	r4, sp, #7
 8007986:	46a4      	mov	ip, r4
 8007988:	270a      	movs	r7, #10
 800798a:	46a6      	mov	lr, r4
 800798c:	460a      	mov	r2, r1
 800798e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007992:	fb07 1516 	mls	r5, r7, r6, r1
 8007996:	3530      	adds	r5, #48	; 0x30
 8007998:	2a63      	cmp	r2, #99	; 0x63
 800799a:	f104 34ff 	add.w	r4, r4, #4294967295
 800799e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80079a2:	4631      	mov	r1, r6
 80079a4:	dcf1      	bgt.n	800798a <__exponent+0x22>
 80079a6:	3130      	adds	r1, #48	; 0x30
 80079a8:	f1ae 0502 	sub.w	r5, lr, #2
 80079ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80079b0:	1c44      	adds	r4, r0, #1
 80079b2:	4629      	mov	r1, r5
 80079b4:	4561      	cmp	r1, ip
 80079b6:	d30a      	bcc.n	80079ce <__exponent+0x66>
 80079b8:	f10d 0209 	add.w	r2, sp, #9
 80079bc:	eba2 020e 	sub.w	r2, r2, lr
 80079c0:	4565      	cmp	r5, ip
 80079c2:	bf88      	it	hi
 80079c4:	2200      	movhi	r2, #0
 80079c6:	4413      	add	r3, r2
 80079c8:	1a18      	subs	r0, r3, r0
 80079ca:	b003      	add	sp, #12
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80079d6:	e7ed      	b.n	80079b4 <__exponent+0x4c>
 80079d8:	2330      	movs	r3, #48	; 0x30
 80079da:	3130      	adds	r1, #48	; 0x30
 80079dc:	7083      	strb	r3, [r0, #2]
 80079de:	70c1      	strb	r1, [r0, #3]
 80079e0:	1d03      	adds	r3, r0, #4
 80079e2:	e7f1      	b.n	80079c8 <__exponent+0x60>

080079e4 <_printf_float>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	ed2d 8b02 	vpush	{d8}
 80079ec:	b08d      	sub	sp, #52	; 0x34
 80079ee:	460c      	mov	r4, r1
 80079f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079f4:	4616      	mov	r6, r2
 80079f6:	461f      	mov	r7, r3
 80079f8:	4605      	mov	r5, r0
 80079fa:	f001 fcf7 	bl	80093ec <_localeconv_r>
 80079fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007a02:	4650      	mov	r0, sl
 8007a04:	f7f8 fc04 	bl	8000210 <strlen>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	9305      	str	r3, [sp, #20]
 8007a10:	f8d8 3000 	ldr.w	r3, [r8]
 8007a14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	f103 0208 	add.w	r2, r3, #8
 8007a22:	f8c8 2000 	str.w	r2, [r8]
 8007a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007a2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a36:	9307      	str	r3, [sp, #28]
 8007a38:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a3c:	ee08 0a10 	vmov	s16, r0
 8007a40:	4b9f      	ldr	r3, [pc, #636]	; (8007cc0 <_printf_float+0x2dc>)
 8007a42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	f7f9 f88f 	bl	8000b6c <__aeabi_dcmpun>
 8007a4e:	bb88      	cbnz	r0, 8007ab4 <_printf_float+0xd0>
 8007a50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a54:	4b9a      	ldr	r3, [pc, #616]	; (8007cc0 <_printf_float+0x2dc>)
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	f7f9 f869 	bl	8000b30 <__aeabi_dcmple>
 8007a5e:	bb48      	cbnz	r0, 8007ab4 <_printf_float+0xd0>
 8007a60:	2200      	movs	r2, #0
 8007a62:	2300      	movs	r3, #0
 8007a64:	4640      	mov	r0, r8
 8007a66:	4649      	mov	r1, r9
 8007a68:	f7f9 f858 	bl	8000b1c <__aeabi_dcmplt>
 8007a6c:	b110      	cbz	r0, 8007a74 <_printf_float+0x90>
 8007a6e:	232d      	movs	r3, #45	; 0x2d
 8007a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a74:	4b93      	ldr	r3, [pc, #588]	; (8007cc4 <_printf_float+0x2e0>)
 8007a76:	4894      	ldr	r0, [pc, #592]	; (8007cc8 <_printf_float+0x2e4>)
 8007a78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007a7c:	bf94      	ite	ls
 8007a7e:	4698      	movls	r8, r3
 8007a80:	4680      	movhi	r8, r0
 8007a82:	2303      	movs	r3, #3
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	9b05      	ldr	r3, [sp, #20]
 8007a88:	f023 0204 	bic.w	r2, r3, #4
 8007a8c:	6022      	str	r2, [r4, #0]
 8007a8e:	f04f 0900 	mov.w	r9, #0
 8007a92:	9700      	str	r7, [sp, #0]
 8007a94:	4633      	mov	r3, r6
 8007a96:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a98:	4621      	mov	r1, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	f000 f9d8 	bl	8007e50 <_printf_common>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	f040 8090 	bne.w	8007bc6 <_printf_float+0x1e2>
 8007aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aaa:	b00d      	add	sp, #52	; 0x34
 8007aac:	ecbd 8b02 	vpop	{d8}
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab4:	4642      	mov	r2, r8
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f9 f856 	bl	8000b6c <__aeabi_dcmpun>
 8007ac0:	b140      	cbz	r0, 8007ad4 <_printf_float+0xf0>
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bfbc      	itt	lt
 8007ac8:	232d      	movlt	r3, #45	; 0x2d
 8007aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007ace:	487f      	ldr	r0, [pc, #508]	; (8007ccc <_printf_float+0x2e8>)
 8007ad0:	4b7f      	ldr	r3, [pc, #508]	; (8007cd0 <_printf_float+0x2ec>)
 8007ad2:	e7d1      	b.n	8007a78 <_printf_float+0x94>
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ada:	9206      	str	r2, [sp, #24]
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	d13f      	bne.n	8007b60 <_printf_float+0x17c>
 8007ae0:	2306      	movs	r3, #6
 8007ae2:	6063      	str	r3, [r4, #4]
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	6861      	ldr	r1, [r4, #4]
 8007ae8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007aec:	2300      	movs	r3, #0
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	ab0a      	add	r3, sp, #40	; 0x28
 8007af2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007af6:	ab09      	add	r3, sp, #36	; 0x24
 8007af8:	ec49 8b10 	vmov	d0, r8, r9
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	6022      	str	r2, [r4, #0]
 8007b00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007b04:	4628      	mov	r0, r5
 8007b06:	f7ff fecd 	bl	80078a4 <__cvt>
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b0e:	2b47      	cmp	r3, #71	; 0x47
 8007b10:	4680      	mov	r8, r0
 8007b12:	d108      	bne.n	8007b26 <_printf_float+0x142>
 8007b14:	1cc8      	adds	r0, r1, #3
 8007b16:	db02      	blt.n	8007b1e <_printf_float+0x13a>
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	dd41      	ble.n	8007ba2 <_printf_float+0x1be>
 8007b1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007b22:	fa5f fb8b 	uxtb.w	fp, fp
 8007b26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b2a:	d820      	bhi.n	8007b6e <_printf_float+0x18a>
 8007b2c:	3901      	subs	r1, #1
 8007b2e:	465a      	mov	r2, fp
 8007b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007b34:	9109      	str	r1, [sp, #36]	; 0x24
 8007b36:	f7ff ff17 	bl	8007968 <__exponent>
 8007b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b3c:	1813      	adds	r3, r2, r0
 8007b3e:	2a01      	cmp	r2, #1
 8007b40:	4681      	mov	r9, r0
 8007b42:	6123      	str	r3, [r4, #16]
 8007b44:	dc02      	bgt.n	8007b4c <_printf_float+0x168>
 8007b46:	6822      	ldr	r2, [r4, #0]
 8007b48:	07d2      	lsls	r2, r2, #31
 8007b4a:	d501      	bpl.n	8007b50 <_printf_float+0x16c>
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	6123      	str	r3, [r4, #16]
 8007b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d09c      	beq.n	8007a92 <_printf_float+0xae>
 8007b58:	232d      	movs	r3, #45	; 0x2d
 8007b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b5e:	e798      	b.n	8007a92 <_printf_float+0xae>
 8007b60:	9a06      	ldr	r2, [sp, #24]
 8007b62:	2a47      	cmp	r2, #71	; 0x47
 8007b64:	d1be      	bne.n	8007ae4 <_printf_float+0x100>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1bc      	bne.n	8007ae4 <_printf_float+0x100>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e7b9      	b.n	8007ae2 <_printf_float+0xfe>
 8007b6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007b72:	d118      	bne.n	8007ba6 <_printf_float+0x1c2>
 8007b74:	2900      	cmp	r1, #0
 8007b76:	6863      	ldr	r3, [r4, #4]
 8007b78:	dd0b      	ble.n	8007b92 <_printf_float+0x1ae>
 8007b7a:	6121      	str	r1, [r4, #16]
 8007b7c:	b913      	cbnz	r3, 8007b84 <_printf_float+0x1a0>
 8007b7e:	6822      	ldr	r2, [r4, #0]
 8007b80:	07d0      	lsls	r0, r2, #31
 8007b82:	d502      	bpl.n	8007b8a <_printf_float+0x1a6>
 8007b84:	3301      	adds	r3, #1
 8007b86:	440b      	add	r3, r1
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b8c:	f04f 0900 	mov.w	r9, #0
 8007b90:	e7de      	b.n	8007b50 <_printf_float+0x16c>
 8007b92:	b913      	cbnz	r3, 8007b9a <_printf_float+0x1b6>
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	07d2      	lsls	r2, r2, #31
 8007b98:	d501      	bpl.n	8007b9e <_printf_float+0x1ba>
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	e7f4      	b.n	8007b88 <_printf_float+0x1a4>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e7f2      	b.n	8007b88 <_printf_float+0x1a4>
 8007ba2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba8:	4299      	cmp	r1, r3
 8007baa:	db05      	blt.n	8007bb8 <_printf_float+0x1d4>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	6121      	str	r1, [r4, #16]
 8007bb0:	07d8      	lsls	r0, r3, #31
 8007bb2:	d5ea      	bpl.n	8007b8a <_printf_float+0x1a6>
 8007bb4:	1c4b      	adds	r3, r1, #1
 8007bb6:	e7e7      	b.n	8007b88 <_printf_float+0x1a4>
 8007bb8:	2900      	cmp	r1, #0
 8007bba:	bfd4      	ite	le
 8007bbc:	f1c1 0202 	rsble	r2, r1, #2
 8007bc0:	2201      	movgt	r2, #1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	e7e0      	b.n	8007b88 <_printf_float+0x1a4>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	055a      	lsls	r2, r3, #21
 8007bca:	d407      	bmi.n	8007bdc <_printf_float+0x1f8>
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	4642      	mov	r2, r8
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d12c      	bne.n	8007c34 <_printf_float+0x250>
 8007bda:	e764      	b.n	8007aa6 <_printf_float+0xc2>
 8007bdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007be0:	f240 80e0 	bls.w	8007da4 <_printf_float+0x3c0>
 8007be4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	f7f8 ff8c 	bl	8000b08 <__aeabi_dcmpeq>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d034      	beq.n	8007c5e <_printf_float+0x27a>
 8007bf4:	4a37      	ldr	r2, [pc, #220]	; (8007cd4 <_printf_float+0x2f0>)
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f af51 	beq.w	8007aa6 <_printf_float+0xc2>
 8007c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	db02      	blt.n	8007c12 <_printf_float+0x22e>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	07d8      	lsls	r0, r3, #31
 8007c10:	d510      	bpl.n	8007c34 <_printf_float+0x250>
 8007c12:	ee18 3a10 	vmov	r3, s16
 8007c16:	4652      	mov	r2, sl
 8007c18:	4631      	mov	r1, r6
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	47b8      	blx	r7
 8007c1e:	3001      	adds	r0, #1
 8007c20:	f43f af41 	beq.w	8007aa6 <_printf_float+0xc2>
 8007c24:	f04f 0800 	mov.w	r8, #0
 8007c28:	f104 091a 	add.w	r9, r4, #26
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dc09      	bgt.n	8007c48 <_printf_float+0x264>
 8007c34:	6823      	ldr	r3, [r4, #0]
 8007c36:	079b      	lsls	r3, r3, #30
 8007c38:	f100 8105 	bmi.w	8007e46 <_printf_float+0x462>
 8007c3c:	68e0      	ldr	r0, [r4, #12]
 8007c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c40:	4298      	cmp	r0, r3
 8007c42:	bfb8      	it	lt
 8007c44:	4618      	movlt	r0, r3
 8007c46:	e730      	b.n	8007aaa <_printf_float+0xc6>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	464a      	mov	r2, r9
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4628      	mov	r0, r5
 8007c50:	47b8      	blx	r7
 8007c52:	3001      	adds	r0, #1
 8007c54:	f43f af27 	beq.w	8007aa6 <_printf_float+0xc2>
 8007c58:	f108 0801 	add.w	r8, r8, #1
 8007c5c:	e7e6      	b.n	8007c2c <_printf_float+0x248>
 8007c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dc39      	bgt.n	8007cd8 <_printf_float+0x2f4>
 8007c64:	4a1b      	ldr	r2, [pc, #108]	; (8007cd4 <_printf_float+0x2f0>)
 8007c66:	2301      	movs	r3, #1
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af19 	beq.w	8007aa6 <_printf_float+0xc2>
 8007c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	d102      	bne.n	8007c82 <_printf_float+0x29e>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07d9      	lsls	r1, r3, #31
 8007c80:	d5d8      	bpl.n	8007c34 <_printf_float+0x250>
 8007c82:	ee18 3a10 	vmov	r3, s16
 8007c86:	4652      	mov	r2, sl
 8007c88:	4631      	mov	r1, r6
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	47b8      	blx	r7
 8007c8e:	3001      	adds	r0, #1
 8007c90:	f43f af09 	beq.w	8007aa6 <_printf_float+0xc2>
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	f104 0a1a 	add.w	sl, r4, #26
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	425b      	negs	r3, r3
 8007ca0:	454b      	cmp	r3, r9
 8007ca2:	dc01      	bgt.n	8007ca8 <_printf_float+0x2c4>
 8007ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca6:	e792      	b.n	8007bce <_printf_float+0x1ea>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4652      	mov	r2, sl
 8007cac:	4631      	mov	r1, r6
 8007cae:	4628      	mov	r0, r5
 8007cb0:	47b8      	blx	r7
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	f43f aef7 	beq.w	8007aa6 <_printf_float+0xc2>
 8007cb8:	f109 0901 	add.w	r9, r9, #1
 8007cbc:	e7ee      	b.n	8007c9c <_printf_float+0x2b8>
 8007cbe:	bf00      	nop
 8007cc0:	7fefffff 	.word	0x7fefffff
 8007cc4:	0800e0f4 	.word	0x0800e0f4
 8007cc8:	0800e0f8 	.word	0x0800e0f8
 8007ccc:	0800e100 	.word	0x0800e100
 8007cd0:	0800e0fc 	.word	0x0800e0fc
 8007cd4:	0800e104 	.word	0x0800e104
 8007cd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	bfa8      	it	ge
 8007ce0:	461a      	movge	r2, r3
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	4691      	mov	r9, r2
 8007ce6:	dc37      	bgt.n	8007d58 <_printf_float+0x374>
 8007ce8:	f04f 0b00 	mov.w	fp, #0
 8007cec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007cf0:	f104 021a 	add.w	r2, r4, #26
 8007cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007cf6:	9305      	str	r3, [sp, #20]
 8007cf8:	eba3 0309 	sub.w	r3, r3, r9
 8007cfc:	455b      	cmp	r3, fp
 8007cfe:	dc33      	bgt.n	8007d68 <_printf_float+0x384>
 8007d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d04:	429a      	cmp	r2, r3
 8007d06:	db3b      	blt.n	8007d80 <_printf_float+0x39c>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	07da      	lsls	r2, r3, #31
 8007d0c:	d438      	bmi.n	8007d80 <_printf_float+0x39c>
 8007d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d10:	9a05      	ldr	r2, [sp, #20]
 8007d12:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d14:	1a9a      	subs	r2, r3, r2
 8007d16:	eba3 0901 	sub.w	r9, r3, r1
 8007d1a:	4591      	cmp	r9, r2
 8007d1c:	bfa8      	it	ge
 8007d1e:	4691      	movge	r9, r2
 8007d20:	f1b9 0f00 	cmp.w	r9, #0
 8007d24:	dc35      	bgt.n	8007d92 <_printf_float+0x3ae>
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d2e:	f104 0a1a 	add.w	sl, r4, #26
 8007d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d36:	1a9b      	subs	r3, r3, r2
 8007d38:	eba3 0309 	sub.w	r3, r3, r9
 8007d3c:	4543      	cmp	r3, r8
 8007d3e:	f77f af79 	ble.w	8007c34 <_printf_float+0x250>
 8007d42:	2301      	movs	r3, #1
 8007d44:	4652      	mov	r2, sl
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	47b8      	blx	r7
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	f43f aeaa 	beq.w	8007aa6 <_printf_float+0xc2>
 8007d52:	f108 0801 	add.w	r8, r8, #1
 8007d56:	e7ec      	b.n	8007d32 <_printf_float+0x34e>
 8007d58:	4613      	mov	r3, r2
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	4628      	mov	r0, r5
 8007d60:	47b8      	blx	r7
 8007d62:	3001      	adds	r0, #1
 8007d64:	d1c0      	bne.n	8007ce8 <_printf_float+0x304>
 8007d66:	e69e      	b.n	8007aa6 <_printf_float+0xc2>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	9205      	str	r2, [sp, #20]
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f ae97 	beq.w	8007aa6 <_printf_float+0xc2>
 8007d78:	9a05      	ldr	r2, [sp, #20]
 8007d7a:	f10b 0b01 	add.w	fp, fp, #1
 8007d7e:	e7b9      	b.n	8007cf4 <_printf_float+0x310>
 8007d80:	ee18 3a10 	vmov	r3, s16
 8007d84:	4652      	mov	r2, sl
 8007d86:	4631      	mov	r1, r6
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d1be      	bne.n	8007d0e <_printf_float+0x32a>
 8007d90:	e689      	b.n	8007aa6 <_printf_float+0xc2>
 8007d92:	9a05      	ldr	r2, [sp, #20]
 8007d94:	464b      	mov	r3, r9
 8007d96:	4442      	add	r2, r8
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	d1c1      	bne.n	8007d26 <_printf_float+0x342>
 8007da2:	e680      	b.n	8007aa6 <_printf_float+0xc2>
 8007da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da6:	2a01      	cmp	r2, #1
 8007da8:	dc01      	bgt.n	8007dae <_printf_float+0x3ca>
 8007daa:	07db      	lsls	r3, r3, #31
 8007dac:	d538      	bpl.n	8007e20 <_printf_float+0x43c>
 8007dae:	2301      	movs	r3, #1
 8007db0:	4642      	mov	r2, r8
 8007db2:	4631      	mov	r1, r6
 8007db4:	4628      	mov	r0, r5
 8007db6:	47b8      	blx	r7
 8007db8:	3001      	adds	r0, #1
 8007dba:	f43f ae74 	beq.w	8007aa6 <_printf_float+0xc2>
 8007dbe:	ee18 3a10 	vmov	r3, s16
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f ae6b 	beq.w	8007aa6 <_printf_float+0xc2>
 8007dd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	f7f8 fe96 	bl	8000b08 <__aeabi_dcmpeq>
 8007ddc:	b9d8      	cbnz	r0, 8007e16 <_printf_float+0x432>
 8007dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de0:	f108 0201 	add.w	r2, r8, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	4631      	mov	r1, r6
 8007de8:	4628      	mov	r0, r5
 8007dea:	47b8      	blx	r7
 8007dec:	3001      	adds	r0, #1
 8007dee:	d10e      	bne.n	8007e0e <_printf_float+0x42a>
 8007df0:	e659      	b.n	8007aa6 <_printf_float+0xc2>
 8007df2:	2301      	movs	r3, #1
 8007df4:	4652      	mov	r2, sl
 8007df6:	4631      	mov	r1, r6
 8007df8:	4628      	mov	r0, r5
 8007dfa:	47b8      	blx	r7
 8007dfc:	3001      	adds	r0, #1
 8007dfe:	f43f ae52 	beq.w	8007aa6 <_printf_float+0xc2>
 8007e02:	f108 0801 	add.w	r8, r8, #1
 8007e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	4543      	cmp	r3, r8
 8007e0c:	dcf1      	bgt.n	8007df2 <_printf_float+0x40e>
 8007e0e:	464b      	mov	r3, r9
 8007e10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007e14:	e6dc      	b.n	8007bd0 <_printf_float+0x1ec>
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	f104 0a1a 	add.w	sl, r4, #26
 8007e1e:	e7f2      	b.n	8007e06 <_printf_float+0x422>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4642      	mov	r2, r8
 8007e24:	e7df      	b.n	8007de6 <_printf_float+0x402>
 8007e26:	2301      	movs	r3, #1
 8007e28:	464a      	mov	r2, r9
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	f43f ae38 	beq.w	8007aa6 <_printf_float+0xc2>
 8007e36:	f108 0801 	add.w	r8, r8, #1
 8007e3a:	68e3      	ldr	r3, [r4, #12]
 8007e3c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e3e:	1a5b      	subs	r3, r3, r1
 8007e40:	4543      	cmp	r3, r8
 8007e42:	dcf0      	bgt.n	8007e26 <_printf_float+0x442>
 8007e44:	e6fa      	b.n	8007c3c <_printf_float+0x258>
 8007e46:	f04f 0800 	mov.w	r8, #0
 8007e4a:	f104 0919 	add.w	r9, r4, #25
 8007e4e:	e7f4      	b.n	8007e3a <_printf_float+0x456>

08007e50 <_printf_common>:
 8007e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	4616      	mov	r6, r2
 8007e56:	4699      	mov	r9, r3
 8007e58:	688a      	ldr	r2, [r1, #8]
 8007e5a:	690b      	ldr	r3, [r1, #16]
 8007e5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bfb8      	it	lt
 8007e64:	4613      	movlt	r3, r2
 8007e66:	6033      	str	r3, [r6, #0]
 8007e68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460c      	mov	r4, r1
 8007e70:	b10a      	cbz	r2, 8007e76 <_printf_common+0x26>
 8007e72:	3301      	adds	r3, #1
 8007e74:	6033      	str	r3, [r6, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	0699      	lsls	r1, r3, #26
 8007e7a:	bf42      	ittt	mi
 8007e7c:	6833      	ldrmi	r3, [r6, #0]
 8007e7e:	3302      	addmi	r3, #2
 8007e80:	6033      	strmi	r3, [r6, #0]
 8007e82:	6825      	ldr	r5, [r4, #0]
 8007e84:	f015 0506 	ands.w	r5, r5, #6
 8007e88:	d106      	bne.n	8007e98 <_printf_common+0x48>
 8007e8a:	f104 0a19 	add.w	sl, r4, #25
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	6832      	ldr	r2, [r6, #0]
 8007e92:	1a9b      	subs	r3, r3, r2
 8007e94:	42ab      	cmp	r3, r5
 8007e96:	dc26      	bgt.n	8007ee6 <_printf_common+0x96>
 8007e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e9c:	1e13      	subs	r3, r2, #0
 8007e9e:	6822      	ldr	r2, [r4, #0]
 8007ea0:	bf18      	it	ne
 8007ea2:	2301      	movne	r3, #1
 8007ea4:	0692      	lsls	r2, r2, #26
 8007ea6:	d42b      	bmi.n	8007f00 <_printf_common+0xb0>
 8007ea8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007eac:	4649      	mov	r1, r9
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c0      	blx	r8
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d01e      	beq.n	8007ef4 <_printf_common+0xa4>
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	68e5      	ldr	r5, [r4, #12]
 8007eba:	6832      	ldr	r2, [r6, #0]
 8007ebc:	f003 0306 	and.w	r3, r3, #6
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	bf08      	it	eq
 8007ec4:	1aad      	subeq	r5, r5, r2
 8007ec6:	68a3      	ldr	r3, [r4, #8]
 8007ec8:	6922      	ldr	r2, [r4, #16]
 8007eca:	bf0c      	ite	eq
 8007ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ed0:	2500      	movne	r5, #0
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	bfc4      	itt	gt
 8007ed6:	1a9b      	subgt	r3, r3, r2
 8007ed8:	18ed      	addgt	r5, r5, r3
 8007eda:	2600      	movs	r6, #0
 8007edc:	341a      	adds	r4, #26
 8007ede:	42b5      	cmp	r5, r6
 8007ee0:	d11a      	bne.n	8007f18 <_printf_common+0xc8>
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e008      	b.n	8007ef8 <_printf_common+0xa8>
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	4652      	mov	r2, sl
 8007eea:	4649      	mov	r1, r9
 8007eec:	4638      	mov	r0, r7
 8007eee:	47c0      	blx	r8
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d103      	bne.n	8007efc <_printf_common+0xac>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	3501      	adds	r5, #1
 8007efe:	e7c6      	b.n	8007e8e <_printf_common+0x3e>
 8007f00:	18e1      	adds	r1, r4, r3
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	2030      	movs	r0, #48	; 0x30
 8007f06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f0a:	4422      	add	r2, r4
 8007f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f14:	3302      	adds	r3, #2
 8007f16:	e7c7      	b.n	8007ea8 <_printf_common+0x58>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	4638      	mov	r0, r7
 8007f20:	47c0      	blx	r8
 8007f22:	3001      	adds	r0, #1
 8007f24:	d0e6      	beq.n	8007ef4 <_printf_common+0xa4>
 8007f26:	3601      	adds	r6, #1
 8007f28:	e7d9      	b.n	8007ede <_printf_common+0x8e>
	...

08007f2c <_printf_i>:
 8007f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f30:	7e0f      	ldrb	r7, [r1, #24]
 8007f32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f34:	2f78      	cmp	r7, #120	; 0x78
 8007f36:	4691      	mov	r9, r2
 8007f38:	4680      	mov	r8, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	469a      	mov	sl, r3
 8007f3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f42:	d807      	bhi.n	8007f54 <_printf_i+0x28>
 8007f44:	2f62      	cmp	r7, #98	; 0x62
 8007f46:	d80a      	bhi.n	8007f5e <_printf_i+0x32>
 8007f48:	2f00      	cmp	r7, #0
 8007f4a:	f000 80d8 	beq.w	80080fe <_printf_i+0x1d2>
 8007f4e:	2f58      	cmp	r7, #88	; 0x58
 8007f50:	f000 80a3 	beq.w	800809a <_printf_i+0x16e>
 8007f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f5c:	e03a      	b.n	8007fd4 <_printf_i+0xa8>
 8007f5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f62:	2b15      	cmp	r3, #21
 8007f64:	d8f6      	bhi.n	8007f54 <_printf_i+0x28>
 8007f66:	a101      	add	r1, pc, #4	; (adr r1, 8007f6c <_printf_i+0x40>)
 8007f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f6c:	08007fc5 	.word	0x08007fc5
 8007f70:	08007fd9 	.word	0x08007fd9
 8007f74:	08007f55 	.word	0x08007f55
 8007f78:	08007f55 	.word	0x08007f55
 8007f7c:	08007f55 	.word	0x08007f55
 8007f80:	08007f55 	.word	0x08007f55
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007f55 	.word	0x08007f55
 8007f8c:	08007f55 	.word	0x08007f55
 8007f90:	08007f55 	.word	0x08007f55
 8007f94:	08007f55 	.word	0x08007f55
 8007f98:	080080e5 	.word	0x080080e5
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	080080c7 	.word	0x080080c7
 8007fa4:	08007f55 	.word	0x08007f55
 8007fa8:	08007f55 	.word	0x08007f55
 8007fac:	08008107 	.word	0x08008107
 8007fb0:	08007f55 	.word	0x08007f55
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08007f55 	.word	0x08007f55
 8007fbc:	08007f55 	.word	0x08007f55
 8007fc0:	080080cf 	.word	0x080080cf
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	1d1a      	adds	r2, r3, #4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	602a      	str	r2, [r5, #0]
 8007fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0a3      	b.n	8008120 <_printf_i+0x1f4>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	6829      	ldr	r1, [r5, #0]
 8007fdc:	0606      	lsls	r6, r0, #24
 8007fde:	f101 0304 	add.w	r3, r1, #4
 8007fe2:	d50a      	bpl.n	8007ffa <_printf_i+0xce>
 8007fe4:	680e      	ldr	r6, [r1, #0]
 8007fe6:	602b      	str	r3, [r5, #0]
 8007fe8:	2e00      	cmp	r6, #0
 8007fea:	da03      	bge.n	8007ff4 <_printf_i+0xc8>
 8007fec:	232d      	movs	r3, #45	; 0x2d
 8007fee:	4276      	negs	r6, r6
 8007ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ff4:	485e      	ldr	r0, [pc, #376]	; (8008170 <_printf_i+0x244>)
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	e019      	b.n	800802e <_printf_i+0x102>
 8007ffa:	680e      	ldr	r6, [r1, #0]
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008002:	bf18      	it	ne
 8008004:	b236      	sxthne	r6, r6
 8008006:	e7ef      	b.n	8007fe8 <_printf_i+0xbc>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	1d19      	adds	r1, r3, #4
 800800e:	6029      	str	r1, [r5, #0]
 8008010:	0601      	lsls	r1, r0, #24
 8008012:	d501      	bpl.n	8008018 <_printf_i+0xec>
 8008014:	681e      	ldr	r6, [r3, #0]
 8008016:	e002      	b.n	800801e <_printf_i+0xf2>
 8008018:	0646      	lsls	r6, r0, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0xe8>
 800801c:	881e      	ldrh	r6, [r3, #0]
 800801e:	4854      	ldr	r0, [pc, #336]	; (8008170 <_printf_i+0x244>)
 8008020:	2f6f      	cmp	r7, #111	; 0x6f
 8008022:	bf0c      	ite	eq
 8008024:	2308      	moveq	r3, #8
 8008026:	230a      	movne	r3, #10
 8008028:	2100      	movs	r1, #0
 800802a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800802e:	6865      	ldr	r5, [r4, #4]
 8008030:	60a5      	str	r5, [r4, #8]
 8008032:	2d00      	cmp	r5, #0
 8008034:	bfa2      	ittt	ge
 8008036:	6821      	ldrge	r1, [r4, #0]
 8008038:	f021 0104 	bicge.w	r1, r1, #4
 800803c:	6021      	strge	r1, [r4, #0]
 800803e:	b90e      	cbnz	r6, 8008044 <_printf_i+0x118>
 8008040:	2d00      	cmp	r5, #0
 8008042:	d04d      	beq.n	80080e0 <_printf_i+0x1b4>
 8008044:	4615      	mov	r5, r2
 8008046:	fbb6 f1f3 	udiv	r1, r6, r3
 800804a:	fb03 6711 	mls	r7, r3, r1, r6
 800804e:	5dc7      	ldrb	r7, [r0, r7]
 8008050:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008054:	4637      	mov	r7, r6
 8008056:	42bb      	cmp	r3, r7
 8008058:	460e      	mov	r6, r1
 800805a:	d9f4      	bls.n	8008046 <_printf_i+0x11a>
 800805c:	2b08      	cmp	r3, #8
 800805e:	d10b      	bne.n	8008078 <_printf_i+0x14c>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	07de      	lsls	r6, r3, #31
 8008064:	d508      	bpl.n	8008078 <_printf_i+0x14c>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	6861      	ldr	r1, [r4, #4]
 800806a:	4299      	cmp	r1, r3
 800806c:	bfde      	ittt	le
 800806e:	2330      	movle	r3, #48	; 0x30
 8008070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008078:	1b52      	subs	r2, r2, r5
 800807a:	6122      	str	r2, [r4, #16]
 800807c:	f8cd a000 	str.w	sl, [sp]
 8008080:	464b      	mov	r3, r9
 8008082:	aa03      	add	r2, sp, #12
 8008084:	4621      	mov	r1, r4
 8008086:	4640      	mov	r0, r8
 8008088:	f7ff fee2 	bl	8007e50 <_printf_common>
 800808c:	3001      	adds	r0, #1
 800808e:	d14c      	bne.n	800812a <_printf_i+0x1fe>
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	b004      	add	sp, #16
 8008096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809a:	4835      	ldr	r0, [pc, #212]	; (8008170 <_printf_i+0x244>)
 800809c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080a0:	6829      	ldr	r1, [r5, #0]
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80080a8:	6029      	str	r1, [r5, #0]
 80080aa:	061d      	lsls	r5, r3, #24
 80080ac:	d514      	bpl.n	80080d8 <_printf_i+0x1ac>
 80080ae:	07df      	lsls	r7, r3, #31
 80080b0:	bf44      	itt	mi
 80080b2:	f043 0320 	orrmi.w	r3, r3, #32
 80080b6:	6023      	strmi	r3, [r4, #0]
 80080b8:	b91e      	cbnz	r6, 80080c2 <_printf_i+0x196>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	f023 0320 	bic.w	r3, r3, #32
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	2310      	movs	r3, #16
 80080c4:	e7b0      	b.n	8008028 <_printf_i+0xfc>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f043 0320 	orr.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	2378      	movs	r3, #120	; 0x78
 80080d0:	4828      	ldr	r0, [pc, #160]	; (8008174 <_printf_i+0x248>)
 80080d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080d6:	e7e3      	b.n	80080a0 <_printf_i+0x174>
 80080d8:	0659      	lsls	r1, r3, #25
 80080da:	bf48      	it	mi
 80080dc:	b2b6      	uxthmi	r6, r6
 80080de:	e7e6      	b.n	80080ae <_printf_i+0x182>
 80080e0:	4615      	mov	r5, r2
 80080e2:	e7bb      	b.n	800805c <_printf_i+0x130>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	6826      	ldr	r6, [r4, #0]
 80080e8:	6961      	ldr	r1, [r4, #20]
 80080ea:	1d18      	adds	r0, r3, #4
 80080ec:	6028      	str	r0, [r5, #0]
 80080ee:	0635      	lsls	r5, r6, #24
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	d501      	bpl.n	80080f8 <_printf_i+0x1cc>
 80080f4:	6019      	str	r1, [r3, #0]
 80080f6:	e002      	b.n	80080fe <_printf_i+0x1d2>
 80080f8:	0670      	lsls	r0, r6, #25
 80080fa:	d5fb      	bpl.n	80080f4 <_printf_i+0x1c8>
 80080fc:	8019      	strh	r1, [r3, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	6123      	str	r3, [r4, #16]
 8008102:	4615      	mov	r5, r2
 8008104:	e7ba      	b.n	800807c <_printf_i+0x150>
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	681d      	ldr	r5, [r3, #0]
 800810e:	6862      	ldr	r2, [r4, #4]
 8008110:	2100      	movs	r1, #0
 8008112:	4628      	mov	r0, r5
 8008114:	f7f8 f884 	bl	8000220 <memchr>
 8008118:	b108      	cbz	r0, 800811e <_printf_i+0x1f2>
 800811a:	1b40      	subs	r0, r0, r5
 800811c:	6060      	str	r0, [r4, #4]
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	2300      	movs	r3, #0
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008128:	e7a8      	b.n	800807c <_printf_i+0x150>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	462a      	mov	r2, r5
 800812e:	4649      	mov	r1, r9
 8008130:	4640      	mov	r0, r8
 8008132:	47d0      	blx	sl
 8008134:	3001      	adds	r0, #1
 8008136:	d0ab      	beq.n	8008090 <_printf_i+0x164>
 8008138:	6823      	ldr	r3, [r4, #0]
 800813a:	079b      	lsls	r3, r3, #30
 800813c:	d413      	bmi.n	8008166 <_printf_i+0x23a>
 800813e:	68e0      	ldr	r0, [r4, #12]
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	4298      	cmp	r0, r3
 8008144:	bfb8      	it	lt
 8008146:	4618      	movlt	r0, r3
 8008148:	e7a4      	b.n	8008094 <_printf_i+0x168>
 800814a:	2301      	movs	r3, #1
 800814c:	4632      	mov	r2, r6
 800814e:	4649      	mov	r1, r9
 8008150:	4640      	mov	r0, r8
 8008152:	47d0      	blx	sl
 8008154:	3001      	adds	r0, #1
 8008156:	d09b      	beq.n	8008090 <_printf_i+0x164>
 8008158:	3501      	adds	r5, #1
 800815a:	68e3      	ldr	r3, [r4, #12]
 800815c:	9903      	ldr	r1, [sp, #12]
 800815e:	1a5b      	subs	r3, r3, r1
 8008160:	42ab      	cmp	r3, r5
 8008162:	dcf2      	bgt.n	800814a <_printf_i+0x21e>
 8008164:	e7eb      	b.n	800813e <_printf_i+0x212>
 8008166:	2500      	movs	r5, #0
 8008168:	f104 0619 	add.w	r6, r4, #25
 800816c:	e7f5      	b.n	800815a <_printf_i+0x22e>
 800816e:	bf00      	nop
 8008170:	0800e106 	.word	0x0800e106
 8008174:	0800e117 	.word	0x0800e117

08008178 <iprintf>:
 8008178:	b40f      	push	{r0, r1, r2, r3}
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <iprintf+0x2c>)
 800817c:	b513      	push	{r0, r1, r4, lr}
 800817e:	681c      	ldr	r4, [r3, #0]
 8008180:	b124      	cbz	r4, 800818c <iprintf+0x14>
 8008182:	69a3      	ldr	r3, [r4, #24]
 8008184:	b913      	cbnz	r3, 800818c <iprintf+0x14>
 8008186:	4620      	mov	r0, r4
 8008188:	f001 f892 	bl	80092b0 <__sinit>
 800818c:	ab05      	add	r3, sp, #20
 800818e:	9a04      	ldr	r2, [sp, #16]
 8008190:	68a1      	ldr	r1, [r4, #8]
 8008192:	9301      	str	r3, [sp, #4]
 8008194:	4620      	mov	r0, r4
 8008196:	f001 fec1 	bl	8009f1c <_vfiprintf_r>
 800819a:	b002      	add	sp, #8
 800819c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081a0:	b004      	add	sp, #16
 80081a2:	4770      	bx	lr
 80081a4:	200000c0 	.word	0x200000c0

080081a8 <_sbrk_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d06      	ldr	r5, [pc, #24]	; (80081c4 <_sbrk_r+0x1c>)
 80081ac:	2300      	movs	r3, #0
 80081ae:	4604      	mov	r4, r0
 80081b0:	4608      	mov	r0, r1
 80081b2:	602b      	str	r3, [r5, #0]
 80081b4:	f7fb f9cc 	bl	8003550 <_sbrk>
 80081b8:	1c43      	adds	r3, r0, #1
 80081ba:	d102      	bne.n	80081c2 <_sbrk_r+0x1a>
 80081bc:	682b      	ldr	r3, [r5, #0]
 80081be:	b103      	cbz	r3, 80081c2 <_sbrk_r+0x1a>
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	bd38      	pop	{r3, r4, r5, pc}
 80081c4:	2000053c 	.word	0x2000053c

080081c8 <siprintf>:
 80081c8:	b40e      	push	{r1, r2, r3}
 80081ca:	b500      	push	{lr}
 80081cc:	b09c      	sub	sp, #112	; 0x70
 80081ce:	ab1d      	add	r3, sp, #116	; 0x74
 80081d0:	9002      	str	r0, [sp, #8]
 80081d2:	9006      	str	r0, [sp, #24]
 80081d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081d8:	4809      	ldr	r0, [pc, #36]	; (8008200 <siprintf+0x38>)
 80081da:	9107      	str	r1, [sp, #28]
 80081dc:	9104      	str	r1, [sp, #16]
 80081de:	4909      	ldr	r1, [pc, #36]	; (8008204 <siprintf+0x3c>)
 80081e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	6800      	ldr	r0, [r0, #0]
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	a902      	add	r1, sp, #8
 80081ec:	f001 fd6c 	bl	8009cc8 <_svfiprintf_r>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2200      	movs	r2, #0
 80081f4:	701a      	strb	r2, [r3, #0]
 80081f6:	b01c      	add	sp, #112	; 0x70
 80081f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081fc:	b003      	add	sp, #12
 80081fe:	4770      	bx	lr
 8008200:	200000c0 	.word	0x200000c0
 8008204:	ffff0208 	.word	0xffff0208

08008208 <__swbuf_r>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	460e      	mov	r6, r1
 800820c:	4614      	mov	r4, r2
 800820e:	4605      	mov	r5, r0
 8008210:	b118      	cbz	r0, 800821a <__swbuf_r+0x12>
 8008212:	6983      	ldr	r3, [r0, #24]
 8008214:	b90b      	cbnz	r3, 800821a <__swbuf_r+0x12>
 8008216:	f001 f84b 	bl	80092b0 <__sinit>
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <__swbuf_r+0x98>)
 800821c:	429c      	cmp	r4, r3
 800821e:	d12b      	bne.n	8008278 <__swbuf_r+0x70>
 8008220:	686c      	ldr	r4, [r5, #4]
 8008222:	69a3      	ldr	r3, [r4, #24]
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	071a      	lsls	r2, r3, #28
 800822a:	d52f      	bpl.n	800828c <__swbuf_r+0x84>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	b36b      	cbz	r3, 800828c <__swbuf_r+0x84>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	6820      	ldr	r0, [r4, #0]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6963      	ldr	r3, [r4, #20]
 8008238:	b2f6      	uxtb	r6, r6
 800823a:	4283      	cmp	r3, r0
 800823c:	4637      	mov	r7, r6
 800823e:	dc04      	bgt.n	800824a <__swbuf_r+0x42>
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 ffa0 	bl	8009188 <_fflush_r>
 8008248:	bb30      	cbnz	r0, 8008298 <__swbuf_r+0x90>
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	3b01      	subs	r3, #1
 800824e:	60a3      	str	r3, [r4, #8]
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	701e      	strb	r6, [r3, #0]
 8008258:	6963      	ldr	r3, [r4, #20]
 800825a:	3001      	adds	r0, #1
 800825c:	4283      	cmp	r3, r0
 800825e:	d004      	beq.n	800826a <__swbuf_r+0x62>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d506      	bpl.n	8008274 <__swbuf_r+0x6c>
 8008266:	2e0a      	cmp	r6, #10
 8008268:	d104      	bne.n	8008274 <__swbuf_r+0x6c>
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 ff8b 	bl	8009188 <_fflush_r>
 8008272:	b988      	cbnz	r0, 8008298 <__swbuf_r+0x90>
 8008274:	4638      	mov	r0, r7
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <__swbuf_r+0x9c>)
 800827a:	429c      	cmp	r4, r3
 800827c:	d101      	bne.n	8008282 <__swbuf_r+0x7a>
 800827e:	68ac      	ldr	r4, [r5, #8]
 8008280:	e7cf      	b.n	8008222 <__swbuf_r+0x1a>
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <__swbuf_r+0xa0>)
 8008284:	429c      	cmp	r4, r3
 8008286:	bf08      	it	eq
 8008288:	68ec      	ldreq	r4, [r5, #12]
 800828a:	e7ca      	b.n	8008222 <__swbuf_r+0x1a>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f80c 	bl	80082ac <__swsetup_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	d0cb      	beq.n	8008230 <__swbuf_r+0x28>
 8008298:	f04f 37ff 	mov.w	r7, #4294967295
 800829c:	e7ea      	b.n	8008274 <__swbuf_r+0x6c>
 800829e:	bf00      	nop
 80082a0:	0800e1d8 	.word	0x0800e1d8
 80082a4:	0800e1f8 	.word	0x0800e1f8
 80082a8:	0800e1b8 	.word	0x0800e1b8

080082ac <__swsetup_r>:
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <__swsetup_r+0xcc>)
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	b125      	cbz	r5, 80082c2 <__swsetup_r+0x16>
 80082b8:	69ab      	ldr	r3, [r5, #24]
 80082ba:	b913      	cbnz	r3, 80082c2 <__swsetup_r+0x16>
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fff7 	bl	80092b0 <__sinit>
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <__swsetup_r+0xd0>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d10f      	bne.n	80082e8 <__swsetup_r+0x3c>
 80082c8:	686c      	ldr	r4, [r5, #4]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d42c      	bmi.n	800832e <__swsetup_r+0x82>
 80082d4:	06dd      	lsls	r5, r3, #27
 80082d6:	d411      	bmi.n	80082fc <__swsetup_r+0x50>
 80082d8:	2309      	movs	r3, #9
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295
 80082e6:	e03e      	b.n	8008366 <__swsetup_r+0xba>
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <__swsetup_r+0xd4>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swsetup_r+0x46>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7eb      	b.n	80082ca <__swsetup_r+0x1e>
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <__swsetup_r+0xd8>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7e6      	b.n	80082ca <__swsetup_r+0x1e>
 80082fc:	0758      	lsls	r0, r3, #29
 80082fe:	d512      	bpl.n	8008326 <__swsetup_r+0x7a>
 8008300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008302:	b141      	cbz	r1, 8008316 <__swsetup_r+0x6a>
 8008304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__swsetup_r+0x66>
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff f9e9 	bl	80076e4 <_free_r>
 8008312:	2300      	movs	r3, #0
 8008314:	6363      	str	r3, [r4, #52]	; 0x34
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	2300      	movs	r3, #0
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b94b      	cbnz	r3, 8008346 <__swsetup_r+0x9a>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d003      	beq.n	8008346 <__swsetup_r+0x9a>
 800833e:	4621      	mov	r1, r4
 8008340:	4630      	mov	r0, r6
 8008342:	f001 f87f 	bl	8009444 <__smakebuf_r>
 8008346:	89a0      	ldrh	r0, [r4, #12]
 8008348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834c:	f010 0301 	ands.w	r3, r0, #1
 8008350:	d00a      	beq.n	8008368 <__swsetup_r+0xbc>
 8008352:	2300      	movs	r3, #0
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	425b      	negs	r3, r3
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b943      	cbnz	r3, 8008372 <__swsetup_r+0xc6>
 8008360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008364:	d1ba      	bne.n	80082dc <__swsetup_r+0x30>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	0781      	lsls	r1, r0, #30
 800836a:	bf58      	it	pl
 800836c:	6963      	ldrpl	r3, [r4, #20]
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	e7f4      	b.n	800835c <__swsetup_r+0xb0>
 8008372:	2000      	movs	r0, #0
 8008374:	e7f7      	b.n	8008366 <__swsetup_r+0xba>
 8008376:	bf00      	nop
 8008378:	200000c0 	.word	0x200000c0
 800837c:	0800e1d8 	.word	0x0800e1d8
 8008380:	0800e1f8 	.word	0x0800e1f8
 8008384:	0800e1b8 	.word	0x0800e1b8

08008388 <quorem>:
 8008388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	6903      	ldr	r3, [r0, #16]
 800838e:	690c      	ldr	r4, [r1, #16]
 8008390:	42a3      	cmp	r3, r4
 8008392:	4607      	mov	r7, r0
 8008394:	f2c0 8081 	blt.w	800849a <quorem+0x112>
 8008398:	3c01      	subs	r4, #1
 800839a:	f101 0814 	add.w	r8, r1, #20
 800839e:	f100 0514 	add.w	r5, r0, #20
 80083a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083b0:	3301      	adds	r3, #1
 80083b2:	429a      	cmp	r2, r3
 80083b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80083c0:	d331      	bcc.n	8008426 <quorem+0x9e>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	4640      	mov	r0, r8
 80083c8:	46ac      	mov	ip, r5
 80083ca:	46f2      	mov	sl, lr
 80083cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80083d0:	b293      	uxth	r3, r2
 80083d2:	fb06 e303 	mla	r3, r6, r3, lr
 80083d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ebaa 0303 	sub.w	r3, sl, r3
 80083e0:	f8dc a000 	ldr.w	sl, [ip]
 80083e4:	0c12      	lsrs	r2, r2, #16
 80083e6:	fa13 f38a 	uxtah	r3, r3, sl
 80083ea:	fb06 e202 	mla	r2, r6, r2, lr
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083f6:	b292      	uxth	r2, r2
 80083f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008400:	f8bd 3000 	ldrh.w	r3, [sp]
 8008404:	4581      	cmp	r9, r0
 8008406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800840a:	f84c 3b04 	str.w	r3, [ip], #4
 800840e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008412:	d2db      	bcs.n	80083cc <quorem+0x44>
 8008414:	f855 300b 	ldr.w	r3, [r5, fp]
 8008418:	b92b      	cbnz	r3, 8008426 <quorem+0x9e>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	3b04      	subs	r3, #4
 800841e:	429d      	cmp	r5, r3
 8008420:	461a      	mov	r2, r3
 8008422:	d32e      	bcc.n	8008482 <quorem+0xfa>
 8008424:	613c      	str	r4, [r7, #16]
 8008426:	4638      	mov	r0, r7
 8008428:	f001 fada 	bl	80099e0 <__mcmp>
 800842c:	2800      	cmp	r0, #0
 800842e:	db24      	blt.n	800847a <quorem+0xf2>
 8008430:	3601      	adds	r6, #1
 8008432:	4628      	mov	r0, r5
 8008434:	f04f 0c00 	mov.w	ip, #0
 8008438:	f858 2b04 	ldr.w	r2, [r8], #4
 800843c:	f8d0 e000 	ldr.w	lr, [r0]
 8008440:	b293      	uxth	r3, r2
 8008442:	ebac 0303 	sub.w	r3, ip, r3
 8008446:	0c12      	lsrs	r2, r2, #16
 8008448:	fa13 f38e 	uxtah	r3, r3, lr
 800844c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008454:	b29b      	uxth	r3, r3
 8008456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800845a:	45c1      	cmp	r9, r8
 800845c:	f840 3b04 	str.w	r3, [r0], #4
 8008460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008464:	d2e8      	bcs.n	8008438 <quorem+0xb0>
 8008466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800846a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800846e:	b922      	cbnz	r2, 800847a <quorem+0xf2>
 8008470:	3b04      	subs	r3, #4
 8008472:	429d      	cmp	r5, r3
 8008474:	461a      	mov	r2, r3
 8008476:	d30a      	bcc.n	800848e <quorem+0x106>
 8008478:	613c      	str	r4, [r7, #16]
 800847a:	4630      	mov	r0, r6
 800847c:	b003      	add	sp, #12
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	3b04      	subs	r3, #4
 8008486:	2a00      	cmp	r2, #0
 8008488:	d1cc      	bne.n	8008424 <quorem+0x9c>
 800848a:	3c01      	subs	r4, #1
 800848c:	e7c7      	b.n	800841e <quorem+0x96>
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	3b04      	subs	r3, #4
 8008492:	2a00      	cmp	r2, #0
 8008494:	d1f0      	bne.n	8008478 <quorem+0xf0>
 8008496:	3c01      	subs	r4, #1
 8008498:	e7eb      	b.n	8008472 <quorem+0xea>
 800849a:	2000      	movs	r0, #0
 800849c:	e7ee      	b.n	800847c <quorem+0xf4>
	...

080084a0 <_dtoa_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	ed2d 8b04 	vpush	{d8-d9}
 80084a8:	ec57 6b10 	vmov	r6, r7, d0
 80084ac:	b093      	sub	sp, #76	; 0x4c
 80084ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084b4:	9106      	str	r1, [sp, #24]
 80084b6:	ee10 aa10 	vmov	sl, s0
 80084ba:	4604      	mov	r4, r0
 80084bc:	9209      	str	r2, [sp, #36]	; 0x24
 80084be:	930c      	str	r3, [sp, #48]	; 0x30
 80084c0:	46bb      	mov	fp, r7
 80084c2:	b975      	cbnz	r5, 80084e2 <_dtoa_r+0x42>
 80084c4:	2010      	movs	r0, #16
 80084c6:	f7ff f8ef 	bl	80076a8 <malloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6260      	str	r0, [r4, #36]	; 0x24
 80084ce:	b920      	cbnz	r0, 80084da <_dtoa_r+0x3a>
 80084d0:	4ba7      	ldr	r3, [pc, #668]	; (8008770 <_dtoa_r+0x2d0>)
 80084d2:	21ea      	movs	r1, #234	; 0xea
 80084d4:	48a7      	ldr	r0, [pc, #668]	; (8008774 <_dtoa_r+0x2d4>)
 80084d6:	f001 fea7 	bl	800a228 <__assert_func>
 80084da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084de:	6005      	str	r5, [r0, #0]
 80084e0:	60c5      	str	r5, [r0, #12]
 80084e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	b151      	cbz	r1, 80084fe <_dtoa_r+0x5e>
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	604a      	str	r2, [r1, #4]
 80084ec:	2301      	movs	r3, #1
 80084ee:	4093      	lsls	r3, r2
 80084f0:	608b      	str	r3, [r1, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f001 f832 	bl	800955c <_Bfree>
 80084f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	1e3b      	subs	r3, r7, #0
 8008500:	bfaa      	itet	ge
 8008502:	2300      	movge	r3, #0
 8008504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008508:	f8c8 3000 	strge.w	r3, [r8]
 800850c:	4b9a      	ldr	r3, [pc, #616]	; (8008778 <_dtoa_r+0x2d8>)
 800850e:	bfbc      	itt	lt
 8008510:	2201      	movlt	r2, #1
 8008512:	f8c8 2000 	strlt.w	r2, [r8]
 8008516:	ea33 030b 	bics.w	r3, r3, fp
 800851a:	d11b      	bne.n	8008554 <_dtoa_r+0xb4>
 800851c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800851e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008528:	4333      	orrs	r3, r6
 800852a:	f000 8592 	beq.w	8009052 <_dtoa_r+0xbb2>
 800852e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008530:	b963      	cbnz	r3, 800854c <_dtoa_r+0xac>
 8008532:	4b92      	ldr	r3, [pc, #584]	; (800877c <_dtoa_r+0x2dc>)
 8008534:	e022      	b.n	800857c <_dtoa_r+0xdc>
 8008536:	4b92      	ldr	r3, [pc, #584]	; (8008780 <_dtoa_r+0x2e0>)
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	3308      	adds	r3, #8
 800853c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	b013      	add	sp, #76	; 0x4c
 8008544:	ecbd 8b04 	vpop	{d8-d9}
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	4b8b      	ldr	r3, [pc, #556]	; (800877c <_dtoa_r+0x2dc>)
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	3303      	adds	r3, #3
 8008552:	e7f3      	b.n	800853c <_dtoa_r+0x9c>
 8008554:	2200      	movs	r2, #0
 8008556:	2300      	movs	r3, #0
 8008558:	4650      	mov	r0, sl
 800855a:	4659      	mov	r1, fp
 800855c:	f7f8 fad4 	bl	8000b08 <__aeabi_dcmpeq>
 8008560:	ec4b ab19 	vmov	d9, sl, fp
 8008564:	4680      	mov	r8, r0
 8008566:	b158      	cbz	r0, 8008580 <_dtoa_r+0xe0>
 8008568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800856a:	2301      	movs	r3, #1
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 856b 	beq.w	800904c <_dtoa_r+0xbac>
 8008576:	4883      	ldr	r0, [pc, #524]	; (8008784 <_dtoa_r+0x2e4>)
 8008578:	6018      	str	r0, [r3, #0]
 800857a:	1e43      	subs	r3, r0, #1
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	e7df      	b.n	8008540 <_dtoa_r+0xa0>
 8008580:	ec4b ab10 	vmov	d0, sl, fp
 8008584:	aa10      	add	r2, sp, #64	; 0x40
 8008586:	a911      	add	r1, sp, #68	; 0x44
 8008588:	4620      	mov	r0, r4
 800858a:	f001 facf 	bl	8009b2c <__d2b>
 800858e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008592:	ee08 0a10 	vmov	s16, r0
 8008596:	2d00      	cmp	r5, #0
 8008598:	f000 8084 	beq.w	80086a4 <_dtoa_r+0x204>
 800859c:	ee19 3a90 	vmov	r3, s19
 80085a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085a8:	4656      	mov	r6, sl
 80085aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085b6:	4b74      	ldr	r3, [pc, #464]	; (8008788 <_dtoa_r+0x2e8>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f7 fe83 	bl	80002c8 <__aeabi_dsub>
 80085c2:	a365      	add	r3, pc, #404	; (adr r3, 8008758 <_dtoa_r+0x2b8>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f836 	bl	8000638 <__aeabi_dmul>
 80085cc:	a364      	add	r3, pc, #400	; (adr r3, 8008760 <_dtoa_r+0x2c0>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe7b 	bl	80002cc <__adddf3>
 80085d6:	4606      	mov	r6, r0
 80085d8:	4628      	mov	r0, r5
 80085da:	460f      	mov	r7, r1
 80085dc:	f7f7 ffc2 	bl	8000564 <__aeabi_i2d>
 80085e0:	a361      	add	r3, pc, #388	; (adr r3, 8008768 <_dtoa_r+0x2c8>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f8 f827 	bl	8000638 <__aeabi_dmul>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f7 fe6b 	bl	80002cc <__adddf3>
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	f7f8 facd 	bl	8000b98 <__aeabi_d2iz>
 80085fe:	2200      	movs	r2, #0
 8008600:	9000      	str	r0, [sp, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fa88 	bl	8000b1c <__aeabi_dcmplt>
 800860c:	b150      	cbz	r0, 8008624 <_dtoa_r+0x184>
 800860e:	9800      	ldr	r0, [sp, #0]
 8008610:	f7f7 ffa8 	bl	8000564 <__aeabi_i2d>
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	f7f8 fa76 	bl	8000b08 <__aeabi_dcmpeq>
 800861c:	b910      	cbnz	r0, 8008624 <_dtoa_r+0x184>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b16      	cmp	r3, #22
 8008628:	d85a      	bhi.n	80086e0 <_dtoa_r+0x240>
 800862a:	9a00      	ldr	r2, [sp, #0]
 800862c:	4b57      	ldr	r3, [pc, #348]	; (800878c <_dtoa_r+0x2ec>)
 800862e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	ec51 0b19 	vmov	r0, r1, d9
 800863a:	f7f8 fa6f 	bl	8000b1c <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	d050      	beq.n	80086e4 <_dtoa_r+0x244>
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	3b01      	subs	r3, #1
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2300      	movs	r3, #0
 800864a:	930b      	str	r3, [sp, #44]	; 0x2c
 800864c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800864e:	1b5d      	subs	r5, r3, r5
 8008650:	1e6b      	subs	r3, r5, #1
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	bf45      	ittet	mi
 8008656:	f1c5 0301 	rsbmi	r3, r5, #1
 800865a:	9304      	strmi	r3, [sp, #16]
 800865c:	2300      	movpl	r3, #0
 800865e:	2300      	movmi	r3, #0
 8008660:	bf4c      	ite	mi
 8008662:	9305      	strmi	r3, [sp, #20]
 8008664:	9304      	strpl	r3, [sp, #16]
 8008666:	9b00      	ldr	r3, [sp, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	db3d      	blt.n	80086e8 <_dtoa_r+0x248>
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	9a00      	ldr	r2, [sp, #0]
 8008670:	920a      	str	r2, [sp, #40]	; 0x28
 8008672:	4413      	add	r3, r2
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	2300      	movs	r3, #0
 8008678:	9307      	str	r3, [sp, #28]
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b09      	cmp	r3, #9
 800867e:	f200 8089 	bhi.w	8008794 <_dtoa_r+0x2f4>
 8008682:	2b05      	cmp	r3, #5
 8008684:	bfc4      	itt	gt
 8008686:	3b04      	subgt	r3, #4
 8008688:	9306      	strgt	r3, [sp, #24]
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	f1a3 0302 	sub.w	r3, r3, #2
 8008690:	bfcc      	ite	gt
 8008692:	2500      	movgt	r5, #0
 8008694:	2501      	movle	r5, #1
 8008696:	2b03      	cmp	r3, #3
 8008698:	f200 8087 	bhi.w	80087aa <_dtoa_r+0x30a>
 800869c:	e8df f003 	tbb	[pc, r3]
 80086a0:	59383a2d 	.word	0x59383a2d
 80086a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086a8:	441d      	add	r5, r3
 80086aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086ae:	2b20      	cmp	r3, #32
 80086b0:	bfc1      	itttt	gt
 80086b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80086be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086c2:	bfda      	itte	le
 80086c4:	f1c3 0320 	rsble	r3, r3, #32
 80086c8:	fa06 f003 	lslle.w	r0, r6, r3
 80086cc:	4318      	orrgt	r0, r3
 80086ce:	f7f7 ff39 	bl	8000544 <__aeabi_ui2d>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4606      	mov	r6, r0
 80086d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086da:	3d01      	subs	r5, #1
 80086dc:	930e      	str	r3, [sp, #56]	; 0x38
 80086de:	e76a      	b.n	80085b6 <_dtoa_r+0x116>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7b2      	b.n	800864a <_dtoa_r+0x1aa>
 80086e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80086e6:	e7b1      	b.n	800864c <_dtoa_r+0x1ac>
 80086e8:	9b04      	ldr	r3, [sp, #16]
 80086ea:	9a00      	ldr	r2, [sp, #0]
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	4253      	negs	r3, r2
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	2300      	movs	r3, #0
 80086f6:	930a      	str	r3, [sp, #40]	; 0x28
 80086f8:	e7bf      	b.n	800867a <_dtoa_r+0x1da>
 80086fa:	2300      	movs	r3, #0
 80086fc:	9308      	str	r3, [sp, #32]
 80086fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc55      	bgt.n	80087b0 <_dtoa_r+0x310>
 8008704:	2301      	movs	r3, #1
 8008706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800870a:	461a      	mov	r2, r3
 800870c:	9209      	str	r2, [sp, #36]	; 0x24
 800870e:	e00c      	b.n	800872a <_dtoa_r+0x28a>
 8008710:	2301      	movs	r3, #1
 8008712:	e7f3      	b.n	80086fc <_dtoa_r+0x25c>
 8008714:	2300      	movs	r3, #0
 8008716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	4413      	add	r3, r2
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	3301      	adds	r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	9303      	str	r3, [sp, #12]
 8008726:	bfb8      	it	lt
 8008728:	2301      	movlt	r3, #1
 800872a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800872c:	2200      	movs	r2, #0
 800872e:	6042      	str	r2, [r0, #4]
 8008730:	2204      	movs	r2, #4
 8008732:	f102 0614 	add.w	r6, r2, #20
 8008736:	429e      	cmp	r6, r3
 8008738:	6841      	ldr	r1, [r0, #4]
 800873a:	d93d      	bls.n	80087b8 <_dtoa_r+0x318>
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fecd 	bl	80094dc <_Balloc>
 8008742:	9001      	str	r0, [sp, #4]
 8008744:	2800      	cmp	r0, #0
 8008746:	d13b      	bne.n	80087c0 <_dtoa_r+0x320>
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <_dtoa_r+0x2f0>)
 800874a:	4602      	mov	r2, r0
 800874c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008750:	e6c0      	b.n	80084d4 <_dtoa_r+0x34>
 8008752:	2301      	movs	r3, #1
 8008754:	e7df      	b.n	8008716 <_dtoa_r+0x276>
 8008756:	bf00      	nop
 8008758:	636f4361 	.word	0x636f4361
 800875c:	3fd287a7 	.word	0x3fd287a7
 8008760:	8b60c8b3 	.word	0x8b60c8b3
 8008764:	3fc68a28 	.word	0x3fc68a28
 8008768:	509f79fb 	.word	0x509f79fb
 800876c:	3fd34413 	.word	0x3fd34413
 8008770:	0800e135 	.word	0x0800e135
 8008774:	0800e14c 	.word	0x0800e14c
 8008778:	7ff00000 	.word	0x7ff00000
 800877c:	0800e131 	.word	0x0800e131
 8008780:	0800e128 	.word	0x0800e128
 8008784:	0800e105 	.word	0x0800e105
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	0800e2a0 	.word	0x0800e2a0
 8008790:	0800e1a7 	.word	0x0800e1a7
 8008794:	2501      	movs	r5, #1
 8008796:	2300      	movs	r3, #0
 8008798:	9306      	str	r3, [sp, #24]
 800879a:	9508      	str	r5, [sp, #32]
 800879c:	f04f 33ff 	mov.w	r3, #4294967295
 80087a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2312      	movs	r3, #18
 80087a8:	e7b0      	b.n	800870c <_dtoa_r+0x26c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	9308      	str	r3, [sp, #32]
 80087ae:	e7f5      	b.n	800879c <_dtoa_r+0x2fc>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087b6:	e7b8      	b.n	800872a <_dtoa_r+0x28a>
 80087b8:	3101      	adds	r1, #1
 80087ba:	6041      	str	r1, [r0, #4]
 80087bc:	0052      	lsls	r2, r2, #1
 80087be:	e7b8      	b.n	8008732 <_dtoa_r+0x292>
 80087c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	2b0e      	cmp	r3, #14
 80087ca:	f200 809d 	bhi.w	8008908 <_dtoa_r+0x468>
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	f000 809a 	beq.w	8008908 <_dtoa_r+0x468>
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd32      	ble.n	8008840 <_dtoa_r+0x3a0>
 80087da:	4ab7      	ldr	r2, [pc, #732]	; (8008ab8 <_dtoa_r+0x618>)
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087e8:	9b00      	ldr	r3, [sp, #0]
 80087ea:	05d8      	lsls	r0, r3, #23
 80087ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80087f0:	d516      	bpl.n	8008820 <_dtoa_r+0x380>
 80087f2:	4bb2      	ldr	r3, [pc, #712]	; (8008abc <_dtoa_r+0x61c>)
 80087f4:	ec51 0b19 	vmov	r0, r1, d9
 80087f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087fc:	f7f8 f846 	bl	800088c <__aeabi_ddiv>
 8008800:	f007 070f 	and.w	r7, r7, #15
 8008804:	4682      	mov	sl, r0
 8008806:	468b      	mov	fp, r1
 8008808:	2503      	movs	r5, #3
 800880a:	4eac      	ldr	r6, [pc, #688]	; (8008abc <_dtoa_r+0x61c>)
 800880c:	b957      	cbnz	r7, 8008824 <_dtoa_r+0x384>
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	4650      	mov	r0, sl
 8008814:	4659      	mov	r1, fp
 8008816:	f7f8 f839 	bl	800088c <__aeabi_ddiv>
 800881a:	4682      	mov	sl, r0
 800881c:	468b      	mov	fp, r1
 800881e:	e028      	b.n	8008872 <_dtoa_r+0x3d2>
 8008820:	2502      	movs	r5, #2
 8008822:	e7f2      	b.n	800880a <_dtoa_r+0x36a>
 8008824:	07f9      	lsls	r1, r7, #31
 8008826:	d508      	bpl.n	800883a <_dtoa_r+0x39a>
 8008828:	4640      	mov	r0, r8
 800882a:	4649      	mov	r1, r9
 800882c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008830:	f7f7 ff02 	bl	8000638 <__aeabi_dmul>
 8008834:	3501      	adds	r5, #1
 8008836:	4680      	mov	r8, r0
 8008838:	4689      	mov	r9, r1
 800883a:	107f      	asrs	r7, r7, #1
 800883c:	3608      	adds	r6, #8
 800883e:	e7e5      	b.n	800880c <_dtoa_r+0x36c>
 8008840:	f000 809b 	beq.w	800897a <_dtoa_r+0x4da>
 8008844:	9b00      	ldr	r3, [sp, #0]
 8008846:	4f9d      	ldr	r7, [pc, #628]	; (8008abc <_dtoa_r+0x61c>)
 8008848:	425e      	negs	r6, r3
 800884a:	4b9b      	ldr	r3, [pc, #620]	; (8008ab8 <_dtoa_r+0x618>)
 800884c:	f006 020f 	and.w	r2, r6, #15
 8008850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	ec51 0b19 	vmov	r0, r1, d9
 800885c:	f7f7 feec 	bl	8000638 <__aeabi_dmul>
 8008860:	1136      	asrs	r6, r6, #4
 8008862:	4682      	mov	sl, r0
 8008864:	468b      	mov	fp, r1
 8008866:	2300      	movs	r3, #0
 8008868:	2502      	movs	r5, #2
 800886a:	2e00      	cmp	r6, #0
 800886c:	d17a      	bne.n	8008964 <_dtoa_r+0x4c4>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1d3      	bne.n	800881a <_dtoa_r+0x37a>
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8082 	beq.w	800897e <_dtoa_r+0x4de>
 800887a:	4b91      	ldr	r3, [pc, #580]	; (8008ac0 <_dtoa_r+0x620>)
 800887c:	2200      	movs	r2, #0
 800887e:	4650      	mov	r0, sl
 8008880:	4659      	mov	r1, fp
 8008882:	f7f8 f94b 	bl	8000b1c <__aeabi_dcmplt>
 8008886:	2800      	cmp	r0, #0
 8008888:	d079      	beq.n	800897e <_dtoa_r+0x4de>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d076      	beq.n	800897e <_dtoa_r+0x4de>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd36      	ble.n	8008904 <_dtoa_r+0x464>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	1e5f      	subs	r7, r3, #1
 800889e:	2200      	movs	r2, #0
 80088a0:	4b88      	ldr	r3, [pc, #544]	; (8008ac4 <_dtoa_r+0x624>)
 80088a2:	f7f7 fec9 	bl	8000638 <__aeabi_dmul>
 80088a6:	9e02      	ldr	r6, [sp, #8]
 80088a8:	4682      	mov	sl, r0
 80088aa:	468b      	mov	fp, r1
 80088ac:	3501      	adds	r5, #1
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7f7 fe58 	bl	8000564 <__aeabi_i2d>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	f7f7 febe 	bl	8000638 <__aeabi_dmul>
 80088bc:	4b82      	ldr	r3, [pc, #520]	; (8008ac8 <_dtoa_r+0x628>)
 80088be:	2200      	movs	r2, #0
 80088c0:	f7f7 fd04 	bl	80002cc <__adddf3>
 80088c4:	46d0      	mov	r8, sl
 80088c6:	46d9      	mov	r9, fp
 80088c8:	4682      	mov	sl, r0
 80088ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d158      	bne.n	8008984 <_dtoa_r+0x4e4>
 80088d2:	4b7e      	ldr	r3, [pc, #504]	; (8008acc <_dtoa_r+0x62c>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f7 fcf5 	bl	80002c8 <__aeabi_dsub>
 80088de:	4652      	mov	r2, sl
 80088e0:	465b      	mov	r3, fp
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	f7f8 f937 	bl	8000b58 <__aeabi_dcmpgt>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f040 8295 	bne.w	8008e1a <_dtoa_r+0x97a>
 80088f0:	4652      	mov	r2, sl
 80088f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f8 f90f 	bl	8000b1c <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 8289 	bne.w	8008e16 <_dtoa_r+0x976>
 8008904:	ec5b ab19 	vmov	sl, fp, d9
 8008908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800890a:	2b00      	cmp	r3, #0
 800890c:	f2c0 8148 	blt.w	8008ba0 <_dtoa_r+0x700>
 8008910:	9a00      	ldr	r2, [sp, #0]
 8008912:	2a0e      	cmp	r2, #14
 8008914:	f300 8144 	bgt.w	8008ba0 <_dtoa_r+0x700>
 8008918:	4b67      	ldr	r3, [pc, #412]	; (8008ab8 <_dtoa_r+0x618>)
 800891a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	f280 80d5 	bge.w	8008ad4 <_dtoa_r+0x634>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f300 80d1 	bgt.w	8008ad4 <_dtoa_r+0x634>
 8008932:	f040 826f 	bne.w	8008e14 <_dtoa_r+0x974>
 8008936:	4b65      	ldr	r3, [pc, #404]	; (8008acc <_dtoa_r+0x62c>)
 8008938:	2200      	movs	r2, #0
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f7 fe7b 	bl	8000638 <__aeabi_dmul>
 8008942:	4652      	mov	r2, sl
 8008944:	465b      	mov	r3, fp
 8008946:	f7f8 f8fd 	bl	8000b44 <__aeabi_dcmpge>
 800894a:	9e03      	ldr	r6, [sp, #12]
 800894c:	4637      	mov	r7, r6
 800894e:	2800      	cmp	r0, #0
 8008950:	f040 8245 	bne.w	8008dde <_dtoa_r+0x93e>
 8008954:	9d01      	ldr	r5, [sp, #4]
 8008956:	2331      	movs	r3, #49	; 0x31
 8008958:	f805 3b01 	strb.w	r3, [r5], #1
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	e240      	b.n	8008de6 <_dtoa_r+0x946>
 8008964:	07f2      	lsls	r2, r6, #31
 8008966:	d505      	bpl.n	8008974 <_dtoa_r+0x4d4>
 8008968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896c:	f7f7 fe64 	bl	8000638 <__aeabi_dmul>
 8008970:	3501      	adds	r5, #1
 8008972:	2301      	movs	r3, #1
 8008974:	1076      	asrs	r6, r6, #1
 8008976:	3708      	adds	r7, #8
 8008978:	e777      	b.n	800886a <_dtoa_r+0x3ca>
 800897a:	2502      	movs	r5, #2
 800897c:	e779      	b.n	8008872 <_dtoa_r+0x3d2>
 800897e:	9f00      	ldr	r7, [sp, #0]
 8008980:	9e03      	ldr	r6, [sp, #12]
 8008982:	e794      	b.n	80088ae <_dtoa_r+0x40e>
 8008984:	9901      	ldr	r1, [sp, #4]
 8008986:	4b4c      	ldr	r3, [pc, #304]	; (8008ab8 <_dtoa_r+0x618>)
 8008988:	4431      	add	r1, r6
 800898a:	910d      	str	r1, [sp, #52]	; 0x34
 800898c:	9908      	ldr	r1, [sp, #32]
 800898e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008996:	2900      	cmp	r1, #0
 8008998:	d043      	beq.n	8008a22 <_dtoa_r+0x582>
 800899a:	494d      	ldr	r1, [pc, #308]	; (8008ad0 <_dtoa_r+0x630>)
 800899c:	2000      	movs	r0, #0
 800899e:	f7f7 ff75 	bl	800088c <__aeabi_ddiv>
 80089a2:	4652      	mov	r2, sl
 80089a4:	465b      	mov	r3, fp
 80089a6:	f7f7 fc8f 	bl	80002c8 <__aeabi_dsub>
 80089aa:	9d01      	ldr	r5, [sp, #4]
 80089ac:	4682      	mov	sl, r0
 80089ae:	468b      	mov	fp, r1
 80089b0:	4649      	mov	r1, r9
 80089b2:	4640      	mov	r0, r8
 80089b4:	f7f8 f8f0 	bl	8000b98 <__aeabi_d2iz>
 80089b8:	4606      	mov	r6, r0
 80089ba:	f7f7 fdd3 	bl	8000564 <__aeabi_i2d>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f7f7 fc7f 	bl	80002c8 <__aeabi_dsub>
 80089ca:	3630      	adds	r6, #48	; 0x30
 80089cc:	f805 6b01 	strb.w	r6, [r5], #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	465b      	mov	r3, fp
 80089d4:	4680      	mov	r8, r0
 80089d6:	4689      	mov	r9, r1
 80089d8:	f7f8 f8a0 	bl	8000b1c <__aeabi_dcmplt>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d163      	bne.n	8008aa8 <_dtoa_r+0x608>
 80089e0:	4642      	mov	r2, r8
 80089e2:	464b      	mov	r3, r9
 80089e4:	4936      	ldr	r1, [pc, #216]	; (8008ac0 <_dtoa_r+0x620>)
 80089e6:	2000      	movs	r0, #0
 80089e8:	f7f7 fc6e 	bl	80002c8 <__aeabi_dsub>
 80089ec:	4652      	mov	r2, sl
 80089ee:	465b      	mov	r3, fp
 80089f0:	f7f8 f894 	bl	8000b1c <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f040 80b5 	bne.w	8008b64 <_dtoa_r+0x6c4>
 80089fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fc:	429d      	cmp	r5, r3
 80089fe:	d081      	beq.n	8008904 <_dtoa_r+0x464>
 8008a00:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <_dtoa_r+0x624>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	f7f7 fe16 	bl	8000638 <__aeabi_dmul>
 8008a0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ac4 <_dtoa_r+0x624>)
 8008a0e:	4682      	mov	sl, r0
 8008a10:	468b      	mov	fp, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	2200      	movs	r2, #0
 8008a18:	f7f7 fe0e 	bl	8000638 <__aeabi_dmul>
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4689      	mov	r9, r1
 8008a20:	e7c6      	b.n	80089b0 <_dtoa_r+0x510>
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	f7f7 fe07 	bl	8000638 <__aeabi_dmul>
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2c:	9d01      	ldr	r5, [sp, #4]
 8008a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	4649      	mov	r1, r9
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7f8 f8ae 	bl	8000b98 <__aeabi_d2iz>
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	f7f7 fd91 	bl	8000564 <__aeabi_i2d>
 8008a42:	3630      	adds	r6, #48	; 0x30
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7f7 fc3c 	bl	80002c8 <__aeabi_dsub>
 8008a50:	f805 6b01 	strb.w	r6, [r5], #1
 8008a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a56:	429d      	cmp	r5, r3
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	d124      	bne.n	8008aac <_dtoa_r+0x60c>
 8008a62:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <_dtoa_r+0x630>)
 8008a64:	4650      	mov	r0, sl
 8008a66:	4659      	mov	r1, fp
 8008a68:	f7f7 fc30 	bl	80002cc <__adddf3>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f8 f870 	bl	8000b58 <__aeabi_dcmpgt>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d173      	bne.n	8008b64 <_dtoa_r+0x6c4>
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	4913      	ldr	r1, [pc, #76]	; (8008ad0 <_dtoa_r+0x630>)
 8008a82:	2000      	movs	r0, #0
 8008a84:	f7f7 fc20 	bl	80002c8 <__aeabi_dsub>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f844 	bl	8000b1c <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f af35 	beq.w	8008904 <_dtoa_r+0x464>
 8008a9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a9c:	1e6b      	subs	r3, r5, #1
 8008a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008aa4:	2b30      	cmp	r3, #48	; 0x30
 8008aa6:	d0f8      	beq.n	8008a9a <_dtoa_r+0x5fa>
 8008aa8:	9700      	str	r7, [sp, #0]
 8008aaa:	e049      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <_dtoa_r+0x624>)
 8008aae:	f7f7 fdc3 	bl	8000638 <__aeabi_dmul>
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	e7bd      	b.n	8008a34 <_dtoa_r+0x594>
 8008ab8:	0800e2a0 	.word	0x0800e2a0
 8008abc:	0800e278 	.word	0x0800e278
 8008ac0:	3ff00000 	.word	0x3ff00000
 8008ac4:	40240000 	.word	0x40240000
 8008ac8:	401c0000 	.word	0x401c0000
 8008acc:	40140000 	.word	0x40140000
 8008ad0:	3fe00000 	.word	0x3fe00000
 8008ad4:	9d01      	ldr	r5, [sp, #4]
 8008ad6:	4656      	mov	r6, sl
 8008ad8:	465f      	mov	r7, fp
 8008ada:	4642      	mov	r2, r8
 8008adc:	464b      	mov	r3, r9
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 fed3 	bl	800088c <__aeabi_ddiv>
 8008ae6:	f7f8 f857 	bl	8000b98 <__aeabi_d2iz>
 8008aea:	4682      	mov	sl, r0
 8008aec:	f7f7 fd3a 	bl	8000564 <__aeabi_i2d>
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	f7f7 fda0 	bl	8000638 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b04:	f7f7 fbe0 	bl	80002c8 <__aeabi_dsub>
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9e01      	ldr	r6, [sp, #4]
 8008b0e:	9f03      	ldr	r7, [sp, #12]
 8008b10:	1bae      	subs	r6, r5, r6
 8008b12:	42b7      	cmp	r7, r6
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	d135      	bne.n	8008b86 <_dtoa_r+0x6e6>
 8008b1a:	f7f7 fbd7 	bl	80002cc <__adddf3>
 8008b1e:	4642      	mov	r2, r8
 8008b20:	464b      	mov	r3, r9
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	f7f8 f817 	bl	8000b58 <__aeabi_dcmpgt>
 8008b2a:	b9d0      	cbnz	r0, 8008b62 <_dtoa_r+0x6c2>
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	464b      	mov	r3, r9
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b38:	b110      	cbz	r0, 8008b40 <_dtoa_r+0x6a0>
 8008b3a:	f01a 0f01 	tst.w	sl, #1
 8008b3e:	d110      	bne.n	8008b62 <_dtoa_r+0x6c2>
 8008b40:	4620      	mov	r0, r4
 8008b42:	ee18 1a10 	vmov	r1, s16
 8008b46:	f000 fd09 	bl	800955c <_Bfree>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9800      	ldr	r0, [sp, #0]
 8008b4e:	702b      	strb	r3, [r5, #0]
 8008b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b52:	3001      	adds	r0, #1
 8008b54:	6018      	str	r0, [r3, #0]
 8008b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f43f acf1 	beq.w	8008540 <_dtoa_r+0xa0>
 8008b5e:	601d      	str	r5, [r3, #0]
 8008b60:	e4ee      	b.n	8008540 <_dtoa_r+0xa0>
 8008b62:	9f00      	ldr	r7, [sp, #0]
 8008b64:	462b      	mov	r3, r5
 8008b66:	461d      	mov	r5, r3
 8008b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b6c:	2a39      	cmp	r2, #57	; 0x39
 8008b6e:	d106      	bne.n	8008b7e <_dtoa_r+0x6de>
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d1f7      	bne.n	8008b66 <_dtoa_r+0x6c6>
 8008b76:	9901      	ldr	r1, [sp, #4]
 8008b78:	2230      	movs	r2, #48	; 0x30
 8008b7a:	3701      	adds	r7, #1
 8008b7c:	700a      	strb	r2, [r1, #0]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	3201      	adds	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	e790      	b.n	8008aa8 <_dtoa_r+0x608>
 8008b86:	4ba6      	ldr	r3, [pc, #664]	; (8008e20 <_dtoa_r+0x980>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd55 	bl	8000638 <__aeabi_dmul>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2300      	movs	r3, #0
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	f7f7 ffb7 	bl	8000b08 <__aeabi_dcmpeq>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d09d      	beq.n	8008ada <_dtoa_r+0x63a>
 8008b9e:	e7cf      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008ba0:	9a08      	ldr	r2, [sp, #32]
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f000 80d7 	beq.w	8008d56 <_dtoa_r+0x8b6>
 8008ba8:	9a06      	ldr	r2, [sp, #24]
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	f300 80ba 	bgt.w	8008d24 <_dtoa_r+0x884>
 8008bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	f000 80b2 	beq.w	8008d1c <_dtoa_r+0x87c>
 8008bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bbc:	9e07      	ldr	r6, [sp, #28]
 8008bbe:	9d04      	ldr	r5, [sp, #16]
 8008bc0:	9a04      	ldr	r2, [sp, #16]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	9204      	str	r2, [sp, #16]
 8008bc6:	9a05      	ldr	r2, [sp, #20]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	441a      	add	r2, r3
 8008bcc:	4620      	mov	r0, r4
 8008bce:	9205      	str	r2, [sp, #20]
 8008bd0:	f000 fd7c 	bl	80096cc <__i2b>
 8008bd4:	4607      	mov	r7, r0
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	dd0c      	ble.n	8008bf4 <_dtoa_r+0x754>
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd09      	ble.n	8008bf4 <_dtoa_r+0x754>
 8008be0:	42ab      	cmp	r3, r5
 8008be2:	9a04      	ldr	r2, [sp, #16]
 8008be4:	bfa8      	it	ge
 8008be6:	462b      	movge	r3, r5
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	9204      	str	r2, [sp, #16]
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	1aed      	subs	r5, r5, r3
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	b31b      	cbz	r3, 8008c40 <_dtoa_r+0x7a0>
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80af 	beq.w	8008d5e <_dtoa_r+0x8be>
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	dd13      	ble.n	8008c2c <_dtoa_r+0x78c>
 8008c04:	4639      	mov	r1, r7
 8008c06:	4632      	mov	r2, r6
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fe1f 	bl	800984c <__pow5mult>
 8008c0e:	ee18 2a10 	vmov	r2, s16
 8008c12:	4601      	mov	r1, r0
 8008c14:	4607      	mov	r7, r0
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fd6e 	bl	80096f8 <__multiply>
 8008c1c:	ee18 1a10 	vmov	r1, s16
 8008c20:	4680      	mov	r8, r0
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fc9a 	bl	800955c <_Bfree>
 8008c28:	ee08 8a10 	vmov	s16, r8
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	1b9a      	subs	r2, r3, r6
 8008c30:	d006      	beq.n	8008c40 <_dtoa_r+0x7a0>
 8008c32:	ee18 1a10 	vmov	r1, s16
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fe08 	bl	800984c <__pow5mult>
 8008c3c:	ee08 0a10 	vmov	s16, r0
 8008c40:	2101      	movs	r1, #1
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fd42 	bl	80096cc <__i2b>
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	f340 8088 	ble.w	8008d62 <_dtoa_r+0x8c2>
 8008c52:	461a      	mov	r2, r3
 8008c54:	4601      	mov	r1, r0
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fdf8 	bl	800984c <__pow5mult>
 8008c5c:	9b06      	ldr	r3, [sp, #24]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	4606      	mov	r6, r0
 8008c62:	f340 8081 	ble.w	8008d68 <_dtoa_r+0x8c8>
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	6933      	ldr	r3, [r6, #16]
 8008c6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c70:	6918      	ldr	r0, [r3, #16]
 8008c72:	f000 fcdb 	bl	800962c <__hi0bits>
 8008c76:	f1c0 0020 	rsb	r0, r0, #32
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	4418      	add	r0, r3
 8008c7e:	f010 001f 	ands.w	r0, r0, #31
 8008c82:	f000 8092 	beq.w	8008daa <_dtoa_r+0x90a>
 8008c86:	f1c0 0320 	rsb	r3, r0, #32
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	f340 808a 	ble.w	8008da4 <_dtoa_r+0x904>
 8008c90:	f1c0 001c 	rsb	r0, r0, #28
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	4403      	add	r3, r0
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	4403      	add	r3, r0
 8008c9e:	4405      	add	r5, r0
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd07      	ble.n	8008cb8 <_dtoa_r+0x818>
 8008ca8:	ee18 1a10 	vmov	r1, s16
 8008cac:	461a      	mov	r2, r3
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fe26 	bl	8009900 <__lshift>
 8008cb4:	ee08 0a10 	vmov	s16, r0
 8008cb8:	9b05      	ldr	r3, [sp, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dd05      	ble.n	8008cca <_dtoa_r+0x82a>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fe1c 	bl	8009900 <__lshift>
 8008cc8:	4606      	mov	r6, r0
 8008cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d06e      	beq.n	8008dae <_dtoa_r+0x90e>
 8008cd0:	ee18 0a10 	vmov	r0, s16
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	f000 fe83 	bl	80099e0 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	da67      	bge.n	8008dae <_dtoa_r+0x90e>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	220a      	movs	r2, #10
 8008cea:	2300      	movs	r3, #0
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fc57 	bl	80095a0 <__multadd>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 81b1 	beq.w	8009060 <_dtoa_r+0xbc0>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4639      	mov	r1, r7
 8008d02:	220a      	movs	r2, #10
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fc4b 	bl	80095a0 <__multadd>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	4607      	mov	r7, r0
 8008d10:	f300 808e 	bgt.w	8008e30 <_dtoa_r+0x990>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dc51      	bgt.n	8008dbe <_dtoa_r+0x91e>
 8008d1a:	e089      	b.n	8008e30 <_dtoa_r+0x990>
 8008d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d22:	e74b      	b.n	8008bbc <_dtoa_r+0x71c>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	1e5e      	subs	r6, r3, #1
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	42b3      	cmp	r3, r6
 8008d2c:	bfbf      	itttt	lt
 8008d2e:	9b07      	ldrlt	r3, [sp, #28]
 8008d30:	9607      	strlt	r6, [sp, #28]
 8008d32:	1af2      	sublt	r2, r6, r3
 8008d34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d36:	bfb6      	itet	lt
 8008d38:	189b      	addlt	r3, r3, r2
 8008d3a:	1b9e      	subge	r6, r3, r6
 8008d3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	bfb8      	it	lt
 8008d42:	2600      	movlt	r6, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb7      	itett	lt
 8008d48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d50:	1a9d      	sublt	r5, r3, r2
 8008d52:	2300      	movlt	r3, #0
 8008d54:	e734      	b.n	8008bc0 <_dtoa_r+0x720>
 8008d56:	9e07      	ldr	r6, [sp, #28]
 8008d58:	9d04      	ldr	r5, [sp, #16]
 8008d5a:	9f08      	ldr	r7, [sp, #32]
 8008d5c:	e73b      	b.n	8008bd6 <_dtoa_r+0x736>
 8008d5e:	9a07      	ldr	r2, [sp, #28]
 8008d60:	e767      	b.n	8008c32 <_dtoa_r+0x792>
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	dc18      	bgt.n	8008d9a <_dtoa_r+0x8fa>
 8008d68:	f1ba 0f00 	cmp.w	sl, #0
 8008d6c:	d115      	bne.n	8008d9a <_dtoa_r+0x8fa>
 8008d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d72:	b993      	cbnz	r3, 8008d9a <_dtoa_r+0x8fa>
 8008d74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d78:	0d1b      	lsrs	r3, r3, #20
 8008d7a:	051b      	lsls	r3, r3, #20
 8008d7c:	b183      	cbz	r3, 8008da0 <_dtoa_r+0x900>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	3301      	adds	r3, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	f04f 0801 	mov.w	r8, #1
 8008d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f47f af6a 	bne.w	8008c6a <_dtoa_r+0x7ca>
 8008d96:	2001      	movs	r0, #1
 8008d98:	e76f      	b.n	8008c7a <_dtoa_r+0x7da>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	e7f6      	b.n	8008d8e <_dtoa_r+0x8ee>
 8008da0:	4698      	mov	r8, r3
 8008da2:	e7f4      	b.n	8008d8e <_dtoa_r+0x8ee>
 8008da4:	f43f af7d 	beq.w	8008ca2 <_dtoa_r+0x802>
 8008da8:	4618      	mov	r0, r3
 8008daa:	301c      	adds	r0, #28
 8008dac:	e772      	b.n	8008c94 <_dtoa_r+0x7f4>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dc37      	bgt.n	8008e24 <_dtoa_r+0x984>
 8008db4:	9b06      	ldr	r3, [sp, #24]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	dd34      	ble.n	8008e24 <_dtoa_r+0x984>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	9302      	str	r3, [sp, #8]
 8008dbe:	9b02      	ldr	r3, [sp, #8]
 8008dc0:	b96b      	cbnz	r3, 8008dde <_dtoa_r+0x93e>
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	2205      	movs	r2, #5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 fbea 	bl	80095a0 <__multadd>
 8008dcc:	4601      	mov	r1, r0
 8008dce:	4606      	mov	r6, r0
 8008dd0:	ee18 0a10 	vmov	r0, s16
 8008dd4:	f000 fe04 	bl	80099e0 <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f73f adbb 	bgt.w	8008954 <_dtoa_r+0x4b4>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	9d01      	ldr	r5, [sp, #4]
 8008de2:	43db      	mvns	r3, r3
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	4631      	mov	r1, r6
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 fbb5 	bl	800955c <_Bfree>
 8008df2:	2f00      	cmp	r7, #0
 8008df4:	f43f aea4 	beq.w	8008b40 <_dtoa_r+0x6a0>
 8008df8:	f1b8 0f00 	cmp.w	r8, #0
 8008dfc:	d005      	beq.n	8008e0a <_dtoa_r+0x96a>
 8008dfe:	45b8      	cmp	r8, r7
 8008e00:	d003      	beq.n	8008e0a <_dtoa_r+0x96a>
 8008e02:	4641      	mov	r1, r8
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fba9 	bl	800955c <_Bfree>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fba5 	bl	800955c <_Bfree>
 8008e12:	e695      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008e14:	2600      	movs	r6, #0
 8008e16:	4637      	mov	r7, r6
 8008e18:	e7e1      	b.n	8008dde <_dtoa_r+0x93e>
 8008e1a:	9700      	str	r7, [sp, #0]
 8008e1c:	4637      	mov	r7, r6
 8008e1e:	e599      	b.n	8008954 <_dtoa_r+0x4b4>
 8008e20:	40240000 	.word	0x40240000
 8008e24:	9b08      	ldr	r3, [sp, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80ca 	beq.w	8008fc0 <_dtoa_r+0xb20>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	dd05      	ble.n	8008e40 <_dtoa_r+0x9a0>
 8008e34:	4639      	mov	r1, r7
 8008e36:	462a      	mov	r2, r5
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fd61 	bl	8009900 <__lshift>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d05b      	beq.n	8008efe <_dtoa_r+0xa5e>
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fb47 	bl	80094dc <_Balloc>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b928      	cbnz	r0, 8008e5e <_dtoa_r+0x9be>
 8008e52:	4b87      	ldr	r3, [pc, #540]	; (8009070 <_dtoa_r+0xbd0>)
 8008e54:	4602      	mov	r2, r0
 8008e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e5a:	f7ff bb3b 	b.w	80084d4 <_dtoa_r+0x34>
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	3202      	adds	r2, #2
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	f107 010c 	add.w	r1, r7, #12
 8008e68:	300c      	adds	r0, #12
 8008e6a:	f7fe fc25 	bl	80076b8 <memcpy>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4629      	mov	r1, r5
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fd44 	bl	8009900 <__lshift>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f103 0901 	add.w	r9, r3, #1
 8008e7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	f00a 0301 	and.w	r3, sl, #1
 8008e8a:	46b8      	mov	r8, r7
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	4607      	mov	r7, r0
 8008e90:	4631      	mov	r1, r6
 8008e92:	ee18 0a10 	vmov	r0, s16
 8008e96:	f7ff fa77 	bl	8008388 <quorem>
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	9002      	str	r0, [sp, #8]
 8008e9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ea2:	ee18 0a10 	vmov	r0, s16
 8008ea6:	f000 fd9b 	bl	80099e0 <__mcmp>
 8008eaa:	463a      	mov	r2, r7
 8008eac:	9003      	str	r0, [sp, #12]
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fdb1 	bl	8009a18 <__mdiff>
 8008eb6:	68c2      	ldr	r2, [r0, #12]
 8008eb8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	bb02      	cbnz	r2, 8008f02 <_dtoa_r+0xa62>
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	ee18 0a10 	vmov	r0, s16
 8008ec6:	f000 fd8b 	bl	80099e0 <__mcmp>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4620      	mov	r0, r4
 8008ed0:	9207      	str	r2, [sp, #28]
 8008ed2:	f000 fb43 	bl	800955c <_Bfree>
 8008ed6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008eda:	ea43 0102 	orr.w	r1, r3, r2
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	464d      	mov	r5, r9
 8008ee4:	d10f      	bne.n	8008f06 <_dtoa_r+0xa66>
 8008ee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008eea:	d02a      	beq.n	8008f42 <_dtoa_r+0xaa2>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd02      	ble.n	8008ef8 <_dtoa_r+0xa58>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ef8:	f88b a000 	strb.w	sl, [fp]
 8008efc:	e775      	b.n	8008dea <_dtoa_r+0x94a>
 8008efe:	4638      	mov	r0, r7
 8008f00:	e7ba      	b.n	8008e78 <_dtoa_r+0x9d8>
 8008f02:	2201      	movs	r2, #1
 8008f04:	e7e2      	b.n	8008ecc <_dtoa_r+0xa2c>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db04      	blt.n	8008f16 <_dtoa_r+0xa76>
 8008f0c:	9906      	ldr	r1, [sp, #24]
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	9904      	ldr	r1, [sp, #16]
 8008f12:	430b      	orrs	r3, r1
 8008f14:	d122      	bne.n	8008f5c <_dtoa_r+0xabc>
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	ddee      	ble.n	8008ef8 <_dtoa_r+0xa58>
 8008f1a:	ee18 1a10 	vmov	r1, s16
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fced 	bl	8009900 <__lshift>
 8008f26:	4631      	mov	r1, r6
 8008f28:	ee08 0a10 	vmov	s16, r0
 8008f2c:	f000 fd58 	bl	80099e0 <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dc03      	bgt.n	8008f3c <_dtoa_r+0xa9c>
 8008f34:	d1e0      	bne.n	8008ef8 <_dtoa_r+0xa58>
 8008f36:	f01a 0f01 	tst.w	sl, #1
 8008f3a:	d0dd      	beq.n	8008ef8 <_dtoa_r+0xa58>
 8008f3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f40:	d1d7      	bne.n	8008ef2 <_dtoa_r+0xa52>
 8008f42:	2339      	movs	r3, #57	; 0x39
 8008f44:	f88b 3000 	strb.w	r3, [fp]
 8008f48:	462b      	mov	r3, r5
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f52:	2a39      	cmp	r2, #57	; 0x39
 8008f54:	d071      	beq.n	800903a <_dtoa_r+0xb9a>
 8008f56:	3201      	adds	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e746      	b.n	8008dea <_dtoa_r+0x94a>
 8008f5c:	2a00      	cmp	r2, #0
 8008f5e:	dd07      	ble.n	8008f70 <_dtoa_r+0xad0>
 8008f60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f64:	d0ed      	beq.n	8008f42 <_dtoa_r+0xaa2>
 8008f66:	f10a 0301 	add.w	r3, sl, #1
 8008f6a:	f88b 3000 	strb.w	r3, [fp]
 8008f6e:	e73c      	b.n	8008dea <_dtoa_r+0x94a>
 8008f70:	9b05      	ldr	r3, [sp, #20]
 8008f72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f76:	4599      	cmp	r9, r3
 8008f78:	d047      	beq.n	800900a <_dtoa_r+0xb6a>
 8008f7a:	ee18 1a10 	vmov	r1, s16
 8008f7e:	2300      	movs	r3, #0
 8008f80:	220a      	movs	r2, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fb0c 	bl	80095a0 <__multadd>
 8008f88:	45b8      	cmp	r8, r7
 8008f8a:	ee08 0a10 	vmov	s16, r0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	f04f 020a 	mov.w	r2, #10
 8008f96:	4641      	mov	r1, r8
 8008f98:	4620      	mov	r0, r4
 8008f9a:	d106      	bne.n	8008faa <_dtoa_r+0xb0a>
 8008f9c:	f000 fb00 	bl	80095a0 <__multadd>
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	f109 0901 	add.w	r9, r9, #1
 8008fa8:	e772      	b.n	8008e90 <_dtoa_r+0x9f0>
 8008faa:	f000 faf9 	bl	80095a0 <__multadd>
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 faf2 	bl	80095a0 <__multadd>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	e7f1      	b.n	8008fa4 <_dtoa_r+0xb04>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	9302      	str	r3, [sp, #8]
 8008fc4:	9d01      	ldr	r5, [sp, #4]
 8008fc6:	ee18 0a10 	vmov	r0, s16
 8008fca:	4631      	mov	r1, r6
 8008fcc:	f7ff f9dc 	bl	8008388 <quorem>
 8008fd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	f805 ab01 	strb.w	sl, [r5], #1
 8008fda:	1aea      	subs	r2, r5, r3
 8008fdc:	9b02      	ldr	r3, [sp, #8]
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	dd09      	ble.n	8008ff6 <_dtoa_r+0xb56>
 8008fe2:	ee18 1a10 	vmov	r1, s16
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	220a      	movs	r2, #10
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fad8 	bl	80095a0 <__multadd>
 8008ff0:	ee08 0a10 	vmov	s16, r0
 8008ff4:	e7e7      	b.n	8008fc6 <_dtoa_r+0xb26>
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfc8      	it	gt
 8008ffc:	461d      	movgt	r5, r3
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	bfd8      	it	le
 8009002:	2501      	movle	r5, #1
 8009004:	441d      	add	r5, r3
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	ee18 1a10 	vmov	r1, s16
 800900e:	2201      	movs	r2, #1
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fc75 	bl	8009900 <__lshift>
 8009016:	4631      	mov	r1, r6
 8009018:	ee08 0a10 	vmov	s16, r0
 800901c:	f000 fce0 	bl	80099e0 <__mcmp>
 8009020:	2800      	cmp	r0, #0
 8009022:	dc91      	bgt.n	8008f48 <_dtoa_r+0xaa8>
 8009024:	d102      	bne.n	800902c <_dtoa_r+0xb8c>
 8009026:	f01a 0f01 	tst.w	sl, #1
 800902a:	d18d      	bne.n	8008f48 <_dtoa_r+0xaa8>
 800902c:	462b      	mov	r3, r5
 800902e:	461d      	mov	r5, r3
 8009030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009034:	2a30      	cmp	r2, #48	; 0x30
 8009036:	d0fa      	beq.n	800902e <_dtoa_r+0xb8e>
 8009038:	e6d7      	b.n	8008dea <_dtoa_r+0x94a>
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d184      	bne.n	8008f4a <_dtoa_r+0xaaa>
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	2331      	movs	r3, #49	; 0x31
 8009048:	7013      	strb	r3, [r2, #0]
 800904a:	e6ce      	b.n	8008dea <_dtoa_r+0x94a>
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <_dtoa_r+0xbd4>)
 800904e:	f7ff ba95 	b.w	800857c <_dtoa_r+0xdc>
 8009052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009054:	2b00      	cmp	r3, #0
 8009056:	f47f aa6e 	bne.w	8008536 <_dtoa_r+0x96>
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <_dtoa_r+0xbd8>)
 800905c:	f7ff ba8e 	b.w	800857c <_dtoa_r+0xdc>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	dcae      	bgt.n	8008fc4 <_dtoa_r+0xb24>
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f73f aea8 	bgt.w	8008dbe <_dtoa_r+0x91e>
 800906e:	e7a9      	b.n	8008fc4 <_dtoa_r+0xb24>
 8009070:	0800e1a7 	.word	0x0800e1a7
 8009074:	0800e104 	.word	0x0800e104
 8009078:	0800e128 	.word	0x0800e128

0800907c <__sflush_r>:
 800907c:	898a      	ldrh	r2, [r1, #12]
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	4605      	mov	r5, r0
 8009084:	0710      	lsls	r0, r2, #28
 8009086:	460c      	mov	r4, r1
 8009088:	d458      	bmi.n	800913c <__sflush_r+0xc0>
 800908a:	684b      	ldr	r3, [r1, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dc05      	bgt.n	800909c <__sflush_r+0x20>
 8009090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	dc02      	bgt.n	800909c <__sflush_r+0x20>
 8009096:	2000      	movs	r0, #0
 8009098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800909e:	2e00      	cmp	r6, #0
 80090a0:	d0f9      	beq.n	8009096 <__sflush_r+0x1a>
 80090a2:	2300      	movs	r3, #0
 80090a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090a8:	682f      	ldr	r7, [r5, #0]
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	d032      	beq.n	8009114 <__sflush_r+0x98>
 80090ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	075a      	lsls	r2, r3, #29
 80090b4:	d505      	bpl.n	80090c2 <__sflush_r+0x46>
 80090b6:	6863      	ldr	r3, [r4, #4]
 80090b8:	1ac0      	subs	r0, r0, r3
 80090ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090bc:	b10b      	cbz	r3, 80090c2 <__sflush_r+0x46>
 80090be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090c0:	1ac0      	subs	r0, r0, r3
 80090c2:	2300      	movs	r3, #0
 80090c4:	4602      	mov	r2, r0
 80090c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090c8:	6a21      	ldr	r1, [r4, #32]
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b0      	blx	r6
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	d106      	bne.n	80090e2 <__sflush_r+0x66>
 80090d4:	6829      	ldr	r1, [r5, #0]
 80090d6:	291d      	cmp	r1, #29
 80090d8:	d82c      	bhi.n	8009134 <__sflush_r+0xb8>
 80090da:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <__sflush_r+0x108>)
 80090dc:	40ca      	lsrs	r2, r1
 80090de:	07d6      	lsls	r6, r2, #31
 80090e0:	d528      	bpl.n	8009134 <__sflush_r+0xb8>
 80090e2:	2200      	movs	r2, #0
 80090e4:	6062      	str	r2, [r4, #4]
 80090e6:	04d9      	lsls	r1, r3, #19
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	d504      	bpl.n	80090f8 <__sflush_r+0x7c>
 80090ee:	1c42      	adds	r2, r0, #1
 80090f0:	d101      	bne.n	80090f6 <__sflush_r+0x7a>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b903      	cbnz	r3, 80090f8 <__sflush_r+0x7c>
 80090f6:	6560      	str	r0, [r4, #84]	; 0x54
 80090f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090fa:	602f      	str	r7, [r5, #0]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d0ca      	beq.n	8009096 <__sflush_r+0x1a>
 8009100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <__sflush_r+0x92>
 8009108:	4628      	mov	r0, r5
 800910a:	f7fe faeb 	bl	80076e4 <_free_r>
 800910e:	2000      	movs	r0, #0
 8009110:	6360      	str	r0, [r4, #52]	; 0x34
 8009112:	e7c1      	b.n	8009098 <__sflush_r+0x1c>
 8009114:	6a21      	ldr	r1, [r4, #32]
 8009116:	2301      	movs	r3, #1
 8009118:	4628      	mov	r0, r5
 800911a:	47b0      	blx	r6
 800911c:	1c41      	adds	r1, r0, #1
 800911e:	d1c7      	bne.n	80090b0 <__sflush_r+0x34>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0c4      	beq.n	80090b0 <__sflush_r+0x34>
 8009126:	2b1d      	cmp	r3, #29
 8009128:	d001      	beq.n	800912e <__sflush_r+0xb2>
 800912a:	2b16      	cmp	r3, #22
 800912c:	d101      	bne.n	8009132 <__sflush_r+0xb6>
 800912e:	602f      	str	r7, [r5, #0]
 8009130:	e7b1      	b.n	8009096 <__sflush_r+0x1a>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	e7ad      	b.n	8009098 <__sflush_r+0x1c>
 800913c:	690f      	ldr	r7, [r1, #16]
 800913e:	2f00      	cmp	r7, #0
 8009140:	d0a9      	beq.n	8009096 <__sflush_r+0x1a>
 8009142:	0793      	lsls	r3, r2, #30
 8009144:	680e      	ldr	r6, [r1, #0]
 8009146:	bf08      	it	eq
 8009148:	694b      	ldreq	r3, [r1, #20]
 800914a:	600f      	str	r7, [r1, #0]
 800914c:	bf18      	it	ne
 800914e:	2300      	movne	r3, #0
 8009150:	eba6 0807 	sub.w	r8, r6, r7
 8009154:	608b      	str	r3, [r1, #8]
 8009156:	f1b8 0f00 	cmp.w	r8, #0
 800915a:	dd9c      	ble.n	8009096 <__sflush_r+0x1a>
 800915c:	6a21      	ldr	r1, [r4, #32]
 800915e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009160:	4643      	mov	r3, r8
 8009162:	463a      	mov	r2, r7
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	2800      	cmp	r0, #0
 800916a:	dc06      	bgt.n	800917a <__sflush_r+0xfe>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e78e      	b.n	8009098 <__sflush_r+0x1c>
 800917a:	4407      	add	r7, r0
 800917c:	eba8 0800 	sub.w	r8, r8, r0
 8009180:	e7e9      	b.n	8009156 <__sflush_r+0xda>
 8009182:	bf00      	nop
 8009184:	20400001 	.word	0x20400001

08009188 <_fflush_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	690b      	ldr	r3, [r1, #16]
 800918c:	4605      	mov	r5, r0
 800918e:	460c      	mov	r4, r1
 8009190:	b913      	cbnz	r3, 8009198 <_fflush_r+0x10>
 8009192:	2500      	movs	r5, #0
 8009194:	4628      	mov	r0, r5
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	b118      	cbz	r0, 80091a2 <_fflush_r+0x1a>
 800919a:	6983      	ldr	r3, [r0, #24]
 800919c:	b90b      	cbnz	r3, 80091a2 <_fflush_r+0x1a>
 800919e:	f000 f887 	bl	80092b0 <__sinit>
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <_fflush_r+0x6c>)
 80091a4:	429c      	cmp	r4, r3
 80091a6:	d11b      	bne.n	80091e0 <_fflush_r+0x58>
 80091a8:	686c      	ldr	r4, [r5, #4]
 80091aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0ef      	beq.n	8009192 <_fflush_r+0xa>
 80091b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091b4:	07d0      	lsls	r0, r2, #31
 80091b6:	d404      	bmi.n	80091c2 <_fflush_r+0x3a>
 80091b8:	0599      	lsls	r1, r3, #22
 80091ba:	d402      	bmi.n	80091c2 <_fflush_r+0x3a>
 80091bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091be:	f000 f91a 	bl	80093f6 <__retarget_lock_acquire_recursive>
 80091c2:	4628      	mov	r0, r5
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7ff ff59 	bl	800907c <__sflush_r>
 80091ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091cc:	07da      	lsls	r2, r3, #31
 80091ce:	4605      	mov	r5, r0
 80091d0:	d4e0      	bmi.n	8009194 <_fflush_r+0xc>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	059b      	lsls	r3, r3, #22
 80091d6:	d4dd      	bmi.n	8009194 <_fflush_r+0xc>
 80091d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091da:	f000 f90d 	bl	80093f8 <__retarget_lock_release_recursive>
 80091de:	e7d9      	b.n	8009194 <_fflush_r+0xc>
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <_fflush_r+0x70>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d101      	bne.n	80091ea <_fflush_r+0x62>
 80091e6:	68ac      	ldr	r4, [r5, #8]
 80091e8:	e7df      	b.n	80091aa <_fflush_r+0x22>
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <_fflush_r+0x74>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	bf08      	it	eq
 80091f0:	68ec      	ldreq	r4, [r5, #12]
 80091f2:	e7da      	b.n	80091aa <_fflush_r+0x22>
 80091f4:	0800e1d8 	.word	0x0800e1d8
 80091f8:	0800e1f8 	.word	0x0800e1f8
 80091fc:	0800e1b8 	.word	0x0800e1b8

08009200 <std>:
 8009200:	2300      	movs	r3, #0
 8009202:	b510      	push	{r4, lr}
 8009204:	4604      	mov	r4, r0
 8009206:	e9c0 3300 	strd	r3, r3, [r0]
 800920a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800920e:	6083      	str	r3, [r0, #8]
 8009210:	8181      	strh	r1, [r0, #12]
 8009212:	6643      	str	r3, [r0, #100]	; 0x64
 8009214:	81c2      	strh	r2, [r0, #14]
 8009216:	6183      	str	r3, [r0, #24]
 8009218:	4619      	mov	r1, r3
 800921a:	2208      	movs	r2, #8
 800921c:	305c      	adds	r0, #92	; 0x5c
 800921e:	f7fe fa59 	bl	80076d4 <memset>
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <std+0x38>)
 8009224:	6263      	str	r3, [r4, #36]	; 0x24
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <std+0x3c>)
 8009228:	62a3      	str	r3, [r4, #40]	; 0x28
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <std+0x40>)
 800922c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <std+0x44>)
 8009230:	6224      	str	r4, [r4, #32]
 8009232:	6323      	str	r3, [r4, #48]	; 0x30
 8009234:	bd10      	pop	{r4, pc}
 8009236:	bf00      	nop
 8009238:	0800a17d 	.word	0x0800a17d
 800923c:	0800a19f 	.word	0x0800a19f
 8009240:	0800a1d7 	.word	0x0800a1d7
 8009244:	0800a1fb 	.word	0x0800a1fb

08009248 <_cleanup_r>:
 8009248:	4901      	ldr	r1, [pc, #4]	; (8009250 <_cleanup_r+0x8>)
 800924a:	f000 b8af 	b.w	80093ac <_fwalk_reent>
 800924e:	bf00      	nop
 8009250:	08009189 	.word	0x08009189

08009254 <__sfmoreglue>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	2268      	movs	r2, #104	; 0x68
 8009258:	1e4d      	subs	r5, r1, #1
 800925a:	4355      	muls	r5, r2
 800925c:	460e      	mov	r6, r1
 800925e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009262:	f7fe faab 	bl	80077bc <_malloc_r>
 8009266:	4604      	mov	r4, r0
 8009268:	b140      	cbz	r0, 800927c <__sfmoreglue+0x28>
 800926a:	2100      	movs	r1, #0
 800926c:	e9c0 1600 	strd	r1, r6, [r0]
 8009270:	300c      	adds	r0, #12
 8009272:	60a0      	str	r0, [r4, #8]
 8009274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009278:	f7fe fa2c 	bl	80076d4 <memset>
 800927c:	4620      	mov	r0, r4
 800927e:	bd70      	pop	{r4, r5, r6, pc}

08009280 <__sfp_lock_acquire>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sfp_lock_acquire+0x8>)
 8009282:	f000 b8b8 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 8009286:	bf00      	nop
 8009288:	20000539 	.word	0x20000539

0800928c <__sfp_lock_release>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sfp_lock_release+0x8>)
 800928e:	f000 b8b3 	b.w	80093f8 <__retarget_lock_release_recursive>
 8009292:	bf00      	nop
 8009294:	20000539 	.word	0x20000539

08009298 <__sinit_lock_acquire>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sinit_lock_acquire+0x8>)
 800929a:	f000 b8ac 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	2000053a 	.word	0x2000053a

080092a4 <__sinit_lock_release>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__sinit_lock_release+0x8>)
 80092a6:	f000 b8a7 	b.w	80093f8 <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	2000053a 	.word	0x2000053a

080092b0 <__sinit>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	f7ff fff0 	bl	8009298 <__sinit_lock_acquire>
 80092b8:	69a3      	ldr	r3, [r4, #24]
 80092ba:	b11b      	cbz	r3, 80092c4 <__sinit+0x14>
 80092bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c0:	f7ff bff0 	b.w	80092a4 <__sinit_lock_release>
 80092c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092c8:	6523      	str	r3, [r4, #80]	; 0x50
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <__sinit+0x68>)
 80092cc:	4a13      	ldr	r2, [pc, #76]	; (800931c <__sinit+0x6c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	bf04      	itt	eq
 80092d6:	2301      	moveq	r3, #1
 80092d8:	61a3      	streq	r3, [r4, #24]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f820 	bl	8009320 <__sfp>
 80092e0:	6060      	str	r0, [r4, #4]
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 f81c 	bl	8009320 <__sfp>
 80092e8:	60a0      	str	r0, [r4, #8]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f818 	bl	8009320 <__sfp>
 80092f0:	2200      	movs	r2, #0
 80092f2:	60e0      	str	r0, [r4, #12]
 80092f4:	2104      	movs	r1, #4
 80092f6:	6860      	ldr	r0, [r4, #4]
 80092f8:	f7ff ff82 	bl	8009200 <std>
 80092fc:	68a0      	ldr	r0, [r4, #8]
 80092fe:	2201      	movs	r2, #1
 8009300:	2109      	movs	r1, #9
 8009302:	f7ff ff7d 	bl	8009200 <std>
 8009306:	68e0      	ldr	r0, [r4, #12]
 8009308:	2202      	movs	r2, #2
 800930a:	2112      	movs	r1, #18
 800930c:	f7ff ff78 	bl	8009200 <std>
 8009310:	2301      	movs	r3, #1
 8009312:	61a3      	str	r3, [r4, #24]
 8009314:	e7d2      	b.n	80092bc <__sinit+0xc>
 8009316:	bf00      	nop
 8009318:	0800e0f0 	.word	0x0800e0f0
 800931c:	08009249 	.word	0x08009249

08009320 <__sfp>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	4607      	mov	r7, r0
 8009324:	f7ff ffac 	bl	8009280 <__sfp_lock_acquire>
 8009328:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <__sfp+0x84>)
 800932a:	681e      	ldr	r6, [r3, #0]
 800932c:	69b3      	ldr	r3, [r6, #24]
 800932e:	b913      	cbnz	r3, 8009336 <__sfp+0x16>
 8009330:	4630      	mov	r0, r6
 8009332:	f7ff ffbd 	bl	80092b0 <__sinit>
 8009336:	3648      	adds	r6, #72	; 0x48
 8009338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800933c:	3b01      	subs	r3, #1
 800933e:	d503      	bpl.n	8009348 <__sfp+0x28>
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	b30b      	cbz	r3, 8009388 <__sfp+0x68>
 8009344:	6836      	ldr	r6, [r6, #0]
 8009346:	e7f7      	b.n	8009338 <__sfp+0x18>
 8009348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800934c:	b9d5      	cbnz	r5, 8009384 <__sfp+0x64>
 800934e:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <__sfp+0x88>)
 8009350:	60e3      	str	r3, [r4, #12]
 8009352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009356:	6665      	str	r5, [r4, #100]	; 0x64
 8009358:	f000 f84c 	bl	80093f4 <__retarget_lock_init_recursive>
 800935c:	f7ff ff96 	bl	800928c <__sfp_lock_release>
 8009360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	61a5      	str	r5, [r4, #24]
 800936c:	2208      	movs	r2, #8
 800936e:	4629      	mov	r1, r5
 8009370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009374:	f7fe f9ae 	bl	80076d4 <memset>
 8009378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800937c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009380:	4620      	mov	r0, r4
 8009382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009384:	3468      	adds	r4, #104	; 0x68
 8009386:	e7d9      	b.n	800933c <__sfp+0x1c>
 8009388:	2104      	movs	r1, #4
 800938a:	4638      	mov	r0, r7
 800938c:	f7ff ff62 	bl	8009254 <__sfmoreglue>
 8009390:	4604      	mov	r4, r0
 8009392:	6030      	str	r0, [r6, #0]
 8009394:	2800      	cmp	r0, #0
 8009396:	d1d5      	bne.n	8009344 <__sfp+0x24>
 8009398:	f7ff ff78 	bl	800928c <__sfp_lock_release>
 800939c:	230c      	movs	r3, #12
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	e7ee      	b.n	8009380 <__sfp+0x60>
 80093a2:	bf00      	nop
 80093a4:	0800e0f0 	.word	0x0800e0f0
 80093a8:	ffff0001 	.word	0xffff0001

080093ac <_fwalk_reent>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4606      	mov	r6, r0
 80093b2:	4688      	mov	r8, r1
 80093b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093b8:	2700      	movs	r7, #0
 80093ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093be:	f1b9 0901 	subs.w	r9, r9, #1
 80093c2:	d505      	bpl.n	80093d0 <_fwalk_reent+0x24>
 80093c4:	6824      	ldr	r4, [r4, #0]
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	d1f7      	bne.n	80093ba <_fwalk_reent+0xe>
 80093ca:	4638      	mov	r0, r7
 80093cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d0:	89ab      	ldrh	r3, [r5, #12]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d907      	bls.n	80093e6 <_fwalk_reent+0x3a>
 80093d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093da:	3301      	adds	r3, #1
 80093dc:	d003      	beq.n	80093e6 <_fwalk_reent+0x3a>
 80093de:	4629      	mov	r1, r5
 80093e0:	4630      	mov	r0, r6
 80093e2:	47c0      	blx	r8
 80093e4:	4307      	orrs	r7, r0
 80093e6:	3568      	adds	r5, #104	; 0x68
 80093e8:	e7e9      	b.n	80093be <_fwalk_reent+0x12>
	...

080093ec <_localeconv_r>:
 80093ec:	4800      	ldr	r0, [pc, #0]	; (80093f0 <_localeconv_r+0x4>)
 80093ee:	4770      	bx	lr
 80093f0:	20000214 	.word	0x20000214

080093f4 <__retarget_lock_init_recursive>:
 80093f4:	4770      	bx	lr

080093f6 <__retarget_lock_acquire_recursive>:
 80093f6:	4770      	bx	lr

080093f8 <__retarget_lock_release_recursive>:
 80093f8:	4770      	bx	lr

080093fa <__swhatbuf_r>:
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	460e      	mov	r6, r1
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	2900      	cmp	r1, #0
 8009404:	b096      	sub	sp, #88	; 0x58
 8009406:	4614      	mov	r4, r2
 8009408:	461d      	mov	r5, r3
 800940a:	da08      	bge.n	800941e <__swhatbuf_r+0x24>
 800940c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	061a      	lsls	r2, r3, #24
 8009416:	d410      	bmi.n	800943a <__swhatbuf_r+0x40>
 8009418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941c:	e00e      	b.n	800943c <__swhatbuf_r+0x42>
 800941e:	466a      	mov	r2, sp
 8009420:	f000 ff42 	bl	800a2a8 <_fstat_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	dbf1      	blt.n	800940c <__swhatbuf_r+0x12>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800942e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009432:	425a      	negs	r2, r3
 8009434:	415a      	adcs	r2, r3
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	e7ee      	b.n	8009418 <__swhatbuf_r+0x1e>
 800943a:	2340      	movs	r3, #64	; 0x40
 800943c:	2000      	movs	r0, #0
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	b016      	add	sp, #88	; 0x58
 8009442:	bd70      	pop	{r4, r5, r6, pc}

08009444 <__smakebuf_r>:
 8009444:	898b      	ldrh	r3, [r1, #12]
 8009446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009448:	079d      	lsls	r5, r3, #30
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	d507      	bpl.n	8009460 <__smakebuf_r+0x1c>
 8009450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	2301      	movs	r3, #1
 800945a:	6163      	str	r3, [r4, #20]
 800945c:	b002      	add	sp, #8
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	ab01      	add	r3, sp, #4
 8009462:	466a      	mov	r2, sp
 8009464:	f7ff ffc9 	bl	80093fa <__swhatbuf_r>
 8009468:	9900      	ldr	r1, [sp, #0]
 800946a:	4605      	mov	r5, r0
 800946c:	4630      	mov	r0, r6
 800946e:	f7fe f9a5 	bl	80077bc <_malloc_r>
 8009472:	b948      	cbnz	r0, 8009488 <__smakebuf_r+0x44>
 8009474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d4ef      	bmi.n	800945c <__smakebuf_r+0x18>
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7e3      	b.n	8009450 <__smakebuf_r+0xc>
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <__smakebuf_r+0x7c>)
 800948a:	62b3      	str	r3, [r6, #40]	; 0x28
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	b15b      	cbz	r3, 80094b8 <__smakebuf_r+0x74>
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 ff11 	bl	800a2cc <_isatty_r>
 80094aa:	b128      	cbz	r0, 80094b8 <__smakebuf_r+0x74>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	89a0      	ldrh	r0, [r4, #12]
 80094ba:	4305      	orrs	r5, r0
 80094bc:	81a5      	strh	r5, [r4, #12]
 80094be:	e7cd      	b.n	800945c <__smakebuf_r+0x18>
 80094c0:	08009249 	.word	0x08009249

080094c4 <__malloc_lock>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__malloc_lock+0x8>)
 80094c6:	f7ff bf96 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 80094ca:	bf00      	nop
 80094cc:	20000538 	.word	0x20000538

080094d0 <__malloc_unlock>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__malloc_unlock+0x8>)
 80094d2:	f7ff bf91 	b.w	80093f8 <__retarget_lock_release_recursive>
 80094d6:	bf00      	nop
 80094d8:	20000538 	.word	0x20000538

080094dc <_Balloc>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	b976      	cbnz	r6, 8009504 <_Balloc+0x28>
 80094e6:	2010      	movs	r0, #16
 80094e8:	f7fe f8de 	bl	80076a8 <malloc>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6260      	str	r0, [r4, #36]	; 0x24
 80094f0:	b920      	cbnz	r0, 80094fc <_Balloc+0x20>
 80094f2:	4b18      	ldr	r3, [pc, #96]	; (8009554 <_Balloc+0x78>)
 80094f4:	4818      	ldr	r0, [pc, #96]	; (8009558 <_Balloc+0x7c>)
 80094f6:	2166      	movs	r1, #102	; 0x66
 80094f8:	f000 fe96 	bl	800a228 <__assert_func>
 80094fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009500:	6006      	str	r6, [r0, #0]
 8009502:	60c6      	str	r6, [r0, #12]
 8009504:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009506:	68f3      	ldr	r3, [r6, #12]
 8009508:	b183      	cbz	r3, 800952c <_Balloc+0x50>
 800950a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009512:	b9b8      	cbnz	r0, 8009544 <_Balloc+0x68>
 8009514:	2101      	movs	r1, #1
 8009516:	fa01 f605 	lsl.w	r6, r1, r5
 800951a:	1d72      	adds	r2, r6, #5
 800951c:	0092      	lsls	r2, r2, #2
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fb60 	bl	8009be4 <_calloc_r>
 8009524:	b160      	cbz	r0, 8009540 <_Balloc+0x64>
 8009526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800952a:	e00e      	b.n	800954a <_Balloc+0x6e>
 800952c:	2221      	movs	r2, #33	; 0x21
 800952e:	2104      	movs	r1, #4
 8009530:	4620      	mov	r0, r4
 8009532:	f000 fb57 	bl	8009be4 <_calloc_r>
 8009536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009538:	60f0      	str	r0, [r6, #12]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e4      	bne.n	800950a <_Balloc+0x2e>
 8009540:	2000      	movs	r0, #0
 8009542:	bd70      	pop	{r4, r5, r6, pc}
 8009544:	6802      	ldr	r2, [r0, #0]
 8009546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800954a:	2300      	movs	r3, #0
 800954c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009550:	e7f7      	b.n	8009542 <_Balloc+0x66>
 8009552:	bf00      	nop
 8009554:	0800e135 	.word	0x0800e135
 8009558:	0800e218 	.word	0x0800e218

0800955c <_Bfree>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009560:	4605      	mov	r5, r0
 8009562:	460c      	mov	r4, r1
 8009564:	b976      	cbnz	r6, 8009584 <_Bfree+0x28>
 8009566:	2010      	movs	r0, #16
 8009568:	f7fe f89e 	bl	80076a8 <malloc>
 800956c:	4602      	mov	r2, r0
 800956e:	6268      	str	r0, [r5, #36]	; 0x24
 8009570:	b920      	cbnz	r0, 800957c <_Bfree+0x20>
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <_Bfree+0x3c>)
 8009574:	4809      	ldr	r0, [pc, #36]	; (800959c <_Bfree+0x40>)
 8009576:	218a      	movs	r1, #138	; 0x8a
 8009578:	f000 fe56 	bl	800a228 <__assert_func>
 800957c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009580:	6006      	str	r6, [r0, #0]
 8009582:	60c6      	str	r6, [r0, #12]
 8009584:	b13c      	cbz	r4, 8009596 <_Bfree+0x3a>
 8009586:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009588:	6862      	ldr	r2, [r4, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009590:	6021      	str	r1, [r4, #0]
 8009592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	0800e135 	.word	0x0800e135
 800959c:	0800e218 	.word	0x0800e218

080095a0 <__multadd>:
 80095a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a4:	690d      	ldr	r5, [r1, #16]
 80095a6:	4607      	mov	r7, r0
 80095a8:	460c      	mov	r4, r1
 80095aa:	461e      	mov	r6, r3
 80095ac:	f101 0c14 	add.w	ip, r1, #20
 80095b0:	2000      	movs	r0, #0
 80095b2:	f8dc 3000 	ldr.w	r3, [ip]
 80095b6:	b299      	uxth	r1, r3
 80095b8:	fb02 6101 	mla	r1, r2, r1, r6
 80095bc:	0c1e      	lsrs	r6, r3, #16
 80095be:	0c0b      	lsrs	r3, r1, #16
 80095c0:	fb02 3306 	mla	r3, r2, r6, r3
 80095c4:	b289      	uxth	r1, r1
 80095c6:	3001      	adds	r0, #1
 80095c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095cc:	4285      	cmp	r5, r0
 80095ce:	f84c 1b04 	str.w	r1, [ip], #4
 80095d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095d6:	dcec      	bgt.n	80095b2 <__multadd+0x12>
 80095d8:	b30e      	cbz	r6, 800961e <__multadd+0x7e>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	42ab      	cmp	r3, r5
 80095de:	dc19      	bgt.n	8009614 <__multadd+0x74>
 80095e0:	6861      	ldr	r1, [r4, #4]
 80095e2:	4638      	mov	r0, r7
 80095e4:	3101      	adds	r1, #1
 80095e6:	f7ff ff79 	bl	80094dc <_Balloc>
 80095ea:	4680      	mov	r8, r0
 80095ec:	b928      	cbnz	r0, 80095fa <__multadd+0x5a>
 80095ee:	4602      	mov	r2, r0
 80095f0:	4b0c      	ldr	r3, [pc, #48]	; (8009624 <__multadd+0x84>)
 80095f2:	480d      	ldr	r0, [pc, #52]	; (8009628 <__multadd+0x88>)
 80095f4:	21b5      	movs	r1, #181	; 0xb5
 80095f6:	f000 fe17 	bl	800a228 <__assert_func>
 80095fa:	6922      	ldr	r2, [r4, #16]
 80095fc:	3202      	adds	r2, #2
 80095fe:	f104 010c 	add.w	r1, r4, #12
 8009602:	0092      	lsls	r2, r2, #2
 8009604:	300c      	adds	r0, #12
 8009606:	f7fe f857 	bl	80076b8 <memcpy>
 800960a:	4621      	mov	r1, r4
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff ffa5 	bl	800955c <_Bfree>
 8009612:	4644      	mov	r4, r8
 8009614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009618:	3501      	adds	r5, #1
 800961a:	615e      	str	r6, [r3, #20]
 800961c:	6125      	str	r5, [r4, #16]
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009624:	0800e1a7 	.word	0x0800e1a7
 8009628:	0800e218 	.word	0x0800e218

0800962c <__hi0bits>:
 800962c:	0c03      	lsrs	r3, r0, #16
 800962e:	041b      	lsls	r3, r3, #16
 8009630:	b9d3      	cbnz	r3, 8009668 <__hi0bits+0x3c>
 8009632:	0400      	lsls	r0, r0, #16
 8009634:	2310      	movs	r3, #16
 8009636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800963a:	bf04      	itt	eq
 800963c:	0200      	lsleq	r0, r0, #8
 800963e:	3308      	addeq	r3, #8
 8009640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009644:	bf04      	itt	eq
 8009646:	0100      	lsleq	r0, r0, #4
 8009648:	3304      	addeq	r3, #4
 800964a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800964e:	bf04      	itt	eq
 8009650:	0080      	lsleq	r0, r0, #2
 8009652:	3302      	addeq	r3, #2
 8009654:	2800      	cmp	r0, #0
 8009656:	db05      	blt.n	8009664 <__hi0bits+0x38>
 8009658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800965c:	f103 0301 	add.w	r3, r3, #1
 8009660:	bf08      	it	eq
 8009662:	2320      	moveq	r3, #32
 8009664:	4618      	mov	r0, r3
 8009666:	4770      	bx	lr
 8009668:	2300      	movs	r3, #0
 800966a:	e7e4      	b.n	8009636 <__hi0bits+0xa>

0800966c <__lo0bits>:
 800966c:	6803      	ldr	r3, [r0, #0]
 800966e:	f013 0207 	ands.w	r2, r3, #7
 8009672:	4601      	mov	r1, r0
 8009674:	d00b      	beq.n	800968e <__lo0bits+0x22>
 8009676:	07da      	lsls	r2, r3, #31
 8009678:	d423      	bmi.n	80096c2 <__lo0bits+0x56>
 800967a:	0798      	lsls	r0, r3, #30
 800967c:	bf49      	itett	mi
 800967e:	085b      	lsrmi	r3, r3, #1
 8009680:	089b      	lsrpl	r3, r3, #2
 8009682:	2001      	movmi	r0, #1
 8009684:	600b      	strmi	r3, [r1, #0]
 8009686:	bf5c      	itt	pl
 8009688:	600b      	strpl	r3, [r1, #0]
 800968a:	2002      	movpl	r0, #2
 800968c:	4770      	bx	lr
 800968e:	b298      	uxth	r0, r3
 8009690:	b9a8      	cbnz	r0, 80096be <__lo0bits+0x52>
 8009692:	0c1b      	lsrs	r3, r3, #16
 8009694:	2010      	movs	r0, #16
 8009696:	b2da      	uxtb	r2, r3
 8009698:	b90a      	cbnz	r2, 800969e <__lo0bits+0x32>
 800969a:	3008      	adds	r0, #8
 800969c:	0a1b      	lsrs	r3, r3, #8
 800969e:	071a      	lsls	r2, r3, #28
 80096a0:	bf04      	itt	eq
 80096a2:	091b      	lsreq	r3, r3, #4
 80096a4:	3004      	addeq	r0, #4
 80096a6:	079a      	lsls	r2, r3, #30
 80096a8:	bf04      	itt	eq
 80096aa:	089b      	lsreq	r3, r3, #2
 80096ac:	3002      	addeq	r0, #2
 80096ae:	07da      	lsls	r2, r3, #31
 80096b0:	d403      	bmi.n	80096ba <__lo0bits+0x4e>
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	f100 0001 	add.w	r0, r0, #1
 80096b8:	d005      	beq.n	80096c6 <__lo0bits+0x5a>
 80096ba:	600b      	str	r3, [r1, #0]
 80096bc:	4770      	bx	lr
 80096be:	4610      	mov	r0, r2
 80096c0:	e7e9      	b.n	8009696 <__lo0bits+0x2a>
 80096c2:	2000      	movs	r0, #0
 80096c4:	4770      	bx	lr
 80096c6:	2020      	movs	r0, #32
 80096c8:	4770      	bx	lr
	...

080096cc <__i2b>:
 80096cc:	b510      	push	{r4, lr}
 80096ce:	460c      	mov	r4, r1
 80096d0:	2101      	movs	r1, #1
 80096d2:	f7ff ff03 	bl	80094dc <_Balloc>
 80096d6:	4602      	mov	r2, r0
 80096d8:	b928      	cbnz	r0, 80096e6 <__i2b+0x1a>
 80096da:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <__i2b+0x24>)
 80096dc:	4805      	ldr	r0, [pc, #20]	; (80096f4 <__i2b+0x28>)
 80096de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096e2:	f000 fda1 	bl	800a228 <__assert_func>
 80096e6:	2301      	movs	r3, #1
 80096e8:	6144      	str	r4, [r0, #20]
 80096ea:	6103      	str	r3, [r0, #16]
 80096ec:	bd10      	pop	{r4, pc}
 80096ee:	bf00      	nop
 80096f0:	0800e1a7 	.word	0x0800e1a7
 80096f4:	0800e218 	.word	0x0800e218

080096f8 <__multiply>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	4691      	mov	r9, r2
 80096fe:	690a      	ldr	r2, [r1, #16]
 8009700:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009704:	429a      	cmp	r2, r3
 8009706:	bfb8      	it	lt
 8009708:	460b      	movlt	r3, r1
 800970a:	460c      	mov	r4, r1
 800970c:	bfbc      	itt	lt
 800970e:	464c      	movlt	r4, r9
 8009710:	4699      	movlt	r9, r3
 8009712:	6927      	ldr	r7, [r4, #16]
 8009714:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009718:	68a3      	ldr	r3, [r4, #8]
 800971a:	6861      	ldr	r1, [r4, #4]
 800971c:	eb07 060a 	add.w	r6, r7, sl
 8009720:	42b3      	cmp	r3, r6
 8009722:	b085      	sub	sp, #20
 8009724:	bfb8      	it	lt
 8009726:	3101      	addlt	r1, #1
 8009728:	f7ff fed8 	bl	80094dc <_Balloc>
 800972c:	b930      	cbnz	r0, 800973c <__multiply+0x44>
 800972e:	4602      	mov	r2, r0
 8009730:	4b44      	ldr	r3, [pc, #272]	; (8009844 <__multiply+0x14c>)
 8009732:	4845      	ldr	r0, [pc, #276]	; (8009848 <__multiply+0x150>)
 8009734:	f240 115d 	movw	r1, #349	; 0x15d
 8009738:	f000 fd76 	bl	800a228 <__assert_func>
 800973c:	f100 0514 	add.w	r5, r0, #20
 8009740:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009744:	462b      	mov	r3, r5
 8009746:	2200      	movs	r2, #0
 8009748:	4543      	cmp	r3, r8
 800974a:	d321      	bcc.n	8009790 <__multiply+0x98>
 800974c:	f104 0314 	add.w	r3, r4, #20
 8009750:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009754:	f109 0314 	add.w	r3, r9, #20
 8009758:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800975c:	9202      	str	r2, [sp, #8]
 800975e:	1b3a      	subs	r2, r7, r4
 8009760:	3a15      	subs	r2, #21
 8009762:	f022 0203 	bic.w	r2, r2, #3
 8009766:	3204      	adds	r2, #4
 8009768:	f104 0115 	add.w	r1, r4, #21
 800976c:	428f      	cmp	r7, r1
 800976e:	bf38      	it	cc
 8009770:	2204      	movcc	r2, #4
 8009772:	9201      	str	r2, [sp, #4]
 8009774:	9a02      	ldr	r2, [sp, #8]
 8009776:	9303      	str	r3, [sp, #12]
 8009778:	429a      	cmp	r2, r3
 800977a:	d80c      	bhi.n	8009796 <__multiply+0x9e>
 800977c:	2e00      	cmp	r6, #0
 800977e:	dd03      	ble.n	8009788 <__multiply+0x90>
 8009780:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009784:	2b00      	cmp	r3, #0
 8009786:	d05a      	beq.n	800983e <__multiply+0x146>
 8009788:	6106      	str	r6, [r0, #16]
 800978a:	b005      	add	sp, #20
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	f843 2b04 	str.w	r2, [r3], #4
 8009794:	e7d8      	b.n	8009748 <__multiply+0x50>
 8009796:	f8b3 a000 	ldrh.w	sl, [r3]
 800979a:	f1ba 0f00 	cmp.w	sl, #0
 800979e:	d024      	beq.n	80097ea <__multiply+0xf2>
 80097a0:	f104 0e14 	add.w	lr, r4, #20
 80097a4:	46a9      	mov	r9, r5
 80097a6:	f04f 0c00 	mov.w	ip, #0
 80097aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097ae:	f8d9 1000 	ldr.w	r1, [r9]
 80097b2:	fa1f fb82 	uxth.w	fp, r2
 80097b6:	b289      	uxth	r1, r1
 80097b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80097bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097c0:	f8d9 2000 	ldr.w	r2, [r9]
 80097c4:	4461      	add	r1, ip
 80097c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80097ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097d2:	b289      	uxth	r1, r1
 80097d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097d8:	4577      	cmp	r7, lr
 80097da:	f849 1b04 	str.w	r1, [r9], #4
 80097de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097e2:	d8e2      	bhi.n	80097aa <__multiply+0xb2>
 80097e4:	9a01      	ldr	r2, [sp, #4]
 80097e6:	f845 c002 	str.w	ip, [r5, r2]
 80097ea:	9a03      	ldr	r2, [sp, #12]
 80097ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097f0:	3304      	adds	r3, #4
 80097f2:	f1b9 0f00 	cmp.w	r9, #0
 80097f6:	d020      	beq.n	800983a <__multiply+0x142>
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	f104 0c14 	add.w	ip, r4, #20
 80097fe:	46ae      	mov	lr, r5
 8009800:	f04f 0a00 	mov.w	sl, #0
 8009804:	f8bc b000 	ldrh.w	fp, [ip]
 8009808:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800980c:	fb09 220b 	mla	r2, r9, fp, r2
 8009810:	4492      	add	sl, r2
 8009812:	b289      	uxth	r1, r1
 8009814:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009818:	f84e 1b04 	str.w	r1, [lr], #4
 800981c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009820:	f8be 1000 	ldrh.w	r1, [lr]
 8009824:	0c12      	lsrs	r2, r2, #16
 8009826:	fb09 1102 	mla	r1, r9, r2, r1
 800982a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800982e:	4567      	cmp	r7, ip
 8009830:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009834:	d8e6      	bhi.n	8009804 <__multiply+0x10c>
 8009836:	9a01      	ldr	r2, [sp, #4]
 8009838:	50a9      	str	r1, [r5, r2]
 800983a:	3504      	adds	r5, #4
 800983c:	e79a      	b.n	8009774 <__multiply+0x7c>
 800983e:	3e01      	subs	r6, #1
 8009840:	e79c      	b.n	800977c <__multiply+0x84>
 8009842:	bf00      	nop
 8009844:	0800e1a7 	.word	0x0800e1a7
 8009848:	0800e218 	.word	0x0800e218

0800984c <__pow5mult>:
 800984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009850:	4615      	mov	r5, r2
 8009852:	f012 0203 	ands.w	r2, r2, #3
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	d007      	beq.n	800986c <__pow5mult+0x20>
 800985c:	4c25      	ldr	r4, [pc, #148]	; (80098f4 <__pow5mult+0xa8>)
 800985e:	3a01      	subs	r2, #1
 8009860:	2300      	movs	r3, #0
 8009862:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009866:	f7ff fe9b 	bl	80095a0 <__multadd>
 800986a:	4607      	mov	r7, r0
 800986c:	10ad      	asrs	r5, r5, #2
 800986e:	d03d      	beq.n	80098ec <__pow5mult+0xa0>
 8009870:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009872:	b97c      	cbnz	r4, 8009894 <__pow5mult+0x48>
 8009874:	2010      	movs	r0, #16
 8009876:	f7fd ff17 	bl	80076a8 <malloc>
 800987a:	4602      	mov	r2, r0
 800987c:	6270      	str	r0, [r6, #36]	; 0x24
 800987e:	b928      	cbnz	r0, 800988c <__pow5mult+0x40>
 8009880:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <__pow5mult+0xac>)
 8009882:	481e      	ldr	r0, [pc, #120]	; (80098fc <__pow5mult+0xb0>)
 8009884:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009888:	f000 fcce 	bl	800a228 <__assert_func>
 800988c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009890:	6004      	str	r4, [r0, #0]
 8009892:	60c4      	str	r4, [r0, #12]
 8009894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800989c:	b94c      	cbnz	r4, 80098b2 <__pow5mult+0x66>
 800989e:	f240 2171 	movw	r1, #625	; 0x271
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff ff12 	bl	80096cc <__i2b>
 80098a8:	2300      	movs	r3, #0
 80098aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80098ae:	4604      	mov	r4, r0
 80098b0:	6003      	str	r3, [r0, #0]
 80098b2:	f04f 0900 	mov.w	r9, #0
 80098b6:	07eb      	lsls	r3, r5, #31
 80098b8:	d50a      	bpl.n	80098d0 <__pow5mult+0x84>
 80098ba:	4639      	mov	r1, r7
 80098bc:	4622      	mov	r2, r4
 80098be:	4630      	mov	r0, r6
 80098c0:	f7ff ff1a 	bl	80096f8 <__multiply>
 80098c4:	4639      	mov	r1, r7
 80098c6:	4680      	mov	r8, r0
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff fe47 	bl	800955c <_Bfree>
 80098ce:	4647      	mov	r7, r8
 80098d0:	106d      	asrs	r5, r5, #1
 80098d2:	d00b      	beq.n	80098ec <__pow5mult+0xa0>
 80098d4:	6820      	ldr	r0, [r4, #0]
 80098d6:	b938      	cbnz	r0, 80098e8 <__pow5mult+0x9c>
 80098d8:	4622      	mov	r2, r4
 80098da:	4621      	mov	r1, r4
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ff0b 	bl	80096f8 <__multiply>
 80098e2:	6020      	str	r0, [r4, #0]
 80098e4:	f8c0 9000 	str.w	r9, [r0]
 80098e8:	4604      	mov	r4, r0
 80098ea:	e7e4      	b.n	80098b6 <__pow5mult+0x6a>
 80098ec:	4638      	mov	r0, r7
 80098ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f2:	bf00      	nop
 80098f4:	0800e368 	.word	0x0800e368
 80098f8:	0800e135 	.word	0x0800e135
 80098fc:	0800e218 	.word	0x0800e218

08009900 <__lshift>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	6849      	ldr	r1, [r1, #4]
 8009908:	6923      	ldr	r3, [r4, #16]
 800990a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800990e:	68a3      	ldr	r3, [r4, #8]
 8009910:	4607      	mov	r7, r0
 8009912:	4691      	mov	r9, r2
 8009914:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009918:	f108 0601 	add.w	r6, r8, #1
 800991c:	42b3      	cmp	r3, r6
 800991e:	db0b      	blt.n	8009938 <__lshift+0x38>
 8009920:	4638      	mov	r0, r7
 8009922:	f7ff fddb 	bl	80094dc <_Balloc>
 8009926:	4605      	mov	r5, r0
 8009928:	b948      	cbnz	r0, 800993e <__lshift+0x3e>
 800992a:	4602      	mov	r2, r0
 800992c:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <__lshift+0xd8>)
 800992e:	482b      	ldr	r0, [pc, #172]	; (80099dc <__lshift+0xdc>)
 8009930:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009934:	f000 fc78 	bl	800a228 <__assert_func>
 8009938:	3101      	adds	r1, #1
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	e7ee      	b.n	800991c <__lshift+0x1c>
 800993e:	2300      	movs	r3, #0
 8009940:	f100 0114 	add.w	r1, r0, #20
 8009944:	f100 0210 	add.w	r2, r0, #16
 8009948:	4618      	mov	r0, r3
 800994a:	4553      	cmp	r3, sl
 800994c:	db37      	blt.n	80099be <__lshift+0xbe>
 800994e:	6920      	ldr	r0, [r4, #16]
 8009950:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009954:	f104 0314 	add.w	r3, r4, #20
 8009958:	f019 091f 	ands.w	r9, r9, #31
 800995c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009964:	d02f      	beq.n	80099c6 <__lshift+0xc6>
 8009966:	f1c9 0e20 	rsb	lr, r9, #32
 800996a:	468a      	mov	sl, r1
 800996c:	f04f 0c00 	mov.w	ip, #0
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	fa02 f209 	lsl.w	r2, r2, r9
 8009976:	ea42 020c 	orr.w	r2, r2, ip
 800997a:	f84a 2b04 	str.w	r2, [sl], #4
 800997e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009982:	4298      	cmp	r0, r3
 8009984:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009988:	d8f2      	bhi.n	8009970 <__lshift+0x70>
 800998a:	1b03      	subs	r3, r0, r4
 800998c:	3b15      	subs	r3, #21
 800998e:	f023 0303 	bic.w	r3, r3, #3
 8009992:	3304      	adds	r3, #4
 8009994:	f104 0215 	add.w	r2, r4, #21
 8009998:	4290      	cmp	r0, r2
 800999a:	bf38      	it	cc
 800999c:	2304      	movcc	r3, #4
 800999e:	f841 c003 	str.w	ip, [r1, r3]
 80099a2:	f1bc 0f00 	cmp.w	ip, #0
 80099a6:	d001      	beq.n	80099ac <__lshift+0xac>
 80099a8:	f108 0602 	add.w	r6, r8, #2
 80099ac:	3e01      	subs	r6, #1
 80099ae:	4638      	mov	r0, r7
 80099b0:	612e      	str	r6, [r5, #16]
 80099b2:	4621      	mov	r1, r4
 80099b4:	f7ff fdd2 	bl	800955c <_Bfree>
 80099b8:	4628      	mov	r0, r5
 80099ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099be:	f842 0f04 	str.w	r0, [r2, #4]!
 80099c2:	3301      	adds	r3, #1
 80099c4:	e7c1      	b.n	800994a <__lshift+0x4a>
 80099c6:	3904      	subs	r1, #4
 80099c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80099d0:	4298      	cmp	r0, r3
 80099d2:	d8f9      	bhi.n	80099c8 <__lshift+0xc8>
 80099d4:	e7ea      	b.n	80099ac <__lshift+0xac>
 80099d6:	bf00      	nop
 80099d8:	0800e1a7 	.word	0x0800e1a7
 80099dc:	0800e218 	.word	0x0800e218

080099e0 <__mcmp>:
 80099e0:	b530      	push	{r4, r5, lr}
 80099e2:	6902      	ldr	r2, [r0, #16]
 80099e4:	690c      	ldr	r4, [r1, #16]
 80099e6:	1b12      	subs	r2, r2, r4
 80099e8:	d10e      	bne.n	8009a08 <__mcmp+0x28>
 80099ea:	f100 0314 	add.w	r3, r0, #20
 80099ee:	3114      	adds	r1, #20
 80099f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009a00:	42a5      	cmp	r5, r4
 8009a02:	d003      	beq.n	8009a0c <__mcmp+0x2c>
 8009a04:	d305      	bcc.n	8009a12 <__mcmp+0x32>
 8009a06:	2201      	movs	r2, #1
 8009a08:	4610      	mov	r0, r2
 8009a0a:	bd30      	pop	{r4, r5, pc}
 8009a0c:	4283      	cmp	r3, r0
 8009a0e:	d3f3      	bcc.n	80099f8 <__mcmp+0x18>
 8009a10:	e7fa      	b.n	8009a08 <__mcmp+0x28>
 8009a12:	f04f 32ff 	mov.w	r2, #4294967295
 8009a16:	e7f7      	b.n	8009a08 <__mcmp+0x28>

08009a18 <__mdiff>:
 8009a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	460c      	mov	r4, r1
 8009a1e:	4606      	mov	r6, r0
 8009a20:	4611      	mov	r1, r2
 8009a22:	4620      	mov	r0, r4
 8009a24:	4690      	mov	r8, r2
 8009a26:	f7ff ffdb 	bl	80099e0 <__mcmp>
 8009a2a:	1e05      	subs	r5, r0, #0
 8009a2c:	d110      	bne.n	8009a50 <__mdiff+0x38>
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4630      	mov	r0, r6
 8009a32:	f7ff fd53 	bl	80094dc <_Balloc>
 8009a36:	b930      	cbnz	r0, 8009a46 <__mdiff+0x2e>
 8009a38:	4b3a      	ldr	r3, [pc, #232]	; (8009b24 <__mdiff+0x10c>)
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	f240 2132 	movw	r1, #562	; 0x232
 8009a40:	4839      	ldr	r0, [pc, #228]	; (8009b28 <__mdiff+0x110>)
 8009a42:	f000 fbf1 	bl	800a228 <__assert_func>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a50:	bfa4      	itt	ge
 8009a52:	4643      	movge	r3, r8
 8009a54:	46a0      	movge	r8, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a5c:	bfa6      	itte	ge
 8009a5e:	461c      	movge	r4, r3
 8009a60:	2500      	movge	r5, #0
 8009a62:	2501      	movlt	r5, #1
 8009a64:	f7ff fd3a 	bl	80094dc <_Balloc>
 8009a68:	b920      	cbnz	r0, 8009a74 <__mdiff+0x5c>
 8009a6a:	4b2e      	ldr	r3, [pc, #184]	; (8009b24 <__mdiff+0x10c>)
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a72:	e7e5      	b.n	8009a40 <__mdiff+0x28>
 8009a74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a78:	6926      	ldr	r6, [r4, #16]
 8009a7a:	60c5      	str	r5, [r0, #12]
 8009a7c:	f104 0914 	add.w	r9, r4, #20
 8009a80:	f108 0514 	add.w	r5, r8, #20
 8009a84:	f100 0e14 	add.w	lr, r0, #20
 8009a88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a90:	f108 0210 	add.w	r2, r8, #16
 8009a94:	46f2      	mov	sl, lr
 8009a96:	2100      	movs	r1, #0
 8009a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009aa0:	fa1f f883 	uxth.w	r8, r3
 8009aa4:	fa11 f18b 	uxtah	r1, r1, fp
 8009aa8:	0c1b      	lsrs	r3, r3, #16
 8009aaa:	eba1 0808 	sub.w	r8, r1, r8
 8009aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ab2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ab6:	fa1f f888 	uxth.w	r8, r8
 8009aba:	1419      	asrs	r1, r3, #16
 8009abc:	454e      	cmp	r6, r9
 8009abe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8009ac6:	d8e7      	bhi.n	8009a98 <__mdiff+0x80>
 8009ac8:	1b33      	subs	r3, r6, r4
 8009aca:	3b15      	subs	r3, #21
 8009acc:	f023 0303 	bic.w	r3, r3, #3
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	3415      	adds	r4, #21
 8009ad4:	42a6      	cmp	r6, r4
 8009ad6:	bf38      	it	cc
 8009ad8:	2304      	movcc	r3, #4
 8009ada:	441d      	add	r5, r3
 8009adc:	4473      	add	r3, lr
 8009ade:	469e      	mov	lr, r3
 8009ae0:	462e      	mov	r6, r5
 8009ae2:	4566      	cmp	r6, ip
 8009ae4:	d30e      	bcc.n	8009b04 <__mdiff+0xec>
 8009ae6:	f10c 0203 	add.w	r2, ip, #3
 8009aea:	1b52      	subs	r2, r2, r5
 8009aec:	f022 0203 	bic.w	r2, r2, #3
 8009af0:	3d03      	subs	r5, #3
 8009af2:	45ac      	cmp	ip, r5
 8009af4:	bf38      	it	cc
 8009af6:	2200      	movcc	r2, #0
 8009af8:	441a      	add	r2, r3
 8009afa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009afe:	b17b      	cbz	r3, 8009b20 <__mdiff+0x108>
 8009b00:	6107      	str	r7, [r0, #16]
 8009b02:	e7a3      	b.n	8009a4c <__mdiff+0x34>
 8009b04:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b08:	fa11 f288 	uxtah	r2, r1, r8
 8009b0c:	1414      	asrs	r4, r2, #16
 8009b0e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b12:	b292      	uxth	r2, r2
 8009b14:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b18:	f84e 2b04 	str.w	r2, [lr], #4
 8009b1c:	1421      	asrs	r1, r4, #16
 8009b1e:	e7e0      	b.n	8009ae2 <__mdiff+0xca>
 8009b20:	3f01      	subs	r7, #1
 8009b22:	e7ea      	b.n	8009afa <__mdiff+0xe2>
 8009b24:	0800e1a7 	.word	0x0800e1a7
 8009b28:	0800e218 	.word	0x0800e218

08009b2c <__d2b>:
 8009b2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b30:	4689      	mov	r9, r1
 8009b32:	2101      	movs	r1, #1
 8009b34:	ec57 6b10 	vmov	r6, r7, d0
 8009b38:	4690      	mov	r8, r2
 8009b3a:	f7ff fccf 	bl	80094dc <_Balloc>
 8009b3e:	4604      	mov	r4, r0
 8009b40:	b930      	cbnz	r0, 8009b50 <__d2b+0x24>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4b25      	ldr	r3, [pc, #148]	; (8009bdc <__d2b+0xb0>)
 8009b46:	4826      	ldr	r0, [pc, #152]	; (8009be0 <__d2b+0xb4>)
 8009b48:	f240 310a 	movw	r1, #778	; 0x30a
 8009b4c:	f000 fb6c 	bl	800a228 <__assert_func>
 8009b50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b58:	bb35      	cbnz	r5, 8009ba8 <__d2b+0x7c>
 8009b5a:	2e00      	cmp	r6, #0
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	d028      	beq.n	8009bb2 <__d2b+0x86>
 8009b60:	4668      	mov	r0, sp
 8009b62:	9600      	str	r6, [sp, #0]
 8009b64:	f7ff fd82 	bl	800966c <__lo0bits>
 8009b68:	9900      	ldr	r1, [sp, #0]
 8009b6a:	b300      	cbz	r0, 8009bae <__d2b+0x82>
 8009b6c:	9a01      	ldr	r2, [sp, #4]
 8009b6e:	f1c0 0320 	rsb	r3, r0, #32
 8009b72:	fa02 f303 	lsl.w	r3, r2, r3
 8009b76:	430b      	orrs	r3, r1
 8009b78:	40c2      	lsrs	r2, r0
 8009b7a:	6163      	str	r3, [r4, #20]
 8009b7c:	9201      	str	r2, [sp, #4]
 8009b7e:	9b01      	ldr	r3, [sp, #4]
 8009b80:	61a3      	str	r3, [r4, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bf14      	ite	ne
 8009b86:	2202      	movne	r2, #2
 8009b88:	2201      	moveq	r2, #1
 8009b8a:	6122      	str	r2, [r4, #16]
 8009b8c:	b1d5      	cbz	r5, 8009bc4 <__d2b+0x98>
 8009b8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b92:	4405      	add	r5, r0
 8009b94:	f8c9 5000 	str.w	r5, [r9]
 8009b98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b9c:	f8c8 0000 	str.w	r0, [r8]
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	b003      	add	sp, #12
 8009ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bac:	e7d5      	b.n	8009b5a <__d2b+0x2e>
 8009bae:	6161      	str	r1, [r4, #20]
 8009bb0:	e7e5      	b.n	8009b7e <__d2b+0x52>
 8009bb2:	a801      	add	r0, sp, #4
 8009bb4:	f7ff fd5a 	bl	800966c <__lo0bits>
 8009bb8:	9b01      	ldr	r3, [sp, #4]
 8009bba:	6163      	str	r3, [r4, #20]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	6122      	str	r2, [r4, #16]
 8009bc0:	3020      	adds	r0, #32
 8009bc2:	e7e3      	b.n	8009b8c <__d2b+0x60>
 8009bc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bcc:	f8c9 0000 	str.w	r0, [r9]
 8009bd0:	6918      	ldr	r0, [r3, #16]
 8009bd2:	f7ff fd2b 	bl	800962c <__hi0bits>
 8009bd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bda:	e7df      	b.n	8009b9c <__d2b+0x70>
 8009bdc:	0800e1a7 	.word	0x0800e1a7
 8009be0:	0800e218 	.word	0x0800e218

08009be4 <_calloc_r>:
 8009be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be6:	fba1 2402 	umull	r2, r4, r1, r2
 8009bea:	b94c      	cbnz	r4, 8009c00 <_calloc_r+0x1c>
 8009bec:	4611      	mov	r1, r2
 8009bee:	9201      	str	r2, [sp, #4]
 8009bf0:	f7fd fde4 	bl	80077bc <_malloc_r>
 8009bf4:	9a01      	ldr	r2, [sp, #4]
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	b930      	cbnz	r0, 8009c08 <_calloc_r+0x24>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	b003      	add	sp, #12
 8009bfe:	bd30      	pop	{r4, r5, pc}
 8009c00:	220c      	movs	r2, #12
 8009c02:	6002      	str	r2, [r0, #0]
 8009c04:	2500      	movs	r5, #0
 8009c06:	e7f8      	b.n	8009bfa <_calloc_r+0x16>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	f7fd fd63 	bl	80076d4 <memset>
 8009c0e:	e7f4      	b.n	8009bfa <_calloc_r+0x16>

08009c10 <__ssputs_r>:
 8009c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c14:	688e      	ldr	r6, [r1, #8]
 8009c16:	429e      	cmp	r6, r3
 8009c18:	4682      	mov	sl, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	4690      	mov	r8, r2
 8009c1e:	461f      	mov	r7, r3
 8009c20:	d838      	bhi.n	8009c94 <__ssputs_r+0x84>
 8009c22:	898a      	ldrh	r2, [r1, #12]
 8009c24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c28:	d032      	beq.n	8009c90 <__ssputs_r+0x80>
 8009c2a:	6825      	ldr	r5, [r4, #0]
 8009c2c:	6909      	ldr	r1, [r1, #16]
 8009c2e:	eba5 0901 	sub.w	r9, r5, r1
 8009c32:	6965      	ldr	r5, [r4, #20]
 8009c34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	444b      	add	r3, r9
 8009c40:	106d      	asrs	r5, r5, #1
 8009c42:	429d      	cmp	r5, r3
 8009c44:	bf38      	it	cc
 8009c46:	461d      	movcc	r5, r3
 8009c48:	0553      	lsls	r3, r2, #21
 8009c4a:	d531      	bpl.n	8009cb0 <__ssputs_r+0xa0>
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	f7fd fdb5 	bl	80077bc <_malloc_r>
 8009c52:	4606      	mov	r6, r0
 8009c54:	b950      	cbnz	r0, 8009c6c <__ssputs_r+0x5c>
 8009c56:	230c      	movs	r3, #12
 8009c58:	f8ca 3000 	str.w	r3, [sl]
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c62:	81a3      	strh	r3, [r4, #12]
 8009c64:	f04f 30ff 	mov.w	r0, #4294967295
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	6921      	ldr	r1, [r4, #16]
 8009c6e:	464a      	mov	r2, r9
 8009c70:	f7fd fd22 	bl	80076b8 <memcpy>
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c7e:	81a3      	strh	r3, [r4, #12]
 8009c80:	6126      	str	r6, [r4, #16]
 8009c82:	6165      	str	r5, [r4, #20]
 8009c84:	444e      	add	r6, r9
 8009c86:	eba5 0509 	sub.w	r5, r5, r9
 8009c8a:	6026      	str	r6, [r4, #0]
 8009c8c:	60a5      	str	r5, [r4, #8]
 8009c8e:	463e      	mov	r6, r7
 8009c90:	42be      	cmp	r6, r7
 8009c92:	d900      	bls.n	8009c96 <__ssputs_r+0x86>
 8009c94:	463e      	mov	r6, r7
 8009c96:	6820      	ldr	r0, [r4, #0]
 8009c98:	4632      	mov	r2, r6
 8009c9a:	4641      	mov	r1, r8
 8009c9c:	f000 fb4a 	bl	800a334 <memmove>
 8009ca0:	68a3      	ldr	r3, [r4, #8]
 8009ca2:	1b9b      	subs	r3, r3, r6
 8009ca4:	60a3      	str	r3, [r4, #8]
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4433      	add	r3, r6
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e7db      	b.n	8009c68 <__ssputs_r+0x58>
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	f000 fb59 	bl	800a368 <_realloc_r>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d1e1      	bne.n	8009c80 <__ssputs_r+0x70>
 8009cbc:	6921      	ldr	r1, [r4, #16]
 8009cbe:	4650      	mov	r0, sl
 8009cc0:	f7fd fd10 	bl	80076e4 <_free_r>
 8009cc4:	e7c7      	b.n	8009c56 <__ssputs_r+0x46>
	...

08009cc8 <_svfiprintf_r>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	4698      	mov	r8, r3
 8009cce:	898b      	ldrh	r3, [r1, #12]
 8009cd0:	061b      	lsls	r3, r3, #24
 8009cd2:	b09d      	sub	sp, #116	; 0x74
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	460d      	mov	r5, r1
 8009cd8:	4614      	mov	r4, r2
 8009cda:	d50e      	bpl.n	8009cfa <_svfiprintf_r+0x32>
 8009cdc:	690b      	ldr	r3, [r1, #16]
 8009cde:	b963      	cbnz	r3, 8009cfa <_svfiprintf_r+0x32>
 8009ce0:	2140      	movs	r1, #64	; 0x40
 8009ce2:	f7fd fd6b 	bl	80077bc <_malloc_r>
 8009ce6:	6028      	str	r0, [r5, #0]
 8009ce8:	6128      	str	r0, [r5, #16]
 8009cea:	b920      	cbnz	r0, 8009cf6 <_svfiprintf_r+0x2e>
 8009cec:	230c      	movs	r3, #12
 8009cee:	603b      	str	r3, [r7, #0]
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e0d1      	b.n	8009e9a <_svfiprintf_r+0x1d2>
 8009cf6:	2340      	movs	r3, #64	; 0x40
 8009cf8:	616b      	str	r3, [r5, #20]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cfe:	2320      	movs	r3, #32
 8009d00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d08:	2330      	movs	r3, #48	; 0x30
 8009d0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009eb4 <_svfiprintf_r+0x1ec>
 8009d0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d12:	f04f 0901 	mov.w	r9, #1
 8009d16:	4623      	mov	r3, r4
 8009d18:	469a      	mov	sl, r3
 8009d1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d1e:	b10a      	cbz	r2, 8009d24 <_svfiprintf_r+0x5c>
 8009d20:	2a25      	cmp	r2, #37	; 0x25
 8009d22:	d1f9      	bne.n	8009d18 <_svfiprintf_r+0x50>
 8009d24:	ebba 0b04 	subs.w	fp, sl, r4
 8009d28:	d00b      	beq.n	8009d42 <_svfiprintf_r+0x7a>
 8009d2a:	465b      	mov	r3, fp
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff ff6d 	bl	8009c10 <__ssputs_r>
 8009d36:	3001      	adds	r0, #1
 8009d38:	f000 80aa 	beq.w	8009e90 <_svfiprintf_r+0x1c8>
 8009d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d3e:	445a      	add	r2, fp
 8009d40:	9209      	str	r2, [sp, #36]	; 0x24
 8009d42:	f89a 3000 	ldrb.w	r3, [sl]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 80a2 	beq.w	8009e90 <_svfiprintf_r+0x1c8>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8009d52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d56:	f10a 0a01 	add.w	sl, sl, #1
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	9307      	str	r3, [sp, #28]
 8009d5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d62:	931a      	str	r3, [sp, #104]	; 0x68
 8009d64:	4654      	mov	r4, sl
 8009d66:	2205      	movs	r2, #5
 8009d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d6c:	4851      	ldr	r0, [pc, #324]	; (8009eb4 <_svfiprintf_r+0x1ec>)
 8009d6e:	f7f6 fa57 	bl	8000220 <memchr>
 8009d72:	9a04      	ldr	r2, [sp, #16]
 8009d74:	b9d8      	cbnz	r0, 8009dae <_svfiprintf_r+0xe6>
 8009d76:	06d0      	lsls	r0, r2, #27
 8009d78:	bf44      	itt	mi
 8009d7a:	2320      	movmi	r3, #32
 8009d7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d80:	0711      	lsls	r1, r2, #28
 8009d82:	bf44      	itt	mi
 8009d84:	232b      	movmi	r3, #43	; 0x2b
 8009d86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d90:	d015      	beq.n	8009dbe <_svfiprintf_r+0xf6>
 8009d92:	9a07      	ldr	r2, [sp, #28]
 8009d94:	4654      	mov	r4, sl
 8009d96:	2000      	movs	r0, #0
 8009d98:	f04f 0c0a 	mov.w	ip, #10
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009da2:	3b30      	subs	r3, #48	; 0x30
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d94e      	bls.n	8009e46 <_svfiprintf_r+0x17e>
 8009da8:	b1b0      	cbz	r0, 8009dd8 <_svfiprintf_r+0x110>
 8009daa:	9207      	str	r2, [sp, #28]
 8009dac:	e014      	b.n	8009dd8 <_svfiprintf_r+0x110>
 8009dae:	eba0 0308 	sub.w	r3, r0, r8
 8009db2:	fa09 f303 	lsl.w	r3, r9, r3
 8009db6:	4313      	orrs	r3, r2
 8009db8:	9304      	str	r3, [sp, #16]
 8009dba:	46a2      	mov	sl, r4
 8009dbc:	e7d2      	b.n	8009d64 <_svfiprintf_r+0x9c>
 8009dbe:	9b03      	ldr	r3, [sp, #12]
 8009dc0:	1d19      	adds	r1, r3, #4
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	9103      	str	r1, [sp, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	bfbb      	ittet	lt
 8009dca:	425b      	neglt	r3, r3
 8009dcc:	f042 0202 	orrlt.w	r2, r2, #2
 8009dd0:	9307      	strge	r3, [sp, #28]
 8009dd2:	9307      	strlt	r3, [sp, #28]
 8009dd4:	bfb8      	it	lt
 8009dd6:	9204      	strlt	r2, [sp, #16]
 8009dd8:	7823      	ldrb	r3, [r4, #0]
 8009dda:	2b2e      	cmp	r3, #46	; 0x2e
 8009ddc:	d10c      	bne.n	8009df8 <_svfiprintf_r+0x130>
 8009dde:	7863      	ldrb	r3, [r4, #1]
 8009de0:	2b2a      	cmp	r3, #42	; 0x2a
 8009de2:	d135      	bne.n	8009e50 <_svfiprintf_r+0x188>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	1d1a      	adds	r2, r3, #4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	9203      	str	r2, [sp, #12]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bfb8      	it	lt
 8009df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009df4:	3402      	adds	r4, #2
 8009df6:	9305      	str	r3, [sp, #20]
 8009df8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ec4 <_svfiprintf_r+0x1fc>
 8009dfc:	7821      	ldrb	r1, [r4, #0]
 8009dfe:	2203      	movs	r2, #3
 8009e00:	4650      	mov	r0, sl
 8009e02:	f7f6 fa0d 	bl	8000220 <memchr>
 8009e06:	b140      	cbz	r0, 8009e1a <_svfiprintf_r+0x152>
 8009e08:	2340      	movs	r3, #64	; 0x40
 8009e0a:	eba0 000a 	sub.w	r0, r0, sl
 8009e0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	4303      	orrs	r3, r0
 8009e16:	3401      	adds	r4, #1
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e1e:	4826      	ldr	r0, [pc, #152]	; (8009eb8 <_svfiprintf_r+0x1f0>)
 8009e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e24:	2206      	movs	r2, #6
 8009e26:	f7f6 f9fb 	bl	8000220 <memchr>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d038      	beq.n	8009ea0 <_svfiprintf_r+0x1d8>
 8009e2e:	4b23      	ldr	r3, [pc, #140]	; (8009ebc <_svfiprintf_r+0x1f4>)
 8009e30:	bb1b      	cbnz	r3, 8009e7a <_svfiprintf_r+0x1b2>
 8009e32:	9b03      	ldr	r3, [sp, #12]
 8009e34:	3307      	adds	r3, #7
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	3308      	adds	r3, #8
 8009e3c:	9303      	str	r3, [sp, #12]
 8009e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e40:	4433      	add	r3, r6
 8009e42:	9309      	str	r3, [sp, #36]	; 0x24
 8009e44:	e767      	b.n	8009d16 <_svfiprintf_r+0x4e>
 8009e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	2001      	movs	r0, #1
 8009e4e:	e7a5      	b.n	8009d9c <_svfiprintf_r+0xd4>
 8009e50:	2300      	movs	r3, #0
 8009e52:	3401      	adds	r4, #1
 8009e54:	9305      	str	r3, [sp, #20]
 8009e56:	4619      	mov	r1, r3
 8009e58:	f04f 0c0a 	mov.w	ip, #10
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e62:	3a30      	subs	r2, #48	; 0x30
 8009e64:	2a09      	cmp	r2, #9
 8009e66:	d903      	bls.n	8009e70 <_svfiprintf_r+0x1a8>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d0c5      	beq.n	8009df8 <_svfiprintf_r+0x130>
 8009e6c:	9105      	str	r1, [sp, #20]
 8009e6e:	e7c3      	b.n	8009df8 <_svfiprintf_r+0x130>
 8009e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e74:	4604      	mov	r4, r0
 8009e76:	2301      	movs	r3, #1
 8009e78:	e7f0      	b.n	8009e5c <_svfiprintf_r+0x194>
 8009e7a:	ab03      	add	r3, sp, #12
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	462a      	mov	r2, r5
 8009e80:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <_svfiprintf_r+0x1f8>)
 8009e82:	a904      	add	r1, sp, #16
 8009e84:	4638      	mov	r0, r7
 8009e86:	f7fd fdad 	bl	80079e4 <_printf_float>
 8009e8a:	1c42      	adds	r2, r0, #1
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	d1d6      	bne.n	8009e3e <_svfiprintf_r+0x176>
 8009e90:	89ab      	ldrh	r3, [r5, #12]
 8009e92:	065b      	lsls	r3, r3, #25
 8009e94:	f53f af2c 	bmi.w	8009cf0 <_svfiprintf_r+0x28>
 8009e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e9a:	b01d      	add	sp, #116	; 0x74
 8009e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea0:	ab03      	add	r3, sp, #12
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <_svfiprintf_r+0x1f8>)
 8009ea8:	a904      	add	r1, sp, #16
 8009eaa:	4638      	mov	r0, r7
 8009eac:	f7fe f83e 	bl	8007f2c <_printf_i>
 8009eb0:	e7eb      	b.n	8009e8a <_svfiprintf_r+0x1c2>
 8009eb2:	bf00      	nop
 8009eb4:	0800e374 	.word	0x0800e374
 8009eb8:	0800e37e 	.word	0x0800e37e
 8009ebc:	080079e5 	.word	0x080079e5
 8009ec0:	08009c11 	.word	0x08009c11
 8009ec4:	0800e37a 	.word	0x0800e37a

08009ec8 <__sfputc_r>:
 8009ec8:	6893      	ldr	r3, [r2, #8]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	b410      	push	{r4}
 8009ed0:	6093      	str	r3, [r2, #8]
 8009ed2:	da08      	bge.n	8009ee6 <__sfputc_r+0x1e>
 8009ed4:	6994      	ldr	r4, [r2, #24]
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	db01      	blt.n	8009ede <__sfputc_r+0x16>
 8009eda:	290a      	cmp	r1, #10
 8009edc:	d103      	bne.n	8009ee6 <__sfputc_r+0x1e>
 8009ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ee2:	f7fe b991 	b.w	8008208 <__swbuf_r>
 8009ee6:	6813      	ldr	r3, [r2, #0]
 8009ee8:	1c58      	adds	r0, r3, #1
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	7019      	strb	r1, [r3, #0]
 8009eee:	4608      	mov	r0, r1
 8009ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <__sfputs_r>:
 8009ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ef8:	4606      	mov	r6, r0
 8009efa:	460f      	mov	r7, r1
 8009efc:	4614      	mov	r4, r2
 8009efe:	18d5      	adds	r5, r2, r3
 8009f00:	42ac      	cmp	r4, r5
 8009f02:	d101      	bne.n	8009f08 <__sfputs_r+0x12>
 8009f04:	2000      	movs	r0, #0
 8009f06:	e007      	b.n	8009f18 <__sfputs_r+0x22>
 8009f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f0c:	463a      	mov	r2, r7
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7ff ffda 	bl	8009ec8 <__sfputc_r>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d1f3      	bne.n	8009f00 <__sfputs_r+0xa>
 8009f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f1c <_vfiprintf_r>:
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	460d      	mov	r5, r1
 8009f22:	b09d      	sub	sp, #116	; 0x74
 8009f24:	4614      	mov	r4, r2
 8009f26:	4698      	mov	r8, r3
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b118      	cbz	r0, 8009f34 <_vfiprintf_r+0x18>
 8009f2c:	6983      	ldr	r3, [r0, #24]
 8009f2e:	b90b      	cbnz	r3, 8009f34 <_vfiprintf_r+0x18>
 8009f30:	f7ff f9be 	bl	80092b0 <__sinit>
 8009f34:	4b89      	ldr	r3, [pc, #548]	; (800a15c <_vfiprintf_r+0x240>)
 8009f36:	429d      	cmp	r5, r3
 8009f38:	d11b      	bne.n	8009f72 <_vfiprintf_r+0x56>
 8009f3a:	6875      	ldr	r5, [r6, #4]
 8009f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f3e:	07d9      	lsls	r1, r3, #31
 8009f40:	d405      	bmi.n	8009f4e <_vfiprintf_r+0x32>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	059a      	lsls	r2, r3, #22
 8009f46:	d402      	bmi.n	8009f4e <_vfiprintf_r+0x32>
 8009f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f4a:	f7ff fa54 	bl	80093f6 <__retarget_lock_acquire_recursive>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	071b      	lsls	r3, r3, #28
 8009f52:	d501      	bpl.n	8009f58 <_vfiprintf_r+0x3c>
 8009f54:	692b      	ldr	r3, [r5, #16]
 8009f56:	b9eb      	cbnz	r3, 8009f94 <_vfiprintf_r+0x78>
 8009f58:	4629      	mov	r1, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f7fe f9a6 	bl	80082ac <__swsetup_r>
 8009f60:	b1c0      	cbz	r0, 8009f94 <_vfiprintf_r+0x78>
 8009f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f64:	07dc      	lsls	r4, r3, #31
 8009f66:	d50e      	bpl.n	8009f86 <_vfiprintf_r+0x6a>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	b01d      	add	sp, #116	; 0x74
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	4b7b      	ldr	r3, [pc, #492]	; (800a160 <_vfiprintf_r+0x244>)
 8009f74:	429d      	cmp	r5, r3
 8009f76:	d101      	bne.n	8009f7c <_vfiprintf_r+0x60>
 8009f78:	68b5      	ldr	r5, [r6, #8]
 8009f7a:	e7df      	b.n	8009f3c <_vfiprintf_r+0x20>
 8009f7c:	4b79      	ldr	r3, [pc, #484]	; (800a164 <_vfiprintf_r+0x248>)
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	bf08      	it	eq
 8009f82:	68f5      	ldreq	r5, [r6, #12]
 8009f84:	e7da      	b.n	8009f3c <_vfiprintf_r+0x20>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	0598      	lsls	r0, r3, #22
 8009f8a:	d4ed      	bmi.n	8009f68 <_vfiprintf_r+0x4c>
 8009f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8e:	f7ff fa33 	bl	80093f8 <__retarget_lock_release_recursive>
 8009f92:	e7e9      	b.n	8009f68 <_vfiprintf_r+0x4c>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9309      	str	r3, [sp, #36]	; 0x24
 8009f98:	2320      	movs	r3, #32
 8009f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fa2:	2330      	movs	r3, #48	; 0x30
 8009fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a168 <_vfiprintf_r+0x24c>
 8009fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fac:	f04f 0901 	mov.w	r9, #1
 8009fb0:	4623      	mov	r3, r4
 8009fb2:	469a      	mov	sl, r3
 8009fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fb8:	b10a      	cbz	r2, 8009fbe <_vfiprintf_r+0xa2>
 8009fba:	2a25      	cmp	r2, #37	; 0x25
 8009fbc:	d1f9      	bne.n	8009fb2 <_vfiprintf_r+0x96>
 8009fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009fc2:	d00b      	beq.n	8009fdc <_vfiprintf_r+0xc0>
 8009fc4:	465b      	mov	r3, fp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ff93 	bl	8009ef6 <__sfputs_r>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f000 80aa 	beq.w	800a12a <_vfiprintf_r+0x20e>
 8009fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fd8:	445a      	add	r2, fp
 8009fda:	9209      	str	r2, [sp, #36]	; 0x24
 8009fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f000 80a2 	beq.w	800a12a <_vfiprintf_r+0x20e>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8009fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff0:	f10a 0a01 	add.w	sl, sl, #1
 8009ff4:	9304      	str	r3, [sp, #16]
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8009ffe:	4654      	mov	r4, sl
 800a000:	2205      	movs	r2, #5
 800a002:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a006:	4858      	ldr	r0, [pc, #352]	; (800a168 <_vfiprintf_r+0x24c>)
 800a008:	f7f6 f90a 	bl	8000220 <memchr>
 800a00c:	9a04      	ldr	r2, [sp, #16]
 800a00e:	b9d8      	cbnz	r0, 800a048 <_vfiprintf_r+0x12c>
 800a010:	06d1      	lsls	r1, r2, #27
 800a012:	bf44      	itt	mi
 800a014:	2320      	movmi	r3, #32
 800a016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a01a:	0713      	lsls	r3, r2, #28
 800a01c:	bf44      	itt	mi
 800a01e:	232b      	movmi	r3, #43	; 0x2b
 800a020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a024:	f89a 3000 	ldrb.w	r3, [sl]
 800a028:	2b2a      	cmp	r3, #42	; 0x2a
 800a02a:	d015      	beq.n	800a058 <_vfiprintf_r+0x13c>
 800a02c:	9a07      	ldr	r2, [sp, #28]
 800a02e:	4654      	mov	r4, sl
 800a030:	2000      	movs	r0, #0
 800a032:	f04f 0c0a 	mov.w	ip, #10
 800a036:	4621      	mov	r1, r4
 800a038:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a03c:	3b30      	subs	r3, #48	; 0x30
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d94e      	bls.n	800a0e0 <_vfiprintf_r+0x1c4>
 800a042:	b1b0      	cbz	r0, 800a072 <_vfiprintf_r+0x156>
 800a044:	9207      	str	r2, [sp, #28]
 800a046:	e014      	b.n	800a072 <_vfiprintf_r+0x156>
 800a048:	eba0 0308 	sub.w	r3, r0, r8
 800a04c:	fa09 f303 	lsl.w	r3, r9, r3
 800a050:	4313      	orrs	r3, r2
 800a052:	9304      	str	r3, [sp, #16]
 800a054:	46a2      	mov	sl, r4
 800a056:	e7d2      	b.n	8009ffe <_vfiprintf_r+0xe2>
 800a058:	9b03      	ldr	r3, [sp, #12]
 800a05a:	1d19      	adds	r1, r3, #4
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	9103      	str	r1, [sp, #12]
 800a060:	2b00      	cmp	r3, #0
 800a062:	bfbb      	ittet	lt
 800a064:	425b      	neglt	r3, r3
 800a066:	f042 0202 	orrlt.w	r2, r2, #2
 800a06a:	9307      	strge	r3, [sp, #28]
 800a06c:	9307      	strlt	r3, [sp, #28]
 800a06e:	bfb8      	it	lt
 800a070:	9204      	strlt	r2, [sp, #16]
 800a072:	7823      	ldrb	r3, [r4, #0]
 800a074:	2b2e      	cmp	r3, #46	; 0x2e
 800a076:	d10c      	bne.n	800a092 <_vfiprintf_r+0x176>
 800a078:	7863      	ldrb	r3, [r4, #1]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d135      	bne.n	800a0ea <_vfiprintf_r+0x1ce>
 800a07e:	9b03      	ldr	r3, [sp, #12]
 800a080:	1d1a      	adds	r2, r3, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	9203      	str	r2, [sp, #12]
 800a086:	2b00      	cmp	r3, #0
 800a088:	bfb8      	it	lt
 800a08a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a08e:	3402      	adds	r4, #2
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a178 <_vfiprintf_r+0x25c>
 800a096:	7821      	ldrb	r1, [r4, #0]
 800a098:	2203      	movs	r2, #3
 800a09a:	4650      	mov	r0, sl
 800a09c:	f7f6 f8c0 	bl	8000220 <memchr>
 800a0a0:	b140      	cbz	r0, 800a0b4 <_vfiprintf_r+0x198>
 800a0a2:	2340      	movs	r3, #64	; 0x40
 800a0a4:	eba0 000a 	sub.w	r0, r0, sl
 800a0a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ac:	9b04      	ldr	r3, [sp, #16]
 800a0ae:	4303      	orrs	r3, r0
 800a0b0:	3401      	adds	r4, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b8:	482c      	ldr	r0, [pc, #176]	; (800a16c <_vfiprintf_r+0x250>)
 800a0ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0be:	2206      	movs	r2, #6
 800a0c0:	f7f6 f8ae 	bl	8000220 <memchr>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	d03f      	beq.n	800a148 <_vfiprintf_r+0x22c>
 800a0c8:	4b29      	ldr	r3, [pc, #164]	; (800a170 <_vfiprintf_r+0x254>)
 800a0ca:	bb1b      	cbnz	r3, 800a114 <_vfiprintf_r+0x1f8>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	3307      	adds	r3, #7
 800a0d0:	f023 0307 	bic.w	r3, r3, #7
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	9303      	str	r3, [sp, #12]
 800a0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0da:	443b      	add	r3, r7
 800a0dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0de:	e767      	b.n	8009fb0 <_vfiprintf_r+0x94>
 800a0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	e7a5      	b.n	800a036 <_vfiprintf_r+0x11a>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	3401      	adds	r4, #1
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	f04f 0c0a 	mov.w	ip, #10
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0fc:	3a30      	subs	r2, #48	; 0x30
 800a0fe:	2a09      	cmp	r2, #9
 800a100:	d903      	bls.n	800a10a <_vfiprintf_r+0x1ee>
 800a102:	2b00      	cmp	r3, #0
 800a104:	d0c5      	beq.n	800a092 <_vfiprintf_r+0x176>
 800a106:	9105      	str	r1, [sp, #20]
 800a108:	e7c3      	b.n	800a092 <_vfiprintf_r+0x176>
 800a10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a10e:	4604      	mov	r4, r0
 800a110:	2301      	movs	r3, #1
 800a112:	e7f0      	b.n	800a0f6 <_vfiprintf_r+0x1da>
 800a114:	ab03      	add	r3, sp, #12
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	462a      	mov	r2, r5
 800a11a:	4b16      	ldr	r3, [pc, #88]	; (800a174 <_vfiprintf_r+0x258>)
 800a11c:	a904      	add	r1, sp, #16
 800a11e:	4630      	mov	r0, r6
 800a120:	f7fd fc60 	bl	80079e4 <_printf_float>
 800a124:	4607      	mov	r7, r0
 800a126:	1c78      	adds	r0, r7, #1
 800a128:	d1d6      	bne.n	800a0d8 <_vfiprintf_r+0x1bc>
 800a12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a12c:	07d9      	lsls	r1, r3, #31
 800a12e:	d405      	bmi.n	800a13c <_vfiprintf_r+0x220>
 800a130:	89ab      	ldrh	r3, [r5, #12]
 800a132:	059a      	lsls	r2, r3, #22
 800a134:	d402      	bmi.n	800a13c <_vfiprintf_r+0x220>
 800a136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a138:	f7ff f95e 	bl	80093f8 <__retarget_lock_release_recursive>
 800a13c:	89ab      	ldrh	r3, [r5, #12]
 800a13e:	065b      	lsls	r3, r3, #25
 800a140:	f53f af12 	bmi.w	8009f68 <_vfiprintf_r+0x4c>
 800a144:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a146:	e711      	b.n	8009f6c <_vfiprintf_r+0x50>
 800a148:	ab03      	add	r3, sp, #12
 800a14a:	9300      	str	r3, [sp, #0]
 800a14c:	462a      	mov	r2, r5
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <_vfiprintf_r+0x258>)
 800a150:	a904      	add	r1, sp, #16
 800a152:	4630      	mov	r0, r6
 800a154:	f7fd feea 	bl	8007f2c <_printf_i>
 800a158:	e7e4      	b.n	800a124 <_vfiprintf_r+0x208>
 800a15a:	bf00      	nop
 800a15c:	0800e1d8 	.word	0x0800e1d8
 800a160:	0800e1f8 	.word	0x0800e1f8
 800a164:	0800e1b8 	.word	0x0800e1b8
 800a168:	0800e374 	.word	0x0800e374
 800a16c:	0800e37e 	.word	0x0800e37e
 800a170:	080079e5 	.word	0x080079e5
 800a174:	08009ef7 	.word	0x08009ef7
 800a178:	0800e37a 	.word	0x0800e37a

0800a17c <__sread>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	460c      	mov	r4, r1
 800a180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a184:	f000 f920 	bl	800a3c8 <_read_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	bfab      	itete	ge
 800a18c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a18e:	89a3      	ldrhlt	r3, [r4, #12]
 800a190:	181b      	addge	r3, r3, r0
 800a192:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a196:	bfac      	ite	ge
 800a198:	6563      	strge	r3, [r4, #84]	; 0x54
 800a19a:	81a3      	strhlt	r3, [r4, #12]
 800a19c:	bd10      	pop	{r4, pc}

0800a19e <__swrite>:
 800a19e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	898b      	ldrh	r3, [r1, #12]
 800a1a6:	05db      	lsls	r3, r3, #23
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4616      	mov	r6, r2
 800a1ae:	d505      	bpl.n	800a1bc <__swrite+0x1e>
 800a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f000 f898 	bl	800a2ec <_lseek_r>
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	463b      	mov	r3, r7
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d2:	f000 b817 	b.w	800a204 <_write_r>

0800a1d6 <__sseek>:
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	460c      	mov	r4, r1
 800a1da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1de:	f000 f885 	bl	800a2ec <_lseek_r>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	bf15      	itete	ne
 800a1e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a1ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a1ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1f2:	81a3      	strheq	r3, [r4, #12]
 800a1f4:	bf18      	it	ne
 800a1f6:	81a3      	strhne	r3, [r4, #12]
 800a1f8:	bd10      	pop	{r4, pc}

0800a1fa <__sclose>:
 800a1fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fe:	f000 b831 	b.w	800a264 <_close_r>
	...

0800a204 <_write_r>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	4d07      	ldr	r5, [pc, #28]	; (800a224 <_write_r+0x20>)
 800a208:	4604      	mov	r4, r0
 800a20a:	4608      	mov	r0, r1
 800a20c:	4611      	mov	r1, r2
 800a20e:	2200      	movs	r2, #0
 800a210:	602a      	str	r2, [r5, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	f7f9 f94b 	bl	80034ae <_write>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d102      	bne.n	800a222 <_write_r+0x1e>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	b103      	cbz	r3, 800a222 <_write_r+0x1e>
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	bd38      	pop	{r3, r4, r5, pc}
 800a224:	2000053c 	.word	0x2000053c

0800a228 <__assert_func>:
 800a228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a22a:	4614      	mov	r4, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__assert_func+0x2c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	b14c      	cbz	r4, 800a24c <__assert_func+0x24>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <__assert_func+0x30>)
 800a23a:	9100      	str	r1, [sp, #0]
 800a23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <__assert_func+0x34>)
 800a242:	462b      	mov	r3, r5
 800a244:	f000 f81e 	bl	800a284 <fiprintf>
 800a248:	f000 f8dd 	bl	800a406 <abort>
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__assert_func+0x38>)
 800a24e:	461c      	mov	r4, r3
 800a250:	e7f3      	b.n	800a23a <__assert_func+0x12>
 800a252:	bf00      	nop
 800a254:	200000c0 	.word	0x200000c0
 800a258:	0800e385 	.word	0x0800e385
 800a25c:	0800e392 	.word	0x0800e392
 800a260:	0800e3c0 	.word	0x0800e3c0

0800a264 <_close_r>:
 800a264:	b538      	push	{r3, r4, r5, lr}
 800a266:	4d06      	ldr	r5, [pc, #24]	; (800a280 <_close_r+0x1c>)
 800a268:	2300      	movs	r3, #0
 800a26a:	4604      	mov	r4, r0
 800a26c:	4608      	mov	r0, r1
 800a26e:	602b      	str	r3, [r5, #0]
 800a270:	f7f9 f939 	bl	80034e6 <_close>
 800a274:	1c43      	adds	r3, r0, #1
 800a276:	d102      	bne.n	800a27e <_close_r+0x1a>
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	b103      	cbz	r3, 800a27e <_close_r+0x1a>
 800a27c:	6023      	str	r3, [r4, #0]
 800a27e:	bd38      	pop	{r3, r4, r5, pc}
 800a280:	2000053c 	.word	0x2000053c

0800a284 <fiprintf>:
 800a284:	b40e      	push	{r1, r2, r3}
 800a286:	b503      	push	{r0, r1, lr}
 800a288:	4601      	mov	r1, r0
 800a28a:	ab03      	add	r3, sp, #12
 800a28c:	4805      	ldr	r0, [pc, #20]	; (800a2a4 <fiprintf+0x20>)
 800a28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a292:	6800      	ldr	r0, [r0, #0]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f7ff fe41 	bl	8009f1c <_vfiprintf_r>
 800a29a:	b002      	add	sp, #8
 800a29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a0:	b003      	add	sp, #12
 800a2a2:	4770      	bx	lr
 800a2a4:	200000c0 	.word	0x200000c0

0800a2a8 <_fstat_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d07      	ldr	r5, [pc, #28]	; (800a2c8 <_fstat_r+0x20>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	602b      	str	r3, [r5, #0]
 800a2b6:	f7f9 f922 	bl	80034fe <_fstat>
 800a2ba:	1c43      	adds	r3, r0, #1
 800a2bc:	d102      	bne.n	800a2c4 <_fstat_r+0x1c>
 800a2be:	682b      	ldr	r3, [r5, #0]
 800a2c0:	b103      	cbz	r3, 800a2c4 <_fstat_r+0x1c>
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	bd38      	pop	{r3, r4, r5, pc}
 800a2c6:	bf00      	nop
 800a2c8:	2000053c 	.word	0x2000053c

0800a2cc <_isatty_r>:
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4d06      	ldr	r5, [pc, #24]	; (800a2e8 <_isatty_r+0x1c>)
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	4608      	mov	r0, r1
 800a2d6:	602b      	str	r3, [r5, #0]
 800a2d8:	f7f9 f921 	bl	800351e <_isatty>
 800a2dc:	1c43      	adds	r3, r0, #1
 800a2de:	d102      	bne.n	800a2e6 <_isatty_r+0x1a>
 800a2e0:	682b      	ldr	r3, [r5, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <_isatty_r+0x1a>
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	2000053c 	.word	0x2000053c

0800a2ec <_lseek_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d07      	ldr	r5, [pc, #28]	; (800a30c <_lseek_r+0x20>)
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	602a      	str	r2, [r5, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f7f9 f91a 	bl	8003534 <_lseek>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_lseek_r+0x1e>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_lseek_r+0x1e>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	2000053c 	.word	0x2000053c

0800a310 <__ascii_mbtowc>:
 800a310:	b082      	sub	sp, #8
 800a312:	b901      	cbnz	r1, 800a316 <__ascii_mbtowc+0x6>
 800a314:	a901      	add	r1, sp, #4
 800a316:	b142      	cbz	r2, 800a32a <__ascii_mbtowc+0x1a>
 800a318:	b14b      	cbz	r3, 800a32e <__ascii_mbtowc+0x1e>
 800a31a:	7813      	ldrb	r3, [r2, #0]
 800a31c:	600b      	str	r3, [r1, #0]
 800a31e:	7812      	ldrb	r2, [r2, #0]
 800a320:	1e10      	subs	r0, r2, #0
 800a322:	bf18      	it	ne
 800a324:	2001      	movne	r0, #1
 800a326:	b002      	add	sp, #8
 800a328:	4770      	bx	lr
 800a32a:	4610      	mov	r0, r2
 800a32c:	e7fb      	b.n	800a326 <__ascii_mbtowc+0x16>
 800a32e:	f06f 0001 	mvn.w	r0, #1
 800a332:	e7f8      	b.n	800a326 <__ascii_mbtowc+0x16>

0800a334 <memmove>:
 800a334:	4288      	cmp	r0, r1
 800a336:	b510      	push	{r4, lr}
 800a338:	eb01 0402 	add.w	r4, r1, r2
 800a33c:	d902      	bls.n	800a344 <memmove+0x10>
 800a33e:	4284      	cmp	r4, r0
 800a340:	4623      	mov	r3, r4
 800a342:	d807      	bhi.n	800a354 <memmove+0x20>
 800a344:	1e43      	subs	r3, r0, #1
 800a346:	42a1      	cmp	r1, r4
 800a348:	d008      	beq.n	800a35c <memmove+0x28>
 800a34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a352:	e7f8      	b.n	800a346 <memmove+0x12>
 800a354:	4402      	add	r2, r0
 800a356:	4601      	mov	r1, r0
 800a358:	428a      	cmp	r2, r1
 800a35a:	d100      	bne.n	800a35e <memmove+0x2a>
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a366:	e7f7      	b.n	800a358 <memmove+0x24>

0800a368 <_realloc_r>:
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	4680      	mov	r8, r0
 800a36e:	4614      	mov	r4, r2
 800a370:	460e      	mov	r6, r1
 800a372:	b921      	cbnz	r1, 800a37e <_realloc_r+0x16>
 800a374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	4611      	mov	r1, r2
 800a37a:	f7fd ba1f 	b.w	80077bc <_malloc_r>
 800a37e:	b92a      	cbnz	r2, 800a38c <_realloc_r+0x24>
 800a380:	f7fd f9b0 	bl	80076e4 <_free_r>
 800a384:	4625      	mov	r5, r4
 800a386:	4628      	mov	r0, r5
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	f000 f842 	bl	800a414 <_malloc_usable_size_r>
 800a390:	4284      	cmp	r4, r0
 800a392:	4607      	mov	r7, r0
 800a394:	d802      	bhi.n	800a39c <_realloc_r+0x34>
 800a396:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a39a:	d812      	bhi.n	800a3c2 <_realloc_r+0x5a>
 800a39c:	4621      	mov	r1, r4
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7fd fa0c 	bl	80077bc <_malloc_r>
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d0ed      	beq.n	800a386 <_realloc_r+0x1e>
 800a3aa:	42bc      	cmp	r4, r7
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	bf28      	it	cs
 800a3b2:	463a      	movcs	r2, r7
 800a3b4:	f7fd f980 	bl	80076b8 <memcpy>
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7fd f992 	bl	80076e4 <_free_r>
 800a3c0:	e7e1      	b.n	800a386 <_realloc_r+0x1e>
 800a3c2:	4635      	mov	r5, r6
 800a3c4:	e7df      	b.n	800a386 <_realloc_r+0x1e>
	...

0800a3c8 <_read_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4d07      	ldr	r5, [pc, #28]	; (800a3e8 <_read_r+0x20>)
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	602a      	str	r2, [r5, #0]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f7f9 f84c 	bl	8003474 <_read>
 800a3dc:	1c43      	adds	r3, r0, #1
 800a3de:	d102      	bne.n	800a3e6 <_read_r+0x1e>
 800a3e0:	682b      	ldr	r3, [r5, #0]
 800a3e2:	b103      	cbz	r3, 800a3e6 <_read_r+0x1e>
 800a3e4:	6023      	str	r3, [r4, #0]
 800a3e6:	bd38      	pop	{r3, r4, r5, pc}
 800a3e8:	2000053c 	.word	0x2000053c

0800a3ec <__ascii_wctomb>:
 800a3ec:	b149      	cbz	r1, 800a402 <__ascii_wctomb+0x16>
 800a3ee:	2aff      	cmp	r2, #255	; 0xff
 800a3f0:	bf85      	ittet	hi
 800a3f2:	238a      	movhi	r3, #138	; 0x8a
 800a3f4:	6003      	strhi	r3, [r0, #0]
 800a3f6:	700a      	strbls	r2, [r1, #0]
 800a3f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3fc:	bf98      	it	ls
 800a3fe:	2001      	movls	r0, #1
 800a400:	4770      	bx	lr
 800a402:	4608      	mov	r0, r1
 800a404:	4770      	bx	lr

0800a406 <abort>:
 800a406:	b508      	push	{r3, lr}
 800a408:	2006      	movs	r0, #6
 800a40a:	f000 f833 	bl	800a474 <raise>
 800a40e:	2001      	movs	r0, #1
 800a410:	f7f9 f826 	bl	8003460 <_exit>

0800a414 <_malloc_usable_size_r>:
 800a414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a418:	1f18      	subs	r0, r3, #4
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	bfbc      	itt	lt
 800a41e:	580b      	ldrlt	r3, [r1, r0]
 800a420:	18c0      	addlt	r0, r0, r3
 800a422:	4770      	bx	lr

0800a424 <_raise_r>:
 800a424:	291f      	cmp	r1, #31
 800a426:	b538      	push	{r3, r4, r5, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	d904      	bls.n	800a438 <_raise_r+0x14>
 800a42e:	2316      	movs	r3, #22
 800a430:	6003      	str	r3, [r0, #0]
 800a432:	f04f 30ff 	mov.w	r0, #4294967295
 800a436:	bd38      	pop	{r3, r4, r5, pc}
 800a438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a43a:	b112      	cbz	r2, 800a442 <_raise_r+0x1e>
 800a43c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a440:	b94b      	cbnz	r3, 800a456 <_raise_r+0x32>
 800a442:	4620      	mov	r0, r4
 800a444:	f000 f830 	bl	800a4a8 <_getpid_r>
 800a448:	462a      	mov	r2, r5
 800a44a:	4601      	mov	r1, r0
 800a44c:	4620      	mov	r0, r4
 800a44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a452:	f000 b817 	b.w	800a484 <_kill_r>
 800a456:	2b01      	cmp	r3, #1
 800a458:	d00a      	beq.n	800a470 <_raise_r+0x4c>
 800a45a:	1c59      	adds	r1, r3, #1
 800a45c:	d103      	bne.n	800a466 <_raise_r+0x42>
 800a45e:	2316      	movs	r3, #22
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	2001      	movs	r0, #1
 800a464:	e7e7      	b.n	800a436 <_raise_r+0x12>
 800a466:	2400      	movs	r4, #0
 800a468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a46c:	4628      	mov	r0, r5
 800a46e:	4798      	blx	r3
 800a470:	2000      	movs	r0, #0
 800a472:	e7e0      	b.n	800a436 <_raise_r+0x12>

0800a474 <raise>:
 800a474:	4b02      	ldr	r3, [pc, #8]	; (800a480 <raise+0xc>)
 800a476:	4601      	mov	r1, r0
 800a478:	6818      	ldr	r0, [r3, #0]
 800a47a:	f7ff bfd3 	b.w	800a424 <_raise_r>
 800a47e:	bf00      	nop
 800a480:	200000c0 	.word	0x200000c0

0800a484 <_kill_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d07      	ldr	r5, [pc, #28]	; (800a4a4 <_kill_r+0x20>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	4611      	mov	r1, r2
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	f7f8 ffd5 	bl	8003440 <_kill>
 800a496:	1c43      	adds	r3, r0, #1
 800a498:	d102      	bne.n	800a4a0 <_kill_r+0x1c>
 800a49a:	682b      	ldr	r3, [r5, #0]
 800a49c:	b103      	cbz	r3, 800a4a0 <_kill_r+0x1c>
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2000053c 	.word	0x2000053c

0800a4a8 <_getpid_r>:
 800a4a8:	f7f8 bfc2 	b.w	8003430 <_getpid>

0800a4ac <_init>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	bf00      	nop
 800a4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b2:	bc08      	pop	{r3}
 800a4b4:	469e      	mov	lr, r3
 800a4b6:	4770      	bx	lr

0800a4b8 <_fini>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr
