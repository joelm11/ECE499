
499Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d84  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f4  08007f58  08007f58  00017f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800894c  0800894c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008954  08008954  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008954  08008954  00018954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008958  08008958  00018958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800895c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001e4  08008b40  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08008b40  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b6e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003252  00000000  00000000  00033d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00036fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  000382e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee7  00000000  00000000  00039450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a70  00000000  00000000  00050337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000861d6  00000000  00000000  00067da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edf7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060dc  00000000  00000000  000edfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007f3c 	.word	0x08007f3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007f3c 	.word	0x08007f3c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000ef6:	1df9      	adds	r1, r7, #7
 8000ef8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efc:	2201      	movs	r2, #1
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <DEV_SPI_WRite+0x20>)
 8000f00:	f003 f82d 	bl	8003f5e <HAL_SPI_Transmit>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002b4 	.word	0x200002b4

08000f10 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f1a:	f002 f835 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2108      	movs	r1, #8
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f24:	f002 f830 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f2e:	f002 f82b 	bl	8002f88 <HAL_GPIO_WritePin>
//    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020000 	.word	0x40020000

08000f3c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <Paint_NewImage+0x90>)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000f60:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <Paint_NewImage+0x90>)
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <Paint_NewImage+0x90>)
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <Paint_NewImage+0x90>)
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <Paint_NewImage+0x90>)
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <Paint_NewImage+0x90>)
 8000f7a:	8a5b      	ldrh	r3, [r3, #18]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <Paint_NewImage+0x90>)
 8000f82:	8a9b      	ldrh	r3, [r3, #20]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <Paint_NewImage+0x94>)
 8000f8a:	f004 fdc7 	bl	8005b1c <iprintf>
   
    Paint.Rotate = Rotate;
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <Paint_NewImage+0x90>)
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <Paint_NewImage+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <Paint_NewImage+0x6a>
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	2bb4      	cmp	r3, #180	; 0xb4
 8000fa4:	d106      	bne.n	8000fb4 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <Paint_NewImage+0x90>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <Paint_NewImage+0x90>)
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	80d3      	strh	r3, [r2, #6]
 8000fb2:	e006      	b.n	8000fc2 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <Paint_NewImage+0x90>)
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <Paint_NewImage+0x90>)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	80d3      	strh	r3, [r2, #6]
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000200 	.word	0x20000200
 8000fd0:	08007f58 	.word	0x08007f58

08000fd4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <Paint_SetClearFuntion+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000021c 	.word	0x2000021c

08000ff4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <Paint_SetDisplayFuntion+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000218 	.word	0x20000218

08001014 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <Paint_SetPixel+0x150>)
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	b29b      	uxth	r3, r3
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	429a      	cmp	r2, r3
 8001030:	f200 808d 	bhi.w	800114e <Paint_SetPixel+0x13a>
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <Paint_SetPixel+0x150>)
 8001036:	88db      	ldrh	r3, [r3, #6]
 8001038:	b29b      	uxth	r3, r3
 800103a:	88ba      	ldrh	r2, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	f200 8086 	bhi.w	800114e <Paint_SetPixel+0x13a>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <Paint_SetPixel+0x150>)
 8001044:	89db      	ldrh	r3, [r3, #14]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800104c:	d02c      	beq.n	80010a8 <Paint_SetPixel+0x94>
 800104e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001052:	dc7e      	bgt.n	8001152 <Paint_SetPixel+0x13e>
 8001054:	2bb4      	cmp	r3, #180	; 0xb4
 8001056:	d016      	beq.n	8001086 <Paint_SetPixel+0x72>
 8001058:	2bb4      	cmp	r3, #180	; 0xb4
 800105a:	dc7a      	bgt.n	8001152 <Paint_SetPixel+0x13e>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <Paint_SetPixel+0x52>
 8001060:	2b5a      	cmp	r3, #90	; 0x5a
 8001062:	d005      	beq.n	8001070 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8001064:	e075      	b.n	8001152 <Paint_SetPixel+0x13e>
        X = Xpoint;
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	81bb      	strh	r3, [r7, #12]
        break;
 800106e:	e026      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <Paint_SetPixel+0x150>)
 8001072:	891b      	ldrh	r3, [r3, #8]
 8001074:	b29a      	uxth	r2, r3
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	81bb      	strh	r3, [r7, #12]
        break;
 8001084:	e01b      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <Paint_SetPixel+0x150>)
 8001088:	891b      	ldrh	r3, [r3, #8]
 800108a:	b29a      	uxth	r2, r3
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <Paint_SetPixel+0x150>)
 8001098:	895b      	ldrh	r3, [r3, #10]
 800109a:	b29a      	uxth	r2, r3
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b01      	subs	r3, #1
 80010a4:	81bb      	strh	r3, [r7, #12]
        break;
 80010a6:	e00a      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Ypoint;
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <Paint_SetPixel+0x150>)
 80010ae:	895b      	ldrh	r3, [r3, #10]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	81bb      	strh	r3, [r7, #12]
        break;
 80010bc:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <Paint_SetPixel+0x150>)
 80010c0:	8a1b      	ldrh	r3, [r3, #16]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d846      	bhi.n	8001156 <Paint_SetPixel+0x142>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <Paint_SetPixel+0xbc>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	08001127 	.word	0x08001127
 80010d4:	080010e1 	.word	0x080010e1
 80010d8:	080010f3 	.word	0x080010f3
 80010dc:	08001105 	.word	0x08001105
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <Paint_SetPixel+0x150>)
 80010e2:	891b      	ldrh	r3, [r3, #8]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3b01      	subs	r3, #1
 80010ee:	81fb      	strh	r3, [r7, #14]
        break;
 80010f0:	e01a      	b.n	8001128 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <Paint_SetPixel+0x150>)
 80010f4:	895b      	ldrh	r3, [r3, #10]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	3b01      	subs	r3, #1
 8001100:	81bb      	strh	r3, [r7, #12]
        break;
 8001102:	e011      	b.n	8001128 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <Paint_SetPixel+0x150>)
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	b29a      	uxth	r2, r3
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <Paint_SetPixel+0x150>)
 8001116:	895b      	ldrh	r3, [r3, #10]
 8001118:	b29a      	uxth	r2, r3
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	81bb      	strh	r3, [r7, #12]
        break;
 8001124:	e000      	b.n	8001128 <Paint_SetPixel+0x114>
        break;
 8001126:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <Paint_SetPixel+0x150>)
 800112a:	891b      	ldrh	r3, [r3, #8]
 800112c:	b29b      	uxth	r3, r3
 800112e:	89fa      	ldrh	r2, [r7, #14]
 8001130:	429a      	cmp	r2, r3
 8001132:	d812      	bhi.n	800115a <Paint_SetPixel+0x146>
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <Paint_SetPixel+0x150>)
 8001136:	895b      	ldrh	r3, [r3, #10]
 8001138:	b29b      	uxth	r3, r3
 800113a:	89ba      	ldrh	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d80c      	bhi.n	800115a <Paint_SetPixel+0x146>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <Paint_SetPixel+0x154>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	89b9      	ldrh	r1, [r7, #12]
 8001148:	89f8      	ldrh	r0, [r7, #14]
 800114a:	4798      	blx	r3
 800114c:	e006      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 800114e:	bf00      	nop
 8001150:	e004      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 800115a:	bf00      	nop
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000200 	.word	0x20000200
 8001168:	20000218 	.word	0x20000218

0800116c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <Paint_Clear+0x1c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	4610      	mov	r0, r2
 800117e:	4798      	blx	r3
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	2000021c 	.word	0x2000021c

0800118c <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4603      	mov	r3, r0
 8001196:	81fb      	strh	r3, [r7, #14]
 8001198:	460b      	mov	r3, r1
 800119a:	81bb      	strh	r3, [r7, #12]
 800119c:	4613      	mov	r3, r2
 800119e:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 80011a0:	4b4e      	ldr	r3, [pc, #312]	; (80012dc <Paint_DrawChar+0x150>)
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	89fa      	ldrh	r2, [r7, #14]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	f200 8092 	bhi.w	80012d2 <Paint_DrawChar+0x146>
 80011ae:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <Paint_DrawChar+0x150>)
 80011b0:	88db      	ldrh	r3, [r3, #6]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	89ba      	ldrh	r2, [r7, #12]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	f200 808b 	bhi.w	80012d2 <Paint_DrawChar+0x146>
//        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	3b20      	subs	r3, #32
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	88d2      	ldrh	r2, [r2, #6]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	8892      	ldrh	r2, [r2, #4]
 80011cc:	08d2      	lsrs	r2, r2, #3
 80011ce:	b292      	uxth	r2, r2
 80011d0:	4611      	mov	r1, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	8892      	ldrh	r2, [r2, #4]
 80011d6:	f002 0207 	and.w	r2, r2, #7
 80011da:	b292      	uxth	r2, r2
 80011dc:	2a00      	cmp	r2, #0
 80011de:	bf14      	ite	ne
 80011e0:	2201      	movne	r2, #1
 80011e2:	2200      	moveq	r2, #0
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440a      	add	r2, r1
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	4413      	add	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	83fb      	strh	r3, [r7, #30]
 80011fc:	e063      	b.n	80012c6 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80011fe:	2300      	movs	r3, #0
 8001200:	83bb      	strh	r3, [r7, #28]
 8001202:	e04e      	b.n	80012a2 <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 8001204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	4293      	cmp	r3, r2
 800120c:	d118      	bne.n	8001240 <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	8bbb      	ldrh	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	fa42 f303 	asr.w	r3, r2, r3
 8001220:	400b      	ands	r3, r1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d031      	beq.n	800128a <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001226:	89fa      	ldrh	r2, [r7, #14]
 8001228:	8bbb      	ldrh	r3, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	b298      	uxth	r0, r3
 800122e:	89ba      	ldrh	r2, [r7, #12]
 8001230:	8bfb      	ldrh	r3, [r7, #30]
 8001232:	4413      	add	r3, r2
 8001234:	b29b      	uxth	r3, r3
 8001236:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff feeb 	bl	8001014 <Paint_SetPixel>
 800123e:	e024      	b.n	800128a <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	8bbb      	ldrh	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	fa42 f303 	asr.w	r3, r2, r3
 8001252:	400b      	ands	r3, r1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8001258:	89fa      	ldrh	r2, [r7, #14]
 800125a:	8bbb      	ldrh	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	b298      	uxth	r0, r3
 8001260:	89ba      	ldrh	r2, [r7, #12]
 8001262:	8bfb      	ldrh	r3, [r7, #30]
 8001264:	4413      	add	r3, r2
 8001266:	b29b      	uxth	r3, r3
 8001268:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fed2 	bl	8001014 <Paint_SetPixel>
 8001270:	e00b      	b.n	800128a <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8001272:	89fa      	ldrh	r2, [r7, #14]
 8001274:	8bbb      	ldrh	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	b298      	uxth	r0, r3
 800127a:	89ba      	ldrh	r2, [r7, #12]
 800127c:	8bfb      	ldrh	r3, [r7, #30]
 800127e:	4413      	add	r3, r2
 8001280:	b29b      	uxth	r3, r3
 8001282:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fec5 	bl	8001014 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800128a:	8bbb      	ldrh	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	b29b      	uxth	r3, r3
 8001292:	2b07      	cmp	r3, #7
 8001294:	d102      	bne.n	800129c <Paint_DrawChar+0x110>
                ptr++;
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	3301      	adds	r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800129c:	8bbb      	ldrh	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	83bb      	strh	r3, [r7, #28]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	8bba      	ldrh	r2, [r7, #28]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d3ab      	bcc.n	8001204 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <Paint_DrawChar+0x134>
            ptr++;
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	3301      	adds	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80012c0:	8bfb      	ldrh	r3, [r7, #30]
 80012c2:	3301      	adds	r3, #1
 80012c4:	83fb      	strh	r3, [r7, #30]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	88db      	ldrh	r3, [r3, #6]
 80012ca:	8bfa      	ldrh	r2, [r7, #30]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d396      	bcc.n	80011fe <Paint_DrawChar+0x72>
 80012d0:	e000      	b.n	80012d4 <Paint_DrawChar+0x148>
        return;
 80012d2:	bf00      	nop
    }// Write all
}
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000200 	.word	0x20000200

080012e0 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60ba      	str	r2, [r7, #8]
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4603      	mov	r3, r0
 80012ec:	81fb      	strh	r3, [r7, #14]
 80012ee:	460b      	mov	r3, r1
 80012f0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <Paint_DrawString_EN+0xa8>)
 80012fc:	889b      	ldrh	r3, [r3, #4]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	89fa      	ldrh	r2, [r7, #14]
 8001302:	429a      	cmp	r2, r3
 8001304:	d83b      	bhi.n	800137e <Paint_DrawString_EN+0x9e>
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <Paint_DrawString_EN+0xa8>)
 8001308:	88db      	ldrh	r3, [r3, #6]
 800130a:	b29b      	uxth	r3, r3
 800130c:	89ba      	ldrh	r2, [r7, #12]
 800130e:	429a      	cmp	r2, r3
 8001310:	d835      	bhi.n	800137e <Paint_DrawString_EN+0x9e>
//        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 8001312:	e02f      	b.n	8001374 <Paint_DrawString_EN+0x94>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	8892      	ldrh	r2, [r2, #4]
 800131a:	4413      	add	r3, r2
 800131c:	4a1a      	ldr	r2, [pc, #104]	; (8001388 <Paint_DrawString_EN+0xa8>)
 800131e:	8892      	ldrh	r2, [r2, #4]
 8001320:	b292      	uxth	r2, r2
 8001322:	4293      	cmp	r3, r2
 8001324:	dd06      	ble.n	8001334 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 8001326:	89fb      	ldrh	r3, [r7, #14]
 8001328:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	88da      	ldrh	r2, [r3, #6]
 800132e:	8abb      	ldrh	r3, [r7, #20]
 8001330:	4413      	add	r3, r2
 8001332:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8001334:	8abb      	ldrh	r3, [r7, #20]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	88d2      	ldrh	r2, [r2, #6]
 800133a:	4413      	add	r3, r2
 800133c:	4a12      	ldr	r2, [pc, #72]	; (8001388 <Paint_DrawString_EN+0xa8>)
 800133e:	88d2      	ldrh	r2, [r2, #6]
 8001340:	b292      	uxth	r2, r2
 8001342:	4293      	cmp	r3, r2
 8001344:	dd03      	ble.n	800134e <Paint_DrawString_EN+0x6e>
            Xpoint = Xstart;
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800134a:	89bb      	ldrh	r3, [r7, #12]
 800134c:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	8ab9      	ldrh	r1, [r7, #20]
 8001354:	8af8      	ldrh	r0, [r7, #22]
 8001356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	8c3b      	ldrh	r3, [r7, #32]
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f7ff ff14 	bl	800118c <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3301      	adds	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	889a      	ldrh	r2, [r3, #4]
 800136e:	8afb      	ldrh	r3, [r7, #22]
 8001370:	4413      	add	r3, r2
 8001372:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1cb      	bne.n	8001314 <Paint_DrawString_EN+0x34>
 800137c:	e000      	b.n	8001380 <Paint_DrawString_EN+0xa0>
        return;
 800137e:	bf00      	nop
    }
}
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000200 	.word	0x20000200

0800138c <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b0cb      	sub	sp, #300	; 0x12c
 8001390:	af02      	add	r7, sp, #8
 8001392:	4604      	mov	r4, r0
 8001394:	4608      	mov	r0, r1
 8001396:	f107 0110 	add.w	r1, r7, #16
 800139a:	ed01 0b02 	vstr	d0, [r1, #-8]
 800139e:	4611      	mov	r1, r2
 80013a0:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80013a4:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013ae:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80013b2:	4622      	mov	r2, r4
 80013b4:	801a      	strh	r2, [r3, #0]
 80013b6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013be:	4602      	mov	r2, r0
 80013c0:	801a      	strh	r2, [r3, #0]
 80013c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013c6:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80013ca:	460a      	mov	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN];
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 80013ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013d2:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	1c99      	adds	r1, r3, #2
 80013da:	f107 001c 	add.w	r0, r7, #28
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80013e6:	e9cd 2300 	strd	r2, r3, [sp]
 80013ea:	460a      	mov	r2, r1
 80013ec:	4933      	ldr	r1, [pc, #204]	; (80014bc <Paint_DrawFloatNum+0x130>)
 80013ee:	f004 fc33 	bl	8005c58 <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff0a 	bl	8000210 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fe1c 	bl	800503c <malloc>
 8001404:	4603      	mov	r3, r0
 8001406:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fefe 	bl	8000210 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	1e9a      	subs	r2, r3, #2
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	4619      	mov	r1, r3
 800141e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001422:	f003 fe1b 	bl	800505c <memcpy>
    * (pStr+strlen(Str)-1)='\0';
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4618      	mov	r0, r3
 800142c:	f7fe fef0 	bl	8000210 <strlen>
 8001430:	4603      	mov	r3, r0
 8001432:	3b01      	subs	r3, #1
 8001434:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001438:	4413      	add	r3, r2
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fee4 	bl	8000210 <strlen>
 8001448:	4603      	mov	r3, r0
 800144a:	3b03      	subs	r3, #3
 800144c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001450:	4413      	add	r3, r2
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b2e      	cmp	r3, #46	; 0x2e
 8001456:	d10b      	bne.n	8001470 <Paint_DrawFloatNum+0xe4>
    {
      *(pStr+strlen(Str)-3)='\0';
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4618      	mov	r0, r3
 800145e:	f7fe fed7 	bl	8000210 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	3b03      	subs	r3, #3
 8001466:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800146a:	4413      	add	r3, r2
 800146c:	2200      	movs	r2, #0
 800146e:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 8001470:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001474:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001478:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800147c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001480:	8811      	ldrh	r1, [r2, #0]
 8001482:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001486:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 800148a:	8810      	ldrh	r0, [r2, #0]
 800148c:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800149e:	f7ff ff1f 	bl	80012e0 <Paint_DrawString_EN>
    free(pStr);
 80014a2:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80014a6:	f003 fdd1 	bl	800504c <free>
    pStr=NULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 80014b0:	bf00      	nop
 80014b2:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	bf00      	nop
 80014bc:	08008058 	.word	0x08008058

080014c0 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	480b      	ldr	r0, [pc, #44]	; (80014f8 <LCD_1IN8_Reset+0x38>)
 80014ca:	f001 fd5d 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80014ce:	2064      	movs	r0, #100	; 0x64
 80014d0:	f001 fae0 	bl	8002a94 <HAL_Delay>
    LCD_1IN8_RST_0;
 80014d4:	2200      	movs	r2, #0
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4807      	ldr	r0, [pc, #28]	; (80014f8 <LCD_1IN8_Reset+0x38>)
 80014da:	f001 fd55 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80014de:	2064      	movs	r0, #100	; 0x64
 80014e0:	f001 fad8 	bl	8002a94 <HAL_Delay>
    LCD_1IN8_RST_1;
 80014e4:	2201      	movs	r2, #1
 80014e6:	2140      	movs	r1, #64	; 0x40
 80014e8:	4803      	ldr	r0, [pc, #12]	; (80014f8 <LCD_1IN8_Reset+0x38>)
 80014ea:	f001 fd4d 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80014ee:	2064      	movs	r0, #100	; 0x64
 80014f0:	f001 fad0 	bl	8002a94 <HAL_Delay>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40020000 	.word	0x40020000

080014fc <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 8001506:	2200      	movs	r2, #0
 8001508:	2110      	movs	r1, #16
 800150a:	4808      	ldr	r0, [pc, #32]	; (800152c <LCD_1IN8_WriteReg+0x30>)
 800150c:	f001 fd3c 	bl	8002f88 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8001510:	2200      	movs	r2, #0
 8001512:	2108      	movs	r1, #8
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <LCD_1IN8_WriteReg+0x30>)
 8001516:	f001 fd37 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fce5 	bl	8000eec <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40020000 	.word	0x40020000

08001530 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	480a      	ldr	r0, [pc, #40]	; (8001568 <LCD_1IN8_WriteData_8Bit+0x38>)
 8001540:	f001 fd22 	bl	8002f88 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8001544:	2200      	movs	r2, #0
 8001546:	2108      	movs	r1, #8
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <LCD_1IN8_WriteData_8Bit+0x38>)
 800154a:	f001 fd1d 	bl	8002f88 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fccb 	bl	8000eec <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 8001556:	2201      	movs	r2, #1
 8001558:	2108      	movs	r1, #8
 800155a:	4803      	ldr	r0, [pc, #12]	; (8001568 <LCD_1IN8_WriteData_8Bit+0x38>)
 800155c:	f001 fd14 	bl	8002f88 <HAL_GPIO_WritePin>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020000 	.word	0x40020000

0800156c <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

static void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 8001578:	2201      	movs	r2, #1
 800157a:	2110      	movs	r1, #16
 800157c:	480e      	ldr	r0, [pc, #56]	; (80015b8 <LCD_1IN8_WriteData_NLen16Bit+0x4c>)
 800157e:	f001 fd03 	bl	8002f88 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e00e      	b.n	80015a6 <LCD_1IN8_WriteData_NLen16Bit+0x3a>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 8001588:	88fb      	ldrh	r3, [r7, #6]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fcab 	bl	8000eec <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fca6 	bl	8000eec <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3301      	adds	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d3ec      	bcc.n	8001588 <LCD_1IN8_WriteData_NLen16Bit+0x1c>
    }
    //LCD_1IN8_CS_1;
}
 80015ae:	bf00      	nop
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020000 	.word	0x40020000

080015bc <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 80015c0:	20b1      	movs	r0, #177	; 0xb1
 80015c2:	f7ff ff9b 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff ffb2 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80015cc:	202c      	movs	r0, #44	; 0x2c
 80015ce:	f7ff ffaf 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80015d2:	202d      	movs	r0, #45	; 0x2d
 80015d4:	f7ff ffac 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 80015d8:	20b2      	movs	r0, #178	; 0xb2
 80015da:	f7ff ff8f 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ffa6 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80015e4:	202c      	movs	r0, #44	; 0x2c
 80015e6:	f7ff ffa3 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80015ea:	202d      	movs	r0, #45	; 0x2d
 80015ec:	f7ff ffa0 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 80015f0:	20b3      	movs	r0, #179	; 0xb3
 80015f2:	f7ff ff83 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff ff9a 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80015fc:	202c      	movs	r0, #44	; 0x2c
 80015fe:	f7ff ff97 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001602:	202d      	movs	r0, #45	; 0x2d
 8001604:	f7ff ff94 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ff91 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800160e:	202c      	movs	r0, #44	; 0x2c
 8001610:	f7ff ff8e 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001614:	202d      	movs	r0, #45	; 0x2d
 8001616:	f7ff ff8b 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800161a:	20b4      	movs	r0, #180	; 0xb4
 800161c:	f7ff ff6e 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001620:	2007      	movs	r0, #7
 8001622:	f7ff ff85 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 8001626:	20c0      	movs	r0, #192	; 0xc0
 8001628:	f7ff ff68 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800162c:	20a2      	movs	r0, #162	; 0xa2
 800162e:	f7ff ff7f 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff ff7c 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 8001638:	2084      	movs	r0, #132	; 0x84
 800163a:	f7ff ff79 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800163e:	20c1      	movs	r0, #193	; 0xc1
 8001640:	f7ff ff5c 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 8001644:	20c5      	movs	r0, #197	; 0xc5
 8001646:	f7ff ff73 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800164a:	20c2      	movs	r0, #194	; 0xc2
 800164c:	f7ff ff56 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 8001650:	200a      	movs	r0, #10
 8001652:	f7ff ff6d 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff ff6a 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800165c:	20c3      	movs	r0, #195	; 0xc3
 800165e:	f7ff ff4d 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8001662:	208a      	movs	r0, #138	; 0x8a
 8001664:	f7ff ff64 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 8001668:	202a      	movs	r0, #42	; 0x2a
 800166a:	f7ff ff61 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800166e:	20c4      	movs	r0, #196	; 0xc4
 8001670:	f7ff ff44 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 8001674:	208a      	movs	r0, #138	; 0x8a
 8001676:	f7ff ff5b 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800167a:	20ee      	movs	r0, #238	; 0xee
 800167c:	f7ff ff58 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8001680:	20c5      	movs	r0, #197	; 0xc5
 8001682:	f7ff ff3b 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 8001686:	200e      	movs	r0, #14
 8001688:	f7ff ff52 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800168c:	20e0      	movs	r0, #224	; 0xe0
 800168e:	f7ff ff35 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001692:	200f      	movs	r0, #15
 8001694:	f7ff ff4c 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 8001698:	201a      	movs	r0, #26
 800169a:	f7ff ff49 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800169e:	200f      	movs	r0, #15
 80016a0:	f7ff ff46 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 80016a4:	2018      	movs	r0, #24
 80016a6:	f7ff ff43 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 80016aa:	202f      	movs	r0, #47	; 0x2f
 80016ac:	f7ff ff40 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 80016b0:	2028      	movs	r0, #40	; 0x28
 80016b2:	f7ff ff3d 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 80016b6:	2020      	movs	r0, #32
 80016b8:	f7ff ff3a 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 80016bc:	2022      	movs	r0, #34	; 0x22
 80016be:	f7ff ff37 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 80016c2:	201f      	movs	r0, #31
 80016c4:	f7ff ff34 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80016c8:	201b      	movs	r0, #27
 80016ca:	f7ff ff31 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 80016ce:	2023      	movs	r0, #35	; 0x23
 80016d0:	f7ff ff2e 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 80016d4:	2037      	movs	r0, #55	; 0x37
 80016d6:	f7ff ff2b 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff ff28 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80016e0:	2007      	movs	r0, #7
 80016e2:	f7ff ff25 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff ff22 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80016ec:	2010      	movs	r0, #16
 80016ee:	f7ff ff1f 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 80016f2:	20e1      	movs	r0, #225	; 0xe1
 80016f4:	f7ff ff02 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80016f8:	200f      	movs	r0, #15
 80016fa:	f7ff ff19 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80016fe:	201b      	movs	r0, #27
 8001700:	f7ff ff16 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001704:	200f      	movs	r0, #15
 8001706:	f7ff ff13 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800170a:	2017      	movs	r0, #23
 800170c:	f7ff ff10 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 8001710:	2033      	movs	r0, #51	; 0x33
 8001712:	f7ff ff0d 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 8001716:	202c      	movs	r0, #44	; 0x2c
 8001718:	f7ff ff0a 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800171c:	2029      	movs	r0, #41	; 0x29
 800171e:	f7ff ff07 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 8001722:	202e      	movs	r0, #46	; 0x2e
 8001724:	f7ff ff04 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001728:	2030      	movs	r0, #48	; 0x30
 800172a:	f7ff ff01 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800172e:	2030      	movs	r0, #48	; 0x30
 8001730:	f7ff fefe 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 8001734:	2039      	movs	r0, #57	; 0x39
 8001736:	f7ff fefb 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800173a:	203f      	movs	r0, #63	; 0x3f
 800173c:	f7ff fef8 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fef5 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001746:	2007      	movs	r0, #7
 8001748:	f7ff fef2 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800174c:	2003      	movs	r0, #3
 800174e:	f7ff feef 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff feec 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 8001758:	20f0      	movs	r0, #240	; 0xf0
 800175a:	f7ff fecf 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff fee6 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 8001764:	20f6      	movs	r0, #246	; 0xf6
 8001766:	f7ff fec9 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fee0 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8001770:	203a      	movs	r0, #58	; 0x3a
 8001772:	f7ff fec3 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 8001776:	2005      	movs	r0, #5
 8001778:	f7ff feda 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800178a:	4a34      	ldr	r2, [pc, #208]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <LCD_1IN8_SetGramScanWay+0x28>
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <LCD_1IN8_SetGramScanWay+0x28>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d002      	beq.n	80017a8 <LCD_1IN8_SetGramScanWay+0x28>
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d10c      	bne.n	80017c2 <LCD_1IN8_SetGramScanWay+0x42>
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;		
 80017ae:	4b2b      	ldr	r3, [pc, #172]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017b0:	22a0      	movs	r2, #160	; 0xa0
 80017b2:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 80017b4:	4b29      	ldr	r3, [pc, #164]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017b6:	2202      	movs	r2, #2
 80017b8:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 80017ba:	4b28      	ldr	r3, [pc, #160]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017bc:	2201      	movs	r2, #1
 80017be:	811a      	strh	r2, [r3, #8]
 80017c0:	e00b      	b.n	80017da <LCD_1IN8_SetGramScanWay+0x5a>
	}else{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 80017c2:	4b26      	ldr	r3, [pc, #152]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017c4:	22a0      	movs	r2, #160	; 0xa0
 80017c6:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 80017c8:	4b24      	ldr	r3, [pc, #144]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <LCD_1IN8_SetGramScanWay+0xdc>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 80017da:	2300      	movs	r3, #0
 80017dc:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b07      	cmp	r3, #7
 80017e2:	d82b      	bhi.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <LCD_1IN8_SetGramScanWay+0x6c>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	0800180d 	.word	0x0800180d
 80017f0:	08001813 	.word	0x08001813
 80017f4:	08001819 	.word	0x08001819
 80017f8:	0800181f 	.word	0x0800181f
 80017fc:	08001825 	.word	0x08001825
 8001800:	0800182b 	.word	0x0800182b
 8001804:	08001831 	.word	0x08001831
 8001808:	08001837 	.word	0x08001837
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800180c:	2300      	movs	r3, #0
 800180e:	81fb      	strh	r3, [r7, #14]
        break;
 8001810:	e014      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	81fb      	strh	r3, [r7, #14]
        break;
 8001816:	e011      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8001818:	2340      	movs	r3, #64	; 0x40
 800181a:	81fb      	strh	r3, [r7, #14]
        break;
 800181c:	e00e      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	81fb      	strh	r3, [r7, #14]
        break;
 8001822:	e00b      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8001824:	2320      	movs	r3, #32
 8001826:	81fb      	strh	r3, [r7, #14]
        break;
 8001828:	e008      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800182a:	2360      	movs	r3, #96	; 0x60
 800182c:	81fb      	strh	r3, [r7, #14]
        break;
 800182e:	e005      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8001830:	23a0      	movs	r3, #160	; 0xa0
 8001832:	81fb      	strh	r3, [r7, #14]
        break;
 8001834:	e002      	b.n	800183c <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8001836:	23e0      	movs	r3, #224	; 0xe0
 8001838:	81fb      	strh	r3, [r7, #14]
        break;
 800183a:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800183c:	2036      	movs	r0, #54	; 0x36
 800183e:	f7ff fe5d 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 8001842:	89fb      	ldrh	r3, [r7, #14]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f023 0308 	bic.w	r3, r3, #8
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe6f 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

}
 8001852:	bf00      	nop
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000220 	.word	0x20000220

08001860 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800186a:	f7ff fe29 	bl	80014c0 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800186e:	f7ff fea5 	bl	80015bc <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff83 	bl	8001780 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800187a:	20c8      	movs	r0, #200	; 0xc8
 800187c:	f001 f90a 	bl	8002a94 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8001880:	2011      	movs	r0, #17
 8001882:	f7ff fe3b 	bl	80014fc <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 8001886:	2078      	movs	r0, #120	; 0x78
 8001888:	f001 f904 	bl	8002a94 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800188c:	2029      	movs	r0, #41	; 0x29
 800188e:	f7ff fe35 	bl	80014fc <LCD_1IN8_WriteReg>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4623      	mov	r3, r4
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	4603      	mov	r3, r0
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	807b      	strh	r3, [r7, #2]
 80018b6:	4613      	mov	r3, r2
 80018b8:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 80018ba:	202a      	movs	r0, #42	; 0x2a
 80018bc:	f7ff fe1e 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fe35 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <LCD_1IN8_SetWindows+0xa8>)
 80018cc:	88db      	ldrh	r3, [r3, #6]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe2b 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fe28 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <LCD_1IN8_SetWindows+0xa8>)
 80018e6:	88db      	ldrh	r3, [r3, #6]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe1c 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 80018f8:	202b      	movs	r0, #43	; 0x2b
 80018fa:	f7ff fdff 	bl	80014fc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fe16 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <LCD_1IN8_SetWindows+0xa8>)
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe0c 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001918:	2000      	movs	r0, #0
 800191a:	f7ff fe09 	bl	8001530 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800191e:	883b      	ldrh	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <LCD_1IN8_SetWindows+0xa8>)
 8001924:	891b      	ldrh	r3, [r3, #8]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b2db      	uxtb	r3, r3
 800192c:	3b01      	subs	r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fdfd 	bl	8001530 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	f7ff fde0 	bl	80014fc <LCD_1IN8_WriteReg>

}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	20000220 	.word	0x20000220

08001948 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	460a      	mov	r2, r1
 8001952:	80fb      	strh	r3, [r7, #6]
 8001954:	4613      	mov	r3, r2
 8001956:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	88b9      	ldrh	r1, [r7, #4]
 800195e:	88f8      	ldrh	r0, [r7, #6]
 8001960:	f7ff ff9c 	bl	800189c <LCD_1IN8_SetWindows>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	887a      	ldrh	r2, [r7, #2]
 8001982:	fb03 f202 	mul.w	r2, r3, r2
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fdee 	bl	800156c <LCD_1IN8_WriteData_NLen16Bit>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
 80019a2:	460b      	mov	r3, r1
 80019a4:	80bb      	strh	r3, [r7, #4]
 80019a6:	4613      	mov	r3, r2
 80019a8:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) ) {
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <LCD_1IN8_DrawPaint+0x48>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d810      	bhi.n	80019d6 <LCD_1IN8_DrawPaint+0x3e>
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <LCD_1IN8_DrawPaint+0x48>)
 80019b6:	885b      	ldrh	r3, [r3, #2]
 80019b8:	88ba      	ldrh	r2, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d80b      	bhi.n	80019d6 <LCD_1IN8_DrawPaint+0x3e>
        LCD_1IN8_SetCursor (Xpoint, Ypoint);
 80019be:	88ba      	ldrh	r2, [r7, #4]
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ffbf 	bl	8001948 <LCD_1IN8_SetCursor>
        LCD_1IN8_SetColor ( Color , 1 , 1);
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	2201      	movs	r2, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ffcb 	bl	800196c <LCD_1IN8_SetColor>
    }
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000220 	.word	0x20000220

080019e4 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, LCD_1IN8_WIDTH, LCD_1IN8_HEIGHT);
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	22a0      	movs	r2, #160	; 0xa0
 80019f2:	2100      	movs	r1, #0
 80019f4:	2000      	movs	r0, #0
 80019f6:	f7ff ff51 	bl	800189c <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 80019fa:	2201      	movs	r2, #1
 80019fc:	2110      	movs	r1, #16
 80019fe:	4813      	ldr	r0, [pc, #76]	; (8001a4c <LCD_1IN8_Clear+0x68>)
 8001a00:	f001 fac2 	bl	8002f88 <HAL_GPIO_WritePin>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	81fb      	strh	r3, [r7, #14]
 8001a08:	e017      	b.n	8001a3a <LCD_1IN8_Clear+0x56>
	{
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	81bb      	strh	r3, [r7, #12]
 8001a0e:	e00e      	b.n	8001a2e <LCD_1IN8_Clear+0x4a>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fa69 	bl	8000eec <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa62 	bl	8000eec <DEV_SPI_WRite>
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001a28:	89bb      	ldrh	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	81bb      	strh	r3, [r7, #12]
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	2b9f      	cmp	r3, #159	; 0x9f
 8001a32:	d9ed      	bls.n	8001a10 <LCD_1IN8_Clear+0x2c>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	3301      	adds	r3, #1
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	89fb      	ldrh	r3, [r7, #14]
 8001a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a3e:	d9e4      	bls.n	8001a0a <LCD_1IN8_Clear+0x26>
			
		}
	}
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40020000 	.word	0x40020000

08001a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a3d      	ldr	r2, [pc, #244]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b30      	ldr	r3, [pc, #192]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a2f      	ldr	r2, [pc, #188]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a28      	ldr	r2, [pc, #160]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <MX_GPIO_Init+0x114>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f242 31b0 	movw	r1, #9136	; 0x23b0
 8001adc:	4822      	ldr	r0, [pc, #136]	; (8001b68 <MX_GPIO_Init+0x118>)
 8001ade:	f001 fa53 	bl	8002f88 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2158      	movs	r1, #88	; 0x58
 8001ae6:	4821      	ldr	r0, [pc, #132]	; (8001b6c <MX_GPIO_Init+0x11c>)
 8001ae8:	f001 fa4e 	bl	8002f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8001aec:	f242 33b0 	movw	r3, #9136	; 0x23b0
 8001af0:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	4818      	ldr	r0, [pc, #96]	; (8001b68 <MX_GPIO_Init+0x118>)
 8001b06:	f001 f8cb 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001b0a:	2358      	movs	r3, #88	; 0x58
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_GPIO_Init+0x11c>)
 8001b22:	f001 f8bd 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin|IMU_INT1_Pin|IMU_INT2_Pin|DEB_B_Pin
 8001b26:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001b2a:	617b      	str	r3, [r7, #20]
                          |DEB_A_Pin|ROT_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_GPIO_Init+0x120>)
 8001b3e:	f001 f8af 	bl	8002ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEL_0_Pin|SEL_1_Pin|PG_3V3_Pin;
 8001b42:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_GPIO_Init+0x11c>)
 8001b58:	f001 f8a2 	bl	8002ca0 <HAL_GPIO_Init>

}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400

08001b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b78:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b7a:	4a13      	ldr	r2, [pc, #76]	; (8001bc8 <MX_I2C1_Init+0x54>)
 8001b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <MX_I2C1_Init+0x58>)
 8001b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <MX_I2C1_Init+0x50>)
 8001bb2:	f001 fa1d 	bl	8002ff0 <HAL_I2C_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bbc:	f000 fa2e 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000022c 	.word	0x2000022c
 8001bc8:	40005400 	.word	0x40005400
 8001bcc:	000186a0 	.word	0x000186a0

08001bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c0e:	23c0      	movs	r3, #192	; 0xc0
 8001c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c12:	2312      	movs	r3, #18
 8001c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	4619      	mov	r1, r3
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001c2a:	f001 f839 	bl	8002ca0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3728      	adds	r7, #40	; 0x28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001c64:	4b11      	ldr	r3, [pc, #68]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <MX_LPTIM1_Init+0x50>)
 8001c68:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c7c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001c90:	4806      	ldr	r0, [pc, #24]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001c92:	f001 faf1 	bl	8003278 <HAL_LPTIM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8001c9c:	f000 f9be 	bl	800201c <Error_Handler>
  }
  __HAL_LPTIM_OPTR_CONFIG(&hlptim1, LPTIM_OP_PAD_AF);
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <MX_LPTIM1_Init+0x4c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000280 	.word	0x20000280
 8001cb0:	40002400 	.word	0x40002400

08001cb4 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b090      	sub	sp, #64	; 0x40
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]
  if(lptimHandle->Instance==LPTIM1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a20      	ldr	r2, [pc, #128]	; (8001d64 <HAL_LPTIM_MspInit+0xb0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d139      	bne.n	8001d5c <HAL_LPTIM_MspInit+0xa8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001ce8:	2310      	movs	r3, #16
 8001cea:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fd49 	bl	800378c <HAL_RCCEx_PeriphCLKConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8001d00:	f000 f98c 	bl	800201c <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a16      	ldr	r2, [pc, #88]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d2a:	f043 0304 	orr.w	r3, r3, #4
 8001d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <HAL_LPTIM_MspInit+0xb4>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC1     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d54:	4619      	mov	r1, r3
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <HAL_LPTIM_MspInit+0xb8>)
 8001d58:	f000 ffa2 	bl	8002ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001d5c:	bf00      	nop
 8001d5e:	3740      	adds	r7, #64	; 0x40
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40002400 	.word	0x40002400
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020800 	.word	0x40020800

08001d70 <lcd_testing>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void lcd_testing()
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af02      	add	r7, sp, #8

	DEV_Module_Init();
 8001d76:	f7ff f8cb 	bl	8000f10 <DEV_Module_Init>
	LCD_1IN8_Init(SCAN_DIR_DFT);
 8001d7a:	2005      	movs	r0, #5
 8001d7c:	f7ff fd70 	bl	8001860 <LCD_1IN8_Init>
	LCD_1IN8_Clear(BLACK);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f7ff fe2f 	bl	80019e4 <LCD_1IN8_Clear>
	Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8001d86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	20a0      	movs	r0, #160	; 0xa0
 8001d90:	f7ff f8d4 	bl	8000f3c <Paint_NewImage>
	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8001d94:	4842      	ldr	r0, [pc, #264]	; (8001ea0 <lcd_testing+0x130>)
 8001d96:	f7ff f91d 	bl	8000fd4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8001d9a:	4842      	ldr	r0, [pc, #264]	; (8001ea4 <lcd_testing+0x134>)
 8001d9c:	f7ff f92a 	bl	8000ff4 <Paint_SetDisplayFuntion>
	Paint_Clear(WHITE);
 8001da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001da4:	f7ff f9e2 	bl	800116c <Paint_Clear>

	// Initialization routine:
	Paint_DrawString_EN(1, 48, "Initializing", &Font12, 0xFFFF, 0x0000);
 8001da8:	2300      	movs	r3, #0
 8001daa:	9301      	str	r3, [sp, #4]
 8001dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	4b3d      	ldr	r3, [pc, #244]	; (8001ea8 <lcd_testing+0x138>)
 8001db4:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <lcd_testing+0x13c>)
 8001db6:	2130      	movs	r1, #48	; 0x30
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fa91 	bl	80012e0 <Paint_DrawString_EN>
	HAL_Delay(1000);
 8001dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc2:	f000 fe67 	bl	8002a94 <HAL_Delay>
	Paint_DrawString_EN(1, 48, "Initializing .", &Font12, 0xFFFF, 0x0000);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <lcd_testing+0x138>)
 8001dd2:	4a37      	ldr	r2, [pc, #220]	; (8001eb0 <lcd_testing+0x140>)
 8001dd4:	2130      	movs	r1, #48	; 0x30
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f7ff fa82 	bl	80012e0 <Paint_DrawString_EN>
	HAL_Delay(1000);
 8001ddc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de0:	f000 fe58 	bl	8002a94 <HAL_Delay>
	Paint_DrawString_EN(1, 48, "Initializing . .", &Font12, 0xFFFF, 0x0000);
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4b2e      	ldr	r3, [pc, #184]	; (8001ea8 <lcd_testing+0x138>)
 8001df0:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <lcd_testing+0x144>)
 8001df2:	2130      	movs	r1, #48	; 0x30
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fa73 	bl	80012e0 <Paint_DrawString_EN>
	HAL_Delay(1000);
 8001dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dfe:	f000 fe49 	bl	8002a94 <HAL_Delay>
	Paint_DrawString_EN(1, 48, "Initializing . . .", &Font12, 0xFFFF, 0x0000);
 8001e02:	2300      	movs	r3, #0
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <lcd_testing+0x138>)
 8001e0e:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <lcd_testing+0x148>)
 8001e10:	2130      	movs	r1, #48	; 0x30
 8001e12:	2001      	movs	r0, #1
 8001e14:	f7ff fa64 	bl	80012e0 <Paint_DrawString_EN>
	HAL_Delay(1000);
 8001e18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e1c:	f000 fe3a 	bl	8002a94 <HAL_Delay>
	Paint_Clear(WHITE);
 8001e20:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e24:	f7ff f9a2 	bl	800116c <Paint_Clear>
	Paint_DrawString_EN(1, 48, "Current Temperature:", &Font12, 0xFFFF, 0x0000);
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <lcd_testing+0x138>)
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <lcd_testing+0x14c>)
 8001e36:	2130      	movs	r1, #48	; 0x30
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fa51 	bl	80012e0 <Paint_DrawString_EN>
	Paint_DrawFloatNum(1 , 60, 69.69696, 5, &Font12, 0x0000, 0xFFFF);
 8001e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2300      	movs	r3, #0
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <lcd_testing+0x138>)
 8001e4a:	2205      	movs	r2, #5
 8001e4c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8001e90 <lcd_testing+0x120>
 8001e50:	213c      	movs	r1, #60	; 0x3c
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fa9a 	bl	800138c <Paint_DrawFloatNum>
	HAL_Delay(1000);
 8001e58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e5c:	f000 fe1a 	bl	8002a94 <HAL_Delay>
	Paint_Clear(WHITE);
 8001e60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e64:	f7ff f982 	bl	800116c <Paint_Clear>
	Paint_DrawFloatNum(1 , 60, 70.0000, 5, &Font12, 0x0000, 0xFFFF);
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <lcd_testing+0x138>)
 8001e74:	2205      	movs	r2, #5
 8001e76:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001e98 <lcd_testing+0x128>
 8001e7a:	213c      	movs	r1, #60	; 0x3c
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff fa85 	bl	800138c <Paint_DrawFloatNum>
	HAL_Delay(2000);
 8001e82:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e86:	f000 fe05 	bl	8002a94 <HAL_Delay>
//	// gImage_70X70
//	Paint_DrawImage(gImage_70X70, 1, 60, 70, 70);
//	Paint_DrawImage(gImage_1,80,35,60,60);

};
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	fe1da7b1 	.word	0xfe1da7b1
 8001e94:	40516c9a 	.word	0x40516c9a
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	40518000 	.word	0x40518000
 8001ea0:	080019e5 	.word	0x080019e5
 8001ea4:	08001999 	.word	0x08001999
 8001ea8:	20000000 	.word	0x20000000
 8001eac:	0800806c 	.word	0x0800806c
 8001eb0:	0800807c 	.word	0x0800807c
 8001eb4:	0800808c 	.word	0x0800808c
 8001eb8:	080080a0 	.word	0x080080a0
 8001ebc:	080080b4 	.word	0x080080b4

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec4:	f000 fda4 	bl	8002a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec8:	f000 f838 	bl	8001f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ecc:	f7ff fdc0 	bl	8001a50 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ed0:	f7ff fe50 	bl	8001b74 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001ed4:	f000 fb48 	bl	8002568 <MX_TIM5_Init>
  MX_SPI1_Init();
 8001ed8:	f000 f8a6 	bl	8002028 <MX_SPI1_Init>
  MX_TIM9_Init();
 8001edc:	f000 fbb4 	bl	8002648 <MX_TIM9_Init>
  MX_LPTIM1_Init();
 8001ee0:	f7ff febe 	bl	8001c60 <MX_LPTIM1_Init>
  MX_TIM1_Init();
 8001ee4:	f000 fabc 	bl	8002460 <MX_TIM1_Init>
  MX_TIM11_Init();
 8001ee8:	f000 fbf4 	bl	80026d4 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
//  LCD_1in8_test();
  lcd_testing();
 8001eec:	f7ff ff40 	bl	8001d70 <lcd_testing>
  HAL_TIM_Base_Start_IT(&htim5);
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <main+0x68>)
 8001ef2:	f002 fa8b 	bl	800440c <HAL_TIM_Base_Start_IT>
	  // gx();


	  // Switch for LCD display modes which will be toggled through via
	  // the switch on the rotary encoder
	  switch(LCD_STATE){
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <main+0x6c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d00e      	beq.n	8001f1c <main+0x5c>
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	dc10      	bgt.n	8001f24 <main+0x64>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <main+0x4c>
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d004      	beq.n	8001f14 <main+0x54>
	  case 2:
		  printf("State 2\n");
		  break;

	  default:
		  break;
 8001f0a:	e00b      	b.n	8001f24 <main+0x64>
		  printf("State 0\n");
 8001f0c:	4808      	ldr	r0, [pc, #32]	; (8001f30 <main+0x70>)
 8001f0e:	f003 fe8b 	bl	8005c28 <puts>
		  break;
 8001f12:	e008      	b.n	8001f26 <main+0x66>
		  printf("State 1\n");
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <main+0x74>)
 8001f16:	f003 fe87 	bl	8005c28 <puts>
		  break;
 8001f1a:	e004      	b.n	8001f26 <main+0x66>
		  printf("State 2\n");
 8001f1c:	4806      	ldr	r0, [pc, #24]	; (8001f38 <main+0x78>)
 8001f1e:	f003 fe83 	bl	8005c28 <puts>
		  break;
 8001f22:	e000      	b.n	8001f26 <main+0x66>
		  break;
 8001f24:	bf00      	nop
	  switch(LCD_STATE){
 8001f26:	e7e6      	b.n	8001ef6 <main+0x36>
 8001f28:	200003a0 	.word	0x200003a0
 8001f2c:	200002b0 	.word	0x200002b0
 8001f30:	080080cc 	.word	0x080080cc
 8001f34:	080080d4 	.word	0x080080d4
 8001f38:	080080dc 	.word	0x080080dc

08001f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	; 0x50
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	2234      	movs	r2, #52	; 0x34
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 f894 	bl	8005078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <SystemClock_Config+0xb4>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <SystemClock_Config+0xb4>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b1f      	ldr	r3, [pc, #124]	; (8001ff0 <SystemClock_Config+0xb4>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <SystemClock_Config+0xb8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <SystemClock_Config+0xb8>)
 8001f86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <SystemClock_Config+0xb8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fa0:	2310      	movs	r3, #16
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	4618      	mov	r0, r3
 8001fae:	f001 fcc9 	bl	8003944 <HAL_RCC_OscConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001fb8:	f000 f830 	bl	800201c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fbc:	230f      	movs	r3, #15
 8001fbe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fd0:	f107 0308 	add.w	r3, r7, #8
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 f9da 	bl	8003390 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001fe2:	f000 f81b 	bl	800201c <Error_Handler>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3750      	adds	r7, #80	; 0x50
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d101      	bne.n	800200e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800200a:	f000 fd23 	bl	8002a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40001000 	.word	0x40001000

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800202c:	4b17      	ldr	r3, [pc, #92]	; (800208c <MX_SPI1_Init+0x64>)
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <MX_SPI1_Init+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002032:	4b16      	ldr	r3, [pc, #88]	; (800208c <MX_SPI1_Init+0x64>)
 8002034:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002038:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <MX_SPI1_Init+0x64>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <MX_SPI1_Init+0x64>)
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002046:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_SPI1_Init+0x64>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204c:	4b0f      	ldr	r3, [pc, #60]	; (800208c <MX_SPI1_Init+0x64>)
 800204e:	2200      	movs	r2, #0
 8002050:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_SPI1_Init+0x64>)
 8002054:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002058:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_SPI1_Init+0x64>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002060:	4b0a      	ldr	r3, [pc, #40]	; (800208c <MX_SPI1_Init+0x64>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_SPI1_Init+0x64>)
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <MX_SPI1_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_SPI1_Init+0x64>)
 8002074:	220f      	movs	r2, #15
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_SPI1_Init+0x64>)
 800207a:	f001 fee7 	bl	8003e4c <HAL_SPI_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002084:	f7ff ffca 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	200002b4 	.word	0x200002b4
 8002090:	40013000 	.word	0x40013000

08002094 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_SPI_MspInit+0x84>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d12b      	bne.n	800210e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_SPI_MspInit+0x88>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020ee:	23a0      	movs	r3, #160	; 0xa0
 80020f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fa:	2303      	movs	r3, #3
 80020fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020fe:	2305      	movs	r3, #5
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_SPI_MspInit+0x8c>)
 800210a:	f000 fdc9 	bl	8002ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40013000 	.word	0x40013000
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_MspInit+0x4c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_MspInit+0x4c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x4c>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x4c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	2036      	movs	r0, #54	; 0x36
 800218a:	f000 fd5f 	bl	8002c4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800218e:	2036      	movs	r0, #54	; 0x36
 8002190:	f000 fd78 	bl	8002c84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <HAL_InitTick+0xa0>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <HAL_InitTick+0xa0>)
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_InitTick+0xa0>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021b0:	f107 0210 	add.w	r2, r7, #16
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fab4 	bl	8003728 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c0:	f001 fa9e 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80021c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <HAL_InitTick+0xa4>)
 80021ca:	fba2 2303 	umull	r2, r3, r2, r3
 80021ce:	0c9b      	lsrs	r3, r3, #18
 80021d0:	3b01      	subs	r3, #1
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_InitTick+0xa8>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <HAL_InitTick+0xac>)
 80021d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_InitTick+0xa8>)
 80021dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_InitTick+0xa8>)
 80021e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_InitTick+0xa8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ee:	4b0b      	ldr	r3, [pc, #44]	; (800221c <HAL_InitTick+0xa8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <HAL_InitTick+0xa8>)
 80021f6:	f002 f8b9 	bl	800436c <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d104      	bne.n	800220a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_InitTick+0xa8>)
 8002202:	f002 f903 	bl	800440c <HAL_TIM_Base_Start_IT>
 8002206:	4603      	mov	r3, r0
 8002208:	e000      	b.n	800220c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
}
 800220c:	4618      	mov	r0, r3
 800220e:	3730      	adds	r7, #48	; 0x30
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40023800 	.word	0x40023800
 8002218:	431bde83 	.word	0x431bde83
 800221c:	2000030c 	.word	0x2000030c
 8002220:	40001000 	.word	0x40001000

08002224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x4>

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8002280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <TIM5_IRQHandler+0x18>)
 8002286:	f000 fe98 	bl	8002fba <HAL_GPIO_TogglePin>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800228a:	4803      	ldr	r0, [pc, #12]	; (8002298 <TIM5_IRQHandler+0x1c>)
 800228c:	f002 f9b4 	bl	80045f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40020800 	.word	0x40020800
 8002298:	200003a0 	.word	0x200003a0

0800229c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <TIM6_DAC_IRQHandler+0x10>)
 80022a2:	f002 f9a9 	bl	80045f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000030c 	.word	0x2000030c

080022b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
	return 1;
 80022b4:	2301      	movs	r3, #1
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_kill>:

int _kill(int pid, int sig)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022ca:	f002 fe8d 	bl	8004fe8 <__errno>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2216      	movs	r2, #22
 80022d2:	601a      	str	r2, [r3, #0]
	return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <_exit>:

void _exit (int status)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff ffe7 	bl	80022c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022f2:	e7fe      	b.n	80022f2 <_exit+0x12>

080022f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e00a      	b.n	800231c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002306:	f3af 8000 	nop.w
 800230a:	4601      	mov	r1, r0
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60ba      	str	r2, [r7, #8]
 8002312:	b2ca      	uxtb	r2, r1
 8002314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	dbf0      	blt.n	8002306 <_read+0x12>
	}

return len;
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e009      	b.n	8002354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3301      	adds	r3, #1
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	429a      	cmp	r2, r3
 800235a:	dbf1      	blt.n	8002340 <_write+0x12>
	}
	return len;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_close>:

int _close(int file)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
	return -1;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238e:	605a      	str	r2, [r3, #4]
	return 0;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_isatty>:

int _isatty(int file)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
	return 1;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <_sbrk+0x5c>)
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <_sbrk+0x60>)
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023ec:	4b11      	ldr	r3, [pc, #68]	; (8002434 <_sbrk+0x64>)
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <_sbrk+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002400:	f002 fdf2 	bl	8004fe8 <__errno>
 8002404:	4603      	mov	r3, r0
 8002406:	220c      	movs	r2, #12
 8002408:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295
 800240e:	e009      	b.n	8002424 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <_sbrk+0x64>)
 8002420:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20008000 	.word	0x20008000
 8002430:	00000400 	.word	0x00000400
 8002434:	20000354 	.word	0x20000354
 8002438:	20000490 	.word	0x20000490

0800243c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <SystemInit+0x20>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	4a05      	ldr	r2, [pc, #20]	; (800245c <SystemInit+0x20>)
 8002448:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800244c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b092      	sub	sp, #72	; 0x48
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	605a      	str	r2, [r3, #4]
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	60da      	str	r2, [r3, #12]
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	615a      	str	r2, [r3, #20]
 8002482:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2220      	movs	r2, #32
 8002488:	2100      	movs	r1, #0
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fdf4 	bl	8005078 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002490:	4b33      	ldr	r3, [pc, #204]	; (8002560 <MX_TIM1_Init+0x100>)
 8002492:	4a34      	ldr	r2, [pc, #208]	; (8002564 <MX_TIM1_Init+0x104>)
 8002494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002496:	4b32      	ldr	r3, [pc, #200]	; (8002560 <MX_TIM1_Init+0x100>)
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <MX_TIM1_Init+0x100>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024a2:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <MX_TIM1_Init+0x100>)
 80024a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <MX_TIM1_Init+0x100>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b0:	4b2b      	ldr	r3, [pc, #172]	; (8002560 <MX_TIM1_Init+0x100>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <MX_TIM1_Init+0x100>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024bc:	4828      	ldr	r0, [pc, #160]	; (8002560 <MX_TIM1_Init+0x100>)
 80024be:	f002 f84c 	bl	800455a <HAL_TIM_PWM_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80024c8:	f7ff fda8 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	2300      	movs	r3, #0
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024d8:	4619      	mov	r1, r3
 80024da:	4821      	ldr	r0, [pc, #132]	; (8002560 <MX_TIM1_Init+0x100>)
 80024dc:	f002 fcc4 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80024e6:	f7ff fd99 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ea:	2360      	movs	r3, #96	; 0x60
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024f6:	2300      	movs	r3, #0
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800250a:	2200      	movs	r2, #0
 800250c:	4619      	mov	r1, r3
 800250e:	4814      	ldr	r0, [pc, #80]	; (8002560 <MX_TIM1_Init+0x100>)
 8002510:	f002 f9d6 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800251a:	f7ff fd7f 	bl	800201c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002536:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4807      	ldr	r0, [pc, #28]	; (8002560 <MX_TIM1_Init+0x100>)
 8002542:	f002 fceb 	bl	8004f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800254c:	f7ff fd66 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002550:	4803      	ldr	r0, [pc, #12]	; (8002560 <MX_TIM1_Init+0x100>)
 8002552:	f000 f983 	bl	800285c <HAL_TIM_MspPostInit>

}
 8002556:	bf00      	nop
 8002558:	3748      	adds	r7, #72	; 0x48
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000358 	.word	0x20000358
 8002564:	40010000 	.word	0x40010000

08002568 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	611a      	str	r2, [r3, #16]
 8002586:	615a      	str	r2, [r3, #20]
 8002588:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800258a:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <MX_TIM5_Init+0xd8>)
 800258c:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <MX_TIM5_Init+0xdc>)
 800258e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 8002590:	4b2b      	ldr	r3, [pc, #172]	; (8002640 <MX_TIM5_Init+0xd8>)
 8002592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002596:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <MX_TIM5_Init+0xd8>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7200;
 800259e:	4b28      	ldr	r3, [pc, #160]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025a0:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80025a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80025b2:	4823      	ldr	r0, [pc, #140]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025b4:	f001 ffd1 	bl	800455a <HAL_TIM_PWM_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80025be:	f7ff fd2d 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80025c2:	481f      	ldr	r0, [pc, #124]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025c4:	f001 ff70 	bl	80044a8 <HAL_TIM_OC_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 80025ce:	f7ff fd25 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80025da:	f107 0320 	add.w	r3, r7, #32
 80025de:	4619      	mov	r1, r3
 80025e0:	4817      	ldr	r0, [pc, #92]	; (8002640 <MX_TIM5_Init+0xd8>)
 80025e2:	f002 fc41 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80025ec:	f7ff fd16 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f0:	2360      	movs	r3, #96	; 0x60
 80025f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	480e      	ldr	r0, [pc, #56]	; (8002640 <MX_TIM5_Init+0xd8>)
 8002608:	f002 f95a 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8002612:	f7ff fd03 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2204      	movs	r2, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_TIM5_Init+0xd8>)
 8002622:	f002 f8f1 	bl	8004808 <HAL_TIM_OC_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 800262c:	f7ff fcf6 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <MX_TIM5_Init+0xd8>)
 8002632:	f000 f913 	bl	800285c <HAL_TIM_MspPostInit>

}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200003a0 	.word	0x200003a0
 8002644:	40000c00 	.word	0x40000c00

08002648 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	615a      	str	r2, [r3, #20]
 800265e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <MX_TIM9_Init+0x84>)
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <MX_TIM9_Init+0x88>)
 8002664:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002666:	4b19      	ldr	r3, [pc, #100]	; (80026cc <MX_TIM9_Init+0x84>)
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b17      	ldr	r3, [pc, #92]	; (80026cc <MX_TIM9_Init+0x84>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002672:	4b16      	ldr	r3, [pc, #88]	; (80026cc <MX_TIM9_Init+0x84>)
 8002674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002678:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <MX_TIM9_Init+0x84>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <MX_TIM9_Init+0x84>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002686:	4811      	ldr	r0, [pc, #68]	; (80026cc <MX_TIM9_Init+0x84>)
 8002688:	f001 ff67 	bl	800455a <HAL_TIM_PWM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002692:	f7ff fcc3 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	; 0x60
 8002698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <MX_TIM9_Init+0x84>)
 80026ae:	f002 f907 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80026b8:	f7ff fcb0 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80026bc:	4803      	ldr	r0, [pc, #12]	; (80026cc <MX_TIM9_Init+0x84>)
 80026be:	f000 f8cd 	bl	800285c <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200003e8 	.word	0x200003e8
 80026d0:	40014000 	.word	0x40014000

080026d4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <MX_TIM11_Init+0x94>)
 80026ee:	4a1f      	ldr	r2, [pc, #124]	; (800276c <MX_TIM11_Init+0x98>)
 80026f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <MX_TIM11_Init+0x94>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_TIM11_Init+0x94>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_TIM11_Init+0x94>)
 8002700:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002704:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_TIM11_Init+0x94>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_TIM11_Init+0x94>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002712:	4815      	ldr	r0, [pc, #84]	; (8002768 <MX_TIM11_Init+0x94>)
 8002714:	f001 fe2a 	bl	800436c <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800271e:	f7ff fc7d 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8002722:	4811      	ldr	r0, [pc, #68]	; (8002768 <MX_TIM11_Init+0x94>)
 8002724:	f001 ff19 	bl	800455a <HAL_TIM_PWM_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800272e:	f7ff fc75 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002732:	2360      	movs	r3, #96	; 0x60
 8002734:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM11_Init+0x94>)
 800274a:	f002 f8b9 	bl	80048c0 <HAL_TIM_PWM_ConfigChannel>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002754:	f7ff fc62 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM11_Init+0x94>)
 800275a:	f000 f87f 	bl	800285c <HAL_TIM_MspPostInit>

}
 800275e:	bf00      	nop
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000430 	.word	0x20000430
 800276c:	40014800 	.word	0x40014800

08002770 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_TIM_PWM_MspInit+0x98>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10e      	bne.n	80027a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800279e:	e02e      	b.n	80027fe <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM5)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1a      	ldr	r2, [pc, #104]	; (8002810 <HAL_TIM_PWM_MspInit+0xa0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d116      	bne.n	80027d8 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a16      	ldr	r2, [pc, #88]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	613b      	str	r3, [r7, #16]
 80027c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 15, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	210f      	movs	r1, #15
 80027ca:	2032      	movs	r0, #50	; 0x32
 80027cc:	f000 fa3e 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027d0:	2032      	movs	r0, #50	; 0x32
 80027d2:	f000 fa57 	bl	8002c84 <HAL_NVIC_EnableIRQ>
}
 80027d6:	e012      	b.n	80027fe <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM9)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	; (8002814 <HAL_TIM_PWM_MspInit+0xa4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10d      	bne.n	80027fe <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_TIM_PWM_MspInit+0x9c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
}
 80027fe:	bf00      	nop
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40010000 	.word	0x40010000
 800280c:	40023800 	.word	0x40023800
 8002810:	40000c00 	.word	0x40000c00
 8002814:	40014000 	.word	0x40014000

08002818 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_TIM_Base_MspInit+0x3c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10d      	bne.n	8002846 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <HAL_TIM_Base_MspInit+0x40>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_TIM_Base_MspInit+0x40>)
 8002834:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_TIM_Base_MspInit+0x40>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40014800 	.word	0x40014800
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	; 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_TIM_MspPostInit+0x144>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11f      	bne.n	80028be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a47      	ldr	r2, [pc, #284]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b45      	ldr	r3, [pc, #276]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	61bb      	str	r3, [r7, #24]
 8002898:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PLATE_PWM_Pin;
 800289a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028ac:	2301      	movs	r3, #1
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLATE_PWM_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	483c      	ldr	r0, [pc, #240]	; (80029a8 <HAL_TIM_MspPostInit+0x14c>)
 80028b8:	f000 f9f2 	bl	8002ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80028bc:	e06b      	b.n	8002996 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3a      	ldr	r2, [pc, #232]	; (80029ac <HAL_TIM_MspPostInit+0x150>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d11e      	bne.n	8002906 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	4a34      	ldr	r2, [pc, #208]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6313      	str	r3, [r2, #48]	; 0x30
 80028d8:	4b32      	ldr	r3, [pc, #200]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_PWM_Pin|GPIO_PIN_1;
 80028e4:	2303      	movs	r3, #3
 80028e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f0:	2300      	movs	r3, #0
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028f4:	2302      	movs	r3, #2
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	482a      	ldr	r0, [pc, #168]	; (80029a8 <HAL_TIM_MspPostInit+0x14c>)
 8002900:	f000 f9ce 	bl	8002ca0 <HAL_GPIO_Init>
}
 8002904:	e047      	b.n	8002996 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM9)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <HAL_TIM_MspPostInit+0x154>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d11e      	bne.n	800294e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 800292c:	2304      	movs	r3, #4
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800293c:	2303      	movs	r3, #3
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	4818      	ldr	r0, [pc, #96]	; (80029a8 <HAL_TIM_MspPostInit+0x14c>)
 8002948:	f000 f9aa 	bl	8002ca0 <HAL_GPIO_Init>
}
 800294c:	e023      	b.n	8002996 <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a18      	ldr	r2, [pc, #96]	; (80029b4 <HAL_TIM_MspPostInit+0x158>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d11e      	bne.n	8002996 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6313      	str	r3, [r2, #48]	; 0x30
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_TIM_MspPostInit+0x148>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002986:	2303      	movs	r3, #3
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	4809      	ldr	r0, [pc, #36]	; (80029b8 <HAL_TIM_MspPostInit+0x15c>)
 8002992:	f000 f985 	bl	8002ca0 <HAL_GPIO_Init>
}
 8002996:	bf00      	nop
 8002998:	3730      	adds	r7, #48	; 0x30
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40000c00 	.word	0x40000c00
 80029b0:	40014000 	.word	0x40014000
 80029b4:	40014800 	.word	0x40014800
 80029b8:	40020800 	.word	0x40020800

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c2:	490e      	ldr	r1, [pc, #56]	; (80029fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d8:	4c0b      	ldr	r4, [pc, #44]	; (8002a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e6:	f7ff fd29 	bl	800243c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f002 fb03 	bl	8004ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff fa67 	bl	8001ec0 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a00:	0800895c 	.word	0x0800895c
  ldr r2, =_sbss
 8002a04:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a08:	2000048c 	.word	0x2000048c

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>
	...

08002a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_Init+0x40>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <HAL_Init+0x40>)
 8002a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <HAL_Init+0x40>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_Init+0x40>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_Init+0x40>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f000 f8fc 	bl	8002c36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	200f      	movs	r0, #15
 8002a40:	f7ff fb98 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fb6e 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000010 	.word	0x20000010
 8002a78:	20000478 	.word	0x20000478

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000478 	.word	0x20000478

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000010 	.word	0x20000010

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ff4c 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5e:	f7ff ff61 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002c62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	6978      	ldr	r0, [r7, #20]
 8002c6a:	f7ff ffb1 	bl	8002bd0 <NVIC_EncodePriority>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff ff80 	bl	8002b7c <__NVIC_SetPriority>
}
 8002c7c:	bf00      	nop
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff54 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b089      	sub	sp, #36	; 0x24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	e14d      	b.n	8002f58 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f040 813c 	bne.w	8002f52 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d005      	beq.n	8002cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d130      	bne.n	8002d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d28:	2201      	movs	r2, #1
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 0201 	and.w	r2, r3, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 0303 	and.w	r3, r3, #3
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d017      	beq.n	8002d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d123      	bne.n	8002de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	08da      	lsrs	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3208      	adds	r2, #8
 8002da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	08da      	lsrs	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3208      	adds	r2, #8
 8002dde:	69b9      	ldr	r1, [r7, #24]
 8002de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43db      	mvns	r3, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0203 	and.w	r2, r3, #3
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8096 	beq.w	8002f52 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b51      	ldr	r3, [pc, #324]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	; 0x44
 8002e36:	4b4e      	ldr	r3, [pc, #312]	; (8002f70 <HAL_GPIO_Init+0x2d0>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e42:	4a4c      	ldr	r2, [pc, #304]	; (8002f74 <HAL_GPIO_Init+0x2d4>)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	3302      	adds	r3, #2
 8002e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	220f      	movs	r2, #15
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a43      	ldr	r2, [pc, #268]	; (8002f78 <HAL_GPIO_Init+0x2d8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00d      	beq.n	8002e8a <HAL_GPIO_Init+0x1ea>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a42      	ldr	r2, [pc, #264]	; (8002f7c <HAL_GPIO_Init+0x2dc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <HAL_GPIO_Init+0x1e6>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <HAL_GPIO_Init+0x2e0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d101      	bne.n	8002e82 <HAL_GPIO_Init+0x1e2>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e004      	b.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e82:	2307      	movs	r3, #7
 8002e84:	e002      	b.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_GPIO_Init+0x1ec>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	f002 0203 	and.w	r2, r2, #3
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	4093      	lsls	r3, r2
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e9c:	4935      	ldr	r1, [pc, #212]	; (8002f74 <HAL_GPIO_Init+0x2d4>)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eaa:	4b36      	ldr	r3, [pc, #216]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ece:	4a2d      	ldr	r2, [pc, #180]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f22:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_GPIO_Init+0x2e4>)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3301      	adds	r3, #1
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	2b0f      	cmp	r3, #15
 8002f5c:	f67f aeae 	bls.w	8002cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f60:	bf00      	nop
 8002f62:	bf00      	nop
 8002f64:	3724      	adds	r7, #36	; 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40013800 	.word	0x40013800
 8002f78:	40020000 	.word	0x40020000
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40013c00 	.word	0x40013c00

08002f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
 8002f94:	4613      	mov	r3, r2
 8002f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f98:	787b      	ldrb	r3, [r7, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f9e:	887a      	ldrh	r2, [r7, #2]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fa4:	e003      	b.n	8002fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	619a      	str	r2, [r3, #24]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b085      	sub	sp, #20
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fcc:	887a      	ldrh	r2, [r7, #2]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	041a      	lsls	r2, r3, #16
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	43d9      	mvns	r1, r3
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	400b      	ands	r3, r1
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	619a      	str	r2, [r3, #24]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e12b      	b.n	800325a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe fdda 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003054:	f000 fb54 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 8003058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a81      	ldr	r2, [pc, #516]	; (8003264 <HAL_I2C_Init+0x274>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d807      	bhi.n	8003074 <HAL_I2C_Init+0x84>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4a80      	ldr	r2, [pc, #512]	; (8003268 <HAL_I2C_Init+0x278>)
 8003068:	4293      	cmp	r3, r2
 800306a:	bf94      	ite	ls
 800306c:	2301      	movls	r3, #1
 800306e:	2300      	movhi	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e006      	b.n	8003082 <HAL_I2C_Init+0x92>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a7d      	ldr	r2, [pc, #500]	; (800326c <HAL_I2C_Init+0x27c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0e7      	b.n	800325a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a78      	ldr	r2, [pc, #480]	; (8003270 <HAL_I2C_Init+0x280>)
 800308e:	fba2 2303 	umull	r2, r3, r2, r3
 8003092:	0c9b      	lsrs	r3, r3, #18
 8003094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	4a6a      	ldr	r2, [pc, #424]	; (8003264 <HAL_I2C_Init+0x274>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d802      	bhi.n	80030c4 <HAL_I2C_Init+0xd4>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	3301      	adds	r3, #1
 80030c2:	e009      	b.n	80030d8 <HAL_I2C_Init+0xe8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	4a69      	ldr	r2, [pc, #420]	; (8003274 <HAL_I2C_Init+0x284>)
 80030d0:	fba2 2303 	umull	r2, r3, r2, r3
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	3301      	adds	r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	430b      	orrs	r3, r1
 80030de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	495c      	ldr	r1, [pc, #368]	; (8003264 <HAL_I2C_Init+0x274>)
 80030f4:	428b      	cmp	r3, r1
 80030f6:	d819      	bhi.n	800312c <HAL_I2C_Init+0x13c>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e59      	subs	r1, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fbb1 f3f3 	udiv	r3, r1, r3
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_I2C_Init+0x138>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	1e59      	subs	r1, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003126:	e051      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003128:	2304      	movs	r3, #4
 800312a:	e04f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_I2C_Init+0x168>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e012      	b.n	800317e <HAL_I2C_Init+0x18e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf0c      	ite	eq
 8003178:	2301      	moveq	r3, #1
 800317a:	2300      	movne	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Init+0x196>
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10e      	bne.n	80031ac <HAL_I2C_Init+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1e58      	subs	r0, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6859      	ldr	r1, [r3, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	440b      	add	r3, r1
 800319c:	fbb0 f3f3 	udiv	r3, r0, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031aa:	e00f      	b.n	80031cc <HAL_I2C_Init+0x1dc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1e58      	subs	r0, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	0099      	lsls	r1, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c2:	3301      	adds	r3, #1
 80031c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	6809      	ldr	r1, [r1, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69da      	ldr	r2, [r3, #28]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6911      	ldr	r1, [r2, #16]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68d2      	ldr	r2, [r2, #12]
 8003206:	4311      	orrs	r1, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	000186a0 	.word	0x000186a0
 8003268:	001e847f 	.word	0x001e847f
 800326c:	003d08ff 	.word	0x003d08ff
 8003270:	431bde83 	.word	0x431bde83
 8003274:	10624dd3 	.word	0x10624dd3

08003278 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07c      	b.n	8003384 <HAL_LPTIM_Init+0x10c>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f7fe fd05 	bl	8001cb4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d004      	beq.n	80032cc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ca:	d103      	bne.n	80032d4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 031e 	bic.w	r3, r3, #30
 80032d2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032dc:	4293      	cmp	r3, r2
 80032de:	d005      	beq.n	80032ec <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80032e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <HAL_LPTIM_Init+0x114>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80032fc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003302:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003308:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800330e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d107      	bne.n	800332e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003326:	4313      	orrs	r3, r2
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d004      	beq.n	8003340 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800333e:	d107      	bne.n	8003350 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003348:	4313      	orrs	r3, r2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003358:	4293      	cmp	r3, r2
 800335a:	d00a      	beq.n	8003372 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003364:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800336a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	ff19f1fe 	.word	0xff19f1fe

08003390 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0cc      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a4:	4b68      	ldr	r3, [pc, #416]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d90c      	bls.n	80033cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b63      	ldr	r3, [pc, #396]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0b8      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d020      	beq.n	800341a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e4:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033fc:	4b53      	ldr	r3, [pc, #332]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a52      	ldr	r2, [pc, #328]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003406:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003408:	4b50      	ldr	r3, [pc, #320]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	494d      	ldr	r1, [pc, #308]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d044      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d107      	bne.n	800343e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d119      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e07f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d003      	beq.n	800344e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	2b03      	cmp	r3, #3
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d109      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e067      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800346e:	4b37      	ldr	r3, [pc, #220]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f023 0203 	bic.w	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4934      	ldr	r1, [pc, #208]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	4313      	orrs	r3, r2
 800347e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003480:	f7ff fafc 	bl	8002a7c <HAL_GetTick>
 8003484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003486:	e00a      	b.n	800349e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003488:	f7ff faf8 	bl	8002a7c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	; 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e04f      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 020c 	and.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d1eb      	bne.n	8003488 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d20c      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034c6:	4b20      	ldr	r3, [pc, #128]	; (8003548 <HAL_RCC_ClockConfig+0x1b8>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e032      	b.n	800353e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4916      	ldr	r1, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	490e      	ldr	r1, [pc, #56]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	4313      	orrs	r3, r2
 8003514:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003516:	f000 f821 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800351a:	4602      	mov	r2, r0
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	091b      	lsrs	r3, r3, #4
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	490a      	ldr	r1, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	5ccb      	ldrb	r3, [r1, r3]
 800352a:	fa22 f303 	lsr.w	r3, r2, r3
 800352e:	4a09      	ldr	r2, [pc, #36]	; (8003554 <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fe fe1c 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023c00 	.word	0x40023c00
 800354c:	40023800 	.word	0x40023800
 8003550:	08008558 	.word	0x08008558
 8003554:	20000008 	.word	0x20000008
 8003558:	2000000c 	.word	0x2000000c

0800355c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003560:	b090      	sub	sp, #64	; 0x40
 8003562:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
 8003568:	2300      	movs	r3, #0
 800356a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003574:	4b59      	ldr	r3, [pc, #356]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d00d      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x40>
 8003580:	2b08      	cmp	r3, #8
 8003582:	f200 80a1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x34>
 800358a:	2b04      	cmp	r3, #4
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x3a>
 800358e:	e09b      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003592:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003594:	e09b      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003596:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003598:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800359a:	e098      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800359c:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035a6:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d028      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	2200      	movs	r2, #0
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	627a      	str	r2, [r7, #36]	; 0x24
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035c4:	2100      	movs	r1, #0
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035c8:	fb03 f201 	mul.w	r2, r3, r1
 80035cc:	2300      	movs	r3, #0
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	4a43      	ldr	r2, [pc, #268]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80035d6:	fba0 1202 	umull	r1, r2, r0, r2
 80035da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035dc:	460a      	mov	r2, r1
 80035de:	62ba      	str	r2, [r7, #40]	; 0x28
 80035e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035e2:	4413      	add	r3, r2
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	2200      	movs	r2, #0
 80035ea:	61bb      	str	r3, [r7, #24]
 80035ec:	61fa      	str	r2, [r7, #28]
 80035ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035f6:	f7fd faf7 	bl	8000be8 <__aeabi_uldivmod>
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4613      	mov	r3, r2
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003602:	e053      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	2200      	movs	r2, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	617a      	str	r2, [r7, #20]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003616:	f04f 0b00 	mov.w	fp, #0
 800361a:	4652      	mov	r2, sl
 800361c:	465b      	mov	r3, fp
 800361e:	f04f 0000 	mov.w	r0, #0
 8003622:	f04f 0100 	mov.w	r1, #0
 8003626:	0159      	lsls	r1, r3, #5
 8003628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362c:	0150      	lsls	r0, r2, #5
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	ebb2 080a 	subs.w	r8, r2, sl
 8003636:	eb63 090b 	sbc.w	r9, r3, fp
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003646:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800364a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800364e:	ebb2 0408 	subs.w	r4, r2, r8
 8003652:	eb63 0509 	sbc.w	r5, r3, r9
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	00eb      	lsls	r3, r5, #3
 8003660:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003664:	00e2      	lsls	r2, r4, #3
 8003666:	4614      	mov	r4, r2
 8003668:	461d      	mov	r5, r3
 800366a:	eb14 030a 	adds.w	r3, r4, sl
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	eb45 030b 	adc.w	r3, r5, fp
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003696:	2200      	movs	r2, #0
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	60fa      	str	r2, [r7, #12]
 800369c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036a0:	f7fd faa2 	bl	8000be8 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <HAL_RCC_GetSysClockFreq+0x180>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3740      	adds	r7, #64	; 0x40
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	017d7840 	.word	0x017d7840

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000008 	.word	0x20000008

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	; (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	08008568 	.word	0x08008568

08003728 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	220f      	movs	r2, #15
 8003736:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <HAL_RCC_GetClockConfig+0x5c>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0203 	and.w	r2, r3, #3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_RCC_GetClockConfig+0x60>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0207 	and.w	r2, r3, #7
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	40023c00 	.word	0x40023c00

0800378c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8083 	beq.w	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b61      	ldr	r3, [pc, #388]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a60      	ldr	r2, [pc, #384]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037c6:	4b5c      	ldr	r3, [pc, #368]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5b      	ldr	r2, [pc, #364]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037d2:	f7ff f953 	bl	8002a7c <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037da:	f7ff f94f 	bl	8002a7c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e09f      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037ec:	4b52      	ldr	r3, [pc, #328]	; (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037f8:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003800:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02f      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d028      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003816:	4b47      	ldr	r3, [pc, #284]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003820:	4b46      	ldr	r3, [pc, #280]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003826:	4b45      	ldr	r3, [pc, #276]	; (800393c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800382c:	4a41      	ldr	r2, [pc, #260]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003832:	4b40      	ldr	r3, [pc, #256]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d114      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800383e:	f7ff f91d 	bl	8002a7c <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	e00a      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003846:	f7ff f919 	bl	8002a7c <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	f241 3288 	movw	r2, #5000	; 0x1388
 8003854:	4293      	cmp	r3, r2
 8003856:	d901      	bls.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e067      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385c:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ee      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003874:	d10d      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003876:	4b2f      	ldr	r3, [pc, #188]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	492a      	ldr	r1, [pc, #168]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]
 8003890:	e005      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003892:	4b28      	ldr	r3, [pc, #160]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	4a27      	ldr	r2, [pc, #156]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003898:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800389c:	6093      	str	r3, [r2, #8]
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038aa:	4922      	ldr	r1, [pc, #136]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7d1a      	ldrb	r2, [r3, #20]
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038c2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00a      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4915      	ldr	r1, [pc, #84]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038f2:	4b10      	ldr	r3, [pc, #64]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80038f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	490c      	ldr	r1, [pc, #48]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800391a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4904      	ldr	r1, [pc, #16]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	40007000 	.word	0x40007000
 800393c:	42470e40 	.word	0x42470e40
 8003940:	424711e0 	.word	0x424711e0

08003944 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e273      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d075      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003962:	4b88      	ldr	r3, [pc, #544]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b04      	cmp	r3, #4
 800396c:	d00c      	beq.n	8003988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800396e:	4b85      	ldr	r3, [pc, #532]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003976:	2b08      	cmp	r3, #8
 8003978:	d112      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397a:	4b82      	ldr	r3, [pc, #520]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003986:	d10b      	bne.n	80039a0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4b7e      	ldr	r3, [pc, #504]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d05b      	beq.n	8003a4c <HAL_RCC_OscConfig+0x108>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d157      	bne.n	8003a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e24e      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a8:	d106      	bne.n	80039b8 <HAL_RCC_OscConfig+0x74>
 80039aa:	4b76      	ldr	r3, [pc, #472]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a75      	ldr	r2, [pc, #468]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e01d      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x98>
 80039c2:	4b70      	ldr	r3, [pc, #448]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a6f      	ldr	r2, [pc, #444]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b6d      	ldr	r3, [pc, #436]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6c      	ldr	r2, [pc, #432]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e00b      	b.n	80039f4 <HAL_RCC_OscConfig+0xb0>
 80039dc:	4b69      	ldr	r3, [pc, #420]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a68      	ldr	r2, [pc, #416]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b66      	ldr	r3, [pc, #408]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 80039ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d013      	beq.n	8003a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7ff f83e 	bl	8002a7c <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a04:	f7ff f83a 	bl	8002a7c <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b64      	cmp	r3, #100	; 0x64
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e213      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a16:	4b5b      	ldr	r3, [pc, #364]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0xc0>
 8003a22:	e014      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7ff f82a 	bl	8002a7c <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7ff f826 	bl	8002a7c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e1ff      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3e:	4b51      	ldr	r3, [pc, #324]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0xe8>
 8003a4a:	e000      	b.n	8003a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d063      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a66:	4b47      	ldr	r3, [pc, #284]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a6e:	2b08      	cmp	r3, #8
 8003a70:	d11c      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d116      	bne.n	8003aac <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a7e:	4b41      	ldr	r3, [pc, #260]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d005      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e1d3      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4937      	ldr	r1, [pc, #220]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aaa:	e03a      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d020      	beq.n	8003af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab4:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <HAL_RCC_OscConfig+0x244>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fe ffdf 	bl	8002a7c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe ffdb 	bl	8002a7c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1b4      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4925      	ldr	r1, [pc, #148]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
 8003af4:	e015      	b.n	8003b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCC_OscConfig+0x244>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fe ffbe 	bl	8002a7c <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b04:	f7fe ffba 	bl	8002a7c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e193      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f0      	bne.n	8003b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d036      	beq.n	8003b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b36:	4b15      	ldr	r3, [pc, #84]	; (8003b8c <HAL_RCC_OscConfig+0x248>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fe ff9e 	bl	8002a7c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b44:	f7fe ff9a 	bl	8002a7c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e173      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_RCC_OscConfig+0x240>)
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x200>
 8003b62:	e01b      	b.n	8003b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x248>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b6a:	f7fe ff87 	bl	8002a7c <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b70:	e00e      	b.n	8003b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b72:	f7fe ff83 	bl	8002a7c <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d907      	bls.n	8003b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e15c      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
 8003b84:	40023800 	.word	0x40023800
 8003b88:	42470000 	.word	0x42470000
 8003b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b90:	4b8a      	ldr	r3, [pc, #552]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ea      	bne.n	8003b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8097 	beq.w	8003cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bae:	4b83      	ldr	r3, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b7f      	ldr	r3, [pc, #508]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a7e      	ldr	r2, [pc, #504]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	4b79      	ldr	r3, [pc, #484]	; (8003dc0 <HAL_RCC_OscConfig+0x47c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d118      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003be6:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <HAL_RCC_OscConfig+0x47c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a75      	ldr	r2, [pc, #468]	; (8003dc0 <HAL_RCC_OscConfig+0x47c>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bf2:	f7fe ff43 	bl	8002a7c <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bfa:	f7fe ff3f 	bl	8002a7c <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e118      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0c:	4b6c      	ldr	r3, [pc, #432]	; (8003dc0 <HAL_RCC_OscConfig+0x47c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d106      	bne.n	8003c2e <HAL_RCC_OscConfig+0x2ea>
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c26:	f043 0301 	orr.w	r3, r3, #1
 8003c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2c:	e01c      	b.n	8003c68 <HAL_RCC_OscConfig+0x324>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b05      	cmp	r3, #5
 8003c34:	d10c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x30c>
 8003c36:	4b61      	ldr	r3, [pc, #388]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	4a60      	ldr	r2, [pc, #384]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	6713      	str	r3, [r2, #112]	; 0x70
 8003c42:	4b5e      	ldr	r3, [pc, #376]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c46:	4a5d      	ldr	r2, [pc, #372]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c48:	f043 0301 	orr.w	r3, r3, #1
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCC_OscConfig+0x324>
 8003c50:	4b5a      	ldr	r3, [pc, #360]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c54:	4a59      	ldr	r2, [pc, #356]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5c:	4b57      	ldr	r3, [pc, #348]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a56      	ldr	r2, [pc, #344]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c62:	f023 0304 	bic.w	r3, r3, #4
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe ff04 	bl	8002a7c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c78:	f7fe ff00 	bl	8002a7c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0d7      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8e:	4b4b      	ldr	r3, [pc, #300]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ee      	beq.n	8003c78 <HAL_RCC_OscConfig+0x334>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fe feee 	bl	8002a7c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca4:	f7fe feea 	bl	8002a7c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e0c1      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cba:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	4a3a      	ldr	r2, [pc, #232]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80ad 	beq.w	8003e3c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d060      	beq.n	8003db0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d145      	bne.n	8003d82 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf6:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <HAL_RCC_OscConfig+0x480>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfc:	f7fe febe 	bl	8002a7c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d04:	f7fe feba 	bl	8002a7c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e093      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1f0      	bne.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	019b      	lsls	r3, r3, #6
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	061b      	lsls	r3, r3, #24
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	071b      	lsls	r3, r3, #28
 8003d4e:	491b      	ldr	r1, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d54:	4b1b      	ldr	r3, [pc, #108]	; (8003dc4 <HAL_RCC_OscConfig+0x480>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fe8f 	bl	8002a7c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe fe8b 	bl	8002a7c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e064      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCC_OscConfig+0x41e>
 8003d80:	e05c      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d82:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_OscConfig+0x480>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe fe78 	bl	8002a7c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d90:	f7fe fe74 	bl	8002a7c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e04d      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <HAL_RCC_OscConfig+0x478>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x44c>
 8003dae:	e045      	b.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e040      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000
 8003dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d030      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d129      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d122      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d119      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	3b01      	subs	r3, #1
 8003e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10f      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800

08003e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e07b      	b.n	8003f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d108      	bne.n	8003e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6e:	d009      	beq.n	8003e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
 8003e76:	e005      	b.n	8003e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe f8f8 	bl	8002094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f08:	ea42 0103 	orr.w	r1, r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	0c1b      	lsrs	r3, r3, #16
 8003f22:	f003 0104 	and.w	r1, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f003 0210 	and.w	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b088      	sub	sp, #32
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d101      	bne.n	8003f80 <HAL_SPI_Transmit+0x22>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e126      	b.n	80041ce <HAL_SPI_Transmit+0x270>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f88:	f7fe fd78 	bl	8002a7c <HAL_GetTick>
 8003f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d002      	beq.n	8003fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fa2:	e10b      	b.n	80041bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_SPI_Transmit+0x52>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb4:	e102      	b.n	80041bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	88fa      	ldrh	r2, [r7, #6]
 8003fd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffc:	d10f      	bne.n	800401e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800401c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d007      	beq.n	800403c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800403a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004044:	d14b      	bne.n	80040de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_SPI_Transmit+0xf6>
 800404e:	8afb      	ldrh	r3, [r7, #22]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d13e      	bne.n	80040d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	881a      	ldrh	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004078:	e02b      	b.n	80040d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b02      	cmp	r3, #2
 8004086:	d112      	bne.n	80040ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	881a      	ldrh	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80040ac:	e011      	b.n	80040d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ae:	f7fe fce5 	bl	8002a7c <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d803      	bhi.n	80040c6 <HAL_SPI_Transmit+0x168>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d102      	bne.n	80040cc <HAL_SPI_Transmit+0x16e>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040d0:	e074      	b.n	80041bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ce      	bne.n	800407a <HAL_SPI_Transmit+0x11c>
 80040dc:	e04c      	b.n	8004178 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_SPI_Transmit+0x18e>
 80040e6:	8afb      	ldrh	r3, [r7, #22]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d140      	bne.n	800416e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	7812      	ldrb	r2, [r2, #0]
 80040f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004112:	e02c      	b.n	800416e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d113      	bne.n	800414a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	86da      	strh	r2, [r3, #54]	; 0x36
 8004148:	e011      	b.n	800416e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414a:	f7fe fc97 	bl	8002a7c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d803      	bhi.n	8004162 <HAL_SPI_Transmit+0x204>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d102      	bne.n	8004168 <HAL_SPI_Transmit+0x20a>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800416c:	e026      	b.n	80041bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1cd      	bne.n	8004114 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	6839      	ldr	r1, [r7, #0]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 f8b3 	bl	80042e8 <SPI_EndRxTxTransaction>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	613b      	str	r3, [r7, #16]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
 80041b8:	e000      	b.n	80041bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80041ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	4613      	mov	r3, r2
 80041e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041e8:	f7fe fc48 	bl	8002a7c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	4413      	add	r3, r2
 80041f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041f8:	f7fe fc40 	bl	8002a7c <HAL_GetTick>
 80041fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041fe:	4b39      	ldr	r3, [pc, #228]	; (80042e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	015b      	lsls	r3, r3, #5
 8004204:	0d1b      	lsrs	r3, r3, #20
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
 800420c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800420e:	e054      	b.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004216:	d050      	beq.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004218:	f7fe fc30 	bl	8002a7c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	429a      	cmp	r2, r3
 8004226:	d902      	bls.n	800422e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d13d      	bne.n	80042aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800423c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d111      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004250:	d004      	beq.n	800425c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800425a:	d107      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800426a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d10f      	bne.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e017      	b.n	80042da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4013      	ands	r3, r2
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d19b      	bne.n	8004210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3720      	adds	r7, #32
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000008 	.word	0x20000008

080042e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80042f4:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <SPI_EndRxTxTransaction+0x7c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <SPI_EndRxTxTransaction+0x80>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0d5b      	lsrs	r3, r3, #21
 8004300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004304:	fb02 f303 	mul.w	r3, r2, r3
 8004308:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004312:	d112      	bne.n	800433a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	2180      	movs	r1, #128	; 0x80
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f7ff ff5a 	bl	80041d8 <SPI_WaitFlagStateUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432e:	f043 0220 	orr.w	r2, r3, #32
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e00f      	b.n	800435a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00a      	beq.n	8004356 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d0f2      	beq.n	800433a <SPI_EndRxTxTransaction+0x52>
 8004354:	e000      	b.n	8004358 <SPI_EndRxTxTransaction+0x70>
        break;
 8004356:	bf00      	nop
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000008 	.word	0x20000008
 8004368:	165e9f81 	.word	0x165e9f81

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e041      	b.n	8004402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fe fa40 	bl	8002818 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fb72 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b085      	sub	sp, #20
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d001      	beq.n	8004424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e035      	b.n	8004490 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIM_Base_Start_IT+0x90>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x4e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_TIM_Base_Start_IT+0x94>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIM_Base_Start_IT+0x4e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <HAL_TIM_Base_Start_IT+0x98>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d111      	bne.n	800447e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b06      	cmp	r3, #6
 800446a:	d010      	beq.n	800448e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	e007      	b.n	800448e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40010000 	.word	0x40010000
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40014000 	.word	0x40014000

080044a8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e041      	b.n	800453e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f839 	bl	8004546 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fad4 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e041      	b.n	80045f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fe f8f5 	bl	8002770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	4619      	mov	r1, r3
 8004598:	4610      	mov	r0, r2
 800459a:	f000 fa7b 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b02      	cmp	r3, #2
 800460c:	d122      	bne.n	8004654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d11b      	bne.n	8004654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0202 	mvn.w	r2, #2
 8004624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fa0c 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 8004640:	e005      	b.n	800464e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9fe 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fa0f 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b04      	cmp	r3, #4
 8004660:	d122      	bne.n	80046a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b04      	cmp	r3, #4
 800466e:	d11b      	bne.n	80046a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f06f 0204 	mvn.w	r2, #4
 8004678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9e2 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 8004694:	e005      	b.n	80046a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f9d4 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f9e5 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d122      	bne.n	80046fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d11b      	bne.n	80046fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0208 	mvn.w	r2, #8
 80046cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2204      	movs	r2, #4
 80046d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f9b8 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f9aa 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9bb 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0310 	and.w	r3, r3, #16
 8004706:	2b10      	cmp	r3, #16
 8004708:	d122      	bne.n	8004750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b10      	cmp	r3, #16
 8004716:	d11b      	bne.n	8004750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0210 	mvn.w	r2, #16
 8004720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2208      	movs	r2, #8
 8004726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f98e 	bl	8004a58 <HAL_TIM_IC_CaptureCallback>
 800473c:	e005      	b.n	800474a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f980 	bl	8004a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f991 	bl	8004a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b01      	cmp	r3, #1
 800475c:	d10e      	bne.n	800477c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0201 	mvn.w	r2, #1
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fd fc3e 	bl	8001ff8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fc16 	bl	8004fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d10e      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b40      	cmp	r3, #64	; 0x40
 80047c2:	d107      	bne.n	80047d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f956 	bl	8004a80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f003 0320 	and.w	r3, r3, #32
 80047de:	2b20      	cmp	r3, #32
 80047e0:	d10e      	bne.n	8004800 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0320 	and.w	r3, r3, #32
 80047ec:	2b20      	cmp	r3, #32
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f06f 0220 	mvn.w	r2, #32
 80047f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fbe0 	bl	8004fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004822:	2302      	movs	r3, #2
 8004824:	e048      	b.n	80048b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d839      	bhi.n	80048a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004871 	.word	0x08004871
 8004840:	080048a9 	.word	0x080048a9
 8004844:	080048a9 	.word	0x080048a9
 8004848:	080048a9 	.word	0x080048a9
 800484c:	0800487f 	.word	0x0800487f
 8004850:	080048a9 	.word	0x080048a9
 8004854:	080048a9 	.word	0x080048a9
 8004858:	080048a9 	.word	0x080048a9
 800485c:	0800488d 	.word	0x0800488d
 8004860:	080048a9 	.word	0x080048a9
 8004864:	080048a9 	.word	0x080048a9
 8004868:	080048a9 	.word	0x080048a9
 800486c:	0800489b 	.word	0x0800489b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f96a 	bl	8004b50 <TIM_OC1_SetConfig>
      break;
 800487c:	e017      	b.n	80048ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f9c9 	bl	8004c1c <TIM_OC2_SetConfig>
      break;
 800488a:	e010      	b.n	80048ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fa2e 	bl	8004cf4 <TIM_OC3_SetConfig>
      break;
 8004898:	e009      	b.n	80048ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fa91 	bl	8004dc8 <TIM_OC4_SetConfig>
      break;
 80048a6:	e002      	b.n	80048ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d101      	bne.n	80048de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048da:	2302      	movs	r3, #2
 80048dc:	e0ae      	b.n	8004a3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	f200 809f 	bhi.w	8004a2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ee:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004a2d 	.word	0x08004a2d
 80048fc:	08004a2d 	.word	0x08004a2d
 8004900:	08004a2d 	.word	0x08004a2d
 8004904:	08004969 	.word	0x08004969
 8004908:	08004a2d 	.word	0x08004a2d
 800490c:	08004a2d 	.word	0x08004a2d
 8004910:	08004a2d 	.word	0x08004a2d
 8004914:	080049ab 	.word	0x080049ab
 8004918:	08004a2d 	.word	0x08004a2d
 800491c:	08004a2d 	.word	0x08004a2d
 8004920:	08004a2d 	.word	0x08004a2d
 8004924:	080049eb 	.word	0x080049eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f90e 	bl	8004b50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0208 	orr.w	r2, r2, #8
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	619a      	str	r2, [r3, #24]
      break;
 8004966:	e064      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 f954 	bl	8004c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	619a      	str	r2, [r3, #24]
      break;
 80049a8:	e043      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f99f 	bl	8004cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0208 	orr.w	r2, r2, #8
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0204 	bic.w	r2, r2, #4
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	61da      	str	r2, [r3, #28]
      break;
 80049e8:	e023      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68b9      	ldr	r1, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 f9e9 	bl	8004dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69da      	ldr	r2, [r3, #28]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	61da      	str	r2, [r3, #28]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <TIM_Base_SetConfig+0xac>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d003      	beq.n	8004ab4 <TIM_Base_SetConfig+0x20>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <TIM_Base_SetConfig+0xb0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <TIM_Base_SetConfig+0xac>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_Base_SetConfig+0x52>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <TIM_Base_SetConfig+0xb0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_Base_SetConfig+0x52>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <TIM_Base_SetConfig+0xb4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0x52>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <TIM_Base_SetConfig+0xb8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <TIM_Base_SetConfig+0xac>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d103      	bne.n	8004b2c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	615a      	str	r2, [r3, #20]
}
 8004b32:	bf00      	nop
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014800 	.word	0x40014800

08004b50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f023 0302 	bic.w	r3, r3, #2
 8004b98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <TIM_OC1_SetConfig+0xc8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10c      	bne.n	8004bc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f023 0308 	bic.w	r3, r3, #8
 8004bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f023 0304 	bic.w	r3, r3, #4
 8004bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a13      	ldr	r2, [pc, #76]	; (8004c18 <TIM_OC1_SetConfig+0xc8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d111      	bne.n	8004bf2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	621a      	str	r2, [r3, #32]
}
 8004c0c:	bf00      	nop
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40010000 	.word	0x40010000

08004c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	f023 0210 	bic.w	r2, r3, #16
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0320 	bic.w	r3, r3, #32
 8004c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a1e      	ldr	r2, [pc, #120]	; (8004cf0 <TIM_OC2_SetConfig+0xd4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d10d      	bne.n	8004c98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <TIM_OC2_SetConfig+0xd4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d113      	bne.n	8004cc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000

08004cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0303 	bic.w	r3, r3, #3
 8004d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <TIM_OC3_SetConfig+0xd0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d10d      	bne.n	8004d6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <TIM_OC3_SetConfig+0xd0>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d113      	bne.n	8004d9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	621a      	str	r2, [r3, #32]
}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr
 8004dc4:	40010000 	.word	0x40010000

08004dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	021b      	lsls	r3, r3, #8
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <TIM_OC4_SetConfig+0x9c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d109      	bne.n	8004e3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	019b      	lsls	r3, r3, #6
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40010000 	.word	0x40010000

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e041      	b.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d009      	beq.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d004      	beq.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a11      	ldr	r2, [pc, #68]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d10c      	bne.n	8004ef2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000c00 	.word	0x40000c00
 8004f18:	40014000 	.word	0x40014000

08004f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e03d      	b.n	8004fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000014 	.word	0x20000014

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1b64      	subs	r4, r4, r5
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2600      	movs	r6, #0
 8005000:	42a6      	cmp	r6, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4d0b      	ldr	r5, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f002 ff98 	bl	8007f3c <_init>
 800500c:	1b64      	subs	r4, r4, r5
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2600      	movs	r6, #0
 8005012:	42a6      	cmp	r6, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f855 3b04 	ldr.w	r3, [r5], #4
 800501c:	4798      	blx	r3
 800501e:	3601      	adds	r6, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f855 3b04 	ldr.w	r3, [r5], #4
 8005026:	4798      	blx	r3
 8005028:	3601      	adds	r6, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	08008954 	.word	0x08008954
 8005030:	08008954 	.word	0x08008954
 8005034:	08008954 	.word	0x08008954
 8005038:	08008958 	.word	0x08008958

0800503c <malloc>:
 800503c:	4b02      	ldr	r3, [pc, #8]	; (8005048 <malloc+0xc>)
 800503e:	4601      	mov	r1, r0
 8005040:	6818      	ldr	r0, [r3, #0]
 8005042:	f000 b88d 	b.w	8005160 <_malloc_r>
 8005046:	bf00      	nop
 8005048:	20000014 	.word	0x20000014

0800504c <free>:
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <free+0xc>)
 800504e:	4601      	mov	r1, r0
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	f000 b819 	b.w	8005088 <_free_r>
 8005056:	bf00      	nop
 8005058:	20000014 	.word	0x20000014

0800505c <memcpy>:
 800505c:	440a      	add	r2, r1
 800505e:	4291      	cmp	r1, r2
 8005060:	f100 33ff 	add.w	r3, r0, #4294967295
 8005064:	d100      	bne.n	8005068 <memcpy+0xc>
 8005066:	4770      	bx	lr
 8005068:	b510      	push	{r4, lr}
 800506a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005072:	4291      	cmp	r1, r2
 8005074:	d1f9      	bne.n	800506a <memcpy+0xe>
 8005076:	bd10      	pop	{r4, pc}

08005078 <memset>:
 8005078:	4402      	add	r2, r0
 800507a:	4603      	mov	r3, r0
 800507c:	4293      	cmp	r3, r2
 800507e:	d100      	bne.n	8005082 <memset+0xa>
 8005080:	4770      	bx	lr
 8005082:	f803 1b01 	strb.w	r1, [r3], #1
 8005086:	e7f9      	b.n	800507c <memset+0x4>

08005088 <_free_r>:
 8005088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800508a:	2900      	cmp	r1, #0
 800508c:	d044      	beq.n	8005118 <_free_r+0x90>
 800508e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005092:	9001      	str	r0, [sp, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f1a1 0404 	sub.w	r4, r1, #4
 800509a:	bfb8      	it	lt
 800509c:	18e4      	addlt	r4, r4, r3
 800509e:	f001 ff59 	bl	8006f54 <__malloc_lock>
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <_free_r+0x94>)
 80050a4:	9801      	ldr	r0, [sp, #4]
 80050a6:	6813      	ldr	r3, [r2, #0]
 80050a8:	b933      	cbnz	r3, 80050b8 <_free_r+0x30>
 80050aa:	6063      	str	r3, [r4, #4]
 80050ac:	6014      	str	r4, [r2, #0]
 80050ae:	b003      	add	sp, #12
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	f001 bf54 	b.w	8006f60 <__malloc_unlock>
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	d908      	bls.n	80050ce <_free_r+0x46>
 80050bc:	6825      	ldr	r5, [r4, #0]
 80050be:	1961      	adds	r1, r4, r5
 80050c0:	428b      	cmp	r3, r1
 80050c2:	bf01      	itttt	eq
 80050c4:	6819      	ldreq	r1, [r3, #0]
 80050c6:	685b      	ldreq	r3, [r3, #4]
 80050c8:	1949      	addeq	r1, r1, r5
 80050ca:	6021      	streq	r1, [r4, #0]
 80050cc:	e7ed      	b.n	80050aa <_free_r+0x22>
 80050ce:	461a      	mov	r2, r3
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	b10b      	cbz	r3, 80050d8 <_free_r+0x50>
 80050d4:	42a3      	cmp	r3, r4
 80050d6:	d9fa      	bls.n	80050ce <_free_r+0x46>
 80050d8:	6811      	ldr	r1, [r2, #0]
 80050da:	1855      	adds	r5, r2, r1
 80050dc:	42a5      	cmp	r5, r4
 80050de:	d10b      	bne.n	80050f8 <_free_r+0x70>
 80050e0:	6824      	ldr	r4, [r4, #0]
 80050e2:	4421      	add	r1, r4
 80050e4:	1854      	adds	r4, r2, r1
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	d1e0      	bne.n	80050ae <_free_r+0x26>
 80050ec:	681c      	ldr	r4, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	4421      	add	r1, r4
 80050f4:	6011      	str	r1, [r2, #0]
 80050f6:	e7da      	b.n	80050ae <_free_r+0x26>
 80050f8:	d902      	bls.n	8005100 <_free_r+0x78>
 80050fa:	230c      	movs	r3, #12
 80050fc:	6003      	str	r3, [r0, #0]
 80050fe:	e7d6      	b.n	80050ae <_free_r+0x26>
 8005100:	6825      	ldr	r5, [r4, #0]
 8005102:	1961      	adds	r1, r4, r5
 8005104:	428b      	cmp	r3, r1
 8005106:	bf04      	itt	eq
 8005108:	6819      	ldreq	r1, [r3, #0]
 800510a:	685b      	ldreq	r3, [r3, #4]
 800510c:	6063      	str	r3, [r4, #4]
 800510e:	bf04      	itt	eq
 8005110:	1949      	addeq	r1, r1, r5
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	6054      	str	r4, [r2, #4]
 8005116:	e7ca      	b.n	80050ae <_free_r+0x26>
 8005118:	b003      	add	sp, #12
 800511a:	bd30      	pop	{r4, r5, pc}
 800511c:	2000047c 	.word	0x2000047c

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0e      	ldr	r6, [pc, #56]	; (800515c <sbrk_aligned+0x3c>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 fd84 	bl	8005c38 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fd7f 	bl	8005c38 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <sbrk_aligned+0x34>
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d007      	beq.n	8005158 <sbrk_aligned+0x38>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fd74 	bl	8005c38 <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d101      	bne.n	8005158 <sbrk_aligned+0x38>
 8005154:	f04f 34ff 	mov.w	r4, #4294967295
 8005158:	4620      	mov	r0, r4
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	20000480 	.word	0x20000480

08005160 <_malloc_r>:
 8005160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	1ccd      	adds	r5, r1, #3
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	2d00      	cmp	r5, #0
 8005174:	4607      	mov	r7, r0
 8005176:	db01      	blt.n	800517c <_malloc_r+0x1c>
 8005178:	42a9      	cmp	r1, r5
 800517a:	d905      	bls.n	8005188 <_malloc_r+0x28>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	2600      	movs	r6, #0
 8005182:	4630      	mov	r0, r6
 8005184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005188:	4e2e      	ldr	r6, [pc, #184]	; (8005244 <_malloc_r+0xe4>)
 800518a:	f001 fee3 	bl	8006f54 <__malloc_lock>
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	461c      	mov	r4, r3
 8005192:	bb34      	cbnz	r4, 80051e2 <_malloc_r+0x82>
 8005194:	4629      	mov	r1, r5
 8005196:	4638      	mov	r0, r7
 8005198:	f7ff ffc2 	bl	8005120 <sbrk_aligned>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	4604      	mov	r4, r0
 80051a0:	d14d      	bne.n	800523e <_malloc_r+0xde>
 80051a2:	6834      	ldr	r4, [r6, #0]
 80051a4:	4626      	mov	r6, r4
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d140      	bne.n	800522c <_malloc_r+0xcc>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	4631      	mov	r1, r6
 80051ae:	4638      	mov	r0, r7
 80051b0:	eb04 0803 	add.w	r8, r4, r3
 80051b4:	f000 fd40 	bl	8005c38 <_sbrk_r>
 80051b8:	4580      	cmp	r8, r0
 80051ba:	d13a      	bne.n	8005232 <_malloc_r+0xd2>
 80051bc:	6821      	ldr	r1, [r4, #0]
 80051be:	3503      	adds	r5, #3
 80051c0:	1a6d      	subs	r5, r5, r1
 80051c2:	f025 0503 	bic.w	r5, r5, #3
 80051c6:	3508      	adds	r5, #8
 80051c8:	2d0c      	cmp	r5, #12
 80051ca:	bf38      	it	cc
 80051cc:	250c      	movcc	r5, #12
 80051ce:	4629      	mov	r1, r5
 80051d0:	4638      	mov	r0, r7
 80051d2:	f7ff ffa5 	bl	8005120 <sbrk_aligned>
 80051d6:	3001      	adds	r0, #1
 80051d8:	d02b      	beq.n	8005232 <_malloc_r+0xd2>
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	442b      	add	r3, r5
 80051de:	6023      	str	r3, [r4, #0]
 80051e0:	e00e      	b.n	8005200 <_malloc_r+0xa0>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	d41e      	bmi.n	8005226 <_malloc_r+0xc6>
 80051e8:	2a0b      	cmp	r2, #11
 80051ea:	d916      	bls.n	800521a <_malloc_r+0xba>
 80051ec:	1961      	adds	r1, r4, r5
 80051ee:	42a3      	cmp	r3, r4
 80051f0:	6025      	str	r5, [r4, #0]
 80051f2:	bf18      	it	ne
 80051f4:	6059      	strne	r1, [r3, #4]
 80051f6:	6863      	ldr	r3, [r4, #4]
 80051f8:	bf08      	it	eq
 80051fa:	6031      	streq	r1, [r6, #0]
 80051fc:	5162      	str	r2, [r4, r5]
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	4638      	mov	r0, r7
 8005202:	f104 060b 	add.w	r6, r4, #11
 8005206:	f001 feab 	bl	8006f60 <__malloc_unlock>
 800520a:	f026 0607 	bic.w	r6, r6, #7
 800520e:	1d23      	adds	r3, r4, #4
 8005210:	1af2      	subs	r2, r6, r3
 8005212:	d0b6      	beq.n	8005182 <_malloc_r+0x22>
 8005214:	1b9b      	subs	r3, r3, r6
 8005216:	50a3      	str	r3, [r4, r2]
 8005218:	e7b3      	b.n	8005182 <_malloc_r+0x22>
 800521a:	6862      	ldr	r2, [r4, #4]
 800521c:	42a3      	cmp	r3, r4
 800521e:	bf0c      	ite	eq
 8005220:	6032      	streq	r2, [r6, #0]
 8005222:	605a      	strne	r2, [r3, #4]
 8005224:	e7ec      	b.n	8005200 <_malloc_r+0xa0>
 8005226:	4623      	mov	r3, r4
 8005228:	6864      	ldr	r4, [r4, #4]
 800522a:	e7b2      	b.n	8005192 <_malloc_r+0x32>
 800522c:	4634      	mov	r4, r6
 800522e:	6876      	ldr	r6, [r6, #4]
 8005230:	e7b9      	b.n	80051a6 <_malloc_r+0x46>
 8005232:	230c      	movs	r3, #12
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	4638      	mov	r0, r7
 8005238:	f001 fe92 	bl	8006f60 <__malloc_unlock>
 800523c:	e7a1      	b.n	8005182 <_malloc_r+0x22>
 800523e:	6025      	str	r5, [r4, #0]
 8005240:	e7de      	b.n	8005200 <_malloc_r+0xa0>
 8005242:	bf00      	nop
 8005244:	2000047c 	.word	0x2000047c

08005248 <__cvt>:
 8005248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	ec55 4b10 	vmov	r4, r5, d0
 8005250:	2d00      	cmp	r5, #0
 8005252:	460e      	mov	r6, r1
 8005254:	4619      	mov	r1, r3
 8005256:	462b      	mov	r3, r5
 8005258:	bfbb      	ittet	lt
 800525a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800525e:	461d      	movlt	r5, r3
 8005260:	2300      	movge	r3, #0
 8005262:	232d      	movlt	r3, #45	; 0x2d
 8005264:	700b      	strb	r3, [r1, #0]
 8005266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005268:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800526c:	4691      	mov	r9, r2
 800526e:	f023 0820 	bic.w	r8, r3, #32
 8005272:	bfbc      	itt	lt
 8005274:	4622      	movlt	r2, r4
 8005276:	4614      	movlt	r4, r2
 8005278:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800527c:	d005      	beq.n	800528a <__cvt+0x42>
 800527e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005282:	d100      	bne.n	8005286 <__cvt+0x3e>
 8005284:	3601      	adds	r6, #1
 8005286:	2102      	movs	r1, #2
 8005288:	e000      	b.n	800528c <__cvt+0x44>
 800528a:	2103      	movs	r1, #3
 800528c:	ab03      	add	r3, sp, #12
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	ab02      	add	r3, sp, #8
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	ec45 4b10 	vmov	d0, r4, r5
 8005298:	4653      	mov	r3, sl
 800529a:	4632      	mov	r2, r6
 800529c:	f000 fe48 	bl	8005f30 <_dtoa_r>
 80052a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80052a4:	4607      	mov	r7, r0
 80052a6:	d102      	bne.n	80052ae <__cvt+0x66>
 80052a8:	f019 0f01 	tst.w	r9, #1
 80052ac:	d022      	beq.n	80052f4 <__cvt+0xac>
 80052ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80052b2:	eb07 0906 	add.w	r9, r7, r6
 80052b6:	d110      	bne.n	80052da <__cvt+0x92>
 80052b8:	783b      	ldrb	r3, [r7, #0]
 80052ba:	2b30      	cmp	r3, #48	; 0x30
 80052bc:	d10a      	bne.n	80052d4 <__cvt+0x8c>
 80052be:	2200      	movs	r2, #0
 80052c0:	2300      	movs	r3, #0
 80052c2:	4620      	mov	r0, r4
 80052c4:	4629      	mov	r1, r5
 80052c6:	f7fb fc1f 	bl	8000b08 <__aeabi_dcmpeq>
 80052ca:	b918      	cbnz	r0, 80052d4 <__cvt+0x8c>
 80052cc:	f1c6 0601 	rsb	r6, r6, #1
 80052d0:	f8ca 6000 	str.w	r6, [sl]
 80052d4:	f8da 3000 	ldr.w	r3, [sl]
 80052d8:	4499      	add	r9, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	2300      	movs	r3, #0
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb fc11 	bl	8000b08 <__aeabi_dcmpeq>
 80052e6:	b108      	cbz	r0, 80052ec <__cvt+0xa4>
 80052e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052ec:	2230      	movs	r2, #48	; 0x30
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	454b      	cmp	r3, r9
 80052f2:	d307      	bcc.n	8005304 <__cvt+0xbc>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052f8:	1bdb      	subs	r3, r3, r7
 80052fa:	4638      	mov	r0, r7
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	b004      	add	sp, #16
 8005300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005304:	1c59      	adds	r1, r3, #1
 8005306:	9103      	str	r1, [sp, #12]
 8005308:	701a      	strb	r2, [r3, #0]
 800530a:	e7f0      	b.n	80052ee <__cvt+0xa6>

0800530c <__exponent>:
 800530c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800530e:	4603      	mov	r3, r0
 8005310:	2900      	cmp	r1, #0
 8005312:	bfb8      	it	lt
 8005314:	4249      	neglt	r1, r1
 8005316:	f803 2b02 	strb.w	r2, [r3], #2
 800531a:	bfb4      	ite	lt
 800531c:	222d      	movlt	r2, #45	; 0x2d
 800531e:	222b      	movge	r2, #43	; 0x2b
 8005320:	2909      	cmp	r1, #9
 8005322:	7042      	strb	r2, [r0, #1]
 8005324:	dd2a      	ble.n	800537c <__exponent+0x70>
 8005326:	f10d 0407 	add.w	r4, sp, #7
 800532a:	46a4      	mov	ip, r4
 800532c:	270a      	movs	r7, #10
 800532e:	46a6      	mov	lr, r4
 8005330:	460a      	mov	r2, r1
 8005332:	fb91 f6f7 	sdiv	r6, r1, r7
 8005336:	fb07 1516 	mls	r5, r7, r6, r1
 800533a:	3530      	adds	r5, #48	; 0x30
 800533c:	2a63      	cmp	r2, #99	; 0x63
 800533e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005342:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005346:	4631      	mov	r1, r6
 8005348:	dcf1      	bgt.n	800532e <__exponent+0x22>
 800534a:	3130      	adds	r1, #48	; 0x30
 800534c:	f1ae 0502 	sub.w	r5, lr, #2
 8005350:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005354:	1c44      	adds	r4, r0, #1
 8005356:	4629      	mov	r1, r5
 8005358:	4561      	cmp	r1, ip
 800535a:	d30a      	bcc.n	8005372 <__exponent+0x66>
 800535c:	f10d 0209 	add.w	r2, sp, #9
 8005360:	eba2 020e 	sub.w	r2, r2, lr
 8005364:	4565      	cmp	r5, ip
 8005366:	bf88      	it	hi
 8005368:	2200      	movhi	r2, #0
 800536a:	4413      	add	r3, r2
 800536c:	1a18      	subs	r0, r3, r0
 800536e:	b003      	add	sp, #12
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005376:	f804 2f01 	strb.w	r2, [r4, #1]!
 800537a:	e7ed      	b.n	8005358 <__exponent+0x4c>
 800537c:	2330      	movs	r3, #48	; 0x30
 800537e:	3130      	adds	r1, #48	; 0x30
 8005380:	7083      	strb	r3, [r0, #2]
 8005382:	70c1      	strb	r1, [r0, #3]
 8005384:	1d03      	adds	r3, r0, #4
 8005386:	e7f1      	b.n	800536c <__exponent+0x60>

08005388 <_printf_float>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	ed2d 8b02 	vpush	{d8}
 8005390:	b08d      	sub	sp, #52	; 0x34
 8005392:	460c      	mov	r4, r1
 8005394:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005398:	4616      	mov	r6, r2
 800539a:	461f      	mov	r7, r3
 800539c:	4605      	mov	r5, r0
 800539e:	f001 fd6d 	bl	8006e7c <_localeconv_r>
 80053a2:	f8d0 a000 	ldr.w	sl, [r0]
 80053a6:	4650      	mov	r0, sl
 80053a8:	f7fa ff32 	bl	8000210 <strlen>
 80053ac:	2300      	movs	r3, #0
 80053ae:	930a      	str	r3, [sp, #40]	; 0x28
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	9305      	str	r3, [sp, #20]
 80053b4:	f8d8 3000 	ldr.w	r3, [r8]
 80053b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80053bc:	3307      	adds	r3, #7
 80053be:	f023 0307 	bic.w	r3, r3, #7
 80053c2:	f103 0208 	add.w	r2, r3, #8
 80053c6:	f8c8 2000 	str.w	r2, [r8]
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053da:	9307      	str	r3, [sp, #28]
 80053dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80053e0:	ee08 0a10 	vmov	s16, r0
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <_printf_float+0x2dc>)
 80053e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ea:	f04f 32ff 	mov.w	r2, #4294967295
 80053ee:	f7fb fbbd 	bl	8000b6c <__aeabi_dcmpun>
 80053f2:	bb88      	cbnz	r0, 8005458 <_printf_float+0xd0>
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <_printf_float+0x2dc>)
 80053fa:	f04f 32ff 	mov.w	r2, #4294967295
 80053fe:	f7fb fb97 	bl	8000b30 <__aeabi_dcmple>
 8005402:	bb48      	cbnz	r0, 8005458 <_printf_float+0xd0>
 8005404:	2200      	movs	r2, #0
 8005406:	2300      	movs	r3, #0
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fb86 	bl	8000b1c <__aeabi_dcmplt>
 8005410:	b110      	cbz	r0, 8005418 <_printf_float+0x90>
 8005412:	232d      	movs	r3, #45	; 0x2d
 8005414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005418:	4b93      	ldr	r3, [pc, #588]	; (8005668 <_printf_float+0x2e0>)
 800541a:	4894      	ldr	r0, [pc, #592]	; (800566c <_printf_float+0x2e4>)
 800541c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005420:	bf94      	ite	ls
 8005422:	4698      	movls	r8, r3
 8005424:	4680      	movhi	r8, r0
 8005426:	2303      	movs	r3, #3
 8005428:	6123      	str	r3, [r4, #16]
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	f023 0204 	bic.w	r2, r3, #4
 8005430:	6022      	str	r2, [r4, #0]
 8005432:	f04f 0900 	mov.w	r9, #0
 8005436:	9700      	str	r7, [sp, #0]
 8005438:	4633      	mov	r3, r6
 800543a:	aa0b      	add	r2, sp, #44	; 0x2c
 800543c:	4621      	mov	r1, r4
 800543e:	4628      	mov	r0, r5
 8005440:	f000 f9d8 	bl	80057f4 <_printf_common>
 8005444:	3001      	adds	r0, #1
 8005446:	f040 8090 	bne.w	800556a <_printf_float+0x1e2>
 800544a:	f04f 30ff 	mov.w	r0, #4294967295
 800544e:	b00d      	add	sp, #52	; 0x34
 8005450:	ecbd 8b02 	vpop	{d8}
 8005454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	4640      	mov	r0, r8
 800545e:	4649      	mov	r1, r9
 8005460:	f7fb fb84 	bl	8000b6c <__aeabi_dcmpun>
 8005464:	b140      	cbz	r0, 8005478 <_printf_float+0xf0>
 8005466:	464b      	mov	r3, r9
 8005468:	2b00      	cmp	r3, #0
 800546a:	bfbc      	itt	lt
 800546c:	232d      	movlt	r3, #45	; 0x2d
 800546e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005472:	487f      	ldr	r0, [pc, #508]	; (8005670 <_printf_float+0x2e8>)
 8005474:	4b7f      	ldr	r3, [pc, #508]	; (8005674 <_printf_float+0x2ec>)
 8005476:	e7d1      	b.n	800541c <_printf_float+0x94>
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800547e:	9206      	str	r2, [sp, #24]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	d13f      	bne.n	8005504 <_printf_float+0x17c>
 8005484:	2306      	movs	r3, #6
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	9b05      	ldr	r3, [sp, #20]
 800548a:	6861      	ldr	r1, [r4, #4]
 800548c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005490:	2300      	movs	r3, #0
 8005492:	9303      	str	r3, [sp, #12]
 8005494:	ab0a      	add	r3, sp, #40	; 0x28
 8005496:	e9cd b301 	strd	fp, r3, [sp, #4]
 800549a:	ab09      	add	r3, sp, #36	; 0x24
 800549c:	ec49 8b10 	vmov	d0, r8, r9
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80054a8:	4628      	mov	r0, r5
 80054aa:	f7ff fecd 	bl	8005248 <__cvt>
 80054ae:	9b06      	ldr	r3, [sp, #24]
 80054b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054b2:	2b47      	cmp	r3, #71	; 0x47
 80054b4:	4680      	mov	r8, r0
 80054b6:	d108      	bne.n	80054ca <_printf_float+0x142>
 80054b8:	1cc8      	adds	r0, r1, #3
 80054ba:	db02      	blt.n	80054c2 <_printf_float+0x13a>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	4299      	cmp	r1, r3
 80054c0:	dd41      	ble.n	8005546 <_printf_float+0x1be>
 80054c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80054c6:	fa5f fb8b 	uxtb.w	fp, fp
 80054ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ce:	d820      	bhi.n	8005512 <_printf_float+0x18a>
 80054d0:	3901      	subs	r1, #1
 80054d2:	465a      	mov	r2, fp
 80054d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054d8:	9109      	str	r1, [sp, #36]	; 0x24
 80054da:	f7ff ff17 	bl	800530c <__exponent>
 80054de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054e0:	1813      	adds	r3, r2, r0
 80054e2:	2a01      	cmp	r2, #1
 80054e4:	4681      	mov	r9, r0
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	dc02      	bgt.n	80054f0 <_printf_float+0x168>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	07d2      	lsls	r2, r2, #31
 80054ee:	d501      	bpl.n	80054f4 <_printf_float+0x16c>
 80054f0:	3301      	adds	r3, #1
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d09c      	beq.n	8005436 <_printf_float+0xae>
 80054fc:	232d      	movs	r3, #45	; 0x2d
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005502:	e798      	b.n	8005436 <_printf_float+0xae>
 8005504:	9a06      	ldr	r2, [sp, #24]
 8005506:	2a47      	cmp	r2, #71	; 0x47
 8005508:	d1be      	bne.n	8005488 <_printf_float+0x100>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1bc      	bne.n	8005488 <_printf_float+0x100>
 800550e:	2301      	movs	r3, #1
 8005510:	e7b9      	b.n	8005486 <_printf_float+0xfe>
 8005512:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005516:	d118      	bne.n	800554a <_printf_float+0x1c2>
 8005518:	2900      	cmp	r1, #0
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	dd0b      	ble.n	8005536 <_printf_float+0x1ae>
 800551e:	6121      	str	r1, [r4, #16]
 8005520:	b913      	cbnz	r3, 8005528 <_printf_float+0x1a0>
 8005522:	6822      	ldr	r2, [r4, #0]
 8005524:	07d0      	lsls	r0, r2, #31
 8005526:	d502      	bpl.n	800552e <_printf_float+0x1a6>
 8005528:	3301      	adds	r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	e7de      	b.n	80054f4 <_printf_float+0x16c>
 8005536:	b913      	cbnz	r3, 800553e <_printf_float+0x1b6>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	07d2      	lsls	r2, r2, #31
 800553c:	d501      	bpl.n	8005542 <_printf_float+0x1ba>
 800553e:	3302      	adds	r3, #2
 8005540:	e7f4      	b.n	800552c <_printf_float+0x1a4>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f2      	b.n	800552c <_printf_float+0x1a4>
 8005546:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800554a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554c:	4299      	cmp	r1, r3
 800554e:	db05      	blt.n	800555c <_printf_float+0x1d4>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	6121      	str	r1, [r4, #16]
 8005554:	07d8      	lsls	r0, r3, #31
 8005556:	d5ea      	bpl.n	800552e <_printf_float+0x1a6>
 8005558:	1c4b      	adds	r3, r1, #1
 800555a:	e7e7      	b.n	800552c <_printf_float+0x1a4>
 800555c:	2900      	cmp	r1, #0
 800555e:	bfd4      	ite	le
 8005560:	f1c1 0202 	rsble	r2, r1, #2
 8005564:	2201      	movgt	r2, #1
 8005566:	4413      	add	r3, r2
 8005568:	e7e0      	b.n	800552c <_printf_float+0x1a4>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	055a      	lsls	r2, r3, #21
 800556e:	d407      	bmi.n	8005580 <_printf_float+0x1f8>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	4642      	mov	r2, r8
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d12c      	bne.n	80055d8 <_printf_float+0x250>
 800557e:	e764      	b.n	800544a <_printf_float+0xc2>
 8005580:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005584:	f240 80e0 	bls.w	8005748 <_printf_float+0x3c0>
 8005588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800558c:	2200      	movs	r2, #0
 800558e:	2300      	movs	r3, #0
 8005590:	f7fb faba 	bl	8000b08 <__aeabi_dcmpeq>
 8005594:	2800      	cmp	r0, #0
 8005596:	d034      	beq.n	8005602 <_printf_float+0x27a>
 8005598:	4a37      	ldr	r2, [pc, #220]	; (8005678 <_printf_float+0x2f0>)
 800559a:	2301      	movs	r3, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af51 	beq.w	800544a <_printf_float+0xc2>
 80055a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ac:	429a      	cmp	r2, r3
 80055ae:	db02      	blt.n	80055b6 <_printf_float+0x22e>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07d8      	lsls	r0, r3, #31
 80055b4:	d510      	bpl.n	80055d8 <_printf_float+0x250>
 80055b6:	ee18 3a10 	vmov	r3, s16
 80055ba:	4652      	mov	r2, sl
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af41 	beq.w	800544a <_printf_float+0xc2>
 80055c8:	f04f 0800 	mov.w	r8, #0
 80055cc:	f104 091a 	add.w	r9, r4, #26
 80055d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4543      	cmp	r3, r8
 80055d6:	dc09      	bgt.n	80055ec <_printf_float+0x264>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	f100 8105 	bmi.w	80057ea <_printf_float+0x462>
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e4:	4298      	cmp	r0, r3
 80055e6:	bfb8      	it	lt
 80055e8:	4618      	movlt	r0, r3
 80055ea:	e730      	b.n	800544e <_printf_float+0xc6>
 80055ec:	2301      	movs	r3, #1
 80055ee:	464a      	mov	r2, r9
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af27 	beq.w	800544a <_printf_float+0xc2>
 80055fc:	f108 0801 	add.w	r8, r8, #1
 8005600:	e7e6      	b.n	80055d0 <_printf_float+0x248>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	dc39      	bgt.n	800567c <_printf_float+0x2f4>
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <_printf_float+0x2f0>)
 800560a:	2301      	movs	r3, #1
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af19 	beq.w	800544a <_printf_float+0xc2>
 8005618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800561c:	4313      	orrs	r3, r2
 800561e:	d102      	bne.n	8005626 <_printf_float+0x29e>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	d5d8      	bpl.n	80055d8 <_printf_float+0x250>
 8005626:	ee18 3a10 	vmov	r3, s16
 800562a:	4652      	mov	r2, sl
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	f43f af09 	beq.w	800544a <_printf_float+0xc2>
 8005638:	f04f 0900 	mov.w	r9, #0
 800563c:	f104 0a1a 	add.w	sl, r4, #26
 8005640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005642:	425b      	negs	r3, r3
 8005644:	454b      	cmp	r3, r9
 8005646:	dc01      	bgt.n	800564c <_printf_float+0x2c4>
 8005648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800564a:	e792      	b.n	8005572 <_printf_float+0x1ea>
 800564c:	2301      	movs	r3, #1
 800564e:	4652      	mov	r2, sl
 8005650:	4631      	mov	r1, r6
 8005652:	4628      	mov	r0, r5
 8005654:	47b8      	blx	r7
 8005656:	3001      	adds	r0, #1
 8005658:	f43f aef7 	beq.w	800544a <_printf_float+0xc2>
 800565c:	f109 0901 	add.w	r9, r9, #1
 8005660:	e7ee      	b.n	8005640 <_printf_float+0x2b8>
 8005662:	bf00      	nop
 8005664:	7fefffff 	.word	0x7fefffff
 8005668:	08008574 	.word	0x08008574
 800566c:	08008578 	.word	0x08008578
 8005670:	08008580 	.word	0x08008580
 8005674:	0800857c 	.word	0x0800857c
 8005678:	08008584 	.word	0x08008584
 800567c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800567e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005680:	429a      	cmp	r2, r3
 8005682:	bfa8      	it	ge
 8005684:	461a      	movge	r2, r3
 8005686:	2a00      	cmp	r2, #0
 8005688:	4691      	mov	r9, r2
 800568a:	dc37      	bgt.n	80056fc <_printf_float+0x374>
 800568c:	f04f 0b00 	mov.w	fp, #0
 8005690:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005694:	f104 021a 	add.w	r2, r4, #26
 8005698:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800569a:	9305      	str	r3, [sp, #20]
 800569c:	eba3 0309 	sub.w	r3, r3, r9
 80056a0:	455b      	cmp	r3, fp
 80056a2:	dc33      	bgt.n	800570c <_printf_float+0x384>
 80056a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056a8:	429a      	cmp	r2, r3
 80056aa:	db3b      	blt.n	8005724 <_printf_float+0x39c>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07da      	lsls	r2, r3, #31
 80056b0:	d438      	bmi.n	8005724 <_printf_float+0x39c>
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	9a05      	ldr	r2, [sp, #20]
 80056b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056b8:	1a9a      	subs	r2, r3, r2
 80056ba:	eba3 0901 	sub.w	r9, r3, r1
 80056be:	4591      	cmp	r9, r2
 80056c0:	bfa8      	it	ge
 80056c2:	4691      	movge	r9, r2
 80056c4:	f1b9 0f00 	cmp.w	r9, #0
 80056c8:	dc35      	bgt.n	8005736 <_printf_float+0x3ae>
 80056ca:	f04f 0800 	mov.w	r8, #0
 80056ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056d2:	f104 0a1a 	add.w	sl, r4, #26
 80056d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056da:	1a9b      	subs	r3, r3, r2
 80056dc:	eba3 0309 	sub.w	r3, r3, r9
 80056e0:	4543      	cmp	r3, r8
 80056e2:	f77f af79 	ble.w	80055d8 <_printf_float+0x250>
 80056e6:	2301      	movs	r3, #1
 80056e8:	4652      	mov	r2, sl
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b8      	blx	r7
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f aeaa 	beq.w	800544a <_printf_float+0xc2>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	e7ec      	b.n	80056d6 <_printf_float+0x34e>
 80056fc:	4613      	mov	r3, r2
 80056fe:	4631      	mov	r1, r6
 8005700:	4642      	mov	r2, r8
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d1c0      	bne.n	800568c <_printf_float+0x304>
 800570a:	e69e      	b.n	800544a <_printf_float+0xc2>
 800570c:	2301      	movs	r3, #1
 800570e:	4631      	mov	r1, r6
 8005710:	4628      	mov	r0, r5
 8005712:	9205      	str	r2, [sp, #20]
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f ae97 	beq.w	800544a <_printf_float+0xc2>
 800571c:	9a05      	ldr	r2, [sp, #20]
 800571e:	f10b 0b01 	add.w	fp, fp, #1
 8005722:	e7b9      	b.n	8005698 <_printf_float+0x310>
 8005724:	ee18 3a10 	vmov	r3, s16
 8005728:	4652      	mov	r2, sl
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d1be      	bne.n	80056b2 <_printf_float+0x32a>
 8005734:	e689      	b.n	800544a <_printf_float+0xc2>
 8005736:	9a05      	ldr	r2, [sp, #20]
 8005738:	464b      	mov	r3, r9
 800573a:	4442      	add	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d1c1      	bne.n	80056ca <_printf_float+0x342>
 8005746:	e680      	b.n	800544a <_printf_float+0xc2>
 8005748:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800574a:	2a01      	cmp	r2, #1
 800574c:	dc01      	bgt.n	8005752 <_printf_float+0x3ca>
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d538      	bpl.n	80057c4 <_printf_float+0x43c>
 8005752:	2301      	movs	r3, #1
 8005754:	4642      	mov	r2, r8
 8005756:	4631      	mov	r1, r6
 8005758:	4628      	mov	r0, r5
 800575a:	47b8      	blx	r7
 800575c:	3001      	adds	r0, #1
 800575e:	f43f ae74 	beq.w	800544a <_printf_float+0xc2>
 8005762:	ee18 3a10 	vmov	r3, s16
 8005766:	4652      	mov	r2, sl
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	f43f ae6b 	beq.w	800544a <_printf_float+0xc2>
 8005774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005778:	2200      	movs	r2, #0
 800577a:	2300      	movs	r3, #0
 800577c:	f7fb f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 8005780:	b9d8      	cbnz	r0, 80057ba <_printf_float+0x432>
 8005782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005784:	f108 0201 	add.w	r2, r8, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	4631      	mov	r1, r6
 800578c:	4628      	mov	r0, r5
 800578e:	47b8      	blx	r7
 8005790:	3001      	adds	r0, #1
 8005792:	d10e      	bne.n	80057b2 <_printf_float+0x42a>
 8005794:	e659      	b.n	800544a <_printf_float+0xc2>
 8005796:	2301      	movs	r3, #1
 8005798:	4652      	mov	r2, sl
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f ae52 	beq.w	800544a <_printf_float+0xc2>
 80057a6:	f108 0801 	add.w	r8, r8, #1
 80057aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ac:	3b01      	subs	r3, #1
 80057ae:	4543      	cmp	r3, r8
 80057b0:	dcf1      	bgt.n	8005796 <_printf_float+0x40e>
 80057b2:	464b      	mov	r3, r9
 80057b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b8:	e6dc      	b.n	8005574 <_printf_float+0x1ec>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0a1a 	add.w	sl, r4, #26
 80057c2:	e7f2      	b.n	80057aa <_printf_float+0x422>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4642      	mov	r2, r8
 80057c8:	e7df      	b.n	800578a <_printf_float+0x402>
 80057ca:	2301      	movs	r3, #1
 80057cc:	464a      	mov	r2, r9
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae38 	beq.w	800544a <_printf_float+0xc2>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	4543      	cmp	r3, r8
 80057e6:	dcf0      	bgt.n	80057ca <_printf_float+0x442>
 80057e8:	e6fa      	b.n	80055e0 <_printf_float+0x258>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0919 	add.w	r9, r4, #25
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x456>

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4699      	mov	r9, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005840:	1e13      	subs	r3, r2, #0
 8005842:	6822      	ldr	r2, [r4, #0]
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005850:	4649      	mov	r1, r9
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	68e5      	ldr	r5, [r4, #12]
 800585e:	6832      	ldr	r2, [r6, #0]
 8005860:	f003 0306 	and.w	r3, r3, #6
 8005864:	2b04      	cmp	r3, #4
 8005866:	bf08      	it	eq
 8005868:	1aad      	subeq	r5, r5, r2
 800586a:	68a3      	ldr	r3, [r4, #8]
 800586c:	6922      	ldr	r2, [r4, #16]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4649      	mov	r1, r9
 8005890:	4638      	mov	r0, r7
 8005892:	47c0      	blx	r8
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	; 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4649      	mov	r1, r9
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d8:	2f78      	cmp	r7, #120	; 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	; 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d8 	beq.w	8005aa2 <_printf_i+0x1d2>
 80058f2:	2f58      	cmp	r7, #88	; 0x58
 80058f4:	f000 80a3 	beq.w	8005a3e <_printf_i+0x16e>
 80058f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	; (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a89 	.word	0x08005a89
 8005940:	080059ad 	.word	0x080059ad
 8005944:	08005a6b 	.word	0x08005a6b
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005aab 	.word	0x08005aab
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059ad 	.word	0x080059ad
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a73 	.word	0x08005a73
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	602a      	str	r2, [r5, #0]
 8005970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e0a3      	b.n	8005ac4 <_printf_i+0x1f4>
 800597c:	6820      	ldr	r0, [r4, #0]
 800597e:	6829      	ldr	r1, [r5, #0]
 8005980:	0606      	lsls	r6, r0, #24
 8005982:	f101 0304 	add.w	r3, r1, #4
 8005986:	d50a      	bpl.n	800599e <_printf_i+0xce>
 8005988:	680e      	ldr	r6, [r1, #0]
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	2e00      	cmp	r6, #0
 800598e:	da03      	bge.n	8005998 <_printf_i+0xc8>
 8005990:	232d      	movs	r3, #45	; 0x2d
 8005992:	4276      	negs	r6, r6
 8005994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005998:	485e      	ldr	r0, [pc, #376]	; (8005b14 <_printf_i+0x244>)
 800599a:	230a      	movs	r3, #10
 800599c:	e019      	b.n	80059d2 <_printf_i+0x102>
 800599e:	680e      	ldr	r6, [r1, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059a6:	bf18      	it	ne
 80059a8:	b236      	sxthne	r6, r6
 80059aa:	e7ef      	b.n	800598c <_printf_i+0xbc>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6820      	ldr	r0, [r4, #0]
 80059b0:	1d19      	adds	r1, r3, #4
 80059b2:	6029      	str	r1, [r5, #0]
 80059b4:	0601      	lsls	r1, r0, #24
 80059b6:	d501      	bpl.n	80059bc <_printf_i+0xec>
 80059b8:	681e      	ldr	r6, [r3, #0]
 80059ba:	e002      	b.n	80059c2 <_printf_i+0xf2>
 80059bc:	0646      	lsls	r6, r0, #25
 80059be:	d5fb      	bpl.n	80059b8 <_printf_i+0xe8>
 80059c0:	881e      	ldrh	r6, [r3, #0]
 80059c2:	4854      	ldr	r0, [pc, #336]	; (8005b14 <_printf_i+0x244>)
 80059c4:	2f6f      	cmp	r7, #111	; 0x6f
 80059c6:	bf0c      	ite	eq
 80059c8:	2308      	moveq	r3, #8
 80059ca:	230a      	movne	r3, #10
 80059cc:	2100      	movs	r1, #0
 80059ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059d2:	6865      	ldr	r5, [r4, #4]
 80059d4:	60a5      	str	r5, [r4, #8]
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	bfa2      	ittt	ge
 80059da:	6821      	ldrge	r1, [r4, #0]
 80059dc:	f021 0104 	bicge.w	r1, r1, #4
 80059e0:	6021      	strge	r1, [r4, #0]
 80059e2:	b90e      	cbnz	r6, 80059e8 <_printf_i+0x118>
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d04d      	beq.n	8005a84 <_printf_i+0x1b4>
 80059e8:	4615      	mov	r5, r2
 80059ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ee:	fb03 6711 	mls	r7, r3, r1, r6
 80059f2:	5dc7      	ldrb	r7, [r0, r7]
 80059f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f8:	4637      	mov	r7, r6
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	460e      	mov	r6, r1
 80059fe:	d9f4      	bls.n	80059ea <_printf_i+0x11a>
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d10b      	bne.n	8005a1c <_printf_i+0x14c>
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	07de      	lsls	r6, r3, #31
 8005a08:	d508      	bpl.n	8005a1c <_printf_i+0x14c>
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6861      	ldr	r1, [r4, #4]
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	bfde      	ittt	le
 8005a12:	2330      	movle	r3, #48	; 0x30
 8005a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a1c:	1b52      	subs	r2, r2, r5
 8005a1e:	6122      	str	r2, [r4, #16]
 8005a20:	f8cd a000 	str.w	sl, [sp]
 8005a24:	464b      	mov	r3, r9
 8005a26:	aa03      	add	r2, sp, #12
 8005a28:	4621      	mov	r1, r4
 8005a2a:	4640      	mov	r0, r8
 8005a2c:	f7ff fee2 	bl	80057f4 <_printf_common>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d14c      	bne.n	8005ace <_printf_i+0x1fe>
 8005a34:	f04f 30ff 	mov.w	r0, #4294967295
 8005a38:	b004      	add	sp, #16
 8005a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a3e:	4835      	ldr	r0, [pc, #212]	; (8005b14 <_printf_i+0x244>)
 8005a40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a44:	6829      	ldr	r1, [r5, #0]
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a4c:	6029      	str	r1, [r5, #0]
 8005a4e:	061d      	lsls	r5, r3, #24
 8005a50:	d514      	bpl.n	8005a7c <_printf_i+0x1ac>
 8005a52:	07df      	lsls	r7, r3, #31
 8005a54:	bf44      	itt	mi
 8005a56:	f043 0320 	orrmi.w	r3, r3, #32
 8005a5a:	6023      	strmi	r3, [r4, #0]
 8005a5c:	b91e      	cbnz	r6, 8005a66 <_printf_i+0x196>
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	f023 0320 	bic.w	r3, r3, #32
 8005a64:	6023      	str	r3, [r4, #0]
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7b0      	b.n	80059cc <_printf_i+0xfc>
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	f043 0320 	orr.w	r3, r3, #32
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	2378      	movs	r3, #120	; 0x78
 8005a74:	4828      	ldr	r0, [pc, #160]	; (8005b18 <_printf_i+0x248>)
 8005a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a7a:	e7e3      	b.n	8005a44 <_printf_i+0x174>
 8005a7c:	0659      	lsls	r1, r3, #25
 8005a7e:	bf48      	it	mi
 8005a80:	b2b6      	uxthmi	r6, r6
 8005a82:	e7e6      	b.n	8005a52 <_printf_i+0x182>
 8005a84:	4615      	mov	r5, r2
 8005a86:	e7bb      	b.n	8005a00 <_printf_i+0x130>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	6826      	ldr	r6, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6028      	str	r0, [r5, #0]
 8005a92:	0635      	lsls	r5, r6, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1cc>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1d2>
 8005a9c:	0670      	lsls	r0, r6, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1c8>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	e7ba      	b.n	8005a20 <_printf_i+0x150>
 8005aaa:	682b      	ldr	r3, [r5, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	602a      	str	r2, [r5, #0]
 8005ab0:	681d      	ldr	r5, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f7fa fbb2 	bl	8000220 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1f2>
 8005abe:	1b40      	subs	r0, r0, r5
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005acc:	e7a8      	b.n	8005a20 <_printf_i+0x150>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	462a      	mov	r2, r5
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ab      	beq.n	8005a34 <_printf_i+0x164>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x23a>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a4      	b.n	8005a38 <_printf_i+0x168>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09b      	beq.n	8005a34 <_printf_i+0x164>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x21e>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x212>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x22e>
 8005b12:	bf00      	nop
 8005b14:	08008586 	.word	0x08008586
 8005b18:	08008597 	.word	0x08008597

08005b1c <iprintf>:
 8005b1c:	b40f      	push	{r0, r1, r2, r3}
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	; (8005b48 <iprintf+0x2c>)
 8005b20:	b513      	push	{r0, r1, r4, lr}
 8005b22:	681c      	ldr	r4, [r3, #0]
 8005b24:	b124      	cbz	r4, 8005b30 <iprintf+0x14>
 8005b26:	69a3      	ldr	r3, [r4, #24]
 8005b28:	b913      	cbnz	r3, 8005b30 <iprintf+0x14>
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f001 f908 	bl	8006d40 <__sinit>
 8005b30:	ab05      	add	r3, sp, #20
 8005b32:	9a04      	ldr	r2, [sp, #16]
 8005b34:	68a1      	ldr	r1, [r4, #8]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f001 ff37 	bl	80079ac <_vfiprintf_r>
 8005b3e:	b002      	add	sp, #8
 8005b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b44:	b004      	add	sp, #16
 8005b46:	4770      	bx	lr
 8005b48:	20000014 	.word	0x20000014

08005b4c <_puts_r>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	460e      	mov	r6, r1
 8005b50:	4605      	mov	r5, r0
 8005b52:	b118      	cbz	r0, 8005b5c <_puts_r+0x10>
 8005b54:	6983      	ldr	r3, [r0, #24]
 8005b56:	b90b      	cbnz	r3, 8005b5c <_puts_r+0x10>
 8005b58:	f001 f8f2 	bl	8006d40 <__sinit>
 8005b5c:	69ab      	ldr	r3, [r5, #24]
 8005b5e:	68ac      	ldr	r4, [r5, #8]
 8005b60:	b913      	cbnz	r3, 8005b68 <_puts_r+0x1c>
 8005b62:	4628      	mov	r0, r5
 8005b64:	f001 f8ec 	bl	8006d40 <__sinit>
 8005b68:	4b2c      	ldr	r3, [pc, #176]	; (8005c1c <_puts_r+0xd0>)
 8005b6a:	429c      	cmp	r4, r3
 8005b6c:	d120      	bne.n	8005bb0 <_puts_r+0x64>
 8005b6e:	686c      	ldr	r4, [r5, #4]
 8005b70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b72:	07db      	lsls	r3, r3, #31
 8005b74:	d405      	bmi.n	8005b82 <_puts_r+0x36>
 8005b76:	89a3      	ldrh	r3, [r4, #12]
 8005b78:	0598      	lsls	r0, r3, #22
 8005b7a:	d402      	bmi.n	8005b82 <_puts_r+0x36>
 8005b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b7e:	f001 f982 	bl	8006e86 <__retarget_lock_acquire_recursive>
 8005b82:	89a3      	ldrh	r3, [r4, #12]
 8005b84:	0719      	lsls	r1, r3, #28
 8005b86:	d51d      	bpl.n	8005bc4 <_puts_r+0x78>
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b1db      	cbz	r3, 8005bc4 <_puts_r+0x78>
 8005b8c:	3e01      	subs	r6, #1
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b94:	3b01      	subs	r3, #1
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	bb39      	cbnz	r1, 8005bea <_puts_r+0x9e>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	da38      	bge.n	8005c10 <_puts_r+0xc4>
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	210a      	movs	r1, #10
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f878 	bl	8005c98 <__swbuf_r>
 8005ba8:	3001      	adds	r0, #1
 8005baa:	d011      	beq.n	8005bd0 <_puts_r+0x84>
 8005bac:	250a      	movs	r5, #10
 8005bae:	e011      	b.n	8005bd4 <_puts_r+0x88>
 8005bb0:	4b1b      	ldr	r3, [pc, #108]	; (8005c20 <_puts_r+0xd4>)
 8005bb2:	429c      	cmp	r4, r3
 8005bb4:	d101      	bne.n	8005bba <_puts_r+0x6e>
 8005bb6:	68ac      	ldr	r4, [r5, #8]
 8005bb8:	e7da      	b.n	8005b70 <_puts_r+0x24>
 8005bba:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <_puts_r+0xd8>)
 8005bbc:	429c      	cmp	r4, r3
 8005bbe:	bf08      	it	eq
 8005bc0:	68ec      	ldreq	r4, [r5, #12]
 8005bc2:	e7d5      	b.n	8005b70 <_puts_r+0x24>
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	f000 f8b8 	bl	8005d3c <__swsetup_r>
 8005bcc:	2800      	cmp	r0, #0
 8005bce:	d0dd      	beq.n	8005b8c <_puts_r+0x40>
 8005bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bd6:	07da      	lsls	r2, r3, #31
 8005bd8:	d405      	bmi.n	8005be6 <_puts_r+0x9a>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	059b      	lsls	r3, r3, #22
 8005bde:	d402      	bmi.n	8005be6 <_puts_r+0x9a>
 8005be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005be2:	f001 f951 	bl	8006e88 <__retarget_lock_release_recursive>
 8005be6:	4628      	mov	r0, r5
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da04      	bge.n	8005bf8 <_puts_r+0xac>
 8005bee:	69a2      	ldr	r2, [r4, #24]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	dc06      	bgt.n	8005c02 <_puts_r+0xb6>
 8005bf4:	290a      	cmp	r1, #10
 8005bf6:	d004      	beq.n	8005c02 <_puts_r+0xb6>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	6022      	str	r2, [r4, #0]
 8005bfe:	7019      	strb	r1, [r3, #0]
 8005c00:	e7c5      	b.n	8005b8e <_puts_r+0x42>
 8005c02:	4622      	mov	r2, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f000 f847 	bl	8005c98 <__swbuf_r>
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d1bf      	bne.n	8005b8e <_puts_r+0x42>
 8005c0e:	e7df      	b.n	8005bd0 <_puts_r+0x84>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	250a      	movs	r5, #10
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	6022      	str	r2, [r4, #0]
 8005c18:	701d      	strb	r5, [r3, #0]
 8005c1a:	e7db      	b.n	8005bd4 <_puts_r+0x88>
 8005c1c:	08008658 	.word	0x08008658
 8005c20:	08008678 	.word	0x08008678
 8005c24:	08008638 	.word	0x08008638

08005c28 <puts>:
 8005c28:	4b02      	ldr	r3, [pc, #8]	; (8005c34 <puts+0xc>)
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7ff bf8d 	b.w	8005b4c <_puts_r>
 8005c32:	bf00      	nop
 8005c34:	20000014 	.word	0x20000014

08005c38 <_sbrk_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	; (8005c54 <_sbrk_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fc fbc4 	bl	80023d0 <_sbrk>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_sbrk_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_sbrk_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	20000488 	.word	0x20000488

08005c58 <siprintf>:
 8005c58:	b40e      	push	{r1, r2, r3}
 8005c5a:	b500      	push	{lr}
 8005c5c:	b09c      	sub	sp, #112	; 0x70
 8005c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c60:	9002      	str	r0, [sp, #8]
 8005c62:	9006      	str	r0, [sp, #24]
 8005c64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c68:	4809      	ldr	r0, [pc, #36]	; (8005c90 <siprintf+0x38>)
 8005c6a:	9107      	str	r1, [sp, #28]
 8005c6c:	9104      	str	r1, [sp, #16]
 8005c6e:	4909      	ldr	r1, [pc, #36]	; (8005c94 <siprintf+0x3c>)
 8005c70:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c74:	9105      	str	r1, [sp, #20]
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	a902      	add	r1, sp, #8
 8005c7c:	f001 fd6c 	bl	8007758 <_svfiprintf_r>
 8005c80:	9b02      	ldr	r3, [sp, #8]
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	b01c      	add	sp, #112	; 0x70
 8005c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c8c:	b003      	add	sp, #12
 8005c8e:	4770      	bx	lr
 8005c90:	20000014 	.word	0x20000014
 8005c94:	ffff0208 	.word	0xffff0208

08005c98 <__swbuf_r>:
 8005c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9a:	460e      	mov	r6, r1
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	4605      	mov	r5, r0
 8005ca0:	b118      	cbz	r0, 8005caa <__swbuf_r+0x12>
 8005ca2:	6983      	ldr	r3, [r0, #24]
 8005ca4:	b90b      	cbnz	r3, 8005caa <__swbuf_r+0x12>
 8005ca6:	f001 f84b 	bl	8006d40 <__sinit>
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <__swbuf_r+0x98>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	d12b      	bne.n	8005d08 <__swbuf_r+0x70>
 8005cb0:	686c      	ldr	r4, [r5, #4]
 8005cb2:	69a3      	ldr	r3, [r4, #24]
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	071a      	lsls	r2, r3, #28
 8005cba:	d52f      	bpl.n	8005d1c <__swbuf_r+0x84>
 8005cbc:	6923      	ldr	r3, [r4, #16]
 8005cbe:	b36b      	cbz	r3, 8005d1c <__swbuf_r+0x84>
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	1ac0      	subs	r0, r0, r3
 8005cc6:	6963      	ldr	r3, [r4, #20]
 8005cc8:	b2f6      	uxtb	r6, r6
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	4637      	mov	r7, r6
 8005cce:	dc04      	bgt.n	8005cda <__swbuf_r+0x42>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f000 ffa0 	bl	8006c18 <_fflush_r>
 8005cd8:	bb30      	cbnz	r0, 8005d28 <__swbuf_r+0x90>
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	60a3      	str	r3, [r4, #8]
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	6022      	str	r2, [r4, #0]
 8005ce6:	701e      	strb	r6, [r3, #0]
 8005ce8:	6963      	ldr	r3, [r4, #20]
 8005cea:	3001      	adds	r0, #1
 8005cec:	4283      	cmp	r3, r0
 8005cee:	d004      	beq.n	8005cfa <__swbuf_r+0x62>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	07db      	lsls	r3, r3, #31
 8005cf4:	d506      	bpl.n	8005d04 <__swbuf_r+0x6c>
 8005cf6:	2e0a      	cmp	r6, #10
 8005cf8:	d104      	bne.n	8005d04 <__swbuf_r+0x6c>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	f000 ff8b 	bl	8006c18 <_fflush_r>
 8005d02:	b988      	cbnz	r0, 8005d28 <__swbuf_r+0x90>
 8005d04:	4638      	mov	r0, r7
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <__swbuf_r+0x9c>)
 8005d0a:	429c      	cmp	r4, r3
 8005d0c:	d101      	bne.n	8005d12 <__swbuf_r+0x7a>
 8005d0e:	68ac      	ldr	r4, [r5, #8]
 8005d10:	e7cf      	b.n	8005cb2 <__swbuf_r+0x1a>
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <__swbuf_r+0xa0>)
 8005d14:	429c      	cmp	r4, r3
 8005d16:	bf08      	it	eq
 8005d18:	68ec      	ldreq	r4, [r5, #12]
 8005d1a:	e7ca      	b.n	8005cb2 <__swbuf_r+0x1a>
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f000 f80c 	bl	8005d3c <__swsetup_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d0cb      	beq.n	8005cc0 <__swbuf_r+0x28>
 8005d28:	f04f 37ff 	mov.w	r7, #4294967295
 8005d2c:	e7ea      	b.n	8005d04 <__swbuf_r+0x6c>
 8005d2e:	bf00      	nop
 8005d30:	08008658 	.word	0x08008658
 8005d34:	08008678 	.word	0x08008678
 8005d38:	08008638 	.word	0x08008638

08005d3c <__swsetup_r>:
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <__swsetup_r+0xcc>)
 8005d3e:	b570      	push	{r4, r5, r6, lr}
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	4606      	mov	r6, r0
 8005d44:	460c      	mov	r4, r1
 8005d46:	b125      	cbz	r5, 8005d52 <__swsetup_r+0x16>
 8005d48:	69ab      	ldr	r3, [r5, #24]
 8005d4a:	b913      	cbnz	r3, 8005d52 <__swsetup_r+0x16>
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	f000 fff7 	bl	8006d40 <__sinit>
 8005d52:	4b2e      	ldr	r3, [pc, #184]	; (8005e0c <__swsetup_r+0xd0>)
 8005d54:	429c      	cmp	r4, r3
 8005d56:	d10f      	bne.n	8005d78 <__swsetup_r+0x3c>
 8005d58:	686c      	ldr	r4, [r5, #4]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d60:	0719      	lsls	r1, r3, #28
 8005d62:	d42c      	bmi.n	8005dbe <__swsetup_r+0x82>
 8005d64:	06dd      	lsls	r5, r3, #27
 8005d66:	d411      	bmi.n	8005d8c <__swsetup_r+0x50>
 8005d68:	2309      	movs	r3, #9
 8005d6a:	6033      	str	r3, [r6, #0]
 8005d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d70:	81a3      	strh	r3, [r4, #12]
 8005d72:	f04f 30ff 	mov.w	r0, #4294967295
 8005d76:	e03e      	b.n	8005df6 <__swsetup_r+0xba>
 8005d78:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <__swsetup_r+0xd4>)
 8005d7a:	429c      	cmp	r4, r3
 8005d7c:	d101      	bne.n	8005d82 <__swsetup_r+0x46>
 8005d7e:	68ac      	ldr	r4, [r5, #8]
 8005d80:	e7eb      	b.n	8005d5a <__swsetup_r+0x1e>
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <__swsetup_r+0xd8>)
 8005d84:	429c      	cmp	r4, r3
 8005d86:	bf08      	it	eq
 8005d88:	68ec      	ldreq	r4, [r5, #12]
 8005d8a:	e7e6      	b.n	8005d5a <__swsetup_r+0x1e>
 8005d8c:	0758      	lsls	r0, r3, #29
 8005d8e:	d512      	bpl.n	8005db6 <__swsetup_r+0x7a>
 8005d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d92:	b141      	cbz	r1, 8005da6 <__swsetup_r+0x6a>
 8005d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d98:	4299      	cmp	r1, r3
 8005d9a:	d002      	beq.n	8005da2 <__swsetup_r+0x66>
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff f973 	bl	8005088 <_free_r>
 8005da2:	2300      	movs	r3, #0
 8005da4:	6363      	str	r3, [r4, #52]	; 0x34
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	2300      	movs	r3, #0
 8005db0:	6063      	str	r3, [r4, #4]
 8005db2:	6923      	ldr	r3, [r4, #16]
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	89a3      	ldrh	r3, [r4, #12]
 8005db8:	f043 0308 	orr.w	r3, r3, #8
 8005dbc:	81a3      	strh	r3, [r4, #12]
 8005dbe:	6923      	ldr	r3, [r4, #16]
 8005dc0:	b94b      	cbnz	r3, 8005dd6 <__swsetup_r+0x9a>
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dcc:	d003      	beq.n	8005dd6 <__swsetup_r+0x9a>
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f001 f87f 	bl	8006ed4 <__smakebuf_r>
 8005dd6:	89a0      	ldrh	r0, [r4, #12]
 8005dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ddc:	f010 0301 	ands.w	r3, r0, #1
 8005de0:	d00a      	beq.n	8005df8 <__swsetup_r+0xbc>
 8005de2:	2300      	movs	r3, #0
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6963      	ldr	r3, [r4, #20]
 8005de8:	425b      	negs	r3, r3
 8005dea:	61a3      	str	r3, [r4, #24]
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	b943      	cbnz	r3, 8005e02 <__swsetup_r+0xc6>
 8005df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005df4:	d1ba      	bne.n	8005d6c <__swsetup_r+0x30>
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	0781      	lsls	r1, r0, #30
 8005dfa:	bf58      	it	pl
 8005dfc:	6963      	ldrpl	r3, [r4, #20]
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	e7f4      	b.n	8005dec <__swsetup_r+0xb0>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e7f7      	b.n	8005df6 <__swsetup_r+0xba>
 8005e06:	bf00      	nop
 8005e08:	20000014 	.word	0x20000014
 8005e0c:	08008658 	.word	0x08008658
 8005e10:	08008678 	.word	0x08008678
 8005e14:	08008638 	.word	0x08008638

08005e18 <quorem>:
 8005e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e1c:	6903      	ldr	r3, [r0, #16]
 8005e1e:	690c      	ldr	r4, [r1, #16]
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	4607      	mov	r7, r0
 8005e24:	f2c0 8081 	blt.w	8005f2a <quorem+0x112>
 8005e28:	3c01      	subs	r4, #1
 8005e2a:	f101 0814 	add.w	r8, r1, #20
 8005e2e:	f100 0514 	add.w	r5, r0, #20
 8005e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e40:	3301      	adds	r3, #1
 8005e42:	429a      	cmp	r2, r3
 8005e44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e50:	d331      	bcc.n	8005eb6 <quorem+0x9e>
 8005e52:	f04f 0e00 	mov.w	lr, #0
 8005e56:	4640      	mov	r0, r8
 8005e58:	46ac      	mov	ip, r5
 8005e5a:	46f2      	mov	sl, lr
 8005e5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e60:	b293      	uxth	r3, r2
 8005e62:	fb06 e303 	mla	r3, r6, r3, lr
 8005e66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8005e70:	f8dc a000 	ldr.w	sl, [ip]
 8005e74:	0c12      	lsrs	r2, r2, #16
 8005e76:	fa13 f38a 	uxtah	r3, r3, sl
 8005e7a:	fb06 e202 	mla	r2, r6, r2, lr
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e86:	b292      	uxth	r2, r2
 8005e88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e90:	f8bd 3000 	ldrh.w	r3, [sp]
 8005e94:	4581      	cmp	r9, r0
 8005e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e9a:	f84c 3b04 	str.w	r3, [ip], #4
 8005e9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ea2:	d2db      	bcs.n	8005e5c <quorem+0x44>
 8005ea4:	f855 300b 	ldr.w	r3, [r5, fp]
 8005ea8:	b92b      	cbnz	r3, 8005eb6 <quorem+0x9e>
 8005eaa:	9b01      	ldr	r3, [sp, #4]
 8005eac:	3b04      	subs	r3, #4
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	d32e      	bcc.n	8005f12 <quorem+0xfa>
 8005eb4:	613c      	str	r4, [r7, #16]
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f001 fada 	bl	8007470 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	db24      	blt.n	8005f0a <quorem+0xf2>
 8005ec0:	3601      	adds	r6, #1
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f04f 0c00 	mov.w	ip, #0
 8005ec8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ecc:	f8d0 e000 	ldr.w	lr, [r0]
 8005ed0:	b293      	uxth	r3, r2
 8005ed2:	ebac 0303 	sub.w	r3, ip, r3
 8005ed6:	0c12      	lsrs	r2, r2, #16
 8005ed8:	fa13 f38e 	uxtah	r3, r3, lr
 8005edc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005eea:	45c1      	cmp	r9, r8
 8005eec:	f840 3b04 	str.w	r3, [r0], #4
 8005ef0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005ef4:	d2e8      	bcs.n	8005ec8 <quorem+0xb0>
 8005ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005efe:	b922      	cbnz	r2, 8005f0a <quorem+0xf2>
 8005f00:	3b04      	subs	r3, #4
 8005f02:	429d      	cmp	r5, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	d30a      	bcc.n	8005f1e <quorem+0x106>
 8005f08:	613c      	str	r4, [r7, #16]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	b003      	add	sp, #12
 8005f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	3b04      	subs	r3, #4
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d1cc      	bne.n	8005eb4 <quorem+0x9c>
 8005f1a:	3c01      	subs	r4, #1
 8005f1c:	e7c7      	b.n	8005eae <quorem+0x96>
 8005f1e:	6812      	ldr	r2, [r2, #0]
 8005f20:	3b04      	subs	r3, #4
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d1f0      	bne.n	8005f08 <quorem+0xf0>
 8005f26:	3c01      	subs	r4, #1
 8005f28:	e7eb      	b.n	8005f02 <quorem+0xea>
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	e7ee      	b.n	8005f0c <quorem+0xf4>
	...

08005f30 <_dtoa_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	ed2d 8b04 	vpush	{d8-d9}
 8005f38:	ec57 6b10 	vmov	r6, r7, d0
 8005f3c:	b093      	sub	sp, #76	; 0x4c
 8005f3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005f44:	9106      	str	r1, [sp, #24]
 8005f46:	ee10 aa10 	vmov	sl, s0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005f50:	46bb      	mov	fp, r7
 8005f52:	b975      	cbnz	r5, 8005f72 <_dtoa_r+0x42>
 8005f54:	2010      	movs	r0, #16
 8005f56:	f7ff f871 	bl	800503c <malloc>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6260      	str	r0, [r4, #36]	; 0x24
 8005f5e:	b920      	cbnz	r0, 8005f6a <_dtoa_r+0x3a>
 8005f60:	4ba7      	ldr	r3, [pc, #668]	; (8006200 <_dtoa_r+0x2d0>)
 8005f62:	21ea      	movs	r1, #234	; 0xea
 8005f64:	48a7      	ldr	r0, [pc, #668]	; (8006204 <_dtoa_r+0x2d4>)
 8005f66:	f001 fea7 	bl	8007cb8 <__assert_func>
 8005f6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f6e:	6005      	str	r5, [r0, #0]
 8005f70:	60c5      	str	r5, [r0, #12]
 8005f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f74:	6819      	ldr	r1, [r3, #0]
 8005f76:	b151      	cbz	r1, 8005f8e <_dtoa_r+0x5e>
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	604a      	str	r2, [r1, #4]
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4093      	lsls	r3, r2
 8005f80:	608b      	str	r3, [r1, #8]
 8005f82:	4620      	mov	r0, r4
 8005f84:	f001 f832 	bl	8006fec <_Bfree>
 8005f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
 8005f8e:	1e3b      	subs	r3, r7, #0
 8005f90:	bfaa      	itet	ge
 8005f92:	2300      	movge	r3, #0
 8005f94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f98:	f8c8 3000 	strge.w	r3, [r8]
 8005f9c:	4b9a      	ldr	r3, [pc, #616]	; (8006208 <_dtoa_r+0x2d8>)
 8005f9e:	bfbc      	itt	lt
 8005fa0:	2201      	movlt	r2, #1
 8005fa2:	f8c8 2000 	strlt.w	r2, [r8]
 8005fa6:	ea33 030b 	bics.w	r3, r3, fp
 8005faa:	d11b      	bne.n	8005fe4 <_dtoa_r+0xb4>
 8005fac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fae:	f242 730f 	movw	r3, #9999	; 0x270f
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb8:	4333      	orrs	r3, r6
 8005fba:	f000 8592 	beq.w	8006ae2 <_dtoa_r+0xbb2>
 8005fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fc0:	b963      	cbnz	r3, 8005fdc <_dtoa_r+0xac>
 8005fc2:	4b92      	ldr	r3, [pc, #584]	; (800620c <_dtoa_r+0x2dc>)
 8005fc4:	e022      	b.n	800600c <_dtoa_r+0xdc>
 8005fc6:	4b92      	ldr	r3, [pc, #584]	; (8006210 <_dtoa_r+0x2e0>)
 8005fc8:	9301      	str	r3, [sp, #4]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	9801      	ldr	r0, [sp, #4]
 8005fd2:	b013      	add	sp, #76	; 0x4c
 8005fd4:	ecbd 8b04 	vpop	{d8-d9}
 8005fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fdc:	4b8b      	ldr	r3, [pc, #556]	; (800620c <_dtoa_r+0x2dc>)
 8005fde:	9301      	str	r3, [sp, #4]
 8005fe0:	3303      	adds	r3, #3
 8005fe2:	e7f3      	b.n	8005fcc <_dtoa_r+0x9c>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4650      	mov	r0, sl
 8005fea:	4659      	mov	r1, fp
 8005fec:	f7fa fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8005ff0:	ec4b ab19 	vmov	d9, sl, fp
 8005ff4:	4680      	mov	r8, r0
 8005ff6:	b158      	cbz	r0, 8006010 <_dtoa_r+0xe0>
 8005ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 856b 	beq.w	8006adc <_dtoa_r+0xbac>
 8006006:	4883      	ldr	r0, [pc, #524]	; (8006214 <_dtoa_r+0x2e4>)
 8006008:	6018      	str	r0, [r3, #0]
 800600a:	1e43      	subs	r3, r0, #1
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	e7df      	b.n	8005fd0 <_dtoa_r+0xa0>
 8006010:	ec4b ab10 	vmov	d0, sl, fp
 8006014:	aa10      	add	r2, sp, #64	; 0x40
 8006016:	a911      	add	r1, sp, #68	; 0x44
 8006018:	4620      	mov	r0, r4
 800601a:	f001 facf 	bl	80075bc <__d2b>
 800601e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006022:	ee08 0a10 	vmov	s16, r0
 8006026:	2d00      	cmp	r5, #0
 8006028:	f000 8084 	beq.w	8006134 <_dtoa_r+0x204>
 800602c:	ee19 3a90 	vmov	r3, s19
 8006030:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006034:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006038:	4656      	mov	r6, sl
 800603a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800603e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006042:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006046:	4b74      	ldr	r3, [pc, #464]	; (8006218 <_dtoa_r+0x2e8>)
 8006048:	2200      	movs	r2, #0
 800604a:	4630      	mov	r0, r6
 800604c:	4639      	mov	r1, r7
 800604e:	f7fa f93b 	bl	80002c8 <__aeabi_dsub>
 8006052:	a365      	add	r3, pc, #404	; (adr r3, 80061e8 <_dtoa_r+0x2b8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f7fa faee 	bl	8000638 <__aeabi_dmul>
 800605c:	a364      	add	r3, pc, #400	; (adr r3, 80061f0 <_dtoa_r+0x2c0>)
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f7fa f933 	bl	80002cc <__adddf3>
 8006066:	4606      	mov	r6, r0
 8006068:	4628      	mov	r0, r5
 800606a:	460f      	mov	r7, r1
 800606c:	f7fa fa7a 	bl	8000564 <__aeabi_i2d>
 8006070:	a361      	add	r3, pc, #388	; (adr r3, 80061f8 <_dtoa_r+0x2c8>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	f7fa fadf 	bl	8000638 <__aeabi_dmul>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4630      	mov	r0, r6
 8006080:	4639      	mov	r1, r7
 8006082:	f7fa f923 	bl	80002cc <__adddf3>
 8006086:	4606      	mov	r6, r0
 8006088:	460f      	mov	r7, r1
 800608a:	f7fa fd85 	bl	8000b98 <__aeabi_d2iz>
 800608e:	2200      	movs	r2, #0
 8006090:	9000      	str	r0, [sp, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	4630      	mov	r0, r6
 8006096:	4639      	mov	r1, r7
 8006098:	f7fa fd40 	bl	8000b1c <__aeabi_dcmplt>
 800609c:	b150      	cbz	r0, 80060b4 <_dtoa_r+0x184>
 800609e:	9800      	ldr	r0, [sp, #0]
 80060a0:	f7fa fa60 	bl	8000564 <__aeabi_i2d>
 80060a4:	4632      	mov	r2, r6
 80060a6:	463b      	mov	r3, r7
 80060a8:	f7fa fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80060ac:	b910      	cbnz	r0, 80060b4 <_dtoa_r+0x184>
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	2b16      	cmp	r3, #22
 80060b8:	d85a      	bhi.n	8006170 <_dtoa_r+0x240>
 80060ba:	9a00      	ldr	r2, [sp, #0]
 80060bc:	4b57      	ldr	r3, [pc, #348]	; (800621c <_dtoa_r+0x2ec>)
 80060be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	ec51 0b19 	vmov	r0, r1, d9
 80060ca:	f7fa fd27 	bl	8000b1c <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d050      	beq.n	8006174 <_dtoa_r+0x244>
 80060d2:	9b00      	ldr	r3, [sp, #0]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2300      	movs	r3, #0
 80060da:	930b      	str	r3, [sp, #44]	; 0x2c
 80060dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060de:	1b5d      	subs	r5, r3, r5
 80060e0:	1e6b      	subs	r3, r5, #1
 80060e2:	9305      	str	r3, [sp, #20]
 80060e4:	bf45      	ittet	mi
 80060e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80060ea:	9304      	strmi	r3, [sp, #16]
 80060ec:	2300      	movpl	r3, #0
 80060ee:	2300      	movmi	r3, #0
 80060f0:	bf4c      	ite	mi
 80060f2:	9305      	strmi	r3, [sp, #20]
 80060f4:	9304      	strpl	r3, [sp, #16]
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	db3d      	blt.n	8006178 <_dtoa_r+0x248>
 80060fc:	9b05      	ldr	r3, [sp, #20]
 80060fe:	9a00      	ldr	r2, [sp, #0]
 8006100:	920a      	str	r2, [sp, #40]	; 0x28
 8006102:	4413      	add	r3, r2
 8006104:	9305      	str	r3, [sp, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	9307      	str	r3, [sp, #28]
 800610a:	9b06      	ldr	r3, [sp, #24]
 800610c:	2b09      	cmp	r3, #9
 800610e:	f200 8089 	bhi.w	8006224 <_dtoa_r+0x2f4>
 8006112:	2b05      	cmp	r3, #5
 8006114:	bfc4      	itt	gt
 8006116:	3b04      	subgt	r3, #4
 8006118:	9306      	strgt	r3, [sp, #24]
 800611a:	9b06      	ldr	r3, [sp, #24]
 800611c:	f1a3 0302 	sub.w	r3, r3, #2
 8006120:	bfcc      	ite	gt
 8006122:	2500      	movgt	r5, #0
 8006124:	2501      	movle	r5, #1
 8006126:	2b03      	cmp	r3, #3
 8006128:	f200 8087 	bhi.w	800623a <_dtoa_r+0x30a>
 800612c:	e8df f003 	tbb	[pc, r3]
 8006130:	59383a2d 	.word	0x59383a2d
 8006134:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006138:	441d      	add	r5, r3
 800613a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800613e:	2b20      	cmp	r3, #32
 8006140:	bfc1      	itttt	gt
 8006142:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006146:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800614a:	fa0b f303 	lslgt.w	r3, fp, r3
 800614e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006152:	bfda      	itte	le
 8006154:	f1c3 0320 	rsble	r3, r3, #32
 8006158:	fa06 f003 	lslle.w	r0, r6, r3
 800615c:	4318      	orrgt	r0, r3
 800615e:	f7fa f9f1 	bl	8000544 <__aeabi_ui2d>
 8006162:	2301      	movs	r3, #1
 8006164:	4606      	mov	r6, r0
 8006166:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800616a:	3d01      	subs	r5, #1
 800616c:	930e      	str	r3, [sp, #56]	; 0x38
 800616e:	e76a      	b.n	8006046 <_dtoa_r+0x116>
 8006170:	2301      	movs	r3, #1
 8006172:	e7b2      	b.n	80060da <_dtoa_r+0x1aa>
 8006174:	900b      	str	r0, [sp, #44]	; 0x2c
 8006176:	e7b1      	b.n	80060dc <_dtoa_r+0x1ac>
 8006178:	9b04      	ldr	r3, [sp, #16]
 800617a:	9a00      	ldr	r2, [sp, #0]
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	9304      	str	r3, [sp, #16]
 8006180:	4253      	negs	r3, r2
 8006182:	9307      	str	r3, [sp, #28]
 8006184:	2300      	movs	r3, #0
 8006186:	930a      	str	r3, [sp, #40]	; 0x28
 8006188:	e7bf      	b.n	800610a <_dtoa_r+0x1da>
 800618a:	2300      	movs	r3, #0
 800618c:	9308      	str	r3, [sp, #32]
 800618e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc55      	bgt.n	8006240 <_dtoa_r+0x310>
 8006194:	2301      	movs	r3, #1
 8006196:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800619a:	461a      	mov	r2, r3
 800619c:	9209      	str	r2, [sp, #36]	; 0x24
 800619e:	e00c      	b.n	80061ba <_dtoa_r+0x28a>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e7f3      	b.n	800618c <_dtoa_r+0x25c>
 80061a4:	2300      	movs	r3, #0
 80061a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a8:	9308      	str	r3, [sp, #32]
 80061aa:	9b00      	ldr	r3, [sp, #0]
 80061ac:	4413      	add	r3, r2
 80061ae:	9302      	str	r3, [sp, #8]
 80061b0:	3301      	adds	r3, #1
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	bfb8      	it	lt
 80061b8:	2301      	movlt	r3, #1
 80061ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80061bc:	2200      	movs	r2, #0
 80061be:	6042      	str	r2, [r0, #4]
 80061c0:	2204      	movs	r2, #4
 80061c2:	f102 0614 	add.w	r6, r2, #20
 80061c6:	429e      	cmp	r6, r3
 80061c8:	6841      	ldr	r1, [r0, #4]
 80061ca:	d93d      	bls.n	8006248 <_dtoa_r+0x318>
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 fecd 	bl	8006f6c <_Balloc>
 80061d2:	9001      	str	r0, [sp, #4]
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d13b      	bne.n	8006250 <_dtoa_r+0x320>
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <_dtoa_r+0x2f0>)
 80061da:	4602      	mov	r2, r0
 80061dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061e0:	e6c0      	b.n	8005f64 <_dtoa_r+0x34>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e7df      	b.n	80061a6 <_dtoa_r+0x276>
 80061e6:	bf00      	nop
 80061e8:	636f4361 	.word	0x636f4361
 80061ec:	3fd287a7 	.word	0x3fd287a7
 80061f0:	8b60c8b3 	.word	0x8b60c8b3
 80061f4:	3fc68a28 	.word	0x3fc68a28
 80061f8:	509f79fb 	.word	0x509f79fb
 80061fc:	3fd34413 	.word	0x3fd34413
 8006200:	080085b5 	.word	0x080085b5
 8006204:	080085cc 	.word	0x080085cc
 8006208:	7ff00000 	.word	0x7ff00000
 800620c:	080085b1 	.word	0x080085b1
 8006210:	080085a8 	.word	0x080085a8
 8006214:	08008585 	.word	0x08008585
 8006218:	3ff80000 	.word	0x3ff80000
 800621c:	08008720 	.word	0x08008720
 8006220:	08008627 	.word	0x08008627
 8006224:	2501      	movs	r5, #1
 8006226:	2300      	movs	r3, #0
 8006228:	9306      	str	r3, [sp, #24]
 800622a:	9508      	str	r5, [sp, #32]
 800622c:	f04f 33ff 	mov.w	r3, #4294967295
 8006230:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	2312      	movs	r3, #18
 8006238:	e7b0      	b.n	800619c <_dtoa_r+0x26c>
 800623a:	2301      	movs	r3, #1
 800623c:	9308      	str	r3, [sp, #32]
 800623e:	e7f5      	b.n	800622c <_dtoa_r+0x2fc>
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006246:	e7b8      	b.n	80061ba <_dtoa_r+0x28a>
 8006248:	3101      	adds	r1, #1
 800624a:	6041      	str	r1, [r0, #4]
 800624c:	0052      	lsls	r2, r2, #1
 800624e:	e7b8      	b.n	80061c2 <_dtoa_r+0x292>
 8006250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006252:	9a01      	ldr	r2, [sp, #4]
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	2b0e      	cmp	r3, #14
 800625a:	f200 809d 	bhi.w	8006398 <_dtoa_r+0x468>
 800625e:	2d00      	cmp	r5, #0
 8006260:	f000 809a 	beq.w	8006398 <_dtoa_r+0x468>
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dd32      	ble.n	80062d0 <_dtoa_r+0x3a0>
 800626a:	4ab7      	ldr	r2, [pc, #732]	; (8006548 <_dtoa_r+0x618>)
 800626c:	f003 030f 	and.w	r3, r3, #15
 8006270:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006278:	9b00      	ldr	r3, [sp, #0]
 800627a:	05d8      	lsls	r0, r3, #23
 800627c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006280:	d516      	bpl.n	80062b0 <_dtoa_r+0x380>
 8006282:	4bb2      	ldr	r3, [pc, #712]	; (800654c <_dtoa_r+0x61c>)
 8006284:	ec51 0b19 	vmov	r0, r1, d9
 8006288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800628c:	f7fa fafe 	bl	800088c <__aeabi_ddiv>
 8006290:	f007 070f 	and.w	r7, r7, #15
 8006294:	4682      	mov	sl, r0
 8006296:	468b      	mov	fp, r1
 8006298:	2503      	movs	r5, #3
 800629a:	4eac      	ldr	r6, [pc, #688]	; (800654c <_dtoa_r+0x61c>)
 800629c:	b957      	cbnz	r7, 80062b4 <_dtoa_r+0x384>
 800629e:	4642      	mov	r2, r8
 80062a0:	464b      	mov	r3, r9
 80062a2:	4650      	mov	r0, sl
 80062a4:	4659      	mov	r1, fp
 80062a6:	f7fa faf1 	bl	800088c <__aeabi_ddiv>
 80062aa:	4682      	mov	sl, r0
 80062ac:	468b      	mov	fp, r1
 80062ae:	e028      	b.n	8006302 <_dtoa_r+0x3d2>
 80062b0:	2502      	movs	r5, #2
 80062b2:	e7f2      	b.n	800629a <_dtoa_r+0x36a>
 80062b4:	07f9      	lsls	r1, r7, #31
 80062b6:	d508      	bpl.n	80062ca <_dtoa_r+0x39a>
 80062b8:	4640      	mov	r0, r8
 80062ba:	4649      	mov	r1, r9
 80062bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062c0:	f7fa f9ba 	bl	8000638 <__aeabi_dmul>
 80062c4:	3501      	adds	r5, #1
 80062c6:	4680      	mov	r8, r0
 80062c8:	4689      	mov	r9, r1
 80062ca:	107f      	asrs	r7, r7, #1
 80062cc:	3608      	adds	r6, #8
 80062ce:	e7e5      	b.n	800629c <_dtoa_r+0x36c>
 80062d0:	f000 809b 	beq.w	800640a <_dtoa_r+0x4da>
 80062d4:	9b00      	ldr	r3, [sp, #0]
 80062d6:	4f9d      	ldr	r7, [pc, #628]	; (800654c <_dtoa_r+0x61c>)
 80062d8:	425e      	negs	r6, r3
 80062da:	4b9b      	ldr	r3, [pc, #620]	; (8006548 <_dtoa_r+0x618>)
 80062dc:	f006 020f 	and.w	r2, r6, #15
 80062e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	ec51 0b19 	vmov	r0, r1, d9
 80062ec:	f7fa f9a4 	bl	8000638 <__aeabi_dmul>
 80062f0:	1136      	asrs	r6, r6, #4
 80062f2:	4682      	mov	sl, r0
 80062f4:	468b      	mov	fp, r1
 80062f6:	2300      	movs	r3, #0
 80062f8:	2502      	movs	r5, #2
 80062fa:	2e00      	cmp	r6, #0
 80062fc:	d17a      	bne.n	80063f4 <_dtoa_r+0x4c4>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1d3      	bne.n	80062aa <_dtoa_r+0x37a>
 8006302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8082 	beq.w	800640e <_dtoa_r+0x4de>
 800630a:	4b91      	ldr	r3, [pc, #580]	; (8006550 <_dtoa_r+0x620>)
 800630c:	2200      	movs	r2, #0
 800630e:	4650      	mov	r0, sl
 8006310:	4659      	mov	r1, fp
 8006312:	f7fa fc03 	bl	8000b1c <__aeabi_dcmplt>
 8006316:	2800      	cmp	r0, #0
 8006318:	d079      	beq.n	800640e <_dtoa_r+0x4de>
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d076      	beq.n	800640e <_dtoa_r+0x4de>
 8006320:	9b02      	ldr	r3, [sp, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	dd36      	ble.n	8006394 <_dtoa_r+0x464>
 8006326:	9b00      	ldr	r3, [sp, #0]
 8006328:	4650      	mov	r0, sl
 800632a:	4659      	mov	r1, fp
 800632c:	1e5f      	subs	r7, r3, #1
 800632e:	2200      	movs	r2, #0
 8006330:	4b88      	ldr	r3, [pc, #544]	; (8006554 <_dtoa_r+0x624>)
 8006332:	f7fa f981 	bl	8000638 <__aeabi_dmul>
 8006336:	9e02      	ldr	r6, [sp, #8]
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	3501      	adds	r5, #1
 800633e:	4628      	mov	r0, r5
 8006340:	f7fa f910 	bl	8000564 <__aeabi_i2d>
 8006344:	4652      	mov	r2, sl
 8006346:	465b      	mov	r3, fp
 8006348:	f7fa f976 	bl	8000638 <__aeabi_dmul>
 800634c:	4b82      	ldr	r3, [pc, #520]	; (8006558 <_dtoa_r+0x628>)
 800634e:	2200      	movs	r2, #0
 8006350:	f7f9 ffbc 	bl	80002cc <__adddf3>
 8006354:	46d0      	mov	r8, sl
 8006356:	46d9      	mov	r9, fp
 8006358:	4682      	mov	sl, r0
 800635a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800635e:	2e00      	cmp	r6, #0
 8006360:	d158      	bne.n	8006414 <_dtoa_r+0x4e4>
 8006362:	4b7e      	ldr	r3, [pc, #504]	; (800655c <_dtoa_r+0x62c>)
 8006364:	2200      	movs	r2, #0
 8006366:	4640      	mov	r0, r8
 8006368:	4649      	mov	r1, r9
 800636a:	f7f9 ffad 	bl	80002c8 <__aeabi_dsub>
 800636e:	4652      	mov	r2, sl
 8006370:	465b      	mov	r3, fp
 8006372:	4680      	mov	r8, r0
 8006374:	4689      	mov	r9, r1
 8006376:	f7fa fbef 	bl	8000b58 <__aeabi_dcmpgt>
 800637a:	2800      	cmp	r0, #0
 800637c:	f040 8295 	bne.w	80068aa <_dtoa_r+0x97a>
 8006380:	4652      	mov	r2, sl
 8006382:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006386:	4640      	mov	r0, r8
 8006388:	4649      	mov	r1, r9
 800638a:	f7fa fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800638e:	2800      	cmp	r0, #0
 8006390:	f040 8289 	bne.w	80068a6 <_dtoa_r+0x976>
 8006394:	ec5b ab19 	vmov	sl, fp, d9
 8006398:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800639a:	2b00      	cmp	r3, #0
 800639c:	f2c0 8148 	blt.w	8006630 <_dtoa_r+0x700>
 80063a0:	9a00      	ldr	r2, [sp, #0]
 80063a2:	2a0e      	cmp	r2, #14
 80063a4:	f300 8144 	bgt.w	8006630 <_dtoa_r+0x700>
 80063a8:	4b67      	ldr	r3, [pc, #412]	; (8006548 <_dtoa_r+0x618>)
 80063aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f280 80d5 	bge.w	8006564 <_dtoa_r+0x634>
 80063ba:	9b03      	ldr	r3, [sp, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f300 80d1 	bgt.w	8006564 <_dtoa_r+0x634>
 80063c2:	f040 826f 	bne.w	80068a4 <_dtoa_r+0x974>
 80063c6:	4b65      	ldr	r3, [pc, #404]	; (800655c <_dtoa_r+0x62c>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	4640      	mov	r0, r8
 80063cc:	4649      	mov	r1, r9
 80063ce:	f7fa f933 	bl	8000638 <__aeabi_dmul>
 80063d2:	4652      	mov	r2, sl
 80063d4:	465b      	mov	r3, fp
 80063d6:	f7fa fbb5 	bl	8000b44 <__aeabi_dcmpge>
 80063da:	9e03      	ldr	r6, [sp, #12]
 80063dc:	4637      	mov	r7, r6
 80063de:	2800      	cmp	r0, #0
 80063e0:	f040 8245 	bne.w	800686e <_dtoa_r+0x93e>
 80063e4:	9d01      	ldr	r5, [sp, #4]
 80063e6:	2331      	movs	r3, #49	; 0x31
 80063e8:	f805 3b01 	strb.w	r3, [r5], #1
 80063ec:	9b00      	ldr	r3, [sp, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	e240      	b.n	8006876 <_dtoa_r+0x946>
 80063f4:	07f2      	lsls	r2, r6, #31
 80063f6:	d505      	bpl.n	8006404 <_dtoa_r+0x4d4>
 80063f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fc:	f7fa f91c 	bl	8000638 <__aeabi_dmul>
 8006400:	3501      	adds	r5, #1
 8006402:	2301      	movs	r3, #1
 8006404:	1076      	asrs	r6, r6, #1
 8006406:	3708      	adds	r7, #8
 8006408:	e777      	b.n	80062fa <_dtoa_r+0x3ca>
 800640a:	2502      	movs	r5, #2
 800640c:	e779      	b.n	8006302 <_dtoa_r+0x3d2>
 800640e:	9f00      	ldr	r7, [sp, #0]
 8006410:	9e03      	ldr	r6, [sp, #12]
 8006412:	e794      	b.n	800633e <_dtoa_r+0x40e>
 8006414:	9901      	ldr	r1, [sp, #4]
 8006416:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <_dtoa_r+0x618>)
 8006418:	4431      	add	r1, r6
 800641a:	910d      	str	r1, [sp, #52]	; 0x34
 800641c:	9908      	ldr	r1, [sp, #32]
 800641e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006422:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006426:	2900      	cmp	r1, #0
 8006428:	d043      	beq.n	80064b2 <_dtoa_r+0x582>
 800642a:	494d      	ldr	r1, [pc, #308]	; (8006560 <_dtoa_r+0x630>)
 800642c:	2000      	movs	r0, #0
 800642e:	f7fa fa2d 	bl	800088c <__aeabi_ddiv>
 8006432:	4652      	mov	r2, sl
 8006434:	465b      	mov	r3, fp
 8006436:	f7f9 ff47 	bl	80002c8 <__aeabi_dsub>
 800643a:	9d01      	ldr	r5, [sp, #4]
 800643c:	4682      	mov	sl, r0
 800643e:	468b      	mov	fp, r1
 8006440:	4649      	mov	r1, r9
 8006442:	4640      	mov	r0, r8
 8006444:	f7fa fba8 	bl	8000b98 <__aeabi_d2iz>
 8006448:	4606      	mov	r6, r0
 800644a:	f7fa f88b 	bl	8000564 <__aeabi_i2d>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7f9 ff37 	bl	80002c8 <__aeabi_dsub>
 800645a:	3630      	adds	r6, #48	; 0x30
 800645c:	f805 6b01 	strb.w	r6, [r5], #1
 8006460:	4652      	mov	r2, sl
 8006462:	465b      	mov	r3, fp
 8006464:	4680      	mov	r8, r0
 8006466:	4689      	mov	r9, r1
 8006468:	f7fa fb58 	bl	8000b1c <__aeabi_dcmplt>
 800646c:	2800      	cmp	r0, #0
 800646e:	d163      	bne.n	8006538 <_dtoa_r+0x608>
 8006470:	4642      	mov	r2, r8
 8006472:	464b      	mov	r3, r9
 8006474:	4936      	ldr	r1, [pc, #216]	; (8006550 <_dtoa_r+0x620>)
 8006476:	2000      	movs	r0, #0
 8006478:	f7f9 ff26 	bl	80002c8 <__aeabi_dsub>
 800647c:	4652      	mov	r2, sl
 800647e:	465b      	mov	r3, fp
 8006480:	f7fa fb4c 	bl	8000b1c <__aeabi_dcmplt>
 8006484:	2800      	cmp	r0, #0
 8006486:	f040 80b5 	bne.w	80065f4 <_dtoa_r+0x6c4>
 800648a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800648c:	429d      	cmp	r5, r3
 800648e:	d081      	beq.n	8006394 <_dtoa_r+0x464>
 8006490:	4b30      	ldr	r3, [pc, #192]	; (8006554 <_dtoa_r+0x624>)
 8006492:	2200      	movs	r2, #0
 8006494:	4650      	mov	r0, sl
 8006496:	4659      	mov	r1, fp
 8006498:	f7fa f8ce 	bl	8000638 <__aeabi_dmul>
 800649c:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <_dtoa_r+0x624>)
 800649e:	4682      	mov	sl, r0
 80064a0:	468b      	mov	fp, r1
 80064a2:	4640      	mov	r0, r8
 80064a4:	4649      	mov	r1, r9
 80064a6:	2200      	movs	r2, #0
 80064a8:	f7fa f8c6 	bl	8000638 <__aeabi_dmul>
 80064ac:	4680      	mov	r8, r0
 80064ae:	4689      	mov	r9, r1
 80064b0:	e7c6      	b.n	8006440 <_dtoa_r+0x510>
 80064b2:	4650      	mov	r0, sl
 80064b4:	4659      	mov	r1, fp
 80064b6:	f7fa f8bf 	bl	8000638 <__aeabi_dmul>
 80064ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064bc:	9d01      	ldr	r5, [sp, #4]
 80064be:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c0:	4682      	mov	sl, r0
 80064c2:	468b      	mov	fp, r1
 80064c4:	4649      	mov	r1, r9
 80064c6:	4640      	mov	r0, r8
 80064c8:	f7fa fb66 	bl	8000b98 <__aeabi_d2iz>
 80064cc:	4606      	mov	r6, r0
 80064ce:	f7fa f849 	bl	8000564 <__aeabi_i2d>
 80064d2:	3630      	adds	r6, #48	; 0x30
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	4640      	mov	r0, r8
 80064da:	4649      	mov	r1, r9
 80064dc:	f7f9 fef4 	bl	80002c8 <__aeabi_dsub>
 80064e0:	f805 6b01 	strb.w	r6, [r5], #1
 80064e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e6:	429d      	cmp	r5, r3
 80064e8:	4680      	mov	r8, r0
 80064ea:	4689      	mov	r9, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	d124      	bne.n	800653c <_dtoa_r+0x60c>
 80064f2:	4b1b      	ldr	r3, [pc, #108]	; (8006560 <_dtoa_r+0x630>)
 80064f4:	4650      	mov	r0, sl
 80064f6:	4659      	mov	r1, fp
 80064f8:	f7f9 fee8 	bl	80002cc <__adddf3>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4640      	mov	r0, r8
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa fb28 	bl	8000b58 <__aeabi_dcmpgt>
 8006508:	2800      	cmp	r0, #0
 800650a:	d173      	bne.n	80065f4 <_dtoa_r+0x6c4>
 800650c:	4652      	mov	r2, sl
 800650e:	465b      	mov	r3, fp
 8006510:	4913      	ldr	r1, [pc, #76]	; (8006560 <_dtoa_r+0x630>)
 8006512:	2000      	movs	r0, #0
 8006514:	f7f9 fed8 	bl	80002c8 <__aeabi_dsub>
 8006518:	4602      	mov	r2, r0
 800651a:	460b      	mov	r3, r1
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7fa fafc 	bl	8000b1c <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	f43f af35 	beq.w	8006394 <_dtoa_r+0x464>
 800652a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800652c:	1e6b      	subs	r3, r5, #1
 800652e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006530:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d0f8      	beq.n	800652a <_dtoa_r+0x5fa>
 8006538:	9700      	str	r7, [sp, #0]
 800653a:	e049      	b.n	80065d0 <_dtoa_r+0x6a0>
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <_dtoa_r+0x624>)
 800653e:	f7fa f87b 	bl	8000638 <__aeabi_dmul>
 8006542:	4680      	mov	r8, r0
 8006544:	4689      	mov	r9, r1
 8006546:	e7bd      	b.n	80064c4 <_dtoa_r+0x594>
 8006548:	08008720 	.word	0x08008720
 800654c:	080086f8 	.word	0x080086f8
 8006550:	3ff00000 	.word	0x3ff00000
 8006554:	40240000 	.word	0x40240000
 8006558:	401c0000 	.word	0x401c0000
 800655c:	40140000 	.word	0x40140000
 8006560:	3fe00000 	.word	0x3fe00000
 8006564:	9d01      	ldr	r5, [sp, #4]
 8006566:	4656      	mov	r6, sl
 8006568:	465f      	mov	r7, fp
 800656a:	4642      	mov	r2, r8
 800656c:	464b      	mov	r3, r9
 800656e:	4630      	mov	r0, r6
 8006570:	4639      	mov	r1, r7
 8006572:	f7fa f98b 	bl	800088c <__aeabi_ddiv>
 8006576:	f7fa fb0f 	bl	8000b98 <__aeabi_d2iz>
 800657a:	4682      	mov	sl, r0
 800657c:	f7f9 fff2 	bl	8000564 <__aeabi_i2d>
 8006580:	4642      	mov	r2, r8
 8006582:	464b      	mov	r3, r9
 8006584:	f7fa f858 	bl	8000638 <__aeabi_dmul>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006594:	f7f9 fe98 	bl	80002c8 <__aeabi_dsub>
 8006598:	f805 6b01 	strb.w	r6, [r5], #1
 800659c:	9e01      	ldr	r6, [sp, #4]
 800659e:	9f03      	ldr	r7, [sp, #12]
 80065a0:	1bae      	subs	r6, r5, r6
 80065a2:	42b7      	cmp	r7, r6
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	d135      	bne.n	8006616 <_dtoa_r+0x6e6>
 80065aa:	f7f9 fe8f 	bl	80002cc <__adddf3>
 80065ae:	4642      	mov	r2, r8
 80065b0:	464b      	mov	r3, r9
 80065b2:	4606      	mov	r6, r0
 80065b4:	460f      	mov	r7, r1
 80065b6:	f7fa facf 	bl	8000b58 <__aeabi_dcmpgt>
 80065ba:	b9d0      	cbnz	r0, 80065f2 <_dtoa_r+0x6c2>
 80065bc:	4642      	mov	r2, r8
 80065be:	464b      	mov	r3, r9
 80065c0:	4630      	mov	r0, r6
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa faa0 	bl	8000b08 <__aeabi_dcmpeq>
 80065c8:	b110      	cbz	r0, 80065d0 <_dtoa_r+0x6a0>
 80065ca:	f01a 0f01 	tst.w	sl, #1
 80065ce:	d110      	bne.n	80065f2 <_dtoa_r+0x6c2>
 80065d0:	4620      	mov	r0, r4
 80065d2:	ee18 1a10 	vmov	r1, s16
 80065d6:	f000 fd09 	bl	8006fec <_Bfree>
 80065da:	2300      	movs	r3, #0
 80065dc:	9800      	ldr	r0, [sp, #0]
 80065de:	702b      	strb	r3, [r5, #0]
 80065e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065e2:	3001      	adds	r0, #1
 80065e4:	6018      	str	r0, [r3, #0]
 80065e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f43f acf1 	beq.w	8005fd0 <_dtoa_r+0xa0>
 80065ee:	601d      	str	r5, [r3, #0]
 80065f0:	e4ee      	b.n	8005fd0 <_dtoa_r+0xa0>
 80065f2:	9f00      	ldr	r7, [sp, #0]
 80065f4:	462b      	mov	r3, r5
 80065f6:	461d      	mov	r5, r3
 80065f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065fc:	2a39      	cmp	r2, #57	; 0x39
 80065fe:	d106      	bne.n	800660e <_dtoa_r+0x6de>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d1f7      	bne.n	80065f6 <_dtoa_r+0x6c6>
 8006606:	9901      	ldr	r1, [sp, #4]
 8006608:	2230      	movs	r2, #48	; 0x30
 800660a:	3701      	adds	r7, #1
 800660c:	700a      	strb	r2, [r1, #0]
 800660e:	781a      	ldrb	r2, [r3, #0]
 8006610:	3201      	adds	r2, #1
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e790      	b.n	8006538 <_dtoa_r+0x608>
 8006616:	4ba6      	ldr	r3, [pc, #664]	; (80068b0 <_dtoa_r+0x980>)
 8006618:	2200      	movs	r2, #0
 800661a:	f7fa f80d 	bl	8000638 <__aeabi_dmul>
 800661e:	2200      	movs	r2, #0
 8006620:	2300      	movs	r3, #0
 8006622:	4606      	mov	r6, r0
 8006624:	460f      	mov	r7, r1
 8006626:	f7fa fa6f 	bl	8000b08 <__aeabi_dcmpeq>
 800662a:	2800      	cmp	r0, #0
 800662c:	d09d      	beq.n	800656a <_dtoa_r+0x63a>
 800662e:	e7cf      	b.n	80065d0 <_dtoa_r+0x6a0>
 8006630:	9a08      	ldr	r2, [sp, #32]
 8006632:	2a00      	cmp	r2, #0
 8006634:	f000 80d7 	beq.w	80067e6 <_dtoa_r+0x8b6>
 8006638:	9a06      	ldr	r2, [sp, #24]
 800663a:	2a01      	cmp	r2, #1
 800663c:	f300 80ba 	bgt.w	80067b4 <_dtoa_r+0x884>
 8006640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006642:	2a00      	cmp	r2, #0
 8006644:	f000 80b2 	beq.w	80067ac <_dtoa_r+0x87c>
 8006648:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800664c:	9e07      	ldr	r6, [sp, #28]
 800664e:	9d04      	ldr	r5, [sp, #16]
 8006650:	9a04      	ldr	r2, [sp, #16]
 8006652:	441a      	add	r2, r3
 8006654:	9204      	str	r2, [sp, #16]
 8006656:	9a05      	ldr	r2, [sp, #20]
 8006658:	2101      	movs	r1, #1
 800665a:	441a      	add	r2, r3
 800665c:	4620      	mov	r0, r4
 800665e:	9205      	str	r2, [sp, #20]
 8006660:	f000 fd7c 	bl	800715c <__i2b>
 8006664:	4607      	mov	r7, r0
 8006666:	2d00      	cmp	r5, #0
 8006668:	dd0c      	ble.n	8006684 <_dtoa_r+0x754>
 800666a:	9b05      	ldr	r3, [sp, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd09      	ble.n	8006684 <_dtoa_r+0x754>
 8006670:	42ab      	cmp	r3, r5
 8006672:	9a04      	ldr	r2, [sp, #16]
 8006674:	bfa8      	it	ge
 8006676:	462b      	movge	r3, r5
 8006678:	1ad2      	subs	r2, r2, r3
 800667a:	9204      	str	r2, [sp, #16]
 800667c:	9a05      	ldr	r2, [sp, #20]
 800667e:	1aed      	subs	r5, r5, r3
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	9b07      	ldr	r3, [sp, #28]
 8006686:	b31b      	cbz	r3, 80066d0 <_dtoa_r+0x7a0>
 8006688:	9b08      	ldr	r3, [sp, #32]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 80af 	beq.w	80067ee <_dtoa_r+0x8be>
 8006690:	2e00      	cmp	r6, #0
 8006692:	dd13      	ble.n	80066bc <_dtoa_r+0x78c>
 8006694:	4639      	mov	r1, r7
 8006696:	4632      	mov	r2, r6
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fe1f 	bl	80072dc <__pow5mult>
 800669e:	ee18 2a10 	vmov	r2, s16
 80066a2:	4601      	mov	r1, r0
 80066a4:	4607      	mov	r7, r0
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fd6e 	bl	8007188 <__multiply>
 80066ac:	ee18 1a10 	vmov	r1, s16
 80066b0:	4680      	mov	r8, r0
 80066b2:	4620      	mov	r0, r4
 80066b4:	f000 fc9a 	bl	8006fec <_Bfree>
 80066b8:	ee08 8a10 	vmov	s16, r8
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	1b9a      	subs	r2, r3, r6
 80066c0:	d006      	beq.n	80066d0 <_dtoa_r+0x7a0>
 80066c2:	ee18 1a10 	vmov	r1, s16
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 fe08 	bl	80072dc <__pow5mult>
 80066cc:	ee08 0a10 	vmov	s16, r0
 80066d0:	2101      	movs	r1, #1
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fd42 	bl	800715c <__i2b>
 80066d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	4606      	mov	r6, r0
 80066de:	f340 8088 	ble.w	80067f2 <_dtoa_r+0x8c2>
 80066e2:	461a      	mov	r2, r3
 80066e4:	4601      	mov	r1, r0
 80066e6:	4620      	mov	r0, r4
 80066e8:	f000 fdf8 	bl	80072dc <__pow5mult>
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	4606      	mov	r6, r0
 80066f2:	f340 8081 	ble.w	80067f8 <_dtoa_r+0x8c8>
 80066f6:	f04f 0800 	mov.w	r8, #0
 80066fa:	6933      	ldr	r3, [r6, #16]
 80066fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006700:	6918      	ldr	r0, [r3, #16]
 8006702:	f000 fcdb 	bl	80070bc <__hi0bits>
 8006706:	f1c0 0020 	rsb	r0, r0, #32
 800670a:	9b05      	ldr	r3, [sp, #20]
 800670c:	4418      	add	r0, r3
 800670e:	f010 001f 	ands.w	r0, r0, #31
 8006712:	f000 8092 	beq.w	800683a <_dtoa_r+0x90a>
 8006716:	f1c0 0320 	rsb	r3, r0, #32
 800671a:	2b04      	cmp	r3, #4
 800671c:	f340 808a 	ble.w	8006834 <_dtoa_r+0x904>
 8006720:	f1c0 001c 	rsb	r0, r0, #28
 8006724:	9b04      	ldr	r3, [sp, #16]
 8006726:	4403      	add	r3, r0
 8006728:	9304      	str	r3, [sp, #16]
 800672a:	9b05      	ldr	r3, [sp, #20]
 800672c:	4403      	add	r3, r0
 800672e:	4405      	add	r5, r0
 8006730:	9305      	str	r3, [sp, #20]
 8006732:	9b04      	ldr	r3, [sp, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	dd07      	ble.n	8006748 <_dtoa_r+0x818>
 8006738:	ee18 1a10 	vmov	r1, s16
 800673c:	461a      	mov	r2, r3
 800673e:	4620      	mov	r0, r4
 8006740:	f000 fe26 	bl	8007390 <__lshift>
 8006744:	ee08 0a10 	vmov	s16, r0
 8006748:	9b05      	ldr	r3, [sp, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	dd05      	ble.n	800675a <_dtoa_r+0x82a>
 800674e:	4631      	mov	r1, r6
 8006750:	461a      	mov	r2, r3
 8006752:	4620      	mov	r0, r4
 8006754:	f000 fe1c 	bl	8007390 <__lshift>
 8006758:	4606      	mov	r6, r0
 800675a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d06e      	beq.n	800683e <_dtoa_r+0x90e>
 8006760:	ee18 0a10 	vmov	r0, s16
 8006764:	4631      	mov	r1, r6
 8006766:	f000 fe83 	bl	8007470 <__mcmp>
 800676a:	2800      	cmp	r0, #0
 800676c:	da67      	bge.n	800683e <_dtoa_r+0x90e>
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	ee18 1a10 	vmov	r1, s16
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	220a      	movs	r2, #10
 800677a:	2300      	movs	r3, #0
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fc57 	bl	8007030 <__multadd>
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	ee08 0a10 	vmov	s16, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 81b1 	beq.w	8006af0 <_dtoa_r+0xbc0>
 800678e:	2300      	movs	r3, #0
 8006790:	4639      	mov	r1, r7
 8006792:	220a      	movs	r2, #10
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fc4b 	bl	8007030 <__multadd>
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	4607      	mov	r7, r0
 80067a0:	f300 808e 	bgt.w	80068c0 <_dtoa_r+0x990>
 80067a4:	9b06      	ldr	r3, [sp, #24]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	dc51      	bgt.n	800684e <_dtoa_r+0x91e>
 80067aa:	e089      	b.n	80068c0 <_dtoa_r+0x990>
 80067ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067b2:	e74b      	b.n	800664c <_dtoa_r+0x71c>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	1e5e      	subs	r6, r3, #1
 80067b8:	9b07      	ldr	r3, [sp, #28]
 80067ba:	42b3      	cmp	r3, r6
 80067bc:	bfbf      	itttt	lt
 80067be:	9b07      	ldrlt	r3, [sp, #28]
 80067c0:	9607      	strlt	r6, [sp, #28]
 80067c2:	1af2      	sublt	r2, r6, r3
 80067c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067c6:	bfb6      	itet	lt
 80067c8:	189b      	addlt	r3, r3, r2
 80067ca:	1b9e      	subge	r6, r3, r6
 80067cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	bfb8      	it	lt
 80067d2:	2600      	movlt	r6, #0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	bfb7      	itett	lt
 80067d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80067dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80067e0:	1a9d      	sublt	r5, r3, r2
 80067e2:	2300      	movlt	r3, #0
 80067e4:	e734      	b.n	8006650 <_dtoa_r+0x720>
 80067e6:	9e07      	ldr	r6, [sp, #28]
 80067e8:	9d04      	ldr	r5, [sp, #16]
 80067ea:	9f08      	ldr	r7, [sp, #32]
 80067ec:	e73b      	b.n	8006666 <_dtoa_r+0x736>
 80067ee:	9a07      	ldr	r2, [sp, #28]
 80067f0:	e767      	b.n	80066c2 <_dtoa_r+0x792>
 80067f2:	9b06      	ldr	r3, [sp, #24]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	dc18      	bgt.n	800682a <_dtoa_r+0x8fa>
 80067f8:	f1ba 0f00 	cmp.w	sl, #0
 80067fc:	d115      	bne.n	800682a <_dtoa_r+0x8fa>
 80067fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006802:	b993      	cbnz	r3, 800682a <_dtoa_r+0x8fa>
 8006804:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006808:	0d1b      	lsrs	r3, r3, #20
 800680a:	051b      	lsls	r3, r3, #20
 800680c:	b183      	cbz	r3, 8006830 <_dtoa_r+0x900>
 800680e:	9b04      	ldr	r3, [sp, #16]
 8006810:	3301      	adds	r3, #1
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	9b05      	ldr	r3, [sp, #20]
 8006816:	3301      	adds	r3, #1
 8006818:	9305      	str	r3, [sp, #20]
 800681a:	f04f 0801 	mov.w	r8, #1
 800681e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	f47f af6a 	bne.w	80066fa <_dtoa_r+0x7ca>
 8006826:	2001      	movs	r0, #1
 8006828:	e76f      	b.n	800670a <_dtoa_r+0x7da>
 800682a:	f04f 0800 	mov.w	r8, #0
 800682e:	e7f6      	b.n	800681e <_dtoa_r+0x8ee>
 8006830:	4698      	mov	r8, r3
 8006832:	e7f4      	b.n	800681e <_dtoa_r+0x8ee>
 8006834:	f43f af7d 	beq.w	8006732 <_dtoa_r+0x802>
 8006838:	4618      	mov	r0, r3
 800683a:	301c      	adds	r0, #28
 800683c:	e772      	b.n	8006724 <_dtoa_r+0x7f4>
 800683e:	9b03      	ldr	r3, [sp, #12]
 8006840:	2b00      	cmp	r3, #0
 8006842:	dc37      	bgt.n	80068b4 <_dtoa_r+0x984>
 8006844:	9b06      	ldr	r3, [sp, #24]
 8006846:	2b02      	cmp	r3, #2
 8006848:	dd34      	ble.n	80068b4 <_dtoa_r+0x984>
 800684a:	9b03      	ldr	r3, [sp, #12]
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	b96b      	cbnz	r3, 800686e <_dtoa_r+0x93e>
 8006852:	4631      	mov	r1, r6
 8006854:	2205      	movs	r2, #5
 8006856:	4620      	mov	r0, r4
 8006858:	f000 fbea 	bl	8007030 <__multadd>
 800685c:	4601      	mov	r1, r0
 800685e:	4606      	mov	r6, r0
 8006860:	ee18 0a10 	vmov	r0, s16
 8006864:	f000 fe04 	bl	8007470 <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	f73f adbb 	bgt.w	80063e4 <_dtoa_r+0x4b4>
 800686e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006870:	9d01      	ldr	r5, [sp, #4]
 8006872:	43db      	mvns	r3, r3
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	f04f 0800 	mov.w	r8, #0
 800687a:	4631      	mov	r1, r6
 800687c:	4620      	mov	r0, r4
 800687e:	f000 fbb5 	bl	8006fec <_Bfree>
 8006882:	2f00      	cmp	r7, #0
 8006884:	f43f aea4 	beq.w	80065d0 <_dtoa_r+0x6a0>
 8006888:	f1b8 0f00 	cmp.w	r8, #0
 800688c:	d005      	beq.n	800689a <_dtoa_r+0x96a>
 800688e:	45b8      	cmp	r8, r7
 8006890:	d003      	beq.n	800689a <_dtoa_r+0x96a>
 8006892:	4641      	mov	r1, r8
 8006894:	4620      	mov	r0, r4
 8006896:	f000 fba9 	bl	8006fec <_Bfree>
 800689a:	4639      	mov	r1, r7
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fba5 	bl	8006fec <_Bfree>
 80068a2:	e695      	b.n	80065d0 <_dtoa_r+0x6a0>
 80068a4:	2600      	movs	r6, #0
 80068a6:	4637      	mov	r7, r6
 80068a8:	e7e1      	b.n	800686e <_dtoa_r+0x93e>
 80068aa:	9700      	str	r7, [sp, #0]
 80068ac:	4637      	mov	r7, r6
 80068ae:	e599      	b.n	80063e4 <_dtoa_r+0x4b4>
 80068b0:	40240000 	.word	0x40240000
 80068b4:	9b08      	ldr	r3, [sp, #32]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 80ca 	beq.w	8006a50 <_dtoa_r+0xb20>
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	2d00      	cmp	r5, #0
 80068c2:	dd05      	ble.n	80068d0 <_dtoa_r+0x9a0>
 80068c4:	4639      	mov	r1, r7
 80068c6:	462a      	mov	r2, r5
 80068c8:	4620      	mov	r0, r4
 80068ca:	f000 fd61 	bl	8007390 <__lshift>
 80068ce:	4607      	mov	r7, r0
 80068d0:	f1b8 0f00 	cmp.w	r8, #0
 80068d4:	d05b      	beq.n	800698e <_dtoa_r+0xa5e>
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 fb47 	bl	8006f6c <_Balloc>
 80068de:	4605      	mov	r5, r0
 80068e0:	b928      	cbnz	r0, 80068ee <_dtoa_r+0x9be>
 80068e2:	4b87      	ldr	r3, [pc, #540]	; (8006b00 <_dtoa_r+0xbd0>)
 80068e4:	4602      	mov	r2, r0
 80068e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068ea:	f7ff bb3b 	b.w	8005f64 <_dtoa_r+0x34>
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	3202      	adds	r2, #2
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	f107 010c 	add.w	r1, r7, #12
 80068f8:	300c      	adds	r0, #12
 80068fa:	f7fe fbaf 	bl	800505c <memcpy>
 80068fe:	2201      	movs	r2, #1
 8006900:	4629      	mov	r1, r5
 8006902:	4620      	mov	r0, r4
 8006904:	f000 fd44 	bl	8007390 <__lshift>
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	f103 0901 	add.w	r9, r3, #1
 800690e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006912:	4413      	add	r3, r2
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	f00a 0301 	and.w	r3, sl, #1
 800691a:	46b8      	mov	r8, r7
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	4607      	mov	r7, r0
 8006920:	4631      	mov	r1, r6
 8006922:	ee18 0a10 	vmov	r0, s16
 8006926:	f7ff fa77 	bl	8005e18 <quorem>
 800692a:	4641      	mov	r1, r8
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006932:	ee18 0a10 	vmov	r0, s16
 8006936:	f000 fd9b 	bl	8007470 <__mcmp>
 800693a:	463a      	mov	r2, r7
 800693c:	9003      	str	r0, [sp, #12]
 800693e:	4631      	mov	r1, r6
 8006940:	4620      	mov	r0, r4
 8006942:	f000 fdb1 	bl	80074a8 <__mdiff>
 8006946:	68c2      	ldr	r2, [r0, #12]
 8006948:	f109 3bff 	add.w	fp, r9, #4294967295
 800694c:	4605      	mov	r5, r0
 800694e:	bb02      	cbnz	r2, 8006992 <_dtoa_r+0xa62>
 8006950:	4601      	mov	r1, r0
 8006952:	ee18 0a10 	vmov	r0, s16
 8006956:	f000 fd8b 	bl	8007470 <__mcmp>
 800695a:	4602      	mov	r2, r0
 800695c:	4629      	mov	r1, r5
 800695e:	4620      	mov	r0, r4
 8006960:	9207      	str	r2, [sp, #28]
 8006962:	f000 fb43 	bl	8006fec <_Bfree>
 8006966:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800696a:	ea43 0102 	orr.w	r1, r3, r2
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	430b      	orrs	r3, r1
 8006972:	464d      	mov	r5, r9
 8006974:	d10f      	bne.n	8006996 <_dtoa_r+0xa66>
 8006976:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800697a:	d02a      	beq.n	80069d2 <_dtoa_r+0xaa2>
 800697c:	9b03      	ldr	r3, [sp, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	dd02      	ble.n	8006988 <_dtoa_r+0xa58>
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006988:	f88b a000 	strb.w	sl, [fp]
 800698c:	e775      	b.n	800687a <_dtoa_r+0x94a>
 800698e:	4638      	mov	r0, r7
 8006990:	e7ba      	b.n	8006908 <_dtoa_r+0x9d8>
 8006992:	2201      	movs	r2, #1
 8006994:	e7e2      	b.n	800695c <_dtoa_r+0xa2c>
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	db04      	blt.n	80069a6 <_dtoa_r+0xa76>
 800699c:	9906      	ldr	r1, [sp, #24]
 800699e:	430b      	orrs	r3, r1
 80069a0:	9904      	ldr	r1, [sp, #16]
 80069a2:	430b      	orrs	r3, r1
 80069a4:	d122      	bne.n	80069ec <_dtoa_r+0xabc>
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	ddee      	ble.n	8006988 <_dtoa_r+0xa58>
 80069aa:	ee18 1a10 	vmov	r1, s16
 80069ae:	2201      	movs	r2, #1
 80069b0:	4620      	mov	r0, r4
 80069b2:	f000 fced 	bl	8007390 <__lshift>
 80069b6:	4631      	mov	r1, r6
 80069b8:	ee08 0a10 	vmov	s16, r0
 80069bc:	f000 fd58 	bl	8007470 <__mcmp>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	dc03      	bgt.n	80069cc <_dtoa_r+0xa9c>
 80069c4:	d1e0      	bne.n	8006988 <_dtoa_r+0xa58>
 80069c6:	f01a 0f01 	tst.w	sl, #1
 80069ca:	d0dd      	beq.n	8006988 <_dtoa_r+0xa58>
 80069cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069d0:	d1d7      	bne.n	8006982 <_dtoa_r+0xa52>
 80069d2:	2339      	movs	r3, #57	; 0x39
 80069d4:	f88b 3000 	strb.w	r3, [fp]
 80069d8:	462b      	mov	r3, r5
 80069da:	461d      	mov	r5, r3
 80069dc:	3b01      	subs	r3, #1
 80069de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069e2:	2a39      	cmp	r2, #57	; 0x39
 80069e4:	d071      	beq.n	8006aca <_dtoa_r+0xb9a>
 80069e6:	3201      	adds	r2, #1
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	e746      	b.n	800687a <_dtoa_r+0x94a>
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	dd07      	ble.n	8006a00 <_dtoa_r+0xad0>
 80069f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80069f4:	d0ed      	beq.n	80069d2 <_dtoa_r+0xaa2>
 80069f6:	f10a 0301 	add.w	r3, sl, #1
 80069fa:	f88b 3000 	strb.w	r3, [fp]
 80069fe:	e73c      	b.n	800687a <_dtoa_r+0x94a>
 8006a00:	9b05      	ldr	r3, [sp, #20]
 8006a02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006a06:	4599      	cmp	r9, r3
 8006a08:	d047      	beq.n	8006a9a <_dtoa_r+0xb6a>
 8006a0a:	ee18 1a10 	vmov	r1, s16
 8006a0e:	2300      	movs	r3, #0
 8006a10:	220a      	movs	r2, #10
 8006a12:	4620      	mov	r0, r4
 8006a14:	f000 fb0c 	bl	8007030 <__multadd>
 8006a18:	45b8      	cmp	r8, r7
 8006a1a:	ee08 0a10 	vmov	s16, r0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	f04f 020a 	mov.w	r2, #10
 8006a26:	4641      	mov	r1, r8
 8006a28:	4620      	mov	r0, r4
 8006a2a:	d106      	bne.n	8006a3a <_dtoa_r+0xb0a>
 8006a2c:	f000 fb00 	bl	8007030 <__multadd>
 8006a30:	4680      	mov	r8, r0
 8006a32:	4607      	mov	r7, r0
 8006a34:	f109 0901 	add.w	r9, r9, #1
 8006a38:	e772      	b.n	8006920 <_dtoa_r+0x9f0>
 8006a3a:	f000 faf9 	bl	8007030 <__multadd>
 8006a3e:	4639      	mov	r1, r7
 8006a40:	4680      	mov	r8, r0
 8006a42:	2300      	movs	r3, #0
 8006a44:	220a      	movs	r2, #10
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 faf2 	bl	8007030 <__multadd>
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	e7f1      	b.n	8006a34 <_dtoa_r+0xb04>
 8006a50:	9b03      	ldr	r3, [sp, #12]
 8006a52:	9302      	str	r3, [sp, #8]
 8006a54:	9d01      	ldr	r5, [sp, #4]
 8006a56:	ee18 0a10 	vmov	r0, s16
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	f7ff f9dc 	bl	8005e18 <quorem>
 8006a60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	f805 ab01 	strb.w	sl, [r5], #1
 8006a6a:	1aea      	subs	r2, r5, r3
 8006a6c:	9b02      	ldr	r3, [sp, #8]
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	dd09      	ble.n	8006a86 <_dtoa_r+0xb56>
 8006a72:	ee18 1a10 	vmov	r1, s16
 8006a76:	2300      	movs	r3, #0
 8006a78:	220a      	movs	r2, #10
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	f000 fad8 	bl	8007030 <__multadd>
 8006a80:	ee08 0a10 	vmov	s16, r0
 8006a84:	e7e7      	b.n	8006a56 <_dtoa_r+0xb26>
 8006a86:	9b02      	ldr	r3, [sp, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bfc8      	it	gt
 8006a8c:	461d      	movgt	r5, r3
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	bfd8      	it	le
 8006a92:	2501      	movle	r5, #1
 8006a94:	441d      	add	r5, r3
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	ee18 1a10 	vmov	r1, s16
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fc75 	bl	8007390 <__lshift>
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	ee08 0a10 	vmov	s16, r0
 8006aac:	f000 fce0 	bl	8007470 <__mcmp>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	dc91      	bgt.n	80069d8 <_dtoa_r+0xaa8>
 8006ab4:	d102      	bne.n	8006abc <_dtoa_r+0xb8c>
 8006ab6:	f01a 0f01 	tst.w	sl, #1
 8006aba:	d18d      	bne.n	80069d8 <_dtoa_r+0xaa8>
 8006abc:	462b      	mov	r3, r5
 8006abe:	461d      	mov	r5, r3
 8006ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ac4:	2a30      	cmp	r2, #48	; 0x30
 8006ac6:	d0fa      	beq.n	8006abe <_dtoa_r+0xb8e>
 8006ac8:	e6d7      	b.n	800687a <_dtoa_r+0x94a>
 8006aca:	9a01      	ldr	r2, [sp, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d184      	bne.n	80069da <_dtoa_r+0xaaa>
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	2331      	movs	r3, #49	; 0x31
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	e6ce      	b.n	800687a <_dtoa_r+0x94a>
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <_dtoa_r+0xbd4>)
 8006ade:	f7ff ba95 	b.w	800600c <_dtoa_r+0xdc>
 8006ae2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f47f aa6e 	bne.w	8005fc6 <_dtoa_r+0x96>
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <_dtoa_r+0xbd8>)
 8006aec:	f7ff ba8e 	b.w	800600c <_dtoa_r+0xdc>
 8006af0:	9b02      	ldr	r3, [sp, #8]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dcae      	bgt.n	8006a54 <_dtoa_r+0xb24>
 8006af6:	9b06      	ldr	r3, [sp, #24]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	f73f aea8 	bgt.w	800684e <_dtoa_r+0x91e>
 8006afe:	e7a9      	b.n	8006a54 <_dtoa_r+0xb24>
 8006b00:	08008627 	.word	0x08008627
 8006b04:	08008584 	.word	0x08008584
 8006b08:	080085a8 	.word	0x080085a8

08006b0c <__sflush_r>:
 8006b0c:	898a      	ldrh	r2, [r1, #12]
 8006b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	4605      	mov	r5, r0
 8006b14:	0710      	lsls	r0, r2, #28
 8006b16:	460c      	mov	r4, r1
 8006b18:	d458      	bmi.n	8006bcc <__sflush_r+0xc0>
 8006b1a:	684b      	ldr	r3, [r1, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dc05      	bgt.n	8006b2c <__sflush_r+0x20>
 8006b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dc02      	bgt.n	8006b2c <__sflush_r+0x20>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d0f9      	beq.n	8006b26 <__sflush_r+0x1a>
 8006b32:	2300      	movs	r3, #0
 8006b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b38:	682f      	ldr	r7, [r5, #0]
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	d032      	beq.n	8006ba4 <__sflush_r+0x98>
 8006b3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	075a      	lsls	r2, r3, #29
 8006b44:	d505      	bpl.n	8006b52 <__sflush_r+0x46>
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	1ac0      	subs	r0, r0, r3
 8006b4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b4c:	b10b      	cbz	r3, 8006b52 <__sflush_r+0x46>
 8006b4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b50:	1ac0      	subs	r0, r0, r3
 8006b52:	2300      	movs	r3, #0
 8006b54:	4602      	mov	r2, r0
 8006b56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b58:	6a21      	ldr	r1, [r4, #32]
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b0      	blx	r6
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	d106      	bne.n	8006b72 <__sflush_r+0x66>
 8006b64:	6829      	ldr	r1, [r5, #0]
 8006b66:	291d      	cmp	r1, #29
 8006b68:	d82c      	bhi.n	8006bc4 <__sflush_r+0xb8>
 8006b6a:	4a2a      	ldr	r2, [pc, #168]	; (8006c14 <__sflush_r+0x108>)
 8006b6c:	40ca      	lsrs	r2, r1
 8006b6e:	07d6      	lsls	r6, r2, #31
 8006b70:	d528      	bpl.n	8006bc4 <__sflush_r+0xb8>
 8006b72:	2200      	movs	r2, #0
 8006b74:	6062      	str	r2, [r4, #4]
 8006b76:	04d9      	lsls	r1, r3, #19
 8006b78:	6922      	ldr	r2, [r4, #16]
 8006b7a:	6022      	str	r2, [r4, #0]
 8006b7c:	d504      	bpl.n	8006b88 <__sflush_r+0x7c>
 8006b7e:	1c42      	adds	r2, r0, #1
 8006b80:	d101      	bne.n	8006b86 <__sflush_r+0x7a>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b903      	cbnz	r3, 8006b88 <__sflush_r+0x7c>
 8006b86:	6560      	str	r0, [r4, #84]	; 0x54
 8006b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b8a:	602f      	str	r7, [r5, #0]
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	d0ca      	beq.n	8006b26 <__sflush_r+0x1a>
 8006b90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b94:	4299      	cmp	r1, r3
 8006b96:	d002      	beq.n	8006b9e <__sflush_r+0x92>
 8006b98:	4628      	mov	r0, r5
 8006b9a:	f7fe fa75 	bl	8005088 <_free_r>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8006ba2:	e7c1      	b.n	8006b28 <__sflush_r+0x1c>
 8006ba4:	6a21      	ldr	r1, [r4, #32]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b0      	blx	r6
 8006bac:	1c41      	adds	r1, r0, #1
 8006bae:	d1c7      	bne.n	8006b40 <__sflush_r+0x34>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0c4      	beq.n	8006b40 <__sflush_r+0x34>
 8006bb6:	2b1d      	cmp	r3, #29
 8006bb8:	d001      	beq.n	8006bbe <__sflush_r+0xb2>
 8006bba:	2b16      	cmp	r3, #22
 8006bbc:	d101      	bne.n	8006bc2 <__sflush_r+0xb6>
 8006bbe:	602f      	str	r7, [r5, #0]
 8006bc0:	e7b1      	b.n	8006b26 <__sflush_r+0x1a>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc8:	81a3      	strh	r3, [r4, #12]
 8006bca:	e7ad      	b.n	8006b28 <__sflush_r+0x1c>
 8006bcc:	690f      	ldr	r7, [r1, #16]
 8006bce:	2f00      	cmp	r7, #0
 8006bd0:	d0a9      	beq.n	8006b26 <__sflush_r+0x1a>
 8006bd2:	0793      	lsls	r3, r2, #30
 8006bd4:	680e      	ldr	r6, [r1, #0]
 8006bd6:	bf08      	it	eq
 8006bd8:	694b      	ldreq	r3, [r1, #20]
 8006bda:	600f      	str	r7, [r1, #0]
 8006bdc:	bf18      	it	ne
 8006bde:	2300      	movne	r3, #0
 8006be0:	eba6 0807 	sub.w	r8, r6, r7
 8006be4:	608b      	str	r3, [r1, #8]
 8006be6:	f1b8 0f00 	cmp.w	r8, #0
 8006bea:	dd9c      	ble.n	8006b26 <__sflush_r+0x1a>
 8006bec:	6a21      	ldr	r1, [r4, #32]
 8006bee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bf0:	4643      	mov	r3, r8
 8006bf2:	463a      	mov	r2, r7
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b0      	blx	r6
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	dc06      	bgt.n	8006c0a <__sflush_r+0xfe>
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c02:	81a3      	strh	r3, [r4, #12]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e78e      	b.n	8006b28 <__sflush_r+0x1c>
 8006c0a:	4407      	add	r7, r0
 8006c0c:	eba8 0800 	sub.w	r8, r8, r0
 8006c10:	e7e9      	b.n	8006be6 <__sflush_r+0xda>
 8006c12:	bf00      	nop
 8006c14:	20400001 	.word	0x20400001

08006c18 <_fflush_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	690b      	ldr	r3, [r1, #16]
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	b913      	cbnz	r3, 8006c28 <_fflush_r+0x10>
 8006c22:	2500      	movs	r5, #0
 8006c24:	4628      	mov	r0, r5
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	b118      	cbz	r0, 8006c32 <_fflush_r+0x1a>
 8006c2a:	6983      	ldr	r3, [r0, #24]
 8006c2c:	b90b      	cbnz	r3, 8006c32 <_fflush_r+0x1a>
 8006c2e:	f000 f887 	bl	8006d40 <__sinit>
 8006c32:	4b14      	ldr	r3, [pc, #80]	; (8006c84 <_fflush_r+0x6c>)
 8006c34:	429c      	cmp	r4, r3
 8006c36:	d11b      	bne.n	8006c70 <_fflush_r+0x58>
 8006c38:	686c      	ldr	r4, [r5, #4]
 8006c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ef      	beq.n	8006c22 <_fflush_r+0xa>
 8006c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c44:	07d0      	lsls	r0, r2, #31
 8006c46:	d404      	bmi.n	8006c52 <_fflush_r+0x3a>
 8006c48:	0599      	lsls	r1, r3, #22
 8006c4a:	d402      	bmi.n	8006c52 <_fflush_r+0x3a>
 8006c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c4e:	f000 f91a 	bl	8006e86 <__retarget_lock_acquire_recursive>
 8006c52:	4628      	mov	r0, r5
 8006c54:	4621      	mov	r1, r4
 8006c56:	f7ff ff59 	bl	8006b0c <__sflush_r>
 8006c5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c5c:	07da      	lsls	r2, r3, #31
 8006c5e:	4605      	mov	r5, r0
 8006c60:	d4e0      	bmi.n	8006c24 <_fflush_r+0xc>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	059b      	lsls	r3, r3, #22
 8006c66:	d4dd      	bmi.n	8006c24 <_fflush_r+0xc>
 8006c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6a:	f000 f90d 	bl	8006e88 <__retarget_lock_release_recursive>
 8006c6e:	e7d9      	b.n	8006c24 <_fflush_r+0xc>
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <_fflush_r+0x70>)
 8006c72:	429c      	cmp	r4, r3
 8006c74:	d101      	bne.n	8006c7a <_fflush_r+0x62>
 8006c76:	68ac      	ldr	r4, [r5, #8]
 8006c78:	e7df      	b.n	8006c3a <_fflush_r+0x22>
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <_fflush_r+0x74>)
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	bf08      	it	eq
 8006c80:	68ec      	ldreq	r4, [r5, #12]
 8006c82:	e7da      	b.n	8006c3a <_fflush_r+0x22>
 8006c84:	08008658 	.word	0x08008658
 8006c88:	08008678 	.word	0x08008678
 8006c8c:	08008638 	.word	0x08008638

08006c90 <std>:
 8006c90:	2300      	movs	r3, #0
 8006c92:	b510      	push	{r4, lr}
 8006c94:	4604      	mov	r4, r0
 8006c96:	e9c0 3300 	strd	r3, r3, [r0]
 8006c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c9e:	6083      	str	r3, [r0, #8]
 8006ca0:	8181      	strh	r1, [r0, #12]
 8006ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ca4:	81c2      	strh	r2, [r0, #14]
 8006ca6:	6183      	str	r3, [r0, #24]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	2208      	movs	r2, #8
 8006cac:	305c      	adds	r0, #92	; 0x5c
 8006cae:	f7fe f9e3 	bl	8005078 <memset>
 8006cb2:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <std+0x38>)
 8006cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006cb6:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <std+0x3c>)
 8006cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <std+0x40>)
 8006cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cbe:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <std+0x44>)
 8006cc0:	6224      	str	r4, [r4, #32]
 8006cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	bf00      	nop
 8006cc8:	08007c0d 	.word	0x08007c0d
 8006ccc:	08007c2f 	.word	0x08007c2f
 8006cd0:	08007c67 	.word	0x08007c67
 8006cd4:	08007c8b 	.word	0x08007c8b

08006cd8 <_cleanup_r>:
 8006cd8:	4901      	ldr	r1, [pc, #4]	; (8006ce0 <_cleanup_r+0x8>)
 8006cda:	f000 b8af 	b.w	8006e3c <_fwalk_reent>
 8006cde:	bf00      	nop
 8006ce0:	08006c19 	.word	0x08006c19

08006ce4 <__sfmoreglue>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	2268      	movs	r2, #104	; 0x68
 8006ce8:	1e4d      	subs	r5, r1, #1
 8006cea:	4355      	muls	r5, r2
 8006cec:	460e      	mov	r6, r1
 8006cee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006cf2:	f7fe fa35 	bl	8005160 <_malloc_r>
 8006cf6:	4604      	mov	r4, r0
 8006cf8:	b140      	cbz	r0, 8006d0c <__sfmoreglue+0x28>
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	e9c0 1600 	strd	r1, r6, [r0]
 8006d00:	300c      	adds	r0, #12
 8006d02:	60a0      	str	r0, [r4, #8]
 8006d04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d08:	f7fe f9b6 	bl	8005078 <memset>
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}

08006d10 <__sfp_lock_acquire>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__sfp_lock_acquire+0x8>)
 8006d12:	f000 b8b8 	b.w	8006e86 <__retarget_lock_acquire_recursive>
 8006d16:	bf00      	nop
 8006d18:	20000485 	.word	0x20000485

08006d1c <__sfp_lock_release>:
 8006d1c:	4801      	ldr	r0, [pc, #4]	; (8006d24 <__sfp_lock_release+0x8>)
 8006d1e:	f000 b8b3 	b.w	8006e88 <__retarget_lock_release_recursive>
 8006d22:	bf00      	nop
 8006d24:	20000485 	.word	0x20000485

08006d28 <__sinit_lock_acquire>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__sinit_lock_acquire+0x8>)
 8006d2a:	f000 b8ac 	b.w	8006e86 <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20000486 	.word	0x20000486

08006d34 <__sinit_lock_release>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__sinit_lock_release+0x8>)
 8006d36:	f000 b8a7 	b.w	8006e88 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20000486 	.word	0x20000486

08006d40 <__sinit>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4604      	mov	r4, r0
 8006d44:	f7ff fff0 	bl	8006d28 <__sinit_lock_acquire>
 8006d48:	69a3      	ldr	r3, [r4, #24]
 8006d4a:	b11b      	cbz	r3, 8006d54 <__sinit+0x14>
 8006d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d50:	f7ff bff0 	b.w	8006d34 <__sinit_lock_release>
 8006d54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006d58:	6523      	str	r3, [r4, #80]	; 0x50
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <__sinit+0x68>)
 8006d5c:	4a13      	ldr	r2, [pc, #76]	; (8006dac <__sinit+0x6c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	62a2      	str	r2, [r4, #40]	; 0x28
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	bf04      	itt	eq
 8006d66:	2301      	moveq	r3, #1
 8006d68:	61a3      	streq	r3, [r4, #24]
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f000 f820 	bl	8006db0 <__sfp>
 8006d70:	6060      	str	r0, [r4, #4]
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 f81c 	bl	8006db0 <__sfp>
 8006d78:	60a0      	str	r0, [r4, #8]
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 f818 	bl	8006db0 <__sfp>
 8006d80:	2200      	movs	r2, #0
 8006d82:	60e0      	str	r0, [r4, #12]
 8006d84:	2104      	movs	r1, #4
 8006d86:	6860      	ldr	r0, [r4, #4]
 8006d88:	f7ff ff82 	bl	8006c90 <std>
 8006d8c:	68a0      	ldr	r0, [r4, #8]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2109      	movs	r1, #9
 8006d92:	f7ff ff7d 	bl	8006c90 <std>
 8006d96:	68e0      	ldr	r0, [r4, #12]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	2112      	movs	r1, #18
 8006d9c:	f7ff ff78 	bl	8006c90 <std>
 8006da0:	2301      	movs	r3, #1
 8006da2:	61a3      	str	r3, [r4, #24]
 8006da4:	e7d2      	b.n	8006d4c <__sinit+0xc>
 8006da6:	bf00      	nop
 8006da8:	08008570 	.word	0x08008570
 8006dac:	08006cd9 	.word	0x08006cd9

08006db0 <__sfp>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	4607      	mov	r7, r0
 8006db4:	f7ff ffac 	bl	8006d10 <__sfp_lock_acquire>
 8006db8:	4b1e      	ldr	r3, [pc, #120]	; (8006e34 <__sfp+0x84>)
 8006dba:	681e      	ldr	r6, [r3, #0]
 8006dbc:	69b3      	ldr	r3, [r6, #24]
 8006dbe:	b913      	cbnz	r3, 8006dc6 <__sfp+0x16>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ffbd 	bl	8006d40 <__sinit>
 8006dc6:	3648      	adds	r6, #72	; 0x48
 8006dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	d503      	bpl.n	8006dd8 <__sfp+0x28>
 8006dd0:	6833      	ldr	r3, [r6, #0]
 8006dd2:	b30b      	cbz	r3, 8006e18 <__sfp+0x68>
 8006dd4:	6836      	ldr	r6, [r6, #0]
 8006dd6:	e7f7      	b.n	8006dc8 <__sfp+0x18>
 8006dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ddc:	b9d5      	cbnz	r5, 8006e14 <__sfp+0x64>
 8006dde:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <__sfp+0x88>)
 8006de0:	60e3      	str	r3, [r4, #12]
 8006de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006de6:	6665      	str	r5, [r4, #100]	; 0x64
 8006de8:	f000 f84c 	bl	8006e84 <__retarget_lock_init_recursive>
 8006dec:	f7ff ff96 	bl	8006d1c <__sfp_lock_release>
 8006df0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006df4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006df8:	6025      	str	r5, [r4, #0]
 8006dfa:	61a5      	str	r5, [r4, #24]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e04:	f7fe f938 	bl	8005078 <memset>
 8006e08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e10:	4620      	mov	r0, r4
 8006e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e14:	3468      	adds	r4, #104	; 0x68
 8006e16:	e7d9      	b.n	8006dcc <__sfp+0x1c>
 8006e18:	2104      	movs	r1, #4
 8006e1a:	4638      	mov	r0, r7
 8006e1c:	f7ff ff62 	bl	8006ce4 <__sfmoreglue>
 8006e20:	4604      	mov	r4, r0
 8006e22:	6030      	str	r0, [r6, #0]
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d1d5      	bne.n	8006dd4 <__sfp+0x24>
 8006e28:	f7ff ff78 	bl	8006d1c <__sfp_lock_release>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	e7ee      	b.n	8006e10 <__sfp+0x60>
 8006e32:	bf00      	nop
 8006e34:	08008570 	.word	0x08008570
 8006e38:	ffff0001 	.word	0xffff0001

08006e3c <_fwalk_reent>:
 8006e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e40:	4606      	mov	r6, r0
 8006e42:	4688      	mov	r8, r1
 8006e44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006e48:	2700      	movs	r7, #0
 8006e4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e4e:	f1b9 0901 	subs.w	r9, r9, #1
 8006e52:	d505      	bpl.n	8006e60 <_fwalk_reent+0x24>
 8006e54:	6824      	ldr	r4, [r4, #0]
 8006e56:	2c00      	cmp	r4, #0
 8006e58:	d1f7      	bne.n	8006e4a <_fwalk_reent+0xe>
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e60:	89ab      	ldrh	r3, [r5, #12]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d907      	bls.n	8006e76 <_fwalk_reent+0x3a>
 8006e66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	d003      	beq.n	8006e76 <_fwalk_reent+0x3a>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4630      	mov	r0, r6
 8006e72:	47c0      	blx	r8
 8006e74:	4307      	orrs	r7, r0
 8006e76:	3568      	adds	r5, #104	; 0x68
 8006e78:	e7e9      	b.n	8006e4e <_fwalk_reent+0x12>
	...

08006e7c <_localeconv_r>:
 8006e7c:	4800      	ldr	r0, [pc, #0]	; (8006e80 <_localeconv_r+0x4>)
 8006e7e:	4770      	bx	lr
 8006e80:	20000168 	.word	0x20000168

08006e84 <__retarget_lock_init_recursive>:
 8006e84:	4770      	bx	lr

08006e86 <__retarget_lock_acquire_recursive>:
 8006e86:	4770      	bx	lr

08006e88 <__retarget_lock_release_recursive>:
 8006e88:	4770      	bx	lr

08006e8a <__swhatbuf_r>:
 8006e8a:	b570      	push	{r4, r5, r6, lr}
 8006e8c:	460e      	mov	r6, r1
 8006e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e92:	2900      	cmp	r1, #0
 8006e94:	b096      	sub	sp, #88	; 0x58
 8006e96:	4614      	mov	r4, r2
 8006e98:	461d      	mov	r5, r3
 8006e9a:	da08      	bge.n	8006eae <__swhatbuf_r+0x24>
 8006e9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	602a      	str	r2, [r5, #0]
 8006ea4:	061a      	lsls	r2, r3, #24
 8006ea6:	d410      	bmi.n	8006eca <__swhatbuf_r+0x40>
 8006ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eac:	e00e      	b.n	8006ecc <__swhatbuf_r+0x42>
 8006eae:	466a      	mov	r2, sp
 8006eb0:	f000 ff42 	bl	8007d38 <_fstat_r>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	dbf1      	blt.n	8006e9c <__swhatbuf_r+0x12>
 8006eb8:	9a01      	ldr	r2, [sp, #4]
 8006eba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ebe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ec2:	425a      	negs	r2, r3
 8006ec4:	415a      	adcs	r2, r3
 8006ec6:	602a      	str	r2, [r5, #0]
 8006ec8:	e7ee      	b.n	8006ea8 <__swhatbuf_r+0x1e>
 8006eca:	2340      	movs	r3, #64	; 0x40
 8006ecc:	2000      	movs	r0, #0
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	b016      	add	sp, #88	; 0x58
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}

08006ed4 <__smakebuf_r>:
 8006ed4:	898b      	ldrh	r3, [r1, #12]
 8006ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ed8:	079d      	lsls	r5, r3, #30
 8006eda:	4606      	mov	r6, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	d507      	bpl.n	8006ef0 <__smakebuf_r+0x1c>
 8006ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	2301      	movs	r3, #1
 8006eea:	6163      	str	r3, [r4, #20]
 8006eec:	b002      	add	sp, #8
 8006eee:	bd70      	pop	{r4, r5, r6, pc}
 8006ef0:	ab01      	add	r3, sp, #4
 8006ef2:	466a      	mov	r2, sp
 8006ef4:	f7ff ffc9 	bl	8006e8a <__swhatbuf_r>
 8006ef8:	9900      	ldr	r1, [sp, #0]
 8006efa:	4605      	mov	r5, r0
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7fe f92f 	bl	8005160 <_malloc_r>
 8006f02:	b948      	cbnz	r0, 8006f18 <__smakebuf_r+0x44>
 8006f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f08:	059a      	lsls	r2, r3, #22
 8006f0a:	d4ef      	bmi.n	8006eec <__smakebuf_r+0x18>
 8006f0c:	f023 0303 	bic.w	r3, r3, #3
 8006f10:	f043 0302 	orr.w	r3, r3, #2
 8006f14:	81a3      	strh	r3, [r4, #12]
 8006f16:	e7e3      	b.n	8006ee0 <__smakebuf_r+0xc>
 8006f18:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <__smakebuf_r+0x7c>)
 8006f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	6020      	str	r0, [r4, #0]
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	6163      	str	r3, [r4, #20]
 8006f2a:	9b01      	ldr	r3, [sp, #4]
 8006f2c:	6120      	str	r0, [r4, #16]
 8006f2e:	b15b      	cbz	r3, 8006f48 <__smakebuf_r+0x74>
 8006f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f34:	4630      	mov	r0, r6
 8006f36:	f000 ff11 	bl	8007d5c <_isatty_r>
 8006f3a:	b128      	cbz	r0, 8006f48 <__smakebuf_r+0x74>
 8006f3c:	89a3      	ldrh	r3, [r4, #12]
 8006f3e:	f023 0303 	bic.w	r3, r3, #3
 8006f42:	f043 0301 	orr.w	r3, r3, #1
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	89a0      	ldrh	r0, [r4, #12]
 8006f4a:	4305      	orrs	r5, r0
 8006f4c:	81a5      	strh	r5, [r4, #12]
 8006f4e:	e7cd      	b.n	8006eec <__smakebuf_r+0x18>
 8006f50:	08006cd9 	.word	0x08006cd9

08006f54 <__malloc_lock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	; (8006f5c <__malloc_lock+0x8>)
 8006f56:	f7ff bf96 	b.w	8006e86 <__retarget_lock_acquire_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000484 	.word	0x20000484

08006f60 <__malloc_unlock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_unlock+0x8>)
 8006f62:	f7ff bf91 	b.w	8006e88 <__retarget_lock_release_recursive>
 8006f66:	bf00      	nop
 8006f68:	20000484 	.word	0x20000484

08006f6c <_Balloc>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	b976      	cbnz	r6, 8006f94 <_Balloc+0x28>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7fe f860 	bl	800503c <malloc>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f80:	b920      	cbnz	r0, 8006f8c <_Balloc+0x20>
 8006f82:	4b18      	ldr	r3, [pc, #96]	; (8006fe4 <_Balloc+0x78>)
 8006f84:	4818      	ldr	r0, [pc, #96]	; (8006fe8 <_Balloc+0x7c>)
 8006f86:	2166      	movs	r1, #102	; 0x66
 8006f88:	f000 fe96 	bl	8007cb8 <__assert_func>
 8006f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f90:	6006      	str	r6, [r0, #0]
 8006f92:	60c6      	str	r6, [r0, #12]
 8006f94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f96:	68f3      	ldr	r3, [r6, #12]
 8006f98:	b183      	cbz	r3, 8006fbc <_Balloc+0x50>
 8006f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fa2:	b9b8      	cbnz	r0, 8006fd4 <_Balloc+0x68>
 8006fa4:	2101      	movs	r1, #1
 8006fa6:	fa01 f605 	lsl.w	r6, r1, r5
 8006faa:	1d72      	adds	r2, r6, #5
 8006fac:	0092      	lsls	r2, r2, #2
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fb60 	bl	8007674 <_calloc_r>
 8006fb4:	b160      	cbz	r0, 8006fd0 <_Balloc+0x64>
 8006fb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fba:	e00e      	b.n	8006fda <_Balloc+0x6e>
 8006fbc:	2221      	movs	r2, #33	; 0x21
 8006fbe:	2104      	movs	r1, #4
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	f000 fb57 	bl	8007674 <_calloc_r>
 8006fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fc8:	60f0      	str	r0, [r6, #12]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e4      	bne.n	8006f9a <_Balloc+0x2e>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	bd70      	pop	{r4, r5, r6, pc}
 8006fd4:	6802      	ldr	r2, [r0, #0]
 8006fd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fe0:	e7f7      	b.n	8006fd2 <_Balloc+0x66>
 8006fe2:	bf00      	nop
 8006fe4:	080085b5 	.word	0x080085b5
 8006fe8:	08008698 	.word	0x08008698

08006fec <_Bfree>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	b976      	cbnz	r6, 8007014 <_Bfree+0x28>
 8006ff6:	2010      	movs	r0, #16
 8006ff8:	f7fe f820 	bl	800503c <malloc>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6268      	str	r0, [r5, #36]	; 0x24
 8007000:	b920      	cbnz	r0, 800700c <_Bfree+0x20>
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <_Bfree+0x3c>)
 8007004:	4809      	ldr	r0, [pc, #36]	; (800702c <_Bfree+0x40>)
 8007006:	218a      	movs	r1, #138	; 0x8a
 8007008:	f000 fe56 	bl	8007cb8 <__assert_func>
 800700c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007010:	6006      	str	r6, [r0, #0]
 8007012:	60c6      	str	r6, [r0, #12]
 8007014:	b13c      	cbz	r4, 8007026 <_Bfree+0x3a>
 8007016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007018:	6862      	ldr	r2, [r4, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007020:	6021      	str	r1, [r4, #0]
 8007022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	080085b5 	.word	0x080085b5
 800702c:	08008698 	.word	0x08008698

08007030 <__multadd>:
 8007030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007034:	690d      	ldr	r5, [r1, #16]
 8007036:	4607      	mov	r7, r0
 8007038:	460c      	mov	r4, r1
 800703a:	461e      	mov	r6, r3
 800703c:	f101 0c14 	add.w	ip, r1, #20
 8007040:	2000      	movs	r0, #0
 8007042:	f8dc 3000 	ldr.w	r3, [ip]
 8007046:	b299      	uxth	r1, r3
 8007048:	fb02 6101 	mla	r1, r2, r1, r6
 800704c:	0c1e      	lsrs	r6, r3, #16
 800704e:	0c0b      	lsrs	r3, r1, #16
 8007050:	fb02 3306 	mla	r3, r2, r6, r3
 8007054:	b289      	uxth	r1, r1
 8007056:	3001      	adds	r0, #1
 8007058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800705c:	4285      	cmp	r5, r0
 800705e:	f84c 1b04 	str.w	r1, [ip], #4
 8007062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007066:	dcec      	bgt.n	8007042 <__multadd+0x12>
 8007068:	b30e      	cbz	r6, 80070ae <__multadd+0x7e>
 800706a:	68a3      	ldr	r3, [r4, #8]
 800706c:	42ab      	cmp	r3, r5
 800706e:	dc19      	bgt.n	80070a4 <__multadd+0x74>
 8007070:	6861      	ldr	r1, [r4, #4]
 8007072:	4638      	mov	r0, r7
 8007074:	3101      	adds	r1, #1
 8007076:	f7ff ff79 	bl	8006f6c <_Balloc>
 800707a:	4680      	mov	r8, r0
 800707c:	b928      	cbnz	r0, 800708a <__multadd+0x5a>
 800707e:	4602      	mov	r2, r0
 8007080:	4b0c      	ldr	r3, [pc, #48]	; (80070b4 <__multadd+0x84>)
 8007082:	480d      	ldr	r0, [pc, #52]	; (80070b8 <__multadd+0x88>)
 8007084:	21b5      	movs	r1, #181	; 0xb5
 8007086:	f000 fe17 	bl	8007cb8 <__assert_func>
 800708a:	6922      	ldr	r2, [r4, #16]
 800708c:	3202      	adds	r2, #2
 800708e:	f104 010c 	add.w	r1, r4, #12
 8007092:	0092      	lsls	r2, r2, #2
 8007094:	300c      	adds	r0, #12
 8007096:	f7fd ffe1 	bl	800505c <memcpy>
 800709a:	4621      	mov	r1, r4
 800709c:	4638      	mov	r0, r7
 800709e:	f7ff ffa5 	bl	8006fec <_Bfree>
 80070a2:	4644      	mov	r4, r8
 80070a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070a8:	3501      	adds	r5, #1
 80070aa:	615e      	str	r6, [r3, #20]
 80070ac:	6125      	str	r5, [r4, #16]
 80070ae:	4620      	mov	r0, r4
 80070b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070b4:	08008627 	.word	0x08008627
 80070b8:	08008698 	.word	0x08008698

080070bc <__hi0bits>:
 80070bc:	0c03      	lsrs	r3, r0, #16
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	b9d3      	cbnz	r3, 80070f8 <__hi0bits+0x3c>
 80070c2:	0400      	lsls	r0, r0, #16
 80070c4:	2310      	movs	r3, #16
 80070c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070ca:	bf04      	itt	eq
 80070cc:	0200      	lsleq	r0, r0, #8
 80070ce:	3308      	addeq	r3, #8
 80070d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070d4:	bf04      	itt	eq
 80070d6:	0100      	lsleq	r0, r0, #4
 80070d8:	3304      	addeq	r3, #4
 80070da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070de:	bf04      	itt	eq
 80070e0:	0080      	lsleq	r0, r0, #2
 80070e2:	3302      	addeq	r3, #2
 80070e4:	2800      	cmp	r0, #0
 80070e6:	db05      	blt.n	80070f4 <__hi0bits+0x38>
 80070e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80070ec:	f103 0301 	add.w	r3, r3, #1
 80070f0:	bf08      	it	eq
 80070f2:	2320      	moveq	r3, #32
 80070f4:	4618      	mov	r0, r3
 80070f6:	4770      	bx	lr
 80070f8:	2300      	movs	r3, #0
 80070fa:	e7e4      	b.n	80070c6 <__hi0bits+0xa>

080070fc <__lo0bits>:
 80070fc:	6803      	ldr	r3, [r0, #0]
 80070fe:	f013 0207 	ands.w	r2, r3, #7
 8007102:	4601      	mov	r1, r0
 8007104:	d00b      	beq.n	800711e <__lo0bits+0x22>
 8007106:	07da      	lsls	r2, r3, #31
 8007108:	d423      	bmi.n	8007152 <__lo0bits+0x56>
 800710a:	0798      	lsls	r0, r3, #30
 800710c:	bf49      	itett	mi
 800710e:	085b      	lsrmi	r3, r3, #1
 8007110:	089b      	lsrpl	r3, r3, #2
 8007112:	2001      	movmi	r0, #1
 8007114:	600b      	strmi	r3, [r1, #0]
 8007116:	bf5c      	itt	pl
 8007118:	600b      	strpl	r3, [r1, #0]
 800711a:	2002      	movpl	r0, #2
 800711c:	4770      	bx	lr
 800711e:	b298      	uxth	r0, r3
 8007120:	b9a8      	cbnz	r0, 800714e <__lo0bits+0x52>
 8007122:	0c1b      	lsrs	r3, r3, #16
 8007124:	2010      	movs	r0, #16
 8007126:	b2da      	uxtb	r2, r3
 8007128:	b90a      	cbnz	r2, 800712e <__lo0bits+0x32>
 800712a:	3008      	adds	r0, #8
 800712c:	0a1b      	lsrs	r3, r3, #8
 800712e:	071a      	lsls	r2, r3, #28
 8007130:	bf04      	itt	eq
 8007132:	091b      	lsreq	r3, r3, #4
 8007134:	3004      	addeq	r0, #4
 8007136:	079a      	lsls	r2, r3, #30
 8007138:	bf04      	itt	eq
 800713a:	089b      	lsreq	r3, r3, #2
 800713c:	3002      	addeq	r0, #2
 800713e:	07da      	lsls	r2, r3, #31
 8007140:	d403      	bmi.n	800714a <__lo0bits+0x4e>
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	f100 0001 	add.w	r0, r0, #1
 8007148:	d005      	beq.n	8007156 <__lo0bits+0x5a>
 800714a:	600b      	str	r3, [r1, #0]
 800714c:	4770      	bx	lr
 800714e:	4610      	mov	r0, r2
 8007150:	e7e9      	b.n	8007126 <__lo0bits+0x2a>
 8007152:	2000      	movs	r0, #0
 8007154:	4770      	bx	lr
 8007156:	2020      	movs	r0, #32
 8007158:	4770      	bx	lr
	...

0800715c <__i2b>:
 800715c:	b510      	push	{r4, lr}
 800715e:	460c      	mov	r4, r1
 8007160:	2101      	movs	r1, #1
 8007162:	f7ff ff03 	bl	8006f6c <_Balloc>
 8007166:	4602      	mov	r2, r0
 8007168:	b928      	cbnz	r0, 8007176 <__i2b+0x1a>
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <__i2b+0x24>)
 800716c:	4805      	ldr	r0, [pc, #20]	; (8007184 <__i2b+0x28>)
 800716e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007172:	f000 fda1 	bl	8007cb8 <__assert_func>
 8007176:	2301      	movs	r3, #1
 8007178:	6144      	str	r4, [r0, #20]
 800717a:	6103      	str	r3, [r0, #16]
 800717c:	bd10      	pop	{r4, pc}
 800717e:	bf00      	nop
 8007180:	08008627 	.word	0x08008627
 8007184:	08008698 	.word	0x08008698

08007188 <__multiply>:
 8007188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718c:	4691      	mov	r9, r2
 800718e:	690a      	ldr	r2, [r1, #16]
 8007190:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007194:	429a      	cmp	r2, r3
 8007196:	bfb8      	it	lt
 8007198:	460b      	movlt	r3, r1
 800719a:	460c      	mov	r4, r1
 800719c:	bfbc      	itt	lt
 800719e:	464c      	movlt	r4, r9
 80071a0:	4699      	movlt	r9, r3
 80071a2:	6927      	ldr	r7, [r4, #16]
 80071a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071a8:	68a3      	ldr	r3, [r4, #8]
 80071aa:	6861      	ldr	r1, [r4, #4]
 80071ac:	eb07 060a 	add.w	r6, r7, sl
 80071b0:	42b3      	cmp	r3, r6
 80071b2:	b085      	sub	sp, #20
 80071b4:	bfb8      	it	lt
 80071b6:	3101      	addlt	r1, #1
 80071b8:	f7ff fed8 	bl	8006f6c <_Balloc>
 80071bc:	b930      	cbnz	r0, 80071cc <__multiply+0x44>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b44      	ldr	r3, [pc, #272]	; (80072d4 <__multiply+0x14c>)
 80071c2:	4845      	ldr	r0, [pc, #276]	; (80072d8 <__multiply+0x150>)
 80071c4:	f240 115d 	movw	r1, #349	; 0x15d
 80071c8:	f000 fd76 	bl	8007cb8 <__assert_func>
 80071cc:	f100 0514 	add.w	r5, r0, #20
 80071d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071d4:	462b      	mov	r3, r5
 80071d6:	2200      	movs	r2, #0
 80071d8:	4543      	cmp	r3, r8
 80071da:	d321      	bcc.n	8007220 <__multiply+0x98>
 80071dc:	f104 0314 	add.w	r3, r4, #20
 80071e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071e4:	f109 0314 	add.w	r3, r9, #20
 80071e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071ec:	9202      	str	r2, [sp, #8]
 80071ee:	1b3a      	subs	r2, r7, r4
 80071f0:	3a15      	subs	r2, #21
 80071f2:	f022 0203 	bic.w	r2, r2, #3
 80071f6:	3204      	adds	r2, #4
 80071f8:	f104 0115 	add.w	r1, r4, #21
 80071fc:	428f      	cmp	r7, r1
 80071fe:	bf38      	it	cc
 8007200:	2204      	movcc	r2, #4
 8007202:	9201      	str	r2, [sp, #4]
 8007204:	9a02      	ldr	r2, [sp, #8]
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	429a      	cmp	r2, r3
 800720a:	d80c      	bhi.n	8007226 <__multiply+0x9e>
 800720c:	2e00      	cmp	r6, #0
 800720e:	dd03      	ble.n	8007218 <__multiply+0x90>
 8007210:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007214:	2b00      	cmp	r3, #0
 8007216:	d05a      	beq.n	80072ce <__multiply+0x146>
 8007218:	6106      	str	r6, [r0, #16]
 800721a:	b005      	add	sp, #20
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007220:	f843 2b04 	str.w	r2, [r3], #4
 8007224:	e7d8      	b.n	80071d8 <__multiply+0x50>
 8007226:	f8b3 a000 	ldrh.w	sl, [r3]
 800722a:	f1ba 0f00 	cmp.w	sl, #0
 800722e:	d024      	beq.n	800727a <__multiply+0xf2>
 8007230:	f104 0e14 	add.w	lr, r4, #20
 8007234:	46a9      	mov	r9, r5
 8007236:	f04f 0c00 	mov.w	ip, #0
 800723a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800723e:	f8d9 1000 	ldr.w	r1, [r9]
 8007242:	fa1f fb82 	uxth.w	fp, r2
 8007246:	b289      	uxth	r1, r1
 8007248:	fb0a 110b 	mla	r1, sl, fp, r1
 800724c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007250:	f8d9 2000 	ldr.w	r2, [r9]
 8007254:	4461      	add	r1, ip
 8007256:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800725a:	fb0a c20b 	mla	r2, sl, fp, ip
 800725e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007262:	b289      	uxth	r1, r1
 8007264:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007268:	4577      	cmp	r7, lr
 800726a:	f849 1b04 	str.w	r1, [r9], #4
 800726e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007272:	d8e2      	bhi.n	800723a <__multiply+0xb2>
 8007274:	9a01      	ldr	r2, [sp, #4]
 8007276:	f845 c002 	str.w	ip, [r5, r2]
 800727a:	9a03      	ldr	r2, [sp, #12]
 800727c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007280:	3304      	adds	r3, #4
 8007282:	f1b9 0f00 	cmp.w	r9, #0
 8007286:	d020      	beq.n	80072ca <__multiply+0x142>
 8007288:	6829      	ldr	r1, [r5, #0]
 800728a:	f104 0c14 	add.w	ip, r4, #20
 800728e:	46ae      	mov	lr, r5
 8007290:	f04f 0a00 	mov.w	sl, #0
 8007294:	f8bc b000 	ldrh.w	fp, [ip]
 8007298:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800729c:	fb09 220b 	mla	r2, r9, fp, r2
 80072a0:	4492      	add	sl, r2
 80072a2:	b289      	uxth	r1, r1
 80072a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072a8:	f84e 1b04 	str.w	r1, [lr], #4
 80072ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072b0:	f8be 1000 	ldrh.w	r1, [lr]
 80072b4:	0c12      	lsrs	r2, r2, #16
 80072b6:	fb09 1102 	mla	r1, r9, r2, r1
 80072ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072be:	4567      	cmp	r7, ip
 80072c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072c4:	d8e6      	bhi.n	8007294 <__multiply+0x10c>
 80072c6:	9a01      	ldr	r2, [sp, #4]
 80072c8:	50a9      	str	r1, [r5, r2]
 80072ca:	3504      	adds	r5, #4
 80072cc:	e79a      	b.n	8007204 <__multiply+0x7c>
 80072ce:	3e01      	subs	r6, #1
 80072d0:	e79c      	b.n	800720c <__multiply+0x84>
 80072d2:	bf00      	nop
 80072d4:	08008627 	.word	0x08008627
 80072d8:	08008698 	.word	0x08008698

080072dc <__pow5mult>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	4615      	mov	r5, r2
 80072e2:	f012 0203 	ands.w	r2, r2, #3
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	d007      	beq.n	80072fc <__pow5mult+0x20>
 80072ec:	4c25      	ldr	r4, [pc, #148]	; (8007384 <__pow5mult+0xa8>)
 80072ee:	3a01      	subs	r2, #1
 80072f0:	2300      	movs	r3, #0
 80072f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072f6:	f7ff fe9b 	bl	8007030 <__multadd>
 80072fa:	4607      	mov	r7, r0
 80072fc:	10ad      	asrs	r5, r5, #2
 80072fe:	d03d      	beq.n	800737c <__pow5mult+0xa0>
 8007300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007302:	b97c      	cbnz	r4, 8007324 <__pow5mult+0x48>
 8007304:	2010      	movs	r0, #16
 8007306:	f7fd fe99 	bl	800503c <malloc>
 800730a:	4602      	mov	r2, r0
 800730c:	6270      	str	r0, [r6, #36]	; 0x24
 800730e:	b928      	cbnz	r0, 800731c <__pow5mult+0x40>
 8007310:	4b1d      	ldr	r3, [pc, #116]	; (8007388 <__pow5mult+0xac>)
 8007312:	481e      	ldr	r0, [pc, #120]	; (800738c <__pow5mult+0xb0>)
 8007314:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007318:	f000 fcce 	bl	8007cb8 <__assert_func>
 800731c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007320:	6004      	str	r4, [r0, #0]
 8007322:	60c4      	str	r4, [r0, #12]
 8007324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800732c:	b94c      	cbnz	r4, 8007342 <__pow5mult+0x66>
 800732e:	f240 2171 	movw	r1, #625	; 0x271
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff ff12 	bl	800715c <__i2b>
 8007338:	2300      	movs	r3, #0
 800733a:	f8c8 0008 	str.w	r0, [r8, #8]
 800733e:	4604      	mov	r4, r0
 8007340:	6003      	str	r3, [r0, #0]
 8007342:	f04f 0900 	mov.w	r9, #0
 8007346:	07eb      	lsls	r3, r5, #31
 8007348:	d50a      	bpl.n	8007360 <__pow5mult+0x84>
 800734a:	4639      	mov	r1, r7
 800734c:	4622      	mov	r2, r4
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff ff1a 	bl	8007188 <__multiply>
 8007354:	4639      	mov	r1, r7
 8007356:	4680      	mov	r8, r0
 8007358:	4630      	mov	r0, r6
 800735a:	f7ff fe47 	bl	8006fec <_Bfree>
 800735e:	4647      	mov	r7, r8
 8007360:	106d      	asrs	r5, r5, #1
 8007362:	d00b      	beq.n	800737c <__pow5mult+0xa0>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	b938      	cbnz	r0, 8007378 <__pow5mult+0x9c>
 8007368:	4622      	mov	r2, r4
 800736a:	4621      	mov	r1, r4
 800736c:	4630      	mov	r0, r6
 800736e:	f7ff ff0b 	bl	8007188 <__multiply>
 8007372:	6020      	str	r0, [r4, #0]
 8007374:	f8c0 9000 	str.w	r9, [r0]
 8007378:	4604      	mov	r4, r0
 800737a:	e7e4      	b.n	8007346 <__pow5mult+0x6a>
 800737c:	4638      	mov	r0, r7
 800737e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007382:	bf00      	nop
 8007384:	080087e8 	.word	0x080087e8
 8007388:	080085b5 	.word	0x080085b5
 800738c:	08008698 	.word	0x08008698

08007390 <__lshift>:
 8007390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007394:	460c      	mov	r4, r1
 8007396:	6849      	ldr	r1, [r1, #4]
 8007398:	6923      	ldr	r3, [r4, #16]
 800739a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	4607      	mov	r7, r0
 80073a2:	4691      	mov	r9, r2
 80073a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073a8:	f108 0601 	add.w	r6, r8, #1
 80073ac:	42b3      	cmp	r3, r6
 80073ae:	db0b      	blt.n	80073c8 <__lshift+0x38>
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff fddb 	bl	8006f6c <_Balloc>
 80073b6:	4605      	mov	r5, r0
 80073b8:	b948      	cbnz	r0, 80073ce <__lshift+0x3e>
 80073ba:	4602      	mov	r2, r0
 80073bc:	4b2a      	ldr	r3, [pc, #168]	; (8007468 <__lshift+0xd8>)
 80073be:	482b      	ldr	r0, [pc, #172]	; (800746c <__lshift+0xdc>)
 80073c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073c4:	f000 fc78 	bl	8007cb8 <__assert_func>
 80073c8:	3101      	adds	r1, #1
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	e7ee      	b.n	80073ac <__lshift+0x1c>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f100 0114 	add.w	r1, r0, #20
 80073d4:	f100 0210 	add.w	r2, r0, #16
 80073d8:	4618      	mov	r0, r3
 80073da:	4553      	cmp	r3, sl
 80073dc:	db37      	blt.n	800744e <__lshift+0xbe>
 80073de:	6920      	ldr	r0, [r4, #16]
 80073e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073e4:	f104 0314 	add.w	r3, r4, #20
 80073e8:	f019 091f 	ands.w	r9, r9, #31
 80073ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80073f4:	d02f      	beq.n	8007456 <__lshift+0xc6>
 80073f6:	f1c9 0e20 	rsb	lr, r9, #32
 80073fa:	468a      	mov	sl, r1
 80073fc:	f04f 0c00 	mov.w	ip, #0
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	fa02 f209 	lsl.w	r2, r2, r9
 8007406:	ea42 020c 	orr.w	r2, r2, ip
 800740a:	f84a 2b04 	str.w	r2, [sl], #4
 800740e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007412:	4298      	cmp	r0, r3
 8007414:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007418:	d8f2      	bhi.n	8007400 <__lshift+0x70>
 800741a:	1b03      	subs	r3, r0, r4
 800741c:	3b15      	subs	r3, #21
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	3304      	adds	r3, #4
 8007424:	f104 0215 	add.w	r2, r4, #21
 8007428:	4290      	cmp	r0, r2
 800742a:	bf38      	it	cc
 800742c:	2304      	movcc	r3, #4
 800742e:	f841 c003 	str.w	ip, [r1, r3]
 8007432:	f1bc 0f00 	cmp.w	ip, #0
 8007436:	d001      	beq.n	800743c <__lshift+0xac>
 8007438:	f108 0602 	add.w	r6, r8, #2
 800743c:	3e01      	subs	r6, #1
 800743e:	4638      	mov	r0, r7
 8007440:	612e      	str	r6, [r5, #16]
 8007442:	4621      	mov	r1, r4
 8007444:	f7ff fdd2 	bl	8006fec <_Bfree>
 8007448:	4628      	mov	r0, r5
 800744a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007452:	3301      	adds	r3, #1
 8007454:	e7c1      	b.n	80073da <__lshift+0x4a>
 8007456:	3904      	subs	r1, #4
 8007458:	f853 2b04 	ldr.w	r2, [r3], #4
 800745c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007460:	4298      	cmp	r0, r3
 8007462:	d8f9      	bhi.n	8007458 <__lshift+0xc8>
 8007464:	e7ea      	b.n	800743c <__lshift+0xac>
 8007466:	bf00      	nop
 8007468:	08008627 	.word	0x08008627
 800746c:	08008698 	.word	0x08008698

08007470 <__mcmp>:
 8007470:	b530      	push	{r4, r5, lr}
 8007472:	6902      	ldr	r2, [r0, #16]
 8007474:	690c      	ldr	r4, [r1, #16]
 8007476:	1b12      	subs	r2, r2, r4
 8007478:	d10e      	bne.n	8007498 <__mcmp+0x28>
 800747a:	f100 0314 	add.w	r3, r0, #20
 800747e:	3114      	adds	r1, #20
 8007480:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007484:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007488:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800748c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007490:	42a5      	cmp	r5, r4
 8007492:	d003      	beq.n	800749c <__mcmp+0x2c>
 8007494:	d305      	bcc.n	80074a2 <__mcmp+0x32>
 8007496:	2201      	movs	r2, #1
 8007498:	4610      	mov	r0, r2
 800749a:	bd30      	pop	{r4, r5, pc}
 800749c:	4283      	cmp	r3, r0
 800749e:	d3f3      	bcc.n	8007488 <__mcmp+0x18>
 80074a0:	e7fa      	b.n	8007498 <__mcmp+0x28>
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	e7f7      	b.n	8007498 <__mcmp+0x28>

080074a8 <__mdiff>:
 80074a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ac:	460c      	mov	r4, r1
 80074ae:	4606      	mov	r6, r0
 80074b0:	4611      	mov	r1, r2
 80074b2:	4620      	mov	r0, r4
 80074b4:	4690      	mov	r8, r2
 80074b6:	f7ff ffdb 	bl	8007470 <__mcmp>
 80074ba:	1e05      	subs	r5, r0, #0
 80074bc:	d110      	bne.n	80074e0 <__mdiff+0x38>
 80074be:	4629      	mov	r1, r5
 80074c0:	4630      	mov	r0, r6
 80074c2:	f7ff fd53 	bl	8006f6c <_Balloc>
 80074c6:	b930      	cbnz	r0, 80074d6 <__mdiff+0x2e>
 80074c8:	4b3a      	ldr	r3, [pc, #232]	; (80075b4 <__mdiff+0x10c>)
 80074ca:	4602      	mov	r2, r0
 80074cc:	f240 2132 	movw	r1, #562	; 0x232
 80074d0:	4839      	ldr	r0, [pc, #228]	; (80075b8 <__mdiff+0x110>)
 80074d2:	f000 fbf1 	bl	8007cb8 <__assert_func>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e0:	bfa4      	itt	ge
 80074e2:	4643      	movge	r3, r8
 80074e4:	46a0      	movge	r8, r4
 80074e6:	4630      	mov	r0, r6
 80074e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074ec:	bfa6      	itte	ge
 80074ee:	461c      	movge	r4, r3
 80074f0:	2500      	movge	r5, #0
 80074f2:	2501      	movlt	r5, #1
 80074f4:	f7ff fd3a 	bl	8006f6c <_Balloc>
 80074f8:	b920      	cbnz	r0, 8007504 <__mdiff+0x5c>
 80074fa:	4b2e      	ldr	r3, [pc, #184]	; (80075b4 <__mdiff+0x10c>)
 80074fc:	4602      	mov	r2, r0
 80074fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007502:	e7e5      	b.n	80074d0 <__mdiff+0x28>
 8007504:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007508:	6926      	ldr	r6, [r4, #16]
 800750a:	60c5      	str	r5, [r0, #12]
 800750c:	f104 0914 	add.w	r9, r4, #20
 8007510:	f108 0514 	add.w	r5, r8, #20
 8007514:	f100 0e14 	add.w	lr, r0, #20
 8007518:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800751c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007520:	f108 0210 	add.w	r2, r8, #16
 8007524:	46f2      	mov	sl, lr
 8007526:	2100      	movs	r1, #0
 8007528:	f859 3b04 	ldr.w	r3, [r9], #4
 800752c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007530:	fa1f f883 	uxth.w	r8, r3
 8007534:	fa11 f18b 	uxtah	r1, r1, fp
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	eba1 0808 	sub.w	r8, r1, r8
 800753e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007542:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007546:	fa1f f888 	uxth.w	r8, r8
 800754a:	1419      	asrs	r1, r3, #16
 800754c:	454e      	cmp	r6, r9
 800754e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007552:	f84a 3b04 	str.w	r3, [sl], #4
 8007556:	d8e7      	bhi.n	8007528 <__mdiff+0x80>
 8007558:	1b33      	subs	r3, r6, r4
 800755a:	3b15      	subs	r3, #21
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	3304      	adds	r3, #4
 8007562:	3415      	adds	r4, #21
 8007564:	42a6      	cmp	r6, r4
 8007566:	bf38      	it	cc
 8007568:	2304      	movcc	r3, #4
 800756a:	441d      	add	r5, r3
 800756c:	4473      	add	r3, lr
 800756e:	469e      	mov	lr, r3
 8007570:	462e      	mov	r6, r5
 8007572:	4566      	cmp	r6, ip
 8007574:	d30e      	bcc.n	8007594 <__mdiff+0xec>
 8007576:	f10c 0203 	add.w	r2, ip, #3
 800757a:	1b52      	subs	r2, r2, r5
 800757c:	f022 0203 	bic.w	r2, r2, #3
 8007580:	3d03      	subs	r5, #3
 8007582:	45ac      	cmp	ip, r5
 8007584:	bf38      	it	cc
 8007586:	2200      	movcc	r2, #0
 8007588:	441a      	add	r2, r3
 800758a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800758e:	b17b      	cbz	r3, 80075b0 <__mdiff+0x108>
 8007590:	6107      	str	r7, [r0, #16]
 8007592:	e7a3      	b.n	80074dc <__mdiff+0x34>
 8007594:	f856 8b04 	ldr.w	r8, [r6], #4
 8007598:	fa11 f288 	uxtah	r2, r1, r8
 800759c:	1414      	asrs	r4, r2, #16
 800759e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075a2:	b292      	uxth	r2, r2
 80075a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075a8:	f84e 2b04 	str.w	r2, [lr], #4
 80075ac:	1421      	asrs	r1, r4, #16
 80075ae:	e7e0      	b.n	8007572 <__mdiff+0xca>
 80075b0:	3f01      	subs	r7, #1
 80075b2:	e7ea      	b.n	800758a <__mdiff+0xe2>
 80075b4:	08008627 	.word	0x08008627
 80075b8:	08008698 	.word	0x08008698

080075bc <__d2b>:
 80075bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075c0:	4689      	mov	r9, r1
 80075c2:	2101      	movs	r1, #1
 80075c4:	ec57 6b10 	vmov	r6, r7, d0
 80075c8:	4690      	mov	r8, r2
 80075ca:	f7ff fccf 	bl	8006f6c <_Balloc>
 80075ce:	4604      	mov	r4, r0
 80075d0:	b930      	cbnz	r0, 80075e0 <__d2b+0x24>
 80075d2:	4602      	mov	r2, r0
 80075d4:	4b25      	ldr	r3, [pc, #148]	; (800766c <__d2b+0xb0>)
 80075d6:	4826      	ldr	r0, [pc, #152]	; (8007670 <__d2b+0xb4>)
 80075d8:	f240 310a 	movw	r1, #778	; 0x30a
 80075dc:	f000 fb6c 	bl	8007cb8 <__assert_func>
 80075e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80075e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80075e8:	bb35      	cbnz	r5, 8007638 <__d2b+0x7c>
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	9301      	str	r3, [sp, #4]
 80075ee:	d028      	beq.n	8007642 <__d2b+0x86>
 80075f0:	4668      	mov	r0, sp
 80075f2:	9600      	str	r6, [sp, #0]
 80075f4:	f7ff fd82 	bl	80070fc <__lo0bits>
 80075f8:	9900      	ldr	r1, [sp, #0]
 80075fa:	b300      	cbz	r0, 800763e <__d2b+0x82>
 80075fc:	9a01      	ldr	r2, [sp, #4]
 80075fe:	f1c0 0320 	rsb	r3, r0, #32
 8007602:	fa02 f303 	lsl.w	r3, r2, r3
 8007606:	430b      	orrs	r3, r1
 8007608:	40c2      	lsrs	r2, r0
 800760a:	6163      	str	r3, [r4, #20]
 800760c:	9201      	str	r2, [sp, #4]
 800760e:	9b01      	ldr	r3, [sp, #4]
 8007610:	61a3      	str	r3, [r4, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	bf14      	ite	ne
 8007616:	2202      	movne	r2, #2
 8007618:	2201      	moveq	r2, #1
 800761a:	6122      	str	r2, [r4, #16]
 800761c:	b1d5      	cbz	r5, 8007654 <__d2b+0x98>
 800761e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007622:	4405      	add	r5, r0
 8007624:	f8c9 5000 	str.w	r5, [r9]
 8007628:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800762c:	f8c8 0000 	str.w	r0, [r8]
 8007630:	4620      	mov	r0, r4
 8007632:	b003      	add	sp, #12
 8007634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007638:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800763c:	e7d5      	b.n	80075ea <__d2b+0x2e>
 800763e:	6161      	str	r1, [r4, #20]
 8007640:	e7e5      	b.n	800760e <__d2b+0x52>
 8007642:	a801      	add	r0, sp, #4
 8007644:	f7ff fd5a 	bl	80070fc <__lo0bits>
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	6163      	str	r3, [r4, #20]
 800764c:	2201      	movs	r2, #1
 800764e:	6122      	str	r2, [r4, #16]
 8007650:	3020      	adds	r0, #32
 8007652:	e7e3      	b.n	800761c <__d2b+0x60>
 8007654:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007658:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800765c:	f8c9 0000 	str.w	r0, [r9]
 8007660:	6918      	ldr	r0, [r3, #16]
 8007662:	f7ff fd2b 	bl	80070bc <__hi0bits>
 8007666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800766a:	e7df      	b.n	800762c <__d2b+0x70>
 800766c:	08008627 	.word	0x08008627
 8007670:	08008698 	.word	0x08008698

08007674 <_calloc_r>:
 8007674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007676:	fba1 2402 	umull	r2, r4, r1, r2
 800767a:	b94c      	cbnz	r4, 8007690 <_calloc_r+0x1c>
 800767c:	4611      	mov	r1, r2
 800767e:	9201      	str	r2, [sp, #4]
 8007680:	f7fd fd6e 	bl	8005160 <_malloc_r>
 8007684:	9a01      	ldr	r2, [sp, #4]
 8007686:	4605      	mov	r5, r0
 8007688:	b930      	cbnz	r0, 8007698 <_calloc_r+0x24>
 800768a:	4628      	mov	r0, r5
 800768c:	b003      	add	sp, #12
 800768e:	bd30      	pop	{r4, r5, pc}
 8007690:	220c      	movs	r2, #12
 8007692:	6002      	str	r2, [r0, #0]
 8007694:	2500      	movs	r5, #0
 8007696:	e7f8      	b.n	800768a <_calloc_r+0x16>
 8007698:	4621      	mov	r1, r4
 800769a:	f7fd fced 	bl	8005078 <memset>
 800769e:	e7f4      	b.n	800768a <_calloc_r+0x16>

080076a0 <__ssputs_r>:
 80076a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a4:	688e      	ldr	r6, [r1, #8]
 80076a6:	429e      	cmp	r6, r3
 80076a8:	4682      	mov	sl, r0
 80076aa:	460c      	mov	r4, r1
 80076ac:	4690      	mov	r8, r2
 80076ae:	461f      	mov	r7, r3
 80076b0:	d838      	bhi.n	8007724 <__ssputs_r+0x84>
 80076b2:	898a      	ldrh	r2, [r1, #12]
 80076b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076b8:	d032      	beq.n	8007720 <__ssputs_r+0x80>
 80076ba:	6825      	ldr	r5, [r4, #0]
 80076bc:	6909      	ldr	r1, [r1, #16]
 80076be:	eba5 0901 	sub.w	r9, r5, r1
 80076c2:	6965      	ldr	r5, [r4, #20]
 80076c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076cc:	3301      	adds	r3, #1
 80076ce:	444b      	add	r3, r9
 80076d0:	106d      	asrs	r5, r5, #1
 80076d2:	429d      	cmp	r5, r3
 80076d4:	bf38      	it	cc
 80076d6:	461d      	movcc	r5, r3
 80076d8:	0553      	lsls	r3, r2, #21
 80076da:	d531      	bpl.n	8007740 <__ssputs_r+0xa0>
 80076dc:	4629      	mov	r1, r5
 80076de:	f7fd fd3f 	bl	8005160 <_malloc_r>
 80076e2:	4606      	mov	r6, r0
 80076e4:	b950      	cbnz	r0, 80076fc <__ssputs_r+0x5c>
 80076e6:	230c      	movs	r3, #12
 80076e8:	f8ca 3000 	str.w	r3, [sl]
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fc:	6921      	ldr	r1, [r4, #16]
 80076fe:	464a      	mov	r2, r9
 8007700:	f7fd fcac 	bl	800505c <memcpy>
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800770a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	6126      	str	r6, [r4, #16]
 8007712:	6165      	str	r5, [r4, #20]
 8007714:	444e      	add	r6, r9
 8007716:	eba5 0509 	sub.w	r5, r5, r9
 800771a:	6026      	str	r6, [r4, #0]
 800771c:	60a5      	str	r5, [r4, #8]
 800771e:	463e      	mov	r6, r7
 8007720:	42be      	cmp	r6, r7
 8007722:	d900      	bls.n	8007726 <__ssputs_r+0x86>
 8007724:	463e      	mov	r6, r7
 8007726:	6820      	ldr	r0, [r4, #0]
 8007728:	4632      	mov	r2, r6
 800772a:	4641      	mov	r1, r8
 800772c:	f000 fb4a 	bl	8007dc4 <memmove>
 8007730:	68a3      	ldr	r3, [r4, #8]
 8007732:	1b9b      	subs	r3, r3, r6
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	4433      	add	r3, r6
 800773a:	6023      	str	r3, [r4, #0]
 800773c:	2000      	movs	r0, #0
 800773e:	e7db      	b.n	80076f8 <__ssputs_r+0x58>
 8007740:	462a      	mov	r2, r5
 8007742:	f000 fb59 	bl	8007df8 <_realloc_r>
 8007746:	4606      	mov	r6, r0
 8007748:	2800      	cmp	r0, #0
 800774a:	d1e1      	bne.n	8007710 <__ssputs_r+0x70>
 800774c:	6921      	ldr	r1, [r4, #16]
 800774e:	4650      	mov	r0, sl
 8007750:	f7fd fc9a 	bl	8005088 <_free_r>
 8007754:	e7c7      	b.n	80076e6 <__ssputs_r+0x46>
	...

08007758 <_svfiprintf_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	4698      	mov	r8, r3
 800775e:	898b      	ldrh	r3, [r1, #12]
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	b09d      	sub	sp, #116	; 0x74
 8007764:	4607      	mov	r7, r0
 8007766:	460d      	mov	r5, r1
 8007768:	4614      	mov	r4, r2
 800776a:	d50e      	bpl.n	800778a <_svfiprintf_r+0x32>
 800776c:	690b      	ldr	r3, [r1, #16]
 800776e:	b963      	cbnz	r3, 800778a <_svfiprintf_r+0x32>
 8007770:	2140      	movs	r1, #64	; 0x40
 8007772:	f7fd fcf5 	bl	8005160 <_malloc_r>
 8007776:	6028      	str	r0, [r5, #0]
 8007778:	6128      	str	r0, [r5, #16]
 800777a:	b920      	cbnz	r0, 8007786 <_svfiprintf_r+0x2e>
 800777c:	230c      	movs	r3, #12
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	f04f 30ff 	mov.w	r0, #4294967295
 8007784:	e0d1      	b.n	800792a <_svfiprintf_r+0x1d2>
 8007786:	2340      	movs	r3, #64	; 0x40
 8007788:	616b      	str	r3, [r5, #20]
 800778a:	2300      	movs	r3, #0
 800778c:	9309      	str	r3, [sp, #36]	; 0x24
 800778e:	2320      	movs	r3, #32
 8007790:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007794:	f8cd 800c 	str.w	r8, [sp, #12]
 8007798:	2330      	movs	r3, #48	; 0x30
 800779a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007944 <_svfiprintf_r+0x1ec>
 800779e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077a2:	f04f 0901 	mov.w	r9, #1
 80077a6:	4623      	mov	r3, r4
 80077a8:	469a      	mov	sl, r3
 80077aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ae:	b10a      	cbz	r2, 80077b4 <_svfiprintf_r+0x5c>
 80077b0:	2a25      	cmp	r2, #37	; 0x25
 80077b2:	d1f9      	bne.n	80077a8 <_svfiprintf_r+0x50>
 80077b4:	ebba 0b04 	subs.w	fp, sl, r4
 80077b8:	d00b      	beq.n	80077d2 <_svfiprintf_r+0x7a>
 80077ba:	465b      	mov	r3, fp
 80077bc:	4622      	mov	r2, r4
 80077be:	4629      	mov	r1, r5
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff ff6d 	bl	80076a0 <__ssputs_r>
 80077c6:	3001      	adds	r0, #1
 80077c8:	f000 80aa 	beq.w	8007920 <_svfiprintf_r+0x1c8>
 80077cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ce:	445a      	add	r2, fp
 80077d0:	9209      	str	r2, [sp, #36]	; 0x24
 80077d2:	f89a 3000 	ldrb.w	r3, [sl]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80a2 	beq.w	8007920 <_svfiprintf_r+0x1c8>
 80077dc:	2300      	movs	r3, #0
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077e6:	f10a 0a01 	add.w	sl, sl, #1
 80077ea:	9304      	str	r3, [sp, #16]
 80077ec:	9307      	str	r3, [sp, #28]
 80077ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077f2:	931a      	str	r3, [sp, #104]	; 0x68
 80077f4:	4654      	mov	r4, sl
 80077f6:	2205      	movs	r2, #5
 80077f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077fc:	4851      	ldr	r0, [pc, #324]	; (8007944 <_svfiprintf_r+0x1ec>)
 80077fe:	f7f8 fd0f 	bl	8000220 <memchr>
 8007802:	9a04      	ldr	r2, [sp, #16]
 8007804:	b9d8      	cbnz	r0, 800783e <_svfiprintf_r+0xe6>
 8007806:	06d0      	lsls	r0, r2, #27
 8007808:	bf44      	itt	mi
 800780a:	2320      	movmi	r3, #32
 800780c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007810:	0711      	lsls	r1, r2, #28
 8007812:	bf44      	itt	mi
 8007814:	232b      	movmi	r3, #43	; 0x2b
 8007816:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800781a:	f89a 3000 	ldrb.w	r3, [sl]
 800781e:	2b2a      	cmp	r3, #42	; 0x2a
 8007820:	d015      	beq.n	800784e <_svfiprintf_r+0xf6>
 8007822:	9a07      	ldr	r2, [sp, #28]
 8007824:	4654      	mov	r4, sl
 8007826:	2000      	movs	r0, #0
 8007828:	f04f 0c0a 	mov.w	ip, #10
 800782c:	4621      	mov	r1, r4
 800782e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007832:	3b30      	subs	r3, #48	; 0x30
 8007834:	2b09      	cmp	r3, #9
 8007836:	d94e      	bls.n	80078d6 <_svfiprintf_r+0x17e>
 8007838:	b1b0      	cbz	r0, 8007868 <_svfiprintf_r+0x110>
 800783a:	9207      	str	r2, [sp, #28]
 800783c:	e014      	b.n	8007868 <_svfiprintf_r+0x110>
 800783e:	eba0 0308 	sub.w	r3, r0, r8
 8007842:	fa09 f303 	lsl.w	r3, r9, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	46a2      	mov	sl, r4
 800784c:	e7d2      	b.n	80077f4 <_svfiprintf_r+0x9c>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	1d19      	adds	r1, r3, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	9103      	str	r1, [sp, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bfbb      	ittet	lt
 800785a:	425b      	neglt	r3, r3
 800785c:	f042 0202 	orrlt.w	r2, r2, #2
 8007860:	9307      	strge	r3, [sp, #28]
 8007862:	9307      	strlt	r3, [sp, #28]
 8007864:	bfb8      	it	lt
 8007866:	9204      	strlt	r2, [sp, #16]
 8007868:	7823      	ldrb	r3, [r4, #0]
 800786a:	2b2e      	cmp	r3, #46	; 0x2e
 800786c:	d10c      	bne.n	8007888 <_svfiprintf_r+0x130>
 800786e:	7863      	ldrb	r3, [r4, #1]
 8007870:	2b2a      	cmp	r3, #42	; 0x2a
 8007872:	d135      	bne.n	80078e0 <_svfiprintf_r+0x188>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	1d1a      	adds	r2, r3, #4
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	9203      	str	r2, [sp, #12]
 800787c:	2b00      	cmp	r3, #0
 800787e:	bfb8      	it	lt
 8007880:	f04f 33ff 	movlt.w	r3, #4294967295
 8007884:	3402      	adds	r4, #2
 8007886:	9305      	str	r3, [sp, #20]
 8007888:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007954 <_svfiprintf_r+0x1fc>
 800788c:	7821      	ldrb	r1, [r4, #0]
 800788e:	2203      	movs	r2, #3
 8007890:	4650      	mov	r0, sl
 8007892:	f7f8 fcc5 	bl	8000220 <memchr>
 8007896:	b140      	cbz	r0, 80078aa <_svfiprintf_r+0x152>
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	eba0 000a 	sub.w	r0, r0, sl
 800789e:	fa03 f000 	lsl.w	r0, r3, r0
 80078a2:	9b04      	ldr	r3, [sp, #16]
 80078a4:	4303      	orrs	r3, r0
 80078a6:	3401      	adds	r4, #1
 80078a8:	9304      	str	r3, [sp, #16]
 80078aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ae:	4826      	ldr	r0, [pc, #152]	; (8007948 <_svfiprintf_r+0x1f0>)
 80078b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078b4:	2206      	movs	r2, #6
 80078b6:	f7f8 fcb3 	bl	8000220 <memchr>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d038      	beq.n	8007930 <_svfiprintf_r+0x1d8>
 80078be:	4b23      	ldr	r3, [pc, #140]	; (800794c <_svfiprintf_r+0x1f4>)
 80078c0:	bb1b      	cbnz	r3, 800790a <_svfiprintf_r+0x1b2>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	3307      	adds	r3, #7
 80078c6:	f023 0307 	bic.w	r3, r3, #7
 80078ca:	3308      	adds	r3, #8
 80078cc:	9303      	str	r3, [sp, #12]
 80078ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d0:	4433      	add	r3, r6
 80078d2:	9309      	str	r3, [sp, #36]	; 0x24
 80078d4:	e767      	b.n	80077a6 <_svfiprintf_r+0x4e>
 80078d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80078da:	460c      	mov	r4, r1
 80078dc:	2001      	movs	r0, #1
 80078de:	e7a5      	b.n	800782c <_svfiprintf_r+0xd4>
 80078e0:	2300      	movs	r3, #0
 80078e2:	3401      	adds	r4, #1
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	4619      	mov	r1, r3
 80078e8:	f04f 0c0a 	mov.w	ip, #10
 80078ec:	4620      	mov	r0, r4
 80078ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078f2:	3a30      	subs	r2, #48	; 0x30
 80078f4:	2a09      	cmp	r2, #9
 80078f6:	d903      	bls.n	8007900 <_svfiprintf_r+0x1a8>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0c5      	beq.n	8007888 <_svfiprintf_r+0x130>
 80078fc:	9105      	str	r1, [sp, #20]
 80078fe:	e7c3      	b.n	8007888 <_svfiprintf_r+0x130>
 8007900:	fb0c 2101 	mla	r1, ip, r1, r2
 8007904:	4604      	mov	r4, r0
 8007906:	2301      	movs	r3, #1
 8007908:	e7f0      	b.n	80078ec <_svfiprintf_r+0x194>
 800790a:	ab03      	add	r3, sp, #12
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	462a      	mov	r2, r5
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <_svfiprintf_r+0x1f8>)
 8007912:	a904      	add	r1, sp, #16
 8007914:	4638      	mov	r0, r7
 8007916:	f7fd fd37 	bl	8005388 <_printf_float>
 800791a:	1c42      	adds	r2, r0, #1
 800791c:	4606      	mov	r6, r0
 800791e:	d1d6      	bne.n	80078ce <_svfiprintf_r+0x176>
 8007920:	89ab      	ldrh	r3, [r5, #12]
 8007922:	065b      	lsls	r3, r3, #25
 8007924:	f53f af2c 	bmi.w	8007780 <_svfiprintf_r+0x28>
 8007928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800792a:	b01d      	add	sp, #116	; 0x74
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	ab03      	add	r3, sp, #12
 8007932:	9300      	str	r3, [sp, #0]
 8007934:	462a      	mov	r2, r5
 8007936:	4b06      	ldr	r3, [pc, #24]	; (8007950 <_svfiprintf_r+0x1f8>)
 8007938:	a904      	add	r1, sp, #16
 800793a:	4638      	mov	r0, r7
 800793c:	f7fd ffc8 	bl	80058d0 <_printf_i>
 8007940:	e7eb      	b.n	800791a <_svfiprintf_r+0x1c2>
 8007942:	bf00      	nop
 8007944:	080087f4 	.word	0x080087f4
 8007948:	080087fe 	.word	0x080087fe
 800794c:	08005389 	.word	0x08005389
 8007950:	080076a1 	.word	0x080076a1
 8007954:	080087fa 	.word	0x080087fa

08007958 <__sfputc_r>:
 8007958:	6893      	ldr	r3, [r2, #8]
 800795a:	3b01      	subs	r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	b410      	push	{r4}
 8007960:	6093      	str	r3, [r2, #8]
 8007962:	da08      	bge.n	8007976 <__sfputc_r+0x1e>
 8007964:	6994      	ldr	r4, [r2, #24]
 8007966:	42a3      	cmp	r3, r4
 8007968:	db01      	blt.n	800796e <__sfputc_r+0x16>
 800796a:	290a      	cmp	r1, #10
 800796c:	d103      	bne.n	8007976 <__sfputc_r+0x1e>
 800796e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007972:	f7fe b991 	b.w	8005c98 <__swbuf_r>
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	1c58      	adds	r0, r3, #1
 800797a:	6010      	str	r0, [r2, #0]
 800797c:	7019      	strb	r1, [r3, #0]
 800797e:	4608      	mov	r0, r1
 8007980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007984:	4770      	bx	lr

08007986 <__sfputs_r>:
 8007986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	4614      	mov	r4, r2
 800798e:	18d5      	adds	r5, r2, r3
 8007990:	42ac      	cmp	r4, r5
 8007992:	d101      	bne.n	8007998 <__sfputs_r+0x12>
 8007994:	2000      	movs	r0, #0
 8007996:	e007      	b.n	80079a8 <__sfputs_r+0x22>
 8007998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799c:	463a      	mov	r2, r7
 800799e:	4630      	mov	r0, r6
 80079a0:	f7ff ffda 	bl	8007958 <__sfputc_r>
 80079a4:	1c43      	adds	r3, r0, #1
 80079a6:	d1f3      	bne.n	8007990 <__sfputs_r+0xa>
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079ac <_vfiprintf_r>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	460d      	mov	r5, r1
 80079b2:	b09d      	sub	sp, #116	; 0x74
 80079b4:	4614      	mov	r4, r2
 80079b6:	4698      	mov	r8, r3
 80079b8:	4606      	mov	r6, r0
 80079ba:	b118      	cbz	r0, 80079c4 <_vfiprintf_r+0x18>
 80079bc:	6983      	ldr	r3, [r0, #24]
 80079be:	b90b      	cbnz	r3, 80079c4 <_vfiprintf_r+0x18>
 80079c0:	f7ff f9be 	bl	8006d40 <__sinit>
 80079c4:	4b89      	ldr	r3, [pc, #548]	; (8007bec <_vfiprintf_r+0x240>)
 80079c6:	429d      	cmp	r5, r3
 80079c8:	d11b      	bne.n	8007a02 <_vfiprintf_r+0x56>
 80079ca:	6875      	ldr	r5, [r6, #4]
 80079cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ce:	07d9      	lsls	r1, r3, #31
 80079d0:	d405      	bmi.n	80079de <_vfiprintf_r+0x32>
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	059a      	lsls	r2, r3, #22
 80079d6:	d402      	bmi.n	80079de <_vfiprintf_r+0x32>
 80079d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079da:	f7ff fa54 	bl	8006e86 <__retarget_lock_acquire_recursive>
 80079de:	89ab      	ldrh	r3, [r5, #12]
 80079e0:	071b      	lsls	r3, r3, #28
 80079e2:	d501      	bpl.n	80079e8 <_vfiprintf_r+0x3c>
 80079e4:	692b      	ldr	r3, [r5, #16]
 80079e6:	b9eb      	cbnz	r3, 8007a24 <_vfiprintf_r+0x78>
 80079e8:	4629      	mov	r1, r5
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7fe f9a6 	bl	8005d3c <__swsetup_r>
 80079f0:	b1c0      	cbz	r0, 8007a24 <_vfiprintf_r+0x78>
 80079f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f4:	07dc      	lsls	r4, r3, #31
 80079f6:	d50e      	bpl.n	8007a16 <_vfiprintf_r+0x6a>
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	b01d      	add	sp, #116	; 0x74
 80079fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a02:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <_vfiprintf_r+0x244>)
 8007a04:	429d      	cmp	r5, r3
 8007a06:	d101      	bne.n	8007a0c <_vfiprintf_r+0x60>
 8007a08:	68b5      	ldr	r5, [r6, #8]
 8007a0a:	e7df      	b.n	80079cc <_vfiprintf_r+0x20>
 8007a0c:	4b79      	ldr	r3, [pc, #484]	; (8007bf4 <_vfiprintf_r+0x248>)
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	bf08      	it	eq
 8007a12:	68f5      	ldreq	r5, [r6, #12]
 8007a14:	e7da      	b.n	80079cc <_vfiprintf_r+0x20>
 8007a16:	89ab      	ldrh	r3, [r5, #12]
 8007a18:	0598      	lsls	r0, r3, #22
 8007a1a:	d4ed      	bmi.n	80079f8 <_vfiprintf_r+0x4c>
 8007a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1e:	f7ff fa33 	bl	8006e88 <__retarget_lock_release_recursive>
 8007a22:	e7e9      	b.n	80079f8 <_vfiprintf_r+0x4c>
 8007a24:	2300      	movs	r3, #0
 8007a26:	9309      	str	r3, [sp, #36]	; 0x24
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a32:	2330      	movs	r3, #48	; 0x30
 8007a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bf8 <_vfiprintf_r+0x24c>
 8007a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a3c:	f04f 0901 	mov.w	r9, #1
 8007a40:	4623      	mov	r3, r4
 8007a42:	469a      	mov	sl, r3
 8007a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a48:	b10a      	cbz	r2, 8007a4e <_vfiprintf_r+0xa2>
 8007a4a:	2a25      	cmp	r2, #37	; 0x25
 8007a4c:	d1f9      	bne.n	8007a42 <_vfiprintf_r+0x96>
 8007a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a52:	d00b      	beq.n	8007a6c <_vfiprintf_r+0xc0>
 8007a54:	465b      	mov	r3, fp
 8007a56:	4622      	mov	r2, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff ff93 	bl	8007986 <__sfputs_r>
 8007a60:	3001      	adds	r0, #1
 8007a62:	f000 80aa 	beq.w	8007bba <_vfiprintf_r+0x20e>
 8007a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a68:	445a      	add	r2, fp
 8007a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 80a2 	beq.w	8007bba <_vfiprintf_r+0x20e>
 8007a76:	2300      	movs	r3, #0
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a80:	f10a 0a01 	add.w	sl, sl, #1
 8007a84:	9304      	str	r3, [sp, #16]
 8007a86:	9307      	str	r3, [sp, #28]
 8007a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8e:	4654      	mov	r4, sl
 8007a90:	2205      	movs	r2, #5
 8007a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a96:	4858      	ldr	r0, [pc, #352]	; (8007bf8 <_vfiprintf_r+0x24c>)
 8007a98:	f7f8 fbc2 	bl	8000220 <memchr>
 8007a9c:	9a04      	ldr	r2, [sp, #16]
 8007a9e:	b9d8      	cbnz	r0, 8007ad8 <_vfiprintf_r+0x12c>
 8007aa0:	06d1      	lsls	r1, r2, #27
 8007aa2:	bf44      	itt	mi
 8007aa4:	2320      	movmi	r3, #32
 8007aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aaa:	0713      	lsls	r3, r2, #28
 8007aac:	bf44      	itt	mi
 8007aae:	232b      	movmi	r3, #43	; 0x2b
 8007ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aba:	d015      	beq.n	8007ae8 <_vfiprintf_r+0x13c>
 8007abc:	9a07      	ldr	r2, [sp, #28]
 8007abe:	4654      	mov	r4, sl
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f04f 0c0a 	mov.w	ip, #10
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007acc:	3b30      	subs	r3, #48	; 0x30
 8007ace:	2b09      	cmp	r3, #9
 8007ad0:	d94e      	bls.n	8007b70 <_vfiprintf_r+0x1c4>
 8007ad2:	b1b0      	cbz	r0, 8007b02 <_vfiprintf_r+0x156>
 8007ad4:	9207      	str	r2, [sp, #28]
 8007ad6:	e014      	b.n	8007b02 <_vfiprintf_r+0x156>
 8007ad8:	eba0 0308 	sub.w	r3, r0, r8
 8007adc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	46a2      	mov	sl, r4
 8007ae6:	e7d2      	b.n	8007a8e <_vfiprintf_r+0xe2>
 8007ae8:	9b03      	ldr	r3, [sp, #12]
 8007aea:	1d19      	adds	r1, r3, #4
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	9103      	str	r1, [sp, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfbb      	ittet	lt
 8007af4:	425b      	neglt	r3, r3
 8007af6:	f042 0202 	orrlt.w	r2, r2, #2
 8007afa:	9307      	strge	r3, [sp, #28]
 8007afc:	9307      	strlt	r3, [sp, #28]
 8007afe:	bfb8      	it	lt
 8007b00:	9204      	strlt	r2, [sp, #16]
 8007b02:	7823      	ldrb	r3, [r4, #0]
 8007b04:	2b2e      	cmp	r3, #46	; 0x2e
 8007b06:	d10c      	bne.n	8007b22 <_vfiprintf_r+0x176>
 8007b08:	7863      	ldrb	r3, [r4, #1]
 8007b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b0c:	d135      	bne.n	8007b7a <_vfiprintf_r+0x1ce>
 8007b0e:	9b03      	ldr	r3, [sp, #12]
 8007b10:	1d1a      	adds	r2, r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	9203      	str	r2, [sp, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	bfb8      	it	lt
 8007b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b1e:	3402      	adds	r4, #2
 8007b20:	9305      	str	r3, [sp, #20]
 8007b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c08 <_vfiprintf_r+0x25c>
 8007b26:	7821      	ldrb	r1, [r4, #0]
 8007b28:	2203      	movs	r2, #3
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	f7f8 fb78 	bl	8000220 <memchr>
 8007b30:	b140      	cbz	r0, 8007b44 <_vfiprintf_r+0x198>
 8007b32:	2340      	movs	r3, #64	; 0x40
 8007b34:	eba0 000a 	sub.w	r0, r0, sl
 8007b38:	fa03 f000 	lsl.w	r0, r3, r0
 8007b3c:	9b04      	ldr	r3, [sp, #16]
 8007b3e:	4303      	orrs	r3, r0
 8007b40:	3401      	adds	r4, #1
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b48:	482c      	ldr	r0, [pc, #176]	; (8007bfc <_vfiprintf_r+0x250>)
 8007b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b4e:	2206      	movs	r2, #6
 8007b50:	f7f8 fb66 	bl	8000220 <memchr>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d03f      	beq.n	8007bd8 <_vfiprintf_r+0x22c>
 8007b58:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <_vfiprintf_r+0x254>)
 8007b5a:	bb1b      	cbnz	r3, 8007ba4 <_vfiprintf_r+0x1f8>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	3307      	adds	r3, #7
 8007b60:	f023 0307 	bic.w	r3, r3, #7
 8007b64:	3308      	adds	r3, #8
 8007b66:	9303      	str	r3, [sp, #12]
 8007b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b6a:	443b      	add	r3, r7
 8007b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6e:	e767      	b.n	8007a40 <_vfiprintf_r+0x94>
 8007b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b74:	460c      	mov	r4, r1
 8007b76:	2001      	movs	r0, #1
 8007b78:	e7a5      	b.n	8007ac6 <_vfiprintf_r+0x11a>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	3401      	adds	r4, #1
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	4619      	mov	r1, r3
 8007b82:	f04f 0c0a 	mov.w	ip, #10
 8007b86:	4620      	mov	r0, r4
 8007b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b8c:	3a30      	subs	r2, #48	; 0x30
 8007b8e:	2a09      	cmp	r2, #9
 8007b90:	d903      	bls.n	8007b9a <_vfiprintf_r+0x1ee>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d0c5      	beq.n	8007b22 <_vfiprintf_r+0x176>
 8007b96:	9105      	str	r1, [sp, #20]
 8007b98:	e7c3      	b.n	8007b22 <_vfiprintf_r+0x176>
 8007b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e7f0      	b.n	8007b86 <_vfiprintf_r+0x1da>
 8007ba4:	ab03      	add	r3, sp, #12
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4b16      	ldr	r3, [pc, #88]	; (8007c04 <_vfiprintf_r+0x258>)
 8007bac:	a904      	add	r1, sp, #16
 8007bae:	4630      	mov	r0, r6
 8007bb0:	f7fd fbea 	bl	8005388 <_printf_float>
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	1c78      	adds	r0, r7, #1
 8007bb8:	d1d6      	bne.n	8007b68 <_vfiprintf_r+0x1bc>
 8007bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bbc:	07d9      	lsls	r1, r3, #31
 8007bbe:	d405      	bmi.n	8007bcc <_vfiprintf_r+0x220>
 8007bc0:	89ab      	ldrh	r3, [r5, #12]
 8007bc2:	059a      	lsls	r2, r3, #22
 8007bc4:	d402      	bmi.n	8007bcc <_vfiprintf_r+0x220>
 8007bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc8:	f7ff f95e 	bl	8006e88 <__retarget_lock_release_recursive>
 8007bcc:	89ab      	ldrh	r3, [r5, #12]
 8007bce:	065b      	lsls	r3, r3, #25
 8007bd0:	f53f af12 	bmi.w	80079f8 <_vfiprintf_r+0x4c>
 8007bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd6:	e711      	b.n	80079fc <_vfiprintf_r+0x50>
 8007bd8:	ab03      	add	r3, sp, #12
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	462a      	mov	r2, r5
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <_vfiprintf_r+0x258>)
 8007be0:	a904      	add	r1, sp, #16
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7fd fe74 	bl	80058d0 <_printf_i>
 8007be8:	e7e4      	b.n	8007bb4 <_vfiprintf_r+0x208>
 8007bea:	bf00      	nop
 8007bec:	08008658 	.word	0x08008658
 8007bf0:	08008678 	.word	0x08008678
 8007bf4:	08008638 	.word	0x08008638
 8007bf8:	080087f4 	.word	0x080087f4
 8007bfc:	080087fe 	.word	0x080087fe
 8007c00:	08005389 	.word	0x08005389
 8007c04:	08007987 	.word	0x08007987
 8007c08:	080087fa 	.word	0x080087fa

08007c0c <__sread>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	460c      	mov	r4, r1
 8007c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c14:	f000 f920 	bl	8007e58 <_read_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	bfab      	itete	ge
 8007c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c20:	181b      	addge	r3, r3, r0
 8007c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c26:	bfac      	ite	ge
 8007c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c2a:	81a3      	strhlt	r3, [r4, #12]
 8007c2c:	bd10      	pop	{r4, pc}

08007c2e <__swrite>:
 8007c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c32:	461f      	mov	r7, r3
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	05db      	lsls	r3, r3, #23
 8007c38:	4605      	mov	r5, r0
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4616      	mov	r6, r2
 8007c3e:	d505      	bpl.n	8007c4c <__swrite+0x1e>
 8007c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2200      	movs	r2, #0
 8007c48:	f000 f898 	bl	8007d7c <_lseek_r>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	4632      	mov	r2, r6
 8007c5a:	463b      	mov	r3, r7
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c62:	f000 b817 	b.w	8007c94 <_write_r>

08007c66 <__sseek>:
 8007c66:	b510      	push	{r4, lr}
 8007c68:	460c      	mov	r4, r1
 8007c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6e:	f000 f885 	bl	8007d7c <_lseek_r>
 8007c72:	1c43      	adds	r3, r0, #1
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	bf15      	itete	ne
 8007c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c82:	81a3      	strheq	r3, [r4, #12]
 8007c84:	bf18      	it	ne
 8007c86:	81a3      	strhne	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__sclose>:
 8007c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8e:	f000 b831 	b.w	8007cf4 <_close_r>
	...

08007c94 <_write_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d07      	ldr	r5, [pc, #28]	; (8007cb4 <_write_r+0x20>)
 8007c98:	4604      	mov	r4, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	602a      	str	r2, [r5, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fa fb43 	bl	800232e <_write>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_write_r+0x1e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_write_r+0x1e>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20000488 	.word	0x20000488

08007cb8 <__assert_func>:
 8007cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cba:	4614      	mov	r4, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <__assert_func+0x2c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	68d8      	ldr	r0, [r3, #12]
 8007cc6:	b14c      	cbz	r4, 8007cdc <__assert_func+0x24>
 8007cc8:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <__assert_func+0x30>)
 8007cca:	9100      	str	r1, [sp, #0]
 8007ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cd0:	4906      	ldr	r1, [pc, #24]	; (8007cec <__assert_func+0x34>)
 8007cd2:	462b      	mov	r3, r5
 8007cd4:	f000 f81e 	bl	8007d14 <fiprintf>
 8007cd8:	f000 f8dd 	bl	8007e96 <abort>
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <__assert_func+0x38>)
 8007cde:	461c      	mov	r4, r3
 8007ce0:	e7f3      	b.n	8007cca <__assert_func+0x12>
 8007ce2:	bf00      	nop
 8007ce4:	20000014 	.word	0x20000014
 8007ce8:	08008805 	.word	0x08008805
 8007cec:	08008812 	.word	0x08008812
 8007cf0:	08008840 	.word	0x08008840

08007cf4 <_close_r>:
 8007cf4:	b538      	push	{r3, r4, r5, lr}
 8007cf6:	4d06      	ldr	r5, [pc, #24]	; (8007d10 <_close_r+0x1c>)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	602b      	str	r3, [r5, #0]
 8007d00:	f7fa fb31 	bl	8002366 <_close>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_close_r+0x1a>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_close_r+0x1a>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000488 	.word	0x20000488

08007d14 <fiprintf>:
 8007d14:	b40e      	push	{r1, r2, r3}
 8007d16:	b503      	push	{r0, r1, lr}
 8007d18:	4601      	mov	r1, r0
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	4805      	ldr	r0, [pc, #20]	; (8007d34 <fiprintf+0x20>)
 8007d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d22:	6800      	ldr	r0, [r0, #0]
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	f7ff fe41 	bl	80079ac <_vfiprintf_r>
 8007d2a:	b002      	add	sp, #8
 8007d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d30:	b003      	add	sp, #12
 8007d32:	4770      	bx	lr
 8007d34:	20000014 	.word	0x20000014

08007d38 <_fstat_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d07      	ldr	r5, [pc, #28]	; (8007d58 <_fstat_r+0x20>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	4611      	mov	r1, r2
 8007d44:	602b      	str	r3, [r5, #0]
 8007d46:	f7fa fb1a 	bl	800237e <_fstat>
 8007d4a:	1c43      	adds	r3, r0, #1
 8007d4c:	d102      	bne.n	8007d54 <_fstat_r+0x1c>
 8007d4e:	682b      	ldr	r3, [r5, #0]
 8007d50:	b103      	cbz	r3, 8007d54 <_fstat_r+0x1c>
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
 8007d56:	bf00      	nop
 8007d58:	20000488 	.word	0x20000488

08007d5c <_isatty_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_isatty_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fa fb19 	bl	800239e <_isatty>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_isatty_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_isatty_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000488 	.word	0x20000488

08007d7c <_lseek_r>:
 8007d7c:	b538      	push	{r3, r4, r5, lr}
 8007d7e:	4d07      	ldr	r5, [pc, #28]	; (8007d9c <_lseek_r+0x20>)
 8007d80:	4604      	mov	r4, r0
 8007d82:	4608      	mov	r0, r1
 8007d84:	4611      	mov	r1, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	602a      	str	r2, [r5, #0]
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7fa fb12 	bl	80023b4 <_lseek>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_lseek_r+0x1e>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_lseek_r+0x1e>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20000488 	.word	0x20000488

08007da0 <__ascii_mbtowc>:
 8007da0:	b082      	sub	sp, #8
 8007da2:	b901      	cbnz	r1, 8007da6 <__ascii_mbtowc+0x6>
 8007da4:	a901      	add	r1, sp, #4
 8007da6:	b142      	cbz	r2, 8007dba <__ascii_mbtowc+0x1a>
 8007da8:	b14b      	cbz	r3, 8007dbe <__ascii_mbtowc+0x1e>
 8007daa:	7813      	ldrb	r3, [r2, #0]
 8007dac:	600b      	str	r3, [r1, #0]
 8007dae:	7812      	ldrb	r2, [r2, #0]
 8007db0:	1e10      	subs	r0, r2, #0
 8007db2:	bf18      	it	ne
 8007db4:	2001      	movne	r0, #1
 8007db6:	b002      	add	sp, #8
 8007db8:	4770      	bx	lr
 8007dba:	4610      	mov	r0, r2
 8007dbc:	e7fb      	b.n	8007db6 <__ascii_mbtowc+0x16>
 8007dbe:	f06f 0001 	mvn.w	r0, #1
 8007dc2:	e7f8      	b.n	8007db6 <__ascii_mbtowc+0x16>

08007dc4 <memmove>:
 8007dc4:	4288      	cmp	r0, r1
 8007dc6:	b510      	push	{r4, lr}
 8007dc8:	eb01 0402 	add.w	r4, r1, r2
 8007dcc:	d902      	bls.n	8007dd4 <memmove+0x10>
 8007dce:	4284      	cmp	r4, r0
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	d807      	bhi.n	8007de4 <memmove+0x20>
 8007dd4:	1e43      	subs	r3, r0, #1
 8007dd6:	42a1      	cmp	r1, r4
 8007dd8:	d008      	beq.n	8007dec <memmove+0x28>
 8007dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007de2:	e7f8      	b.n	8007dd6 <memmove+0x12>
 8007de4:	4402      	add	r2, r0
 8007de6:	4601      	mov	r1, r0
 8007de8:	428a      	cmp	r2, r1
 8007dea:	d100      	bne.n	8007dee <memmove+0x2a>
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007df6:	e7f7      	b.n	8007de8 <memmove+0x24>

08007df8 <_realloc_r>:
 8007df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4614      	mov	r4, r2
 8007e00:	460e      	mov	r6, r1
 8007e02:	b921      	cbnz	r1, 8007e0e <_realloc_r+0x16>
 8007e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	4611      	mov	r1, r2
 8007e0a:	f7fd b9a9 	b.w	8005160 <_malloc_r>
 8007e0e:	b92a      	cbnz	r2, 8007e1c <_realloc_r+0x24>
 8007e10:	f7fd f93a 	bl	8005088 <_free_r>
 8007e14:	4625      	mov	r5, r4
 8007e16:	4628      	mov	r0, r5
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e1c:	f000 f842 	bl	8007ea4 <_malloc_usable_size_r>
 8007e20:	4284      	cmp	r4, r0
 8007e22:	4607      	mov	r7, r0
 8007e24:	d802      	bhi.n	8007e2c <_realloc_r+0x34>
 8007e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e2a:	d812      	bhi.n	8007e52 <_realloc_r+0x5a>
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	4640      	mov	r0, r8
 8007e30:	f7fd f996 	bl	8005160 <_malloc_r>
 8007e34:	4605      	mov	r5, r0
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0ed      	beq.n	8007e16 <_realloc_r+0x1e>
 8007e3a:	42bc      	cmp	r4, r7
 8007e3c:	4622      	mov	r2, r4
 8007e3e:	4631      	mov	r1, r6
 8007e40:	bf28      	it	cs
 8007e42:	463a      	movcs	r2, r7
 8007e44:	f7fd f90a 	bl	800505c <memcpy>
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	f7fd f91c 	bl	8005088 <_free_r>
 8007e50:	e7e1      	b.n	8007e16 <_realloc_r+0x1e>
 8007e52:	4635      	mov	r5, r6
 8007e54:	e7df      	b.n	8007e16 <_realloc_r+0x1e>
	...

08007e58 <_read_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d07      	ldr	r5, [pc, #28]	; (8007e78 <_read_r+0x20>)
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	4608      	mov	r0, r1
 8007e60:	4611      	mov	r1, r2
 8007e62:	2200      	movs	r2, #0
 8007e64:	602a      	str	r2, [r5, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	f7fa fa44 	bl	80022f4 <_read>
 8007e6c:	1c43      	adds	r3, r0, #1
 8007e6e:	d102      	bne.n	8007e76 <_read_r+0x1e>
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	b103      	cbz	r3, 8007e76 <_read_r+0x1e>
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	bd38      	pop	{r3, r4, r5, pc}
 8007e78:	20000488 	.word	0x20000488

08007e7c <__ascii_wctomb>:
 8007e7c:	b149      	cbz	r1, 8007e92 <__ascii_wctomb+0x16>
 8007e7e:	2aff      	cmp	r2, #255	; 0xff
 8007e80:	bf85      	ittet	hi
 8007e82:	238a      	movhi	r3, #138	; 0x8a
 8007e84:	6003      	strhi	r3, [r0, #0]
 8007e86:	700a      	strbls	r2, [r1, #0]
 8007e88:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e8c:	bf98      	it	ls
 8007e8e:	2001      	movls	r0, #1
 8007e90:	4770      	bx	lr
 8007e92:	4608      	mov	r0, r1
 8007e94:	4770      	bx	lr

08007e96 <abort>:
 8007e96:	b508      	push	{r3, lr}
 8007e98:	2006      	movs	r0, #6
 8007e9a:	f000 f833 	bl	8007f04 <raise>
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f7fa fa1e 	bl	80022e0 <_exit>

08007ea4 <_malloc_usable_size_r>:
 8007ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ea8:	1f18      	subs	r0, r3, #4
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfbc      	itt	lt
 8007eae:	580b      	ldrlt	r3, [r1, r0]
 8007eb0:	18c0      	addlt	r0, r0, r3
 8007eb2:	4770      	bx	lr

08007eb4 <_raise_r>:
 8007eb4:	291f      	cmp	r1, #31
 8007eb6:	b538      	push	{r3, r4, r5, lr}
 8007eb8:	4604      	mov	r4, r0
 8007eba:	460d      	mov	r5, r1
 8007ebc:	d904      	bls.n	8007ec8 <_raise_r+0x14>
 8007ebe:	2316      	movs	r3, #22
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec6:	bd38      	pop	{r3, r4, r5, pc}
 8007ec8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007eca:	b112      	cbz	r2, 8007ed2 <_raise_r+0x1e>
 8007ecc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ed0:	b94b      	cbnz	r3, 8007ee6 <_raise_r+0x32>
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f830 	bl	8007f38 <_getpid_r>
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4601      	mov	r1, r0
 8007edc:	4620      	mov	r0, r4
 8007ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee2:	f000 b817 	b.w	8007f14 <_kill_r>
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d00a      	beq.n	8007f00 <_raise_r+0x4c>
 8007eea:	1c59      	adds	r1, r3, #1
 8007eec:	d103      	bne.n	8007ef6 <_raise_r+0x42>
 8007eee:	2316      	movs	r3, #22
 8007ef0:	6003      	str	r3, [r0, #0]
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	e7e7      	b.n	8007ec6 <_raise_r+0x12>
 8007ef6:	2400      	movs	r4, #0
 8007ef8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007efc:	4628      	mov	r0, r5
 8007efe:	4798      	blx	r3
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7e0      	b.n	8007ec6 <_raise_r+0x12>

08007f04 <raise>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <raise+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f7ff bfd3 	b.w	8007eb4 <_raise_r>
 8007f0e:	bf00      	nop
 8007f10:	20000014 	.word	0x20000014

08007f14 <_kill_r>:
 8007f14:	b538      	push	{r3, r4, r5, lr}
 8007f16:	4d07      	ldr	r5, [pc, #28]	; (8007f34 <_kill_r+0x20>)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	602b      	str	r3, [r5, #0]
 8007f22:	f7fa f9cd 	bl	80022c0 <_kill>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d102      	bne.n	8007f30 <_kill_r+0x1c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	b103      	cbz	r3, 8007f30 <_kill_r+0x1c>
 8007f2e:	6023      	str	r3, [r4, #0]
 8007f30:	bd38      	pop	{r3, r4, r5, pc}
 8007f32:	bf00      	nop
 8007f34:	20000488 	.word	0x20000488

08007f38 <_getpid_r>:
 8007f38:	f7fa b9ba 	b.w	80022b0 <_getpid>

08007f3c <_init>:
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	bf00      	nop
 8007f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f42:	bc08      	pop	{r3}
 8007f44:	469e      	mov	lr, r3
 8007f46:	4770      	bx	lr

08007f48 <_fini>:
 8007f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f4a:	bf00      	nop
 8007f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f4e:	bc08      	pop	{r3}
 8007f50:	469e      	mov	lr, r3
 8007f52:	4770      	bx	lr
