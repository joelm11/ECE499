
499Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007630  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052dc  08007800  08007800  00017800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cadc  0800cadc  0001cadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae4  0800cae4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae4  0800cae4  0001cae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cae8  0800cae8  0001cae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800caec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  200001dc  0800ccc8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800ccc8  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e72  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e1  00000000  00000000  0003407e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00037360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00038688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f34  00000000  00000000  00039818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b1c  00000000  00000000  0005074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008631c  00000000  00000000  00068268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fb0  00000000  00000000  000ee5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080077e8 	.word	0x080077e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080077e8 	.word	0x080077e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&_dat, 1, 500);
 8000ef6:	1df9      	adds	r1, r7, #7
 8000ef8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efc:	2201      	movs	r2, #1
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <DEV_SPI_WRite+0x20>)
 8000f00:	f002 fecd 	bl	8003c9e <HAL_SPI_Transmit>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200002ac 	.word	0x200002ac

08000f10 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f1a:	f001 feb1 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2108      	movs	r1, #8
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f24:	f001 feac 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DEV_Module_Init+0x28>)
 8000f2e:	f001 fea7 	bl	8002c80 <HAL_GPIO_WritePin>
//    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40020000 	.word	0x40020000

08000f3c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4604      	mov	r4, r0
 8000f44:	4608      	mov	r0, r1
 8000f46:	4611      	mov	r1, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	80fb      	strh	r3, [r7, #6]
 8000f4e:	4603      	mov	r3, r0
 8000f50:	80bb      	strh	r3, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]
 8000f56:	4613      	mov	r3, r2
 8000f58:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <Paint_NewImage+0x90>)
 8000f5c:	88fb      	ldrh	r3, [r7, #6]
 8000f5e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000f60:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <Paint_NewImage+0x90>)
 8000f62:	88bb      	ldrh	r3, [r7, #4]
 8000f64:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <Paint_NewImage+0x90>)
 8000f68:	883b      	ldrh	r3, [r7, #0]
 8000f6a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <Paint_NewImage+0x90>)
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <Paint_NewImage+0x90>)
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <Paint_NewImage+0x90>)
 8000f7a:	8a5b      	ldrh	r3, [r3, #18]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <Paint_NewImage+0x90>)
 8000f82:	8a9b      	ldrh	r3, [r3, #20]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4811      	ldr	r0, [pc, #68]	; (8000fd0 <Paint_NewImage+0x94>)
 8000f8a:	f004 fc5f 	bl	800584c <iprintf>
   
    Paint.Rotate = Rotate;
 8000f8e:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <Paint_NewImage+0x90>)
 8000f90:	887b      	ldrh	r3, [r7, #2]
 8000f92:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <Paint_NewImage+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d002      	beq.n	8000fa6 <Paint_NewImage+0x6a>
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	2bb4      	cmp	r3, #180	; 0xb4
 8000fa4:	d106      	bne.n	8000fb4 <Paint_NewImage+0x78>
        Paint.Width = Width;
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <Paint_NewImage+0x90>)
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <Paint_NewImage+0x90>)
 8000fae:	88bb      	ldrh	r3, [r7, #4]
 8000fb0:	80d3      	strh	r3, [r2, #6]
 8000fb2:	e006      	b.n	8000fc2 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 8000fb4:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <Paint_NewImage+0x90>)
 8000fb6:	88bb      	ldrh	r3, [r7, #4]
 8000fb8:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <Paint_NewImage+0x90>)
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	80d3      	strh	r3, [r2, #6]
    }
}
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001f8 	.word	0x200001f8
 8000fd0:	08007800 	.word	0x08007800

08000fd4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <Paint_SetClearFuntion+0x1c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000214 	.word	0x20000214

08000ff4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <Paint_SetDisplayFuntion+0x1c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000210 	.word	0x20000210

08001014 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	460b      	mov	r3, r1
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8001026:	4b4f      	ldr	r3, [pc, #316]	; (8001164 <Paint_SetPixel+0x150>)
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	b29b      	uxth	r3, r3
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	429a      	cmp	r2, r3
 8001030:	f200 808d 	bhi.w	800114e <Paint_SetPixel+0x13a>
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <Paint_SetPixel+0x150>)
 8001036:	88db      	ldrh	r3, [r3, #6]
 8001038:	b29b      	uxth	r3, r3
 800103a:	88ba      	ldrh	r2, [r7, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	f200 8086 	bhi.w	800114e <Paint_SetPixel+0x13a>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <Paint_SetPixel+0x150>)
 8001044:	89db      	ldrh	r3, [r3, #14]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800104c:	d02c      	beq.n	80010a8 <Paint_SetPixel+0x94>
 800104e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001052:	dc7e      	bgt.n	8001152 <Paint_SetPixel+0x13e>
 8001054:	2bb4      	cmp	r3, #180	; 0xb4
 8001056:	d016      	beq.n	8001086 <Paint_SetPixel+0x72>
 8001058:	2bb4      	cmp	r3, #180	; 0xb4
 800105a:	dc7a      	bgt.n	8001152 <Paint_SetPixel+0x13e>
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <Paint_SetPixel+0x52>
 8001060:	2b5a      	cmp	r3, #90	; 0x5a
 8001062:	d005      	beq.n	8001070 <Paint_SetPixel+0x5c>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 8001064:	e075      	b.n	8001152 <Paint_SetPixel+0x13e>
        X = Xpoint;
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800106a:	88bb      	ldrh	r3, [r7, #4]
 800106c:	81bb      	strh	r3, [r7, #12]
        break;
 800106e:	e026      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Ypoint - 1;
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <Paint_SetPixel+0x150>)
 8001072:	891b      	ldrh	r3, [r3, #8]
 8001074:	b29a      	uxth	r2, r3
 8001076:	88bb      	ldrh	r3, [r7, #4]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	3b01      	subs	r3, #1
 800107e:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 8001080:	88fb      	ldrh	r3, [r7, #6]
 8001082:	81bb      	strh	r3, [r7, #12]
        break;
 8001084:	e01b      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Paint.WidthMemory - Xpoint - 1;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <Paint_SetPixel+0x150>)
 8001088:	891b      	ldrh	r3, [r3, #8]
 800108a:	b29a      	uxth	r2, r3
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	3b01      	subs	r3, #1
 8001094:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <Paint_SetPixel+0x150>)
 8001098:	895b      	ldrh	r3, [r3, #10]
 800109a:	b29a      	uxth	r2, r3
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	3b01      	subs	r3, #1
 80010a4:	81bb      	strh	r3, [r7, #12]
        break;
 80010a6:	e00a      	b.n	80010be <Paint_SetPixel+0xaa>
        X = Ypoint;
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <Paint_SetPixel+0x150>)
 80010ae:	895b      	ldrh	r3, [r3, #10]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3b01      	subs	r3, #1
 80010ba:	81bb      	strh	r3, [r7, #12]
        break;
 80010bc:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <Paint_SetPixel+0x150>)
 80010c0:	8a1b      	ldrh	r3, [r3, #16]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d846      	bhi.n	8001156 <Paint_SetPixel+0x142>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <Paint_SetPixel+0xbc>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	08001127 	.word	0x08001127
 80010d4:	080010e1 	.word	0x080010e1
 80010d8:	080010f3 	.word	0x080010f3
 80010dc:	08001105 	.word	0x08001105
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <Paint_SetPixel+0x150>)
 80010e2:	891b      	ldrh	r3, [r3, #8]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	89fb      	ldrh	r3, [r7, #14]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	3b01      	subs	r3, #1
 80010ee:	81fb      	strh	r3, [r7, #14]
        break;
 80010f0:	e01a      	b.n	8001128 <Paint_SetPixel+0x114>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <Paint_SetPixel+0x150>)
 80010f4:	895b      	ldrh	r3, [r3, #10]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	89bb      	ldrh	r3, [r7, #12]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	3b01      	subs	r3, #1
 8001100:	81bb      	strh	r3, [r7, #12]
        break;
 8001102:	e011      	b.n	8001128 <Paint_SetPixel+0x114>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <Paint_SetPixel+0x150>)
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	b29a      	uxth	r2, r3
 800110a:	89fb      	ldrh	r3, [r7, #14]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	3b01      	subs	r3, #1
 8001112:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <Paint_SetPixel+0x150>)
 8001116:	895b      	ldrh	r3, [r3, #10]
 8001118:	b29a      	uxth	r2, r3
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	b29b      	uxth	r3, r3
 8001120:	3b01      	subs	r3, #1
 8001122:	81bb      	strh	r3, [r7, #12]
        break;
 8001124:	e000      	b.n	8001128 <Paint_SetPixel+0x114>
        break;
 8001126:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <Paint_SetPixel+0x150>)
 800112a:	891b      	ldrh	r3, [r3, #8]
 800112c:	b29b      	uxth	r3, r3
 800112e:	89fa      	ldrh	r2, [r7, #14]
 8001130:	429a      	cmp	r2, r3
 8001132:	d812      	bhi.n	800115a <Paint_SetPixel+0x146>
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <Paint_SetPixel+0x150>)
 8001136:	895b      	ldrh	r3, [r3, #10]
 8001138:	b29b      	uxth	r3, r3
 800113a:	89ba      	ldrh	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d80c      	bhi.n	800115a <Paint_SetPixel+0x146>
//        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <Paint_SetPixel+0x154>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	887a      	ldrh	r2, [r7, #2]
 8001146:	89b9      	ldrh	r1, [r7, #12]
 8001148:	89f8      	ldrh	r0, [r7, #14]
 800114a:	4798      	blx	r3
 800114c:	e006      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 800114e:	bf00      	nop
 8001150:	e004      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <Paint_SetPixel+0x148>
        return;
 800115a:	bf00      	nop
}
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001f8 	.word	0x200001f8
 8001168:	20000210 	.word	0x20000210

0800116c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <Paint_Clear+0x1c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	88fa      	ldrh	r2, [r7, #6]
 800117c:	4610      	mov	r0, r2
 800117e:	4798      	blx	r3
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000214 	.word	0x20000214

0800118c <Paint_DrawImage>:
//
//}


void Paint_DrawImage(const uint16_t *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4603      	mov	r3, r0
 800119c:	817b      	strh	r3, [r7, #10]
 800119e:	460b      	mov	r3, r1
 80011a0:	813b      	strh	r3, [r7, #8]
 80011a2:	4613      	mov	r3, r2
 80011a4:	80fb      	strh	r3, [r7, #6]
    int i,j;
    	for(i = 0; i < H_Image; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e025      	b.n	80011f8 <Paint_DrawImage+0x6c>
    		for(j = 0; j < W_Image; j++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	e01b      	b.n	80011ea <Paint_DrawImage+0x5e>
    			Paint_SetPixel(xStart + i, yStart + j, *(image + (i * W_Image + 1) + j));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	4413      	add	r3, r2
 80011ba:	b298      	uxth	r0, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	893b      	ldrh	r3, [r7, #8]
 80011c2:	4413      	add	r3, r2
 80011c4:	b299      	uxth	r1, r3
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	697a      	ldr	r2, [r7, #20]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4413      	add	r3, r2
 80011d4:	3301      	adds	r3, #1
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	f7ff ff18 	bl	8001014 <Paint_SetPixel>
    		for(j = 0; j < W_Image; j++) {
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	3301      	adds	r3, #1
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbdf      	blt.n	80011b2 <Paint_DrawImage+0x26>
    	for(i = 0; i < H_Image; i++) {
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	8c3b      	ldrh	r3, [r7, #32]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbd5      	blt.n	80011ac <Paint_DrawImage+0x20>
    		}
		}
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 8001210:	2201      	movs	r2, #1
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <LCD_1IN8_Reset+0x38>)
 8001216:	f001 fd33 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800121a:	2064      	movs	r0, #100	; 0x64
 800121c:	f001 fa9e 	bl	800275c <HAL_Delay>
    LCD_1IN8_RST_0;
 8001220:	2200      	movs	r2, #0
 8001222:	2140      	movs	r1, #64	; 0x40
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <LCD_1IN8_Reset+0x38>)
 8001226:	f001 fd2b 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800122a:	2064      	movs	r0, #100	; 0x64
 800122c:	f001 fa96 	bl	800275c <HAL_Delay>
    LCD_1IN8_RST_1;
 8001230:	2201      	movs	r2, #1
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <LCD_1IN8_Reset+0x38>)
 8001236:	f001 fd23 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f001 fa8e 	bl	800275c <HAL_Delay>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40020000 	.word	0x40020000

08001248 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 8001252:	2200      	movs	r2, #0
 8001254:	2110      	movs	r1, #16
 8001256:	4808      	ldr	r0, [pc, #32]	; (8001278 <LCD_1IN8_WriteReg+0x30>)
 8001258:	f001 fd12 	bl	8002c80 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800125c:	2200      	movs	r2, #0
 800125e:	2108      	movs	r1, #8
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <LCD_1IN8_WriteReg+0x30>)
 8001262:	f001 fd0d 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe3f 	bl	8000eec <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40020000 	.word	0x40020000

0800127c <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 8001286:	2201      	movs	r2, #1
 8001288:	2110      	movs	r1, #16
 800128a:	480a      	ldr	r0, [pc, #40]	; (80012b4 <LCD_1IN8_WriteData_8Bit+0x38>)
 800128c:	f001 fcf8 	bl	8002c80 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8001290:	2200      	movs	r2, #0
 8001292:	2108      	movs	r1, #8
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <LCD_1IN8_WriteData_8Bit+0x38>)
 8001296:	f001 fcf3 	bl	8002c80 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe25 	bl	8000eec <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 80012a2:	2201      	movs	r2, #1
 80012a4:	2108      	movs	r1, #8
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <LCD_1IN8_WriteData_8Bit+0x38>)
 80012a8:	f001 fcea 	bl	8002c80 <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40020000 	.word	0x40020000

080012b8 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

static void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 80012c4:	2201      	movs	r2, #1
 80012c6:	2110      	movs	r1, #16
 80012c8:	480e      	ldr	r0, [pc, #56]	; (8001304 <LCD_1IN8_WriteData_NLen16Bit+0x4c>)
 80012ca:	f001 fcd9 	bl	8002c80 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	e00e      	b.n	80012f2 <LCD_1IN8_WriteData_NLen16Bit+0x3a>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29b      	uxth	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe05 	bl	8000eec <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fe00 	bl	8000eec <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3301      	adds	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3ec      	bcc.n	80012d4 <LCD_1IN8_WriteData_NLen16Bit+0x1c>
    }
    //LCD_1IN8_CS_1;
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000

08001308 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800130c:	20b1      	movs	r0, #177	; 0xb1
 800130e:	f7ff ff9b 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001312:	2001      	movs	r0, #1
 8001314:	f7ff ffb2 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001318:	202c      	movs	r0, #44	; 0x2c
 800131a:	f7ff ffaf 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800131e:	202d      	movs	r0, #45	; 0x2d
 8001320:	f7ff ffac 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 8001324:	20b2      	movs	r0, #178	; 0xb2
 8001326:	f7ff ff8f 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff ffa6 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001330:	202c      	movs	r0, #44	; 0x2c
 8001332:	f7ff ffa3 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001336:	202d      	movs	r0, #45	; 0x2d
 8001338:	f7ff ffa0 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800133c:	20b3      	movs	r0, #179	; 0xb3
 800133e:	f7ff ff83 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001342:	2001      	movs	r0, #1
 8001344:	f7ff ff9a 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 8001348:	202c      	movs	r0, #44	; 0x2c
 800134a:	f7ff ff97 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800134e:	202d      	movs	r0, #45	; 0x2d
 8001350:	f7ff ff94 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff ff91 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800135a:	202c      	movs	r0, #44	; 0x2c
 800135c:	f7ff ff8e 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 8001360:	202d      	movs	r0, #45	; 0x2d
 8001362:	f7ff ff8b 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 8001366:	20b4      	movs	r0, #180	; 0xb4
 8001368:	f7ff ff6e 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800136c:	2007      	movs	r0, #7
 800136e:	f7ff ff85 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 8001372:	20c0      	movs	r0, #192	; 0xc0
 8001374:	f7ff ff68 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 8001378:	20a2      	movs	r0, #162	; 0xa2
 800137a:	f7ff ff7f 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff ff7c 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 8001384:	2084      	movs	r0, #132	; 0x84
 8001386:	f7ff ff79 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800138a:	20c1      	movs	r0, #193	; 0xc1
 800138c:	f7ff ff5c 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 8001390:	20c5      	movs	r0, #197	; 0xc5
 8001392:	f7ff ff73 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 8001396:	20c2      	movs	r0, #194	; 0xc2
 8001398:	f7ff ff56 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800139c:	200a      	movs	r0, #10
 800139e:	f7ff ff6d 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ff6a 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 80013a8:	20c3      	movs	r0, #195	; 0xc3
 80013aa:	f7ff ff4d 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80013ae:	208a      	movs	r0, #138	; 0x8a
 80013b0:	f7ff ff64 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 80013b4:	202a      	movs	r0, #42	; 0x2a
 80013b6:	f7ff ff61 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 80013ba:	20c4      	movs	r0, #196	; 0xc4
 80013bc:	f7ff ff44 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 80013c0:	208a      	movs	r0, #138	; 0x8a
 80013c2:	f7ff ff5b 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 80013c6:	20ee      	movs	r0, #238	; 0xee
 80013c8:	f7ff ff58 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 80013cc:	20c5      	movs	r0, #197	; 0xc5
 80013ce:	f7ff ff3b 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 80013d2:	200e      	movs	r0, #14
 80013d4:	f7ff ff52 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 80013d8:	20e0      	movs	r0, #224	; 0xe0
 80013da:	f7ff ff35 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80013de:	200f      	movs	r0, #15
 80013e0:	f7ff ff4c 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 80013e4:	201a      	movs	r0, #26
 80013e6:	f7ff ff49 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f7ff ff46 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 80013f0:	2018      	movs	r0, #24
 80013f2:	f7ff ff43 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 80013f6:	202f      	movs	r0, #47	; 0x2f
 80013f8:	f7ff ff40 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 80013fc:	2028      	movs	r0, #40	; 0x28
 80013fe:	f7ff ff3d 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 8001402:	2020      	movs	r0, #32
 8001404:	f7ff ff3a 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 8001408:	2022      	movs	r0, #34	; 0x22
 800140a:	f7ff ff37 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800140e:	201f      	movs	r0, #31
 8001410:	f7ff ff34 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 8001414:	201b      	movs	r0, #27
 8001416:	f7ff ff31 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800141a:	2023      	movs	r0, #35	; 0x23
 800141c:	f7ff ff2e 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 8001420:	2037      	movs	r0, #55	; 0x37
 8001422:	f7ff ff2b 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff ff28 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800142c:	2007      	movs	r0, #7
 800142e:	f7ff ff25 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 8001432:	2002      	movs	r0, #2
 8001434:	f7ff ff22 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 8001438:	2010      	movs	r0, #16
 800143a:	f7ff ff1f 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800143e:	20e1      	movs	r0, #225	; 0xe1
 8001440:	f7ff ff02 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001444:	200f      	movs	r0, #15
 8001446:	f7ff ff19 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800144a:	201b      	movs	r0, #27
 800144c:	f7ff ff16 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8001450:	200f      	movs	r0, #15
 8001452:	f7ff ff13 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 8001456:	2017      	movs	r0, #23
 8001458:	f7ff ff10 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800145c:	2033      	movs	r0, #51	; 0x33
 800145e:	f7ff ff0d 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 8001462:	202c      	movs	r0, #44	; 0x2c
 8001464:	f7ff ff0a 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8001468:	2029      	movs	r0, #41	; 0x29
 800146a:	f7ff ff07 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800146e:	202e      	movs	r0, #46	; 0x2e
 8001470:	f7ff ff04 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8001474:	2030      	movs	r0, #48	; 0x30
 8001476:	f7ff ff01 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800147a:	2030      	movs	r0, #48	; 0x30
 800147c:	f7ff fefe 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 8001480:	2039      	movs	r0, #57	; 0x39
 8001482:	f7ff fefb 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 8001486:	203f      	movs	r0, #63	; 0x3f
 8001488:	f7ff fef8 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fef5 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 8001492:	2007      	movs	r0, #7
 8001494:	f7ff fef2 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8001498:	2003      	movs	r0, #3
 800149a:	f7ff feef 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800149e:	2010      	movs	r0, #16
 80014a0:	f7ff feec 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 80014a4:	20f0      	movs	r0, #240	; 0xf0
 80014a6:	f7ff fecf 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fee6 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 80014b0:	20f6      	movs	r0, #246	; 0xf6
 80014b2:	f7ff fec9 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fee0 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 80014bc:	203a      	movs	r0, #58	; 0x3a
 80014be:	f7ff fec3 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 80014c2:	2005      	movs	r0, #5
 80014c4:	f7ff feda 	bl	800127c <LCD_1IN8_WriteData_8Bit>

}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 80014d6:	4a34      	ldr	r2, [pc, #208]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d008      	beq.n	80014f4 <LCD_1IN8_SetGramScanWay+0x28>
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <LCD_1IN8_SetGramScanWay+0x28>
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d002      	beq.n	80014f4 <LCD_1IN8_SetGramScanWay+0x28>
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d10c      	bne.n	800150e <LCD_1IN8_SetGramScanWay+0x42>
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 80014f6:	2280      	movs	r2, #128	; 0x80
 80014f8:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;		
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 80014fc:	22a0      	movs	r2, #160	; 0xa0
 80014fe:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001502:	2202      	movs	r2, #2
 8001504:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001508:	2201      	movs	r2, #1
 800150a:	811a      	strh	r2, [r3, #8]
 800150c:	e00b      	b.n	8001526 <LCD_1IN8_SetGramScanWay+0x5a>
	}else{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001510:	22a0      	movs	r2, #160	; 0xa0
 8001512:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001516:	2280      	movs	r2, #128	; 0x80
 8001518:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800151c:	2201      	movs	r2, #1
 800151e:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 8001522:	2202      	movs	r2, #2
 8001524:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 8001526:	2300      	movs	r3, #0
 8001528:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b07      	cmp	r3, #7
 800152e:	d82b      	bhi.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
 8001530:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <LCD_1IN8_SetGramScanWay+0x6c>)
 8001532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001536:	bf00      	nop
 8001538:	08001559 	.word	0x08001559
 800153c:	0800155f 	.word	0x0800155f
 8001540:	08001565 	.word	0x08001565
 8001544:	0800156b 	.word	0x0800156b
 8001548:	08001571 	.word	0x08001571
 800154c:	08001577 	.word	0x08001577
 8001550:	0800157d 	.word	0x0800157d
 8001554:	08001583 	.word	0x08001583
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
        break;
 800155c:	e014      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	81fb      	strh	r3, [r7, #14]
        break;
 8001562:	e011      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	81fb      	strh	r3, [r7, #14]
        break;
 8001568:	e00e      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800156a:	23c0      	movs	r3, #192	; 0xc0
 800156c:	81fb      	strh	r3, [r7, #14]
        break;
 800156e:	e00b      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 8001570:	2320      	movs	r3, #32
 8001572:	81fb      	strh	r3, [r7, #14]
        break;
 8001574:	e008      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8001576:	2360      	movs	r3, #96	; 0x60
 8001578:	81fb      	strh	r3, [r7, #14]
        break;
 800157a:	e005      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	81fb      	strh	r3, [r7, #14]
        break;
 8001580:	e002      	b.n	8001588 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 8001582:	23e0      	movs	r3, #224	; 0xe0
 8001584:	81fb      	strh	r3, [r7, #14]
        break;
 8001586:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8001588:	2036      	movs	r0, #54	; 0x36
 800158a:	f7ff fe5d 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f023 0308 	bic.w	r3, r3, #8
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe6f 	bl	800127c <LCD_1IN8_WriteData_8Bit>

}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000218 	.word	0x20000218

080015ac <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 80015b6:	f7ff fe29 	bl	800120c <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 80015ba:	f7ff fea5 	bl	8001308 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff83 	bl	80014cc <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 80015c6:	20c8      	movs	r0, #200	; 0xc8
 80015c8:	f001 f8c8 	bl	800275c <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 80015cc:	2011      	movs	r0, #17
 80015ce:	f7ff fe3b 	bl	8001248 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 80015d2:	2078      	movs	r0, #120	; 0x78
 80015d4:	f001 f8c2 	bl	800275c <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 80015d8:	2029      	movs	r0, #41	; 0x29
 80015da:	f7ff fe35 	bl	8001248 <LCD_1IN8_WriteReg>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	4623      	mov	r3, r4
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4603      	mov	r3, r0
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	460b      	mov	r3, r1
 8001600:	807b      	strh	r3, [r7, #2]
 8001602:	4613      	mov	r3, r2
 8001604:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 8001606:	202a      	movs	r0, #42	; 0x2a
 8001608:	f7ff fe1e 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fe35 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <LCD_1IN8_SetWindows+0xa8>)
 8001618:	88db      	ldrh	r3, [r3, #6]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fe2b 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fe28 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <LCD_1IN8_SetWindows+0xa8>)
 8001632:	88db      	ldrh	r3, [r3, #6]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	4413      	add	r3, r2
 8001638:	b2db      	uxtb	r3, r3
 800163a:	3b01      	subs	r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe1c 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 8001644:	202b      	movs	r0, #43	; 0x2b
 8001646:	f7ff fdff 	bl	8001248 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800164a:	2000      	movs	r0, #0
 800164c:	f7ff fe16 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <LCD_1IN8_SetWindows+0xa8>)
 8001656:	891b      	ldrh	r3, [r3, #8]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fe0c 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fe09 	bl	800127c <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800166a:	883b      	ldrh	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LCD_1IN8_SetWindows+0xa8>)
 8001670:	891b      	ldrh	r3, [r3, #8]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	4413      	add	r3, r2
 8001676:	b2db      	uxtb	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fdfd 	bl	800127c <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 8001682:	202c      	movs	r0, #44	; 0x2c
 8001684:	f7ff fde0 	bl	8001248 <LCD_1IN8_WriteReg>

}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000218 	.word	0x20000218

08001694 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	460a      	mov	r2, r1
 800169e:	80fb      	strh	r3, [r7, #6]
 80016a0:	4613      	mov	r3, r2
 80016a2:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	88fa      	ldrh	r2, [r7, #6]
 80016a8:	88b9      	ldrh	r1, [r7, #4]
 80016aa:	88f8      	ldrh	r0, [r7, #6]
 80016ac:	f7ff ff9c 	bl	80015e8 <LCD_1IN8_SetWindows>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	460b      	mov	r3, r1
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 80016ca:	88bb      	ldrh	r3, [r7, #4]
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	fb03 f202 	mul.w	r2, r3, r2
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4611      	mov	r1, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fdee 	bl	80012b8 <LCD_1IN8_WriteData_NLen16Bit>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
 80016ee:	460b      	mov	r3, r1
 80016f0:	80bb      	strh	r3, [r7, #4]
 80016f2:	4613      	mov	r3, r2
 80016f4:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) ) {
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <LCD_1IN8_DrawPaint+0x48>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d810      	bhi.n	8001722 <LCD_1IN8_DrawPaint+0x3e>
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <LCD_1IN8_DrawPaint+0x48>)
 8001702:	885b      	ldrh	r3, [r3, #2]
 8001704:	88ba      	ldrh	r2, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d80b      	bhi.n	8001722 <LCD_1IN8_DrawPaint+0x3e>
        LCD_1IN8_SetCursor (Xpoint, Ypoint);
 800170a:	88ba      	ldrh	r2, [r7, #4]
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4611      	mov	r1, r2
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ffbf 	bl	8001694 <LCD_1IN8_SetCursor>
        LCD_1IN8_SetColor ( Color , 1 , 1);
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	2201      	movs	r2, #1
 800171a:	2101      	movs	r1, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffcb 	bl	80016b8 <LCD_1IN8_SetColor>
    }
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000218 	.word	0x20000218

08001730 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, LCD_1IN8_WIDTH, LCD_1IN8_HEIGHT);
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	22a0      	movs	r2, #160	; 0xa0
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff ff51 	bl	80015e8 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8001746:	2201      	movs	r2, #1
 8001748:	2110      	movs	r1, #16
 800174a:	4813      	ldr	r0, [pc, #76]	; (8001798 <LCD_1IN8_Clear+0x68>)
 800174c:	f001 fa98 	bl	8002c80 <HAL_GPIO_WritePin>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001750:	2300      	movs	r3, #0
 8001752:	81fb      	strh	r3, [r7, #14]
 8001754:	e017      	b.n	8001786 <LCD_1IN8_Clear+0x56>
	{
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001756:	2300      	movs	r3, #0
 8001758:	81bb      	strh	r3, [r7, #12]
 800175a:	e00e      	b.n	800177a <LCD_1IN8_Clear+0x4a>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fbc3 	bl	8000eec <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fbbc 	bl	8000eec <DEV_SPI_WRite>
		for(j=0;j<LCD_1IN8_WIDTH;j++)
 8001774:	89bb      	ldrh	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	81bb      	strh	r3, [r7, #12]
 800177a:	89bb      	ldrh	r3, [r7, #12]
 800177c:	2b9f      	cmp	r3, #159	; 0x9f
 800177e:	d9ed      	bls.n	800175c <LCD_1IN8_Clear+0x2c>
    for(i=0;i<LCD_1IN8_HEIGHT;i++)
 8001780:	89fb      	ldrh	r3, [r7, #14]
 8001782:	3301      	adds	r3, #1
 8001784:	81fb      	strh	r3, [r7, #14]
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	2b7f      	cmp	r3, #127	; 0x7f
 800178a:	d9e4      	bls.n	8001756 <LCD_1IN8_Clear+0x26>
			
		}
	}
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020000 	.word	0x40020000

0800179c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a4e      	ldr	r2, [pc, #312]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b45      	ldr	r3, [pc, #276]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a40      	ldr	r2, [pc, #256]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <MX_GPIO_Init+0x158>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b3a      	ldr	r3, [pc, #232]	; (80018f4 <MX_GPIO_Init+0x158>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a39      	ldr	r2, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x158>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <MX_GPIO_Init+0x158>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8001822:	2200      	movs	r2, #0
 8001824:	f242 31b0 	movw	r1, #9136	; 0x23b0
 8001828:	4833      	ldr	r0, [pc, #204]	; (80018f8 <MX_GPIO_Init+0x15c>)
 800182a:	f001 fa29 	bl	8002c80 <HAL_GPIO_WritePin>
                          |LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2158      	movs	r1, #88	; 0x58
 8001832:	4832      	ldr	r0, [pc, #200]	; (80018fc <MX_GPIO_Init+0x160>)
 8001834:	f001 fa24 	bl	8002c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = EN_12V_Pin|SENS_DIS_Pin|DISP_DIS_Pin|LED_R_Pin
 8001838:	f242 33b0 	movw	r3, #9136	; 0x23b0
 800183c:	617b      	str	r3, [r7, #20]
                          |LED_G_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4829      	ldr	r0, [pc, #164]	; (80018f8 <MX_GPIO_Init+0x15c>)
 8001852:	f001 f889 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 8001856:	2358      	movs	r3, #88	; 0x58
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <MX_GPIO_Init+0x160>)
 800186e:	f001 f87b 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TEMP_INT_Pin|IMU_INT1_Pin|IMU_INT2_Pin;
 8001872:	2307      	movs	r3, #7
 8001874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001876:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	481e      	ldr	r0, [pc, #120]	; (8001900 <MX_GPIO_Init+0x164>)
 8001888:	f001 f86e 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DEB_B_Pin;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEB_B_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4817      	ldr	r0, [pc, #92]	; (8001900 <MX_GPIO_Init+0x164>)
 80018a2:	f001 f861 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEB_A_Pin|ROT_SW_Pin;
 80018a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <MX_GPIO_Init+0x164>)
 80018be:	f001 f853 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SEL_0_Pin|SEL_1_Pin|PG_3V3_Pin;
 80018c2:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4809      	ldr	r0, [pc, #36]	; (80018fc <MX_GPIO_Init+0x160>)
 80018d8:	f001 f846 	bl	8002968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2028      	movs	r0, #40	; 0x28
 80018e2:	f001 f817 	bl	8002914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018e6:	2028      	movs	r0, #40	; 0x28
 80018e8:	f001 f830 	bl	800294c <HAL_NVIC_EnableIRQ>

}
 80018ec:	bf00      	nop
 80018ee:	3728      	adds	r7, #40	; 0x28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400

08001904 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C1_Init+0x50>)
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <MX_I2C1_Init+0x54>)
 800190c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C1_Init+0x50>)
 8001910:	4a12      	ldr	r2, [pc, #72]	; (800195c <MX_I2C1_Init+0x58>)
 8001912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C1_Init+0x50>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2C1_Init+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_I2C1_Init+0x50>)
 8001922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2C1_Init+0x50>)
 8001942:	f001 f9f5 	bl	8002d30 <HAL_I2C_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800194c:	f000 f990 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000224 	.word	0x20000224
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_I2C_MspInit+0x84>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199e:	23c0      	movs	r3, #192	; 0xc0
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	2312      	movs	r3, #18
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ae:	2304      	movs	r3, #4
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	480c      	ldr	r0, [pc, #48]	; (80019ec <HAL_I2C_MspInit+0x8c>)
 80019ba:	f000 ffd5 	bl	8002968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_I2C_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40005400 	.word	0x40005400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020400 	.word	0x40020400

080019f0 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80019f4:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 80019f6:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <MX_LPTIM1_Init+0x50>)
 80019f8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001a1a:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a22:	f001 fac9 	bl	8002fb8 <HAL_LPTIM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 8001a2c:	f000 f920 	bl	8001c70 <Error_Handler>
  }
  __HAL_LPTIM_OPTR_CONFIG(&hlptim1, LPTIM_OP_PAD_AF);
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <MX_LPTIM1_Init+0x4c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000278 	.word	0x20000278
 8001a40:	40002400 	.word	0x40002400

08001a44 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b090      	sub	sp, #64	; 0x40
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	615a      	str	r2, [r3, #20]
  if(lptimHandle->Instance==LPTIM1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a20      	ldr	r2, [pc, #128]	; (8001af4 <HAL_LPTIM_MspInit+0xb0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d139      	bne.n	8001aec <HAL_LPTIM_MspInit+0xa8>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001a78:	2310      	movs	r3, #16
 8001a7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4618      	mov	r0, r3
 8001a86:	f001 fd21 	bl	80034cc <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8001a90:	f000 f8ee 	bl	8001c70 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac0:	4b0d      	ldr	r3, [pc, #52]	; (8001af8 <HAL_LPTIM_MspInit+0xb4>)
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PC1     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001acc:	2302      	movs	r3, #2
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ae0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4805      	ldr	r0, [pc, #20]	; (8001afc <HAL_LPTIM_MspInit+0xb8>)
 8001ae8:	f000 ff3e 	bl	8002968 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001aec:	bf00      	nop
 8001aee:	3740      	adds	r7, #64	; 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40002400 	.word	0x40002400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020800 	.word	0x40020800

08001b00 <lcd_testing>:
    output = (PERIOD * inp + output) / (1.0f + alpha * PERIOD);

    return output;
};
void lcd_testing()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af02      	add	r7, sp, #8

	// Begin LCD Init
	DEV_Module_Init();
 8001b06:	f7ff fa03 	bl	8000f10 <DEV_Module_Init>
	LCD_1IN8_Init(SCAN_DIR_DFT);
 8001b0a:	2005      	movs	r0, #5
 8001b0c:	f7ff fd4e 	bl	80015ac <LCD_1IN8_Init>
	LCD_1IN8_Clear(BLACK);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff fe0d 	bl	8001730 <LCD_1IN8_Clear>
	Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8001b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	20a0      	movs	r0, #160	; 0xa0
 8001b20:	f7ff fa0c 	bl	8000f3c <Paint_NewImage>
	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <lcd_testing+0x50>)
 8001b26:	f7ff fa55 	bl	8000fd4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8001b2a:	480a      	ldr	r0, [pc, #40]	; (8001b54 <lcd_testing+0x54>)
 8001b2c:	f7ff fa62 	bl	8000ff4 <Paint_SetDisplayFuntion>
	Paint_Clear(WHITE);
 8001b30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b34:	f7ff fb1a 	bl	800116c <Paint_Clear>
	// End LCD Init

	// Initialization routine:
	Paint_DrawImage(gImage_70X70, 1, 30, 100, 100);
 8001b38:	2364      	movs	r3, #100	; 0x64
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2364      	movs	r3, #100	; 0x64
 8001b3e:	221e      	movs	r2, #30
 8001b40:	2101      	movs	r1, #1
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <lcd_testing+0x58>)
 8001b44:	f7ff fb22 	bl	800118c <Paint_DrawImage>
//	Paint_DrawImage(gImage_1,80,35,60,60);

};
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08001731 	.word	0x08001731
 8001b54:	080016e5 	.word	0x080016e5
 8001b58:	080078cc 	.word	0x080078cc

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b60:	f000 fdba 	bl	80026d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f814 	bl	8001b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f7ff fe18 	bl	800179c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b6c:	f7ff feca 	bl	8001904 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001b70:	f000 fb5e 	bl	8002230 <MX_TIM5_Init>
  MX_SPI1_Init();
 8001b74:	f000 f882 	bl	8001c7c <MX_SPI1_Init>
  MX_TIM9_Init();
 8001b78:	f000 fbca 	bl	8002310 <MX_TIM9_Init>
  MX_LPTIM1_Init();
 8001b7c:	f7ff ff38 	bl	80019f0 <MX_LPTIM1_Init>
  MX_TIM1_Init();
 8001b80:	f000 fad2 	bl	8002128 <MX_TIM1_Init>
  MX_TIM11_Init();
 8001b84:	f000 fc0a 	bl	800239c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  // Testing LCD
  lcd_testing();
 8001b88:	f7ff ffba 	bl	8001b00 <lcd_testing>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <main+0x30>
	...

08001b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b094      	sub	sp, #80	; 0x50
 8001b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	2234      	movs	r2, #52	; 0x34
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f902 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <SystemClock_Config+0xb4>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	4a21      	ldr	r2, [pc, #132]	; (8001c44 <SystemClock_Config+0xb4>)
 8001bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <SystemClock_Config+0xb4>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	603b      	str	r3, [r7, #0]
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <SystemClock_Config+0xb8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <SystemClock_Config+0xb8>)
 8001bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <SystemClock_Config+0xb8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fd3f 	bl	8003684 <HAL_RCC_OscConfig>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c0c:	f000 f830 	bl	8001c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c24:	f107 0308 	add.w	r3, r7, #8
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fa50 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c36:	f000 f81b 	bl	8001c70 <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	; 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c5e:	f000 fd5d 	bl	800271c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40001000 	.word	0x40001000

08001c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <Error_Handler+0x8>
	...

08001c7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <MX_SPI1_Init+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 15;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc8:	220f      	movs	r2, #15
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cce:	f001 ff5d 	bl	8003b8c <HAL_SPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd8:	f7ff ffca 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200002ac 	.word	0x200002ac
 8001ce4:	40013000 	.word	0x40013000

08001ce8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_SPI_MspInit+0x84>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12b      	bne.n	8001d62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_SPI_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d42:	23a0      	movs	r3, #160	; 0xa0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d52:	2305      	movs	r3, #5
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_SPI_MspInit+0x8c>)
 8001d5e:	f000 fe03 	bl	8002968 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40013000 	.word	0x40013000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020000 	.word	0x40020000

08001d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	; 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	2036      	movs	r0, #54	; 0x36
 8001dde:	f000 fd99 	bl	8002914 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001de2:	2036      	movs	r0, #54	; 0x36
 8001de4:	f000 fdb2 	bl	800294c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_InitTick+0xa0>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_InitTick+0xa0>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	6413      	str	r3, [r2, #64]	; 0x40
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <HAL_InitTick+0xa0>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e04:	f107 0210 	add.w	r2, r7, #16
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fb2a 	bl	8003468 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e14:	f001 fb14 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8001e18:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1c:	4a13      	ldr	r2, [pc, #76]	; (8001e6c <HAL_InitTick+0xa4>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	0c9b      	lsrs	r3, r3, #18
 8001e24:	3b01      	subs	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <HAL_InitTick+0xac>)
 8001e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e34:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e36:	4a0e      	ldr	r2, [pc, #56]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e4a:	f002 f92f 	bl	80040ac <HAL_TIM_Base_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e54:	4806      	ldr	r0, [pc, #24]	; (8001e70 <HAL_InitTick+0xa8>)
 8001e56:	f002 f979 	bl	800414c <HAL_TIM_Base_Start_IT>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	e000      	b.n	8001e60 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	20000304 	.word	0x20000304
 8001e74:	40001000 	.word	0x40001000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	// Interrupt masking for encoder

	// Check pushbutton
	if(!HAL_GPIO_ReadPin(GPIOB, ROT_SW_Pin)) {
 8001ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed8:	4818      	ldr	r0, [pc, #96]	; (8001f3c <EXTI15_10_IRQHandler+0x6c>)
 8001eda:	f000 feb9 	bl	8002c50 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <EXTI15_10_IRQHandler+0x30>

		STATE++;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001eec:	6013      	str	r3, [r2, #0]
		}

	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DEB_A_Pin);
 8001eee:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001ef2:	f000 fef9 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_SW_Pin);
 8001ef6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001efa:	f000 fef5 	bl	8002ce8 <HAL_GPIO_EXTI_IRQHandler>
 8001efe:	e01b      	b.n	8001f38 <EXTI15_10_IRQHandler+0x68>
		if(!HAL_GPIO_ReadPin(GPIOB, DEB_A_Pin) && HAL_GPIO_ReadPin(GPIOB, DEB_B_Pin)) {
 8001f00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <EXTI15_10_IRQHandler+0x6c>)
 8001f06:	f000 fea3 	bl	8002c50 <HAL_GPIO_ReadPin>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <EXTI15_10_IRQHandler+0x5c>
 8001f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <EXTI15_10_IRQHandler+0x6c>)
 8001f16:	f000 fe9b 	bl	8002c50 <HAL_GPIO_ReadPin>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <EXTI15_10_IRQHandler+0x5c>
			STATE++;
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001f28:	6013      	str	r3, [r2, #0]
			return;
 8001f2a:	e005      	b.n	8001f38 <EXTI15_10_IRQHandler+0x68>
			STATE++;
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	4a03      	ldr	r2, [pc, #12]	; (8001f40 <EXTI15_10_IRQHandler+0x70>)
 8001f34:	6013      	str	r3, [r2, #0]
			return;
 8001f36:	bf00      	nop
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	200002a8 	.word	0x200002a8

08001f44 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <TIM5_IRQHandler+0x18>)
 8001f4e:	f000 feb0 	bl	8002cb2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001f52:	4803      	ldr	r0, [pc, #12]	; (8001f60 <TIM5_IRQHandler+0x1c>)
 8001f54:	f002 f9f0 	bl	8004338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	20000398 	.word	0x20000398

08001f64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <TIM6_DAC_IRQHandler+0x10>)
 8001f6a:	f002 f9e5 	bl	8004338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000304 	.word	0x20000304

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f92:	f002 fec9 	bl	8004d28 <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fba:	e7fe      	b.n	8001fba <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
	}

return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
	}
	return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
	return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	605a      	str	r2, [r3, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f002 fe2e 	bl	8004d28 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20008000 	.word	0x20008000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	2000034c 	.word	0x2000034c
 8002100:	20000488 	.word	0x20000488

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b092      	sub	sp, #72	; 0x48
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800214c:	1d3b      	adds	r3, r7, #4
 800214e:	2220      	movs	r2, #32
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fe28 	bl	8004da8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <MX_TIM1_Init+0x100>)
 800215a:	4a34      	ldr	r2, [pc, #208]	; (800222c <MX_TIM1_Init+0x104>)
 800215c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <MX_TIM1_Init+0x100>)
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <MX_TIM1_Init+0x100>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <MX_TIM1_Init+0x100>)
 800216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002170:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <MX_TIM1_Init+0x100>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <MX_TIM1_Init+0x100>)
 800217a:	2200      	movs	r2, #0
 800217c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217e:	4b2a      	ldr	r3, [pc, #168]	; (8002228 <MX_TIM1_Init+0x100>)
 8002180:	2200      	movs	r2, #0
 8002182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002184:	4828      	ldr	r0, [pc, #160]	; (8002228 <MX_TIM1_Init+0x100>)
 8002186:	f002 f888 	bl	800429a <HAL_TIM_PWM_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002190:	f7ff fd6e 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800219c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021a0:	4619      	mov	r1, r3
 80021a2:	4821      	ldr	r0, [pc, #132]	; (8002228 <MX_TIM1_Init+0x100>)
 80021a4:	f002 fd00 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80021ae:	f7ff fd5f 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b2:	2360      	movs	r3, #96	; 0x60
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021be:	2300      	movs	r3, #0
 80021c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d2:	2200      	movs	r2, #0
 80021d4:	4619      	mov	r1, r3
 80021d6:	4814      	ldr	r0, [pc, #80]	; (8002228 <MX_TIM1_Init+0x100>)
 80021d8:	f002 fa12 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80021e2:	f7ff fd45 	bl	8001c70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4807      	ldr	r0, [pc, #28]	; (8002228 <MX_TIM1_Init+0x100>)
 800220a:	f002 fd27 	bl	8004c5c <HAL_TIMEx_ConfigBreakDeadTime>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002214:	f7ff fd2c 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <MX_TIM1_Init+0x100>)
 800221a:	f000 f983 	bl	8002524 <HAL_TIM_MspPostInit>

}
 800221e:	bf00      	nop
 8002220:	3748      	adds	r7, #72	; 0x48
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000350 	.word	0x20000350
 800222c:	40010000 	.word	0x40010000

08002230 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08a      	sub	sp, #40	; 0x28
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
	// This is configured for a period of .45 seconds rn
  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002236:	f107 0320 	add.w	r3, r7, #32
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
 800224e:	615a      	str	r2, [r3, #20]
 8002250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002252:	4b2d      	ldr	r3, [pc, #180]	; (8002308 <MX_TIM5_Init+0xd8>)
 8002254:	4a2d      	ldr	r2, [pc, #180]	; (800230c <MX_TIM5_Init+0xdc>)
 8002256:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <MX_TIM5_Init+0xd8>)
 800225a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800225e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b29      	ldr	r3, [pc, #164]	; (8002308 <MX_TIM5_Init+0xd8>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7200;
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <MX_TIM5_Init+0xd8>)
 8002268:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800226c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <MX_TIM5_Init+0xd8>)
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <MX_TIM5_Init+0xd8>)
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800227a:	4823      	ldr	r0, [pc, #140]	; (8002308 <MX_TIM5_Init+0xd8>)
 800227c:	f002 f80d 	bl	800429a <HAL_TIM_PWM_Init>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002286:	f7ff fcf3 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800228a:	481f      	ldr	r0, [pc, #124]	; (8002308 <MX_TIM5_Init+0xd8>)
 800228c:	f001 ffac 	bl	80041e8 <HAL_TIM_OC_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8002296:	f7ff fceb 	bl	8001c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022a2:	f107 0320 	add.w	r3, r7, #32
 80022a6:	4619      	mov	r1, r3
 80022a8:	4817      	ldr	r0, [pc, #92]	; (8002308 <MX_TIM5_Init+0xd8>)
 80022aa:	f002 fc7d 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80022b4:	f7ff fcdc 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022b8:	2360      	movs	r3, #96	; 0x60
 80022ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	2200      	movs	r2, #0
 80022cc:	4619      	mov	r1, r3
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <MX_TIM5_Init+0xd8>)
 80022d0:	f002 f996 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 80022da:	f7ff fcc9 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	2204      	movs	r2, #4
 80022e6:	4619      	mov	r1, r3
 80022e8:	4807      	ldr	r0, [pc, #28]	; (8002308 <MX_TIM5_Init+0xd8>)
 80022ea:	f002 f92d 	bl	8004548 <HAL_TIM_OC_ConfigChannel>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80022f4:	f7ff fcbc 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <MX_TIM5_Init+0xd8>)
 80022fa:	f000 f913 	bl	8002524 <HAL_TIM_MspPostInit>

}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	; 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000398 	.word	0x20000398
 800230c:	40000c00 	.word	0x40000c00

08002310 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_TIM9_Init+0x84>)
 800232a:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <MX_TIM9_Init+0x88>)
 800232c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <MX_TIM9_Init+0x84>)
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_TIM9_Init+0x84>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_TIM9_Init+0x84>)
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_TIM9_Init+0x84>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b12      	ldr	r3, [pc, #72]	; (8002394 <MX_TIM9_Init+0x84>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <MX_TIM9_Init+0x84>)
 8002350:	f001 ffa3 	bl	800429a <HAL_TIM_PWM_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800235a:	f7ff fc89 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800235e:	2360      	movs	r3, #96	; 0x60
 8002360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	4619      	mov	r1, r3
 8002374:	4807      	ldr	r0, [pc, #28]	; (8002394 <MX_TIM9_Init+0x84>)
 8002376:	f002 f943 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002380:	f7ff fc76 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <MX_TIM9_Init+0x84>)
 8002386:	f000 f8cd 	bl	8002524 <HAL_TIM_MspPostInit>

}
 800238a:	bf00      	nop
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200003e0 	.word	0x200003e0
 8002398:	40014000 	.word	0x40014000

0800239c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b088      	sub	sp, #32
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]
 80023b0:	615a      	str	r2, [r3, #20]
 80023b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <MX_TIM11_Init+0x94>)
 80023b6:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <MX_TIM11_Init+0x98>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <MX_TIM11_Init+0x94>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MX_TIM11_Init+0x94>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <MX_TIM11_Init+0x94>)
 80023c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023cc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_TIM11_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <MX_TIM11_Init+0x94>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80023da:	4815      	ldr	r0, [pc, #84]	; (8002430 <MX_TIM11_Init+0x94>)
 80023dc:	f001 fe66 	bl	80040ac <HAL_TIM_Base_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80023e6:	f7ff fc43 	bl	8001c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80023ea:	4811      	ldr	r0, [pc, #68]	; (8002430 <MX_TIM11_Init+0x94>)
 80023ec:	f001 ff55 	bl	800429a <HAL_TIM_PWM_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80023f6:	f7ff fc3b 	bl	8001c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fa:	2360      	movs	r3, #96	; 0x60
 80023fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	4619      	mov	r1, r3
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <MX_TIM11_Init+0x94>)
 8002412:	f002 f8f5 	bl	8004600 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800241c:	f7ff fc28 	bl	8001c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <MX_TIM11_Init+0x94>)
 8002422:	f000 f87f 	bl	8002524 <HAL_TIM_MspPostInit>

}
 8002426:	bf00      	nop
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000428 	.word	0x20000428
 8002434:	40014800 	.word	0x40014800

08002438 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a22      	ldr	r2, [pc, #136]	; (80024d0 <HAL_TIM_PWM_MspInit+0x98>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a20      	ldr	r2, [pc, #128]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002466:	e02e      	b.n	80024c6 <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <HAL_TIM_PWM_MspInit+0xa0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d116      	bne.n	80024a0 <HAL_TIM_PWM_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b17      	ldr	r3, [pc, #92]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a16      	ldr	r2, [pc, #88]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 800247c:	f043 0308 	orr.w	r3, r3, #8
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2101      	movs	r1, #1
 8002492:	2032      	movs	r0, #50	; 0x32
 8002494:	f000 fa3e 	bl	8002914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002498:	2032      	movs	r0, #50	; 0x32
 800249a:	f000 fa57 	bl	800294c <HAL_NVIC_EnableIRQ>
}
 800249e:	e012      	b.n	80024c6 <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM9)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_TIM_PWM_MspInit+0xa4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d10d      	bne.n	80024c6 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	4a08      	ldr	r2, [pc, #32]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 80024b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_TIM_PWM_MspInit+0x9c>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40000c00 	.word	0x40000c00
 80024dc:	40014000 	.word	0x40014000

080024e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0b      	ldr	r2, [pc, #44]	; (800251c <HAL_TIM_Base_MspInit+0x3c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10d      	bne.n	800250e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HAL_TIM_Base_MspInit+0x40>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_TIM_Base_MspInit+0x40>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <HAL_TIM_Base_MspInit+0x40>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40014800 	.word	0x40014800
 8002520:	40023800 	.word	0x40023800

08002524 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a49      	ldr	r2, [pc, #292]	; (8002668 <HAL_TIM_MspPostInit+0x144>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d11f      	bne.n	8002586 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	4b48      	ldr	r3, [pc, #288]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a47      	ldr	r2, [pc, #284]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b45      	ldr	r3, [pc, #276]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PLATE_PWM_Pin;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002574:	2301      	movs	r3, #1
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PLATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8002578:	f107 031c 	add.w	r3, r7, #28
 800257c:	4619      	mov	r1, r3
 800257e:	483c      	ldr	r0, [pc, #240]	; (8002670 <HAL_TIM_MspPostInit+0x14c>)
 8002580:	f000 f9f2 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002584:	e06b      	b.n	800265e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM5)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a3a      	ldr	r2, [pc, #232]	; (8002674 <HAL_TIM_MspPostInit+0x150>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d11e      	bne.n	80025ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	4b35      	ldr	r3, [pc, #212]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6313      	str	r3, [r2, #48]	; 0x30
 80025a0:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BUCK_PWM_Pin|GPIO_PIN_1;
 80025ac:	2303      	movs	r3, #3
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025bc:	2302      	movs	r3, #2
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	482a      	ldr	r0, [pc, #168]	; (8002670 <HAL_TIM_MspPostInit+0x14c>)
 80025c8:	f000 f9ce 	bl	8002968 <HAL_GPIO_Init>
}
 80025cc:	e047      	b.n	800265e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM9)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a29      	ldr	r2, [pc, #164]	; (8002678 <HAL_TIM_MspPostInit+0x154>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d11e      	bne.n	8002616 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a22      	ldr	r2, [pc, #136]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80025f4:	2304      	movs	r3, #4
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002604:	2303      	movs	r3, #3
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	4818      	ldr	r0, [pc, #96]	; (8002670 <HAL_TIM_MspPostInit+0x14c>)
 8002610:	f000 f9aa 	bl	8002968 <HAL_GPIO_Init>
}
 8002614:	e023      	b.n	800265e <HAL_TIM_MspPostInit+0x13a>
  else if(timHandle->Instance==TIM11)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a18      	ldr	r2, [pc, #96]	; (800267c <HAL_TIM_MspPostInit+0x158>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d11e      	bne.n	800265e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	4a10      	ldr	r2, [pc, #64]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 800262a:	f043 0304 	orr.w	r3, r3, #4
 800262e:	6313      	str	r3, [r2, #48]	; 0x30
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_TIM_MspPostInit+0x148>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZ_PWM_Pin;
 800263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800264e:	2303      	movs	r3, #3
 8002650:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BUZZ_PWM_GPIO_Port, &GPIO_InitStruct);
 8002652:	f107 031c 	add.w	r3, r7, #28
 8002656:	4619      	mov	r1, r3
 8002658:	4809      	ldr	r0, [pc, #36]	; (8002680 <HAL_TIM_MspPostInit+0x15c>)
 800265a:	f000 f985 	bl	8002968 <HAL_GPIO_Init>
}
 800265e:	bf00      	nop
 8002660:	3730      	adds	r7, #48	; 0x30
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40010000 	.word	0x40010000
 800266c:	40023800 	.word	0x40023800
 8002670:	40020000 	.word	0x40020000
 8002674:	40000c00 	.word	0x40000c00
 8002678:	40014000 	.word	0x40014000
 800267c:	40014800 	.word	0x40014800
 8002680:	40020800 	.word	0x40020800

08002684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002688:	480d      	ldr	r0, [pc, #52]	; (80026c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800268a:	490e      	ldr	r1, [pc, #56]	; (80026c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800268c:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800268e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002690:	e002      	b.n	8002698 <LoopCopyDataInit>

08002692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002696:	3304      	adds	r3, #4

08002698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800269a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800269c:	d3f9      	bcc.n	8002692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800269e:	4a0b      	ldr	r2, [pc, #44]	; (80026cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a0:	4c0b      	ldr	r4, [pc, #44]	; (80026d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026a4:	e001      	b.n	80026aa <LoopFillZerobss>

080026a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026a8:	3204      	adds	r2, #4

080026aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ac:	d3fb      	bcc.n	80026a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026ae:	f7ff fd29 	bl	8002104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026b2:	f002 fb3f 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026b6:	f7ff fa51 	bl	8001b5c <main>
  bx  lr    
 80026ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80026c8:	0800caec 	.word	0x0800caec
  ldr r2, =_sbss
 80026cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80026d0:	20000484 	.word	0x20000484

080026d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026d4:	e7fe      	b.n	80026d4 <ADC_IRQHandler>
	...

080026d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026dc:	4b0e      	ldr	r3, [pc, #56]	; (8002718 <HAL_Init+0x40>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_Init+0x40>)
 80026e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_Init+0x40>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_Init+0x40>)
 80026ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_Init+0x40>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_Init+0x40>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 f8fc 	bl	80028fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	200f      	movs	r0, #15
 8002708:	f7ff fb5e 	bl	8001dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7ff fb34 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	20000470 	.word	0x20000470

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000470 	.word	0x20000470

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ff4c 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002926:	f7ff ff61 	bl	80027ec <__NVIC_GetPriorityGrouping>
 800292a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f7ff ffb1 	bl	8002898 <NVIC_EncodePriority>
 8002936:	4602      	mov	r2, r0
 8002938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff80 	bl	8002844 <__NVIC_SetPriority>
}
 8002944:	bf00      	nop
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ff54 	bl	8002808 <__NVIC_EnableIRQ>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e14d      	b.n	8002c20 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 813c 	bne.w	8002c1a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8096 	beq.w	8002c1a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b51      	ldr	r3, [pc, #324]	; (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a50      	ldr	r2, [pc, #320]	; (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <HAL_GPIO_Init+0x2d0>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a4c      	ldr	r2, [pc, #304]	; (8002c3c <HAL_GPIO_Init+0x2d4>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a43      	ldr	r2, [pc, #268]	; (8002c40 <HAL_GPIO_Init+0x2d8>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x1ea>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_GPIO_Init+0x2dc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x1e6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_GPIO_Init+0x2e0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x1e2>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e004      	b.n	8002b54 <HAL_GPIO_Init+0x1ec>
 8002b4a:	2307      	movs	r3, #7
 8002b4c:	e002      	b.n	8002b54 <HAL_GPIO_Init+0x1ec>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_GPIO_Init+0x1ec>
 8002b52:	2300      	movs	r3, #0
 8002b54:	69fa      	ldr	r2, [r7, #28]
 8002b56:	f002 0203 	and.w	r2, r2, #3
 8002b5a:	0092      	lsls	r2, r2, #2
 8002b5c:	4093      	lsls	r3, r2
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b64:	4935      	ldr	r1, [pc, #212]	; (8002c3c <HAL_GPIO_Init+0x2d4>)
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b72:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b96:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bc6:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bf0:	4b16      	ldr	r3, [pc, #88]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	f67f aeae 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40020400 	.word	0x40020400
 8002c48:	40020800 	.word	0x40020800
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	887b      	ldrh	r3, [r7, #2]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
 8002c6c:	e001      	b.n	8002c72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c90:	787b      	ldrb	r3, [r7, #1]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c9c:	e003      	b.n	8002ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c9e:	887b      	ldrh	r3, [r7, #2]
 8002ca0:	041a      	lsls	r2, r3, #16
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	619a      	str	r2, [r3, #24]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cc4:	887a      	ldrh	r2, [r7, #2]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	041a      	lsls	r2, r3, #16
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43d9      	mvns	r1, r3
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	400b      	ands	r3, r1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	619a      	str	r2, [r3, #24]
}
 8002cda:	bf00      	nop
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d006      	beq.n	8002d0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f806 	bl	8002d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40013c00 	.word	0x40013c00

08002d18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e12b      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fe fe02 	bl	8001960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d94:	f000 fb54 	bl	8003440 <HAL_RCC_GetPCLK1Freq>
 8002d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a81      	ldr	r2, [pc, #516]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d807      	bhi.n	8002db4 <HAL_I2C_Init+0x84>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_I2C_Init+0x278>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bf94      	ite	ls
 8002dac:	2301      	movls	r3, #1
 8002dae:	2300      	movhi	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e006      	b.n	8002dc2 <HAL_I2C_Init+0x92>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a7d      	ldr	r2, [pc, #500]	; (8002fac <HAL_I2C_Init+0x27c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0e7      	b.n	8002f9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4a78      	ldr	r2, [pc, #480]	; (8002fb0 <HAL_I2C_Init+0x280>)
 8002dce:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a6a      	ldr	r2, [pc, #424]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d802      	bhi.n	8002e04 <HAL_I2C_Init+0xd4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	3301      	adds	r3, #1
 8002e02:	e009      	b.n	8002e18 <HAL_I2C_Init+0xe8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_I2C_Init+0x284>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	099b      	lsrs	r3, r3, #6
 8002e16:	3301      	adds	r3, #1
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	495c      	ldr	r1, [pc, #368]	; (8002fa4 <HAL_I2C_Init+0x274>)
 8002e34:	428b      	cmp	r3, r1
 8002e36:	d819      	bhi.n	8002e6c <HAL_I2C_Init+0x13c>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1e59      	subs	r1, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e4c:	400b      	ands	r3, r1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_I2C_Init+0x138>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	1e59      	subs	r1, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e60:	3301      	adds	r3, #1
 8002e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e66:	e051      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	e04f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_I2C_Init+0x168>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1e58      	subs	r0, r3, #1
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6859      	ldr	r1, [r3, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	440b      	add	r3, r1
 8002e82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e012      	b.n	8002ebe <HAL_I2C_Init+0x18e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Init+0x196>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e022      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10e      	bne.n	8002eec <HAL_I2C_Init+0x1bc>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e58      	subs	r0, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	440b      	add	r3, r1
 8002edc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Init+0x1dc>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	6809      	ldr	r1, [r1, #0]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6911      	ldr	r1, [r2, #16]
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	68d2      	ldr	r2, [r2, #12]
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695a      	ldr	r2, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	000186a0 	.word	0x000186a0
 8002fa8:	001e847f 	.word	0x001e847f
 8002fac:	003d08ff 	.word	0x003d08ff
 8002fb0:	431bde83 	.word	0x431bde83
 8002fb4:	10624dd3 	.word	0x10624dd3

08002fb8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07c      	b.n	80030c4 <HAL_LPTIM_Init+0x10c>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7fe fd2d 	bl	8001a44 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d004      	beq.n	800300c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800300a:	d103      	bne.n	8003014 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 031e 	bic.w	r3, r3, #30
 8003012:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301c:	4293      	cmp	r3, r2
 800301e:	d005      	beq.n	800302c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003026:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4b27      	ldr	r3, [pc, #156]	; (80030cc <HAL_LPTIM_Init+0x114>)
 8003030:	4013      	ands	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800303c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003042:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003048:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800304e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003066:	4313      	orrs	r3, r2
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d004      	beq.n	8003080 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800307e:	d107      	bne.n	8003090 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003088:	4313      	orrs	r3, r2
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003098:	4293      	cmp	r3, r2
 800309a:	d00a      	beq.n	80030b2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80030a4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80030aa:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	ff19f1fe 	.word	0xff19f1fe

080030d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cc      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b68      	ldr	r3, [pc, #416]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d90c      	bls.n	800310c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b65      	ldr	r3, [pc, #404]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0b8      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d020      	beq.n	800315a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a58      	ldr	r2, [pc, #352]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800312e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	494d      	ldr	r1, [pc, #308]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d044      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d119      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e07f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d003      	beq.n	800318e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318a:	2b03      	cmp	r3, #3
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b3f      	ldr	r3, [pc, #252]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e06f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e067      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b37      	ldr	r3, [pc, #220]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4934      	ldr	r1, [pc, #208]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7ff fac0 	bl	8002744 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7ff fabc 	bl	8002744 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e04f      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b25      	ldr	r3, [pc, #148]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d20c      	bcs.n	8003218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b20      	ldr	r3, [pc, #128]	; (8003288 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e032      	b.n	800327e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4916      	ldr	r1, [pc, #88]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	490e      	ldr	r1, [pc, #56]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003256:	f000 f821 	bl	800329c <HAL_RCC_GetSysClockFreq>
 800325a:	4602      	mov	r2, r0
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	490a      	ldr	r1, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	fa22 f303 	lsr.w	r3, r2, r3
 800326e:	4a09      	ldr	r2, [pc, #36]	; (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fda6 	bl	8001dc8 <HAL_InitTick>

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40023c00 	.word	0x40023c00
 800328c:	40023800 	.word	0x40023800
 8003290:	0800c6ec 	.word	0x0800c6ec
 8003294:	20000000 	.word	0x20000000
 8003298:	20000004 	.word	0x20000004

0800329c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b090      	sub	sp, #64	; 0x40
 80032a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
 80032a8:	2300      	movs	r3, #0
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ac:	2300      	movs	r3, #0
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b4:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d00d      	beq.n	80032dc <HAL_RCC_GetSysClockFreq+0x40>
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	f200 80a1 	bhi.w	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ce:	e09b      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80032d4:	e09b      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d6:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032da:	e098      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032dc:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e6:	4b4d      	ldr	r3, [pc, #308]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d028      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f2:	4b4a      	ldr	r3, [pc, #296]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	099b      	lsrs	r3, r3, #6
 80032f8:	2200      	movs	r2, #0
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	627a      	str	r2, [r7, #36]	; 0x24
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003304:	2100      	movs	r1, #0
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003308:	fb03 f201 	mul.w	r2, r3, r1
 800330c:	2300      	movs	r3, #0
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	4413      	add	r3, r2
 8003314:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_RCC_GetSysClockFreq+0x188>)
 8003316:	fba0 1202 	umull	r1, r2, r0, r2
 800331a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800331c:	460a      	mov	r2, r1
 800331e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003322:	4413      	add	r3, r2
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2200      	movs	r2, #0
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	61fa      	str	r2, [r7, #28]
 800332e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003336:	f7fd fc57 	bl	8000be8 <__aeabi_uldivmod>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4613      	mov	r3, r2
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003342:	e053      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	2200      	movs	r2, #0
 800334c:	613b      	str	r3, [r7, #16]
 800334e:	617a      	str	r2, [r7, #20]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003356:	f04f 0b00 	mov.w	fp, #0
 800335a:	4652      	mov	r2, sl
 800335c:	465b      	mov	r3, fp
 800335e:	f04f 0000 	mov.w	r0, #0
 8003362:	f04f 0100 	mov.w	r1, #0
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800336c:	0150      	lsls	r0, r2, #5
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	ebb2 080a 	subs.w	r8, r2, sl
 8003376:	eb63 090b 	sbc.w	r9, r3, fp
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800338e:	ebb2 0408 	subs.w	r4, r2, r8
 8003392:	eb63 0509 	sbc.w	r5, r3, r9
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	00eb      	lsls	r3, r5, #3
 80033a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a4:	00e2      	lsls	r2, r4, #3
 80033a6:	4614      	mov	r4, r2
 80033a8:	461d      	mov	r5, r3
 80033aa:	eb14 030a 	adds.w	r3, r4, sl
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	eb45 030b 	adc.w	r3, r5, fp
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c2:	4629      	mov	r1, r5
 80033c4:	028b      	lsls	r3, r1, #10
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033cc:	4621      	mov	r1, r4
 80033ce:	028a      	lsls	r2, r1, #10
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d6:	2200      	movs	r2, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	60fa      	str	r2, [r7, #12]
 80033dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e0:	f7fd fc02 	bl	8000be8 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	3301      	adds	r3, #1
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80033fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003406:	e002      	b.n	800340e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetSysClockFreq+0x184>)
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800340c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003410:	4618      	mov	r0, r3
 8003412:	3740      	adds	r7, #64	; 0x40
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800
 8003420:	00f42400 	.word	0x00f42400
 8003424:	018cba80 	.word	0x018cba80

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_RCC_GetHCLKFreq+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
}
 8003430:	4618      	mov	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000000 	.word	0x20000000

08003440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003444:	f7ff fff0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003448:	4602      	mov	r2, r0
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	0a9b      	lsrs	r3, r3, #10
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	4903      	ldr	r1, [pc, #12]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003456:	5ccb      	ldrb	r3, [r1, r3]
 8003458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800345c:	4618      	mov	r0, r3
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40023800 	.word	0x40023800
 8003464:	0800c6fc 	.word	0x0800c6fc

08003468 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	220f      	movs	r2, #15
 8003476:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_RCC_GetClockConfig+0x5c>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003484:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_RCC_GetClockConfig+0x5c>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_RCC_GetClockConfig+0x60>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0207 	and.w	r2, r3, #7
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40023c00 	.word	0x40023c00

080034cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8083 	beq.w	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b61      	ldr	r3, [pc, #388]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b5e      	ldr	r3, [pc, #376]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003506:	4b5c      	ldr	r3, [pc, #368]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a5b      	ldr	r2, [pc, #364]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003512:	f7ff f917 	bl	8002744 <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003518:	e008      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7ff f913 	bl	8002744 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e09f      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800352c:	4b52      	ldr	r3, [pc, #328]	; (8003678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003538:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d02f      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	429a      	cmp	r2, r3
 8003554:	d028      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003560:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003562:	2201      	movs	r2, #1
 8003564:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003566:	4b45      	ldr	r3, [pc, #276]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800356c:	4a41      	ldr	r2, [pc, #260]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d114      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800357e:	f7ff f8e1 	bl	8002744 <HAL_GetTick>
 8003582:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7ff f8dd 	bl	8002744 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e067      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	4b35      	ldr	r3, [pc, #212]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ee      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b4:	d10d      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ca:	492a      	ldr	r1, [pc, #168]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]
 80035d0:	e005      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4a27      	ldr	r2, [pc, #156]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035dc:	6093      	str	r3, [r2, #8]
 80035de:	4b25      	ldr	r3, [pc, #148]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ea:	4922      	ldr	r1, [pc, #136]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7d1a      	ldrb	r2, [r3, #20]
 8003600:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003602:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003610:	4b18      	ldr	r3, [pc, #96]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4915      	ldr	r1, [pc, #84]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003638:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	490c      	ldr	r1, [pc, #48]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8003654:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800365a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4904      	ldr	r1, [pc, #16]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	40007000 	.word	0x40007000
 800367c:	42470e40 	.word	0x42470e40
 8003680:	424711e0 	.word	0x424711e0

08003684 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e273      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036a2:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d112      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05b      	beq.n	800378c <HAL_RCC_OscConfig+0x108>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d157      	bne.n	800378c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e24e      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x74>
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e01d      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6f      	ldr	r2, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6c      	ldr	r2, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 800371c:	4b69      	ldr	r3, [pc, #420]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a68      	ldr	r2, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7ff f802 	bl	8002744 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fffe 	bl	8002744 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e213      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xc0>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe ffee 	bl	8002744 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe ffea 	bl	8002744 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1ff      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0xe8>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d063      	beq.n	8003862 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d11c      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1d3      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4937      	ldr	r1, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e03a      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe ffa3 	bl	8002744 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe ff9f 	bl	8002744 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e1b4      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4925      	ldr	r1, [pc, #148]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe ff82 	bl	8002744 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe ff7e 	bl	8002744 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e193      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d036      	beq.n	80038dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe ff62 	bl	8002744 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe ff5e 	bl	8002744 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e173      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x200>
 80038a2:	e01b      	b.n	80038dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038aa:	f7fe ff4b 	bl	8002744 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	e00e      	b.n	80038d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fe ff47 	bl	8002744 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d907      	bls.n	80038d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e15c      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	42470000 	.word	0x42470000
 80038cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	4b8a      	ldr	r3, [pc, #552]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 80038d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ea      	bne.n	80038b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8097 	beq.w	8003a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b83      	ldr	r3, [pc, #524]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	4b7f      	ldr	r3, [pc, #508]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b7c      	ldr	r3, [pc, #496]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <HAL_RCC_OscConfig+0x47c>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCC_OscConfig+0x47c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a75      	ldr	r2, [pc, #468]	; (8003b00 <HAL_RCC_OscConfig+0x47c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7fe ff07 	bl	8002744 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7fe ff03 	bl	8002744 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e118      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b6c      	ldr	r3, [pc, #432]	; (8003b00 <HAL_RCC_OscConfig+0x47c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x2ea>
 8003960:	4b66      	ldr	r3, [pc, #408]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b05      	cmp	r3, #5
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x30c>
 8003976:	4b61      	ldr	r3, [pc, #388]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a60      	ldr	r2, [pc, #384]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
 8003982:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a5d      	ldr	r2, [pc, #372]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 8003990:	4b5a      	ldr	r3, [pc, #360]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a59      	ldr	r2, [pc, #356]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	4b57      	ldr	r3, [pc, #348]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a56      	ldr	r2, [pc, #344]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 80039a2:	f023 0304 	bic.w	r3, r3, #4
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fec8 	bl	8002744 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fec4 	bl	8002744 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0d7      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ee      	beq.n	80039b8 <HAL_RCC_OscConfig+0x334>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039dc:	f7fe feb2 	bl	8002744 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe feae 	bl	8002744 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0c1      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ee      	bne.n	80039e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80ad 	beq.w	8003b7c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a22:	4b36      	ldr	r3, [pc, #216]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d060      	beq.n	8003af0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d145      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b33      	ldr	r3, [pc, #204]	; (8003b04 <HAL_RCC_OscConfig+0x480>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fe82 	bl	8002744 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe fe7e 	bl	8002744 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e093      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	071b      	lsls	r3, r3, #28
 8003a8e:	491b      	ldr	r1, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a94:	4b1b      	ldr	r3, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x480>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fe53 	bl	8002744 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fe fe4f 	bl	8002744 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e064      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab4:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x41e>
 8003ac0:	e05c      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_RCC_OscConfig+0x480>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fe3c 	bl	8002744 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad0:	f7fe fe38 	bl	8002744 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e04d      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f0      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x44c>
 8003aee:	e045      	b.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e040      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40007000 	.word	0x40007000
 8003b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d030      	beq.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d129      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d122      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d119      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	3b01      	subs	r3, #1
 8003b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d10f      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023800 	.word	0x40023800

08003b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07b      	b.n	8003c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bae:	d009      	beq.n	8003bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	e005      	b.n	8003bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe f882 	bl	8001ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0104 	and.w	r1, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f003 0210 	and.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_SPI_Transmit+0x22>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e126      	b.n	8003f0e <HAL_SPI_Transmit+0x270>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc8:	f7fe fd3c 	bl	8002744 <HAL_GetTick>
 8003ccc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce2:	e10b      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x52>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf4:	e102      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d14b      	bne.n	8003e1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Transmit+0xf6>
 8003d8e:	8afb      	ldrh	r3, [r7, #22]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d13e      	bne.n	8003e12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003db8:	e02b      	b.n	8003e12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d112      	bne.n	8003dee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dec:	e011      	b.n	8003e12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fe fca9 	bl	8002744 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Transmit+0x168>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Transmit+0x16e>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e10:	e074      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ce      	bne.n	8003dba <HAL_SPI_Transmit+0x11c>
 8003e1c:	e04c      	b.n	8003eb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_Transmit+0x18e>
 8003e26:	8afb      	ldrh	r3, [r7, #22]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d140      	bne.n	8003eae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	7812      	ldrb	r2, [r2, #0]
 8003e38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e52:	e02c      	b.n	8003eae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d113      	bne.n	8003e8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fe fc5b 	bl	8002744 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Transmit+0x204>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Transmit+0x20a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eac:	e026      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1cd      	bne.n	8003e54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f8b3 	bl	8004028 <SPI_EndRxTxTransaction>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e000      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7fe fc0c 	bl	8002744 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7fe fc04 	bl	8002744 <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7fe fbf4 	bl	8002744 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000000 	.word	0x20000000

08004028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x7c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <SPI_EndRxTxTransaction+0x80>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d112      	bne.n	800407a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff5a 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3b01      	subs	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d0f2      	beq.n	800407a <SPI_EndRxTxTransaction+0x52>
 8004094:	e000      	b.n	8004098 <SPI_EndRxTxTransaction+0x70>
        break;
 8004096:	bf00      	nop
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000
 80040a8:	165e9f81 	.word	0x165e9f81

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fe fa04 	bl	80024e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fb72 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d001      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e035      	b.n	80041d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a16      	ldr	r2, [pc, #88]	; (80041dc <HAL_TIM_Base_Start_IT+0x90>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIM_Base_Start_IT+0x4e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <HAL_TIM_Base_Start_IT+0x94>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIM_Base_Start_IT+0x4e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a13      	ldr	r2, [pc, #76]	; (80041e4 <HAL_TIM_Base_Start_IT+0x98>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2b06      	cmp	r3, #6
 80041aa:	d010      	beq.n	80041ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	e007      	b.n	80041ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0201 	orr.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40000c00 	.word	0x40000c00
 80041e4:	40014000 	.word	0x40014000

080041e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e041      	b.n	800427e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f839 	bl	8004286 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 fad4 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e041      	b.n	8004330 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe f8b9 	bl	8002438 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2202      	movs	r2, #2
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f000 fa7b 	bl	80047d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b02      	cmp	r3, #2
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0202 	mvn.w	r2, #2
 8004364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa0c 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9fe 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fa0f 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d122      	bne.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d11b      	bne.n	80043e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0204 	mvn.w	r2, #4
 80043b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9e2 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 80043d4:	e005      	b.n	80043e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9d4 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f9e5 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d122      	bne.n	800443c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d11b      	bne.n	800443c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0208 	mvn.w	r2, #8
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2204      	movs	r2, #4
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9b8 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9aa 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9bb 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b10      	cmp	r3, #16
 8004448:	d122      	bne.n	8004490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b10      	cmp	r3, #16
 8004456:	d11b      	bne.n	8004490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0210 	mvn.w	r2, #16
 8004460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2208      	movs	r2, #8
 8004466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f98e 	bl	8004798 <HAL_TIM_IC_CaptureCallback>
 800447c:	e005      	b.n	800448a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f980 	bl	8004784 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f991 	bl	80047ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0201 	mvn.w	r2, #1
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fd fbc8 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d10e      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d107      	bne.n	80044e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fc16 	bl	8004d14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b40      	cmp	r3, #64	; 0x40
 80044f4:	d10e      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b40      	cmp	r3, #64	; 0x40
 8004502:	d107      	bne.n	8004514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f956 	bl	80047c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b20      	cmp	r3, #32
 8004520:	d10e      	bne.n	8004540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b20      	cmp	r3, #32
 800452e:	d107      	bne.n	8004540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0220 	mvn.w	r2, #32
 8004538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fbe0 	bl	8004d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004562:	2302      	movs	r3, #2
 8004564:	e048      	b.n	80045f8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2201      	movs	r2, #1
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d839      	bhi.n	80045e8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045e9 	.word	0x080045e9
 8004584:	080045e9 	.word	0x080045e9
 8004588:	080045e9 	.word	0x080045e9
 800458c:	080045bf 	.word	0x080045bf
 8004590:	080045e9 	.word	0x080045e9
 8004594:	080045e9 	.word	0x080045e9
 8004598:	080045e9 	.word	0x080045e9
 800459c:	080045cd 	.word	0x080045cd
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045e9 	.word	0x080045e9
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045db 	.word	0x080045db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f96a 	bl	8004890 <TIM_OC1_SetConfig>
      break;
 80045bc:	e017      	b.n	80045ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f9c9 	bl	800495c <TIM_OC2_SetConfig>
      break;
 80045ca:	e010      	b.n	80045ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fa2e 	bl	8004a34 <TIM_OC3_SetConfig>
      break;
 80045d8:	e009      	b.n	80045ee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fa91 	bl	8004b08 <TIM_OC4_SetConfig>
      break;
 80045e6:	e002      	b.n	80045ee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	75fb      	strb	r3, [r7, #23]
      break;
 80045ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3718      	adds	r7, #24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800461a:	2302      	movs	r3, #2
 800461c:	e0ae      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	f200 809f 	bhi.w	800476c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004669 	.word	0x08004669
 8004638:	0800476d 	.word	0x0800476d
 800463c:	0800476d 	.word	0x0800476d
 8004640:	0800476d 	.word	0x0800476d
 8004644:	080046a9 	.word	0x080046a9
 8004648:	0800476d 	.word	0x0800476d
 800464c:	0800476d 	.word	0x0800476d
 8004650:	0800476d 	.word	0x0800476d
 8004654:	080046eb 	.word	0x080046eb
 8004658:	0800476d 	.word	0x0800476d
 800465c:	0800476d 	.word	0x0800476d
 8004660:	0800476d 	.word	0x0800476d
 8004664:	0800472b 	.word	0x0800472b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f90e 	bl	8004890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	619a      	str	r2, [r3, #24]
      break;
 80046a6:	e064      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 f954 	bl	800495c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
      break;
 80046e8:	e043      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f99f 	bl	8004a34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0208 	orr.w	r2, r2, #8
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0204 	bic.w	r2, r2, #4
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
      break;
 8004728:	e023      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 f9e9 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	61da      	str	r2, [r3, #28]
      break;
 800476a:	e002      	b.n	8004772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	75fb      	strb	r3, [r7, #23]
      break;
 8004770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800477a:	7dfb      	ldrb	r3, [r7, #23]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a26      	ldr	r2, [pc, #152]	; (8004880 <TIM_Base_SetConfig+0xac>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x20>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a25      	ldr	r2, [pc, #148]	; (8004884 <TIM_Base_SetConfig+0xb0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a1d      	ldr	r2, [pc, #116]	; (8004880 <TIM_Base_SetConfig+0xac>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00b      	beq.n	8004826 <TIM_Base_SetConfig+0x52>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <TIM_Base_SetConfig+0xb0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d007      	beq.n	8004826 <TIM_Base_SetConfig+0x52>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <TIM_Base_SetConfig+0xb4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <TIM_Base_SetConfig+0x52>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a1a      	ldr	r2, [pc, #104]	; (800488c <TIM_Base_SetConfig+0xb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a08      	ldr	r2, [pc, #32]	; (8004880 <TIM_Base_SetConfig+0xac>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	615a      	str	r2, [r3, #20]
}
 8004872:	bf00      	nop
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40014800 	.word	0x40014800

08004890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	f023 0201 	bic.w	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1c      	ldr	r2, [pc, #112]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10c      	bne.n	8004906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0308 	bic.w	r3, r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a13      	ldr	r2, [pc, #76]	; (8004958 <TIM_OC1_SetConfig+0xc8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d111      	bne.n	8004932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800491c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	40010000 	.word	0x40010000

0800495c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0210 	bic.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f023 0320 	bic.w	r3, r3, #32
 80049a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1e      	ldr	r2, [pc, #120]	; (8004a30 <TIM_OC2_SetConfig+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <TIM_OC2_SetConfig+0xd4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d113      	bne.n	8004a08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000

08004a34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <TIM_OC3_SetConfig+0xd0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10d      	bne.n	8004aae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <TIM_OC3_SetConfig+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d113      	bne.n	8004ade <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	621a      	str	r2, [r3, #32]
}
 8004af8:	bf00      	nop
 8004afa:	371c      	adds	r7, #28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	40010000 	.word	0x40010000

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <TIM_OC4_SetConfig+0x9c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d109      	bne.n	8004b7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	019b      	lsls	r3, r3, #6
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	621a      	str	r2, [r3, #32]
}
 8004b96:	bf00      	nop
 8004b98:	371c      	adds	r7, #28
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40010000 	.word	0x40010000

08004ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e041      	b.n	8004c44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a14      	ldr	r2, [pc, #80]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d009      	beq.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a11      	ldr	r2, [pc, #68]	; (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10c      	bne.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40010000 	.word	0x40010000
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40014000 	.word	0x40014000

08004c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e03d      	b.n	8004cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <__errno>:
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <__errno+0x8>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	2000000c 	.word	0x2000000c

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4d0d      	ldr	r5, [pc, #52]	; (8004d6c <__libc_init_array+0x38>)
 8004d38:	4c0d      	ldr	r4, [pc, #52]	; (8004d70 <__libc_init_array+0x3c>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	2600      	movs	r6, #0
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	4d0b      	ldr	r5, [pc, #44]	; (8004d74 <__libc_init_array+0x40>)
 8004d46:	4c0c      	ldr	r4, [pc, #48]	; (8004d78 <__libc_init_array+0x44>)
 8004d48:	f002 fd4e 	bl	80077e8 <_init>
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	2600      	movs	r6, #0
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	0800cae4 	.word	0x0800cae4
 8004d70:	0800cae4 	.word	0x0800cae4
 8004d74:	0800cae4 	.word	0x0800cae4
 8004d78:	0800cae8 	.word	0x0800cae8

08004d7c <malloc>:
 8004d7c:	4b02      	ldr	r3, [pc, #8]	; (8004d88 <malloc+0xc>)
 8004d7e:	4601      	mov	r1, r0
 8004d80:	6818      	ldr	r0, [r3, #0]
 8004d82:	f000 b885 	b.w	8004e90 <_malloc_r>
 8004d86:	bf00      	nop
 8004d88:	2000000c 	.word	0x2000000c

08004d8c <memcpy>:
 8004d8c:	440a      	add	r2, r1
 8004d8e:	4291      	cmp	r1, r2
 8004d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d94:	d100      	bne.n	8004d98 <memcpy+0xc>
 8004d96:	4770      	bx	lr
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da2:	4291      	cmp	r1, r2
 8004da4:	d1f9      	bne.n	8004d9a <memcpy+0xe>
 8004da6:	bd10      	pop	{r4, pc}

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <_free_r>:
 8004db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d044      	beq.n	8004e48 <_free_r+0x90>
 8004dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc2:	9001      	str	r0, [sp, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dca:	bfb8      	it	lt
 8004dcc:	18e4      	addlt	r4, r4, r3
 8004dce:	f001 fec5 	bl	8006b5c <__malloc_lock>
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <_free_r+0x94>)
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	b933      	cbnz	r3, 8004de8 <_free_r+0x30>
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de4:	f001 bec0 	b.w	8006b68 <__malloc_unlock>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d908      	bls.n	8004dfe <_free_r+0x46>
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	e7ed      	b.n	8004dda <_free_r+0x22>
 8004dfe:	461a      	mov	r2, r3
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b10b      	cbz	r3, 8004e08 <_free_r+0x50>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d9fa      	bls.n	8004dfe <_free_r+0x46>
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	1855      	adds	r5, r2, r1
 8004e0c:	42a5      	cmp	r5, r4
 8004e0e:	d10b      	bne.n	8004e28 <_free_r+0x70>
 8004e10:	6824      	ldr	r4, [r4, #0]
 8004e12:	4421      	add	r1, r4
 8004e14:	1854      	adds	r4, r2, r1
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	d1e0      	bne.n	8004dde <_free_r+0x26>
 8004e1c:	681c      	ldr	r4, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6053      	str	r3, [r2, #4]
 8004e22:	4421      	add	r1, r4
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	e7da      	b.n	8004dde <_free_r+0x26>
 8004e28:	d902      	bls.n	8004e30 <_free_r+0x78>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	e7d6      	b.n	8004dde <_free_r+0x26>
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	1961      	adds	r1, r4, r5
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf04      	itt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	bf04      	itt	eq
 8004e40:	1949      	addeq	r1, r1, r5
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6054      	str	r4, [r2, #4]
 8004e46:	e7ca      	b.n	8004dde <_free_r+0x26>
 8004e48:	b003      	add	sp, #12
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	20000474 	.word	0x20000474

08004e50 <sbrk_aligned>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4e0e      	ldr	r6, [pc, #56]	; (8004e8c <sbrk_aligned+0x3c>)
 8004e54:	460c      	mov	r4, r1
 8004e56:	6831      	ldr	r1, [r6, #0]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	b911      	cbnz	r1, 8004e62 <sbrk_aligned+0x12>
 8004e5c:	f000 fd0e 	bl	800587c <_sbrk_r>
 8004e60:	6030      	str	r0, [r6, #0]
 8004e62:	4621      	mov	r1, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 fd09 	bl	800587c <_sbrk_r>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d00a      	beq.n	8004e84 <sbrk_aligned+0x34>
 8004e6e:	1cc4      	adds	r4, r0, #3
 8004e70:	f024 0403 	bic.w	r4, r4, #3
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d007      	beq.n	8004e88 <sbrk_aligned+0x38>
 8004e78:	1a21      	subs	r1, r4, r0
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 fcfe 	bl	800587c <_sbrk_r>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d101      	bne.n	8004e88 <sbrk_aligned+0x38>
 8004e84:	f04f 34ff 	mov.w	r4, #4294967295
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	20000478 	.word	0x20000478

08004e90 <_malloc_r>:
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	1ccd      	adds	r5, r1, #3
 8004e96:	f025 0503 	bic.w	r5, r5, #3
 8004e9a:	3508      	adds	r5, #8
 8004e9c:	2d0c      	cmp	r5, #12
 8004e9e:	bf38      	it	cc
 8004ea0:	250c      	movcc	r5, #12
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	db01      	blt.n	8004eac <_malloc_r+0x1c>
 8004ea8:	42a9      	cmp	r1, r5
 8004eaa:	d905      	bls.n	8004eb8 <_malloc_r+0x28>
 8004eac:	230c      	movs	r3, #12
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	4e2e      	ldr	r6, [pc, #184]	; (8004f74 <_malloc_r+0xe4>)
 8004eba:	f001 fe4f 	bl	8006b5c <__malloc_lock>
 8004ebe:	6833      	ldr	r3, [r6, #0]
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	bb34      	cbnz	r4, 8004f12 <_malloc_r+0x82>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f7ff ffc2 	bl	8004e50 <sbrk_aligned>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	4604      	mov	r4, r0
 8004ed0:	d14d      	bne.n	8004f6e <_malloc_r+0xde>
 8004ed2:	6834      	ldr	r4, [r6, #0]
 8004ed4:	4626      	mov	r6, r4
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d140      	bne.n	8004f5c <_malloc_r+0xcc>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4631      	mov	r1, r6
 8004ede:	4638      	mov	r0, r7
 8004ee0:	eb04 0803 	add.w	r8, r4, r3
 8004ee4:	f000 fcca 	bl	800587c <_sbrk_r>
 8004ee8:	4580      	cmp	r8, r0
 8004eea:	d13a      	bne.n	8004f62 <_malloc_r+0xd2>
 8004eec:	6821      	ldr	r1, [r4, #0]
 8004eee:	3503      	adds	r5, #3
 8004ef0:	1a6d      	subs	r5, r5, r1
 8004ef2:	f025 0503 	bic.w	r5, r5, #3
 8004ef6:	3508      	adds	r5, #8
 8004ef8:	2d0c      	cmp	r5, #12
 8004efa:	bf38      	it	cc
 8004efc:	250c      	movcc	r5, #12
 8004efe:	4629      	mov	r1, r5
 8004f00:	4638      	mov	r0, r7
 8004f02:	f7ff ffa5 	bl	8004e50 <sbrk_aligned>
 8004f06:	3001      	adds	r0, #1
 8004f08:	d02b      	beq.n	8004f62 <_malloc_r+0xd2>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	442b      	add	r3, r5
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	e00e      	b.n	8004f30 <_malloc_r+0xa0>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	1b52      	subs	r2, r2, r5
 8004f16:	d41e      	bmi.n	8004f56 <_malloc_r+0xc6>
 8004f18:	2a0b      	cmp	r2, #11
 8004f1a:	d916      	bls.n	8004f4a <_malloc_r+0xba>
 8004f1c:	1961      	adds	r1, r4, r5
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	bf18      	it	ne
 8004f24:	6059      	strne	r1, [r3, #4]
 8004f26:	6863      	ldr	r3, [r4, #4]
 8004f28:	bf08      	it	eq
 8004f2a:	6031      	streq	r1, [r6, #0]
 8004f2c:	5162      	str	r2, [r4, r5]
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	4638      	mov	r0, r7
 8004f32:	f104 060b 	add.w	r6, r4, #11
 8004f36:	f001 fe17 	bl	8006b68 <__malloc_unlock>
 8004f3a:	f026 0607 	bic.w	r6, r6, #7
 8004f3e:	1d23      	adds	r3, r4, #4
 8004f40:	1af2      	subs	r2, r6, r3
 8004f42:	d0b6      	beq.n	8004eb2 <_malloc_r+0x22>
 8004f44:	1b9b      	subs	r3, r3, r6
 8004f46:	50a3      	str	r3, [r4, r2]
 8004f48:	e7b3      	b.n	8004eb2 <_malloc_r+0x22>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	bf0c      	ite	eq
 8004f50:	6032      	streq	r2, [r6, #0]
 8004f52:	605a      	strne	r2, [r3, #4]
 8004f54:	e7ec      	b.n	8004f30 <_malloc_r+0xa0>
 8004f56:	4623      	mov	r3, r4
 8004f58:	6864      	ldr	r4, [r4, #4]
 8004f5a:	e7b2      	b.n	8004ec2 <_malloc_r+0x32>
 8004f5c:	4634      	mov	r4, r6
 8004f5e:	6876      	ldr	r6, [r6, #4]
 8004f60:	e7b9      	b.n	8004ed6 <_malloc_r+0x46>
 8004f62:	230c      	movs	r3, #12
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4638      	mov	r0, r7
 8004f68:	f001 fdfe 	bl	8006b68 <__malloc_unlock>
 8004f6c:	e7a1      	b.n	8004eb2 <_malloc_r+0x22>
 8004f6e:	6025      	str	r5, [r4, #0]
 8004f70:	e7de      	b.n	8004f30 <_malloc_r+0xa0>
 8004f72:	bf00      	nop
 8004f74:	20000474 	.word	0x20000474

08004f78 <__cvt>:
 8004f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f7c:	ec55 4b10 	vmov	r4, r5, d0
 8004f80:	2d00      	cmp	r5, #0
 8004f82:	460e      	mov	r6, r1
 8004f84:	4619      	mov	r1, r3
 8004f86:	462b      	mov	r3, r5
 8004f88:	bfbb      	ittet	lt
 8004f8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004f8e:	461d      	movlt	r5, r3
 8004f90:	2300      	movge	r3, #0
 8004f92:	232d      	movlt	r3, #45	; 0x2d
 8004f94:	700b      	strb	r3, [r1, #0]
 8004f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004f9c:	4691      	mov	r9, r2
 8004f9e:	f023 0820 	bic.w	r8, r3, #32
 8004fa2:	bfbc      	itt	lt
 8004fa4:	4622      	movlt	r2, r4
 8004fa6:	4614      	movlt	r4, r2
 8004fa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fac:	d005      	beq.n	8004fba <__cvt+0x42>
 8004fae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004fb2:	d100      	bne.n	8004fb6 <__cvt+0x3e>
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	e000      	b.n	8004fbc <__cvt+0x44>
 8004fba:	2103      	movs	r1, #3
 8004fbc:	ab03      	add	r3, sp, #12
 8004fbe:	9301      	str	r3, [sp, #4]
 8004fc0:	ab02      	add	r3, sp, #8
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	ec45 4b10 	vmov	d0, r4, r5
 8004fc8:	4653      	mov	r3, sl
 8004fca:	4632      	mov	r2, r6
 8004fcc:	f000 fdb4 	bl	8005b38 <_dtoa_r>
 8004fd0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004fd4:	4607      	mov	r7, r0
 8004fd6:	d102      	bne.n	8004fde <__cvt+0x66>
 8004fd8:	f019 0f01 	tst.w	r9, #1
 8004fdc:	d022      	beq.n	8005024 <__cvt+0xac>
 8004fde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004fe2:	eb07 0906 	add.w	r9, r7, r6
 8004fe6:	d110      	bne.n	800500a <__cvt+0x92>
 8004fe8:	783b      	ldrb	r3, [r7, #0]
 8004fea:	2b30      	cmp	r3, #48	; 0x30
 8004fec:	d10a      	bne.n	8005004 <__cvt+0x8c>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8004ffa:	b918      	cbnz	r0, 8005004 <__cvt+0x8c>
 8004ffc:	f1c6 0601 	rsb	r6, r6, #1
 8005000:	f8ca 6000 	str.w	r6, [sl]
 8005004:	f8da 3000 	ldr.w	r3, [sl]
 8005008:	4499      	add	r9, r3
 800500a:	2200      	movs	r2, #0
 800500c:	2300      	movs	r3, #0
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb fd79 	bl	8000b08 <__aeabi_dcmpeq>
 8005016:	b108      	cbz	r0, 800501c <__cvt+0xa4>
 8005018:	f8cd 900c 	str.w	r9, [sp, #12]
 800501c:	2230      	movs	r2, #48	; 0x30
 800501e:	9b03      	ldr	r3, [sp, #12]
 8005020:	454b      	cmp	r3, r9
 8005022:	d307      	bcc.n	8005034 <__cvt+0xbc>
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005028:	1bdb      	subs	r3, r3, r7
 800502a:	4638      	mov	r0, r7
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	b004      	add	sp, #16
 8005030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005034:	1c59      	adds	r1, r3, #1
 8005036:	9103      	str	r1, [sp, #12]
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	e7f0      	b.n	800501e <__cvt+0xa6>

0800503c <__exponent>:
 800503c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800503e:	4603      	mov	r3, r0
 8005040:	2900      	cmp	r1, #0
 8005042:	bfb8      	it	lt
 8005044:	4249      	neglt	r1, r1
 8005046:	f803 2b02 	strb.w	r2, [r3], #2
 800504a:	bfb4      	ite	lt
 800504c:	222d      	movlt	r2, #45	; 0x2d
 800504e:	222b      	movge	r2, #43	; 0x2b
 8005050:	2909      	cmp	r1, #9
 8005052:	7042      	strb	r2, [r0, #1]
 8005054:	dd2a      	ble.n	80050ac <__exponent+0x70>
 8005056:	f10d 0407 	add.w	r4, sp, #7
 800505a:	46a4      	mov	ip, r4
 800505c:	270a      	movs	r7, #10
 800505e:	46a6      	mov	lr, r4
 8005060:	460a      	mov	r2, r1
 8005062:	fb91 f6f7 	sdiv	r6, r1, r7
 8005066:	fb07 1516 	mls	r5, r7, r6, r1
 800506a:	3530      	adds	r5, #48	; 0x30
 800506c:	2a63      	cmp	r2, #99	; 0x63
 800506e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005072:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005076:	4631      	mov	r1, r6
 8005078:	dcf1      	bgt.n	800505e <__exponent+0x22>
 800507a:	3130      	adds	r1, #48	; 0x30
 800507c:	f1ae 0502 	sub.w	r5, lr, #2
 8005080:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005084:	1c44      	adds	r4, r0, #1
 8005086:	4629      	mov	r1, r5
 8005088:	4561      	cmp	r1, ip
 800508a:	d30a      	bcc.n	80050a2 <__exponent+0x66>
 800508c:	f10d 0209 	add.w	r2, sp, #9
 8005090:	eba2 020e 	sub.w	r2, r2, lr
 8005094:	4565      	cmp	r5, ip
 8005096:	bf88      	it	hi
 8005098:	2200      	movhi	r2, #0
 800509a:	4413      	add	r3, r2
 800509c:	1a18      	subs	r0, r3, r0
 800509e:	b003      	add	sp, #12
 80050a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80050aa:	e7ed      	b.n	8005088 <__exponent+0x4c>
 80050ac:	2330      	movs	r3, #48	; 0x30
 80050ae:	3130      	adds	r1, #48	; 0x30
 80050b0:	7083      	strb	r3, [r0, #2]
 80050b2:	70c1      	strb	r1, [r0, #3]
 80050b4:	1d03      	adds	r3, r0, #4
 80050b6:	e7f1      	b.n	800509c <__exponent+0x60>

080050b8 <_printf_float>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	ed2d 8b02 	vpush	{d8}
 80050c0:	b08d      	sub	sp, #52	; 0x34
 80050c2:	460c      	mov	r4, r1
 80050c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80050c8:	4616      	mov	r6, r2
 80050ca:	461f      	mov	r7, r3
 80050cc:	4605      	mov	r5, r0
 80050ce:	f001 fcd9 	bl	8006a84 <_localeconv_r>
 80050d2:	f8d0 a000 	ldr.w	sl, [r0]
 80050d6:	4650      	mov	r0, sl
 80050d8:	f7fb f89a 	bl	8000210 <strlen>
 80050dc:	2300      	movs	r3, #0
 80050de:	930a      	str	r3, [sp, #40]	; 0x28
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	9305      	str	r3, [sp, #20]
 80050e4:	f8d8 3000 	ldr.w	r3, [r8]
 80050e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80050ec:	3307      	adds	r3, #7
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	f103 0208 	add.w	r2, r3, #8
 80050f6:	f8c8 2000 	str.w	r2, [r8]
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005102:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005106:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800510a:	9307      	str	r3, [sp, #28]
 800510c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005110:	ee08 0a10 	vmov	s16, r0
 8005114:	4b9f      	ldr	r3, [pc, #636]	; (8005394 <_printf_float+0x2dc>)
 8005116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800511a:	f04f 32ff 	mov.w	r2, #4294967295
 800511e:	f7fb fd25 	bl	8000b6c <__aeabi_dcmpun>
 8005122:	bb88      	cbnz	r0, 8005188 <_printf_float+0xd0>
 8005124:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005128:	4b9a      	ldr	r3, [pc, #616]	; (8005394 <_printf_float+0x2dc>)
 800512a:	f04f 32ff 	mov.w	r2, #4294967295
 800512e:	f7fb fcff 	bl	8000b30 <__aeabi_dcmple>
 8005132:	bb48      	cbnz	r0, 8005188 <_printf_float+0xd0>
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb fcee 	bl	8000b1c <__aeabi_dcmplt>
 8005140:	b110      	cbz	r0, 8005148 <_printf_float+0x90>
 8005142:	232d      	movs	r3, #45	; 0x2d
 8005144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005148:	4b93      	ldr	r3, [pc, #588]	; (8005398 <_printf_float+0x2e0>)
 800514a:	4894      	ldr	r0, [pc, #592]	; (800539c <_printf_float+0x2e4>)
 800514c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005150:	bf94      	ite	ls
 8005152:	4698      	movls	r8, r3
 8005154:	4680      	movhi	r8, r0
 8005156:	2303      	movs	r3, #3
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	9b05      	ldr	r3, [sp, #20]
 800515c:	f023 0204 	bic.w	r2, r3, #4
 8005160:	6022      	str	r2, [r4, #0]
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	9700      	str	r7, [sp, #0]
 8005168:	4633      	mov	r3, r6
 800516a:	aa0b      	add	r2, sp, #44	; 0x2c
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f9d8 	bl	8005524 <_printf_common>
 8005174:	3001      	adds	r0, #1
 8005176:	f040 8090 	bne.w	800529a <_printf_float+0x1e2>
 800517a:	f04f 30ff 	mov.w	r0, #4294967295
 800517e:	b00d      	add	sp, #52	; 0x34
 8005180:	ecbd 8b02 	vpop	{d8}
 8005184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005188:	4642      	mov	r2, r8
 800518a:	464b      	mov	r3, r9
 800518c:	4640      	mov	r0, r8
 800518e:	4649      	mov	r1, r9
 8005190:	f7fb fcec 	bl	8000b6c <__aeabi_dcmpun>
 8005194:	b140      	cbz	r0, 80051a8 <_printf_float+0xf0>
 8005196:	464b      	mov	r3, r9
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfbc      	itt	lt
 800519c:	232d      	movlt	r3, #45	; 0x2d
 800519e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80051a2:	487f      	ldr	r0, [pc, #508]	; (80053a0 <_printf_float+0x2e8>)
 80051a4:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <_printf_float+0x2ec>)
 80051a6:	e7d1      	b.n	800514c <_printf_float+0x94>
 80051a8:	6863      	ldr	r3, [r4, #4]
 80051aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80051ae:	9206      	str	r2, [sp, #24]
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	d13f      	bne.n	8005234 <_printf_float+0x17c>
 80051b4:	2306      	movs	r3, #6
 80051b6:	6063      	str	r3, [r4, #4]
 80051b8:	9b05      	ldr	r3, [sp, #20]
 80051ba:	6861      	ldr	r1, [r4, #4]
 80051bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80051c0:	2300      	movs	r3, #0
 80051c2:	9303      	str	r3, [sp, #12]
 80051c4:	ab0a      	add	r3, sp, #40	; 0x28
 80051c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80051ca:	ab09      	add	r3, sp, #36	; 0x24
 80051cc:	ec49 8b10 	vmov	d0, r8, r9
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	6022      	str	r2, [r4, #0]
 80051d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80051d8:	4628      	mov	r0, r5
 80051da:	f7ff fecd 	bl	8004f78 <__cvt>
 80051de:	9b06      	ldr	r3, [sp, #24]
 80051e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051e2:	2b47      	cmp	r3, #71	; 0x47
 80051e4:	4680      	mov	r8, r0
 80051e6:	d108      	bne.n	80051fa <_printf_float+0x142>
 80051e8:	1cc8      	adds	r0, r1, #3
 80051ea:	db02      	blt.n	80051f2 <_printf_float+0x13a>
 80051ec:	6863      	ldr	r3, [r4, #4]
 80051ee:	4299      	cmp	r1, r3
 80051f0:	dd41      	ble.n	8005276 <_printf_float+0x1be>
 80051f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80051f6:	fa5f fb8b 	uxtb.w	fp, fp
 80051fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051fe:	d820      	bhi.n	8005242 <_printf_float+0x18a>
 8005200:	3901      	subs	r1, #1
 8005202:	465a      	mov	r2, fp
 8005204:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005208:	9109      	str	r1, [sp, #36]	; 0x24
 800520a:	f7ff ff17 	bl	800503c <__exponent>
 800520e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005210:	1813      	adds	r3, r2, r0
 8005212:	2a01      	cmp	r2, #1
 8005214:	4681      	mov	r9, r0
 8005216:	6123      	str	r3, [r4, #16]
 8005218:	dc02      	bgt.n	8005220 <_printf_float+0x168>
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	07d2      	lsls	r2, r2, #31
 800521e:	d501      	bpl.n	8005224 <_printf_float+0x16c>
 8005220:	3301      	adds	r3, #1
 8005222:	6123      	str	r3, [r4, #16]
 8005224:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005228:	2b00      	cmp	r3, #0
 800522a:	d09c      	beq.n	8005166 <_printf_float+0xae>
 800522c:	232d      	movs	r3, #45	; 0x2d
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005232:	e798      	b.n	8005166 <_printf_float+0xae>
 8005234:	9a06      	ldr	r2, [sp, #24]
 8005236:	2a47      	cmp	r2, #71	; 0x47
 8005238:	d1be      	bne.n	80051b8 <_printf_float+0x100>
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1bc      	bne.n	80051b8 <_printf_float+0x100>
 800523e:	2301      	movs	r3, #1
 8005240:	e7b9      	b.n	80051b6 <_printf_float+0xfe>
 8005242:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005246:	d118      	bne.n	800527a <_printf_float+0x1c2>
 8005248:	2900      	cmp	r1, #0
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	dd0b      	ble.n	8005266 <_printf_float+0x1ae>
 800524e:	6121      	str	r1, [r4, #16]
 8005250:	b913      	cbnz	r3, 8005258 <_printf_float+0x1a0>
 8005252:	6822      	ldr	r2, [r4, #0]
 8005254:	07d0      	lsls	r0, r2, #31
 8005256:	d502      	bpl.n	800525e <_printf_float+0x1a6>
 8005258:	3301      	adds	r3, #1
 800525a:	440b      	add	r3, r1
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005260:	f04f 0900 	mov.w	r9, #0
 8005264:	e7de      	b.n	8005224 <_printf_float+0x16c>
 8005266:	b913      	cbnz	r3, 800526e <_printf_float+0x1b6>
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	07d2      	lsls	r2, r2, #31
 800526c:	d501      	bpl.n	8005272 <_printf_float+0x1ba>
 800526e:	3302      	adds	r3, #2
 8005270:	e7f4      	b.n	800525c <_printf_float+0x1a4>
 8005272:	2301      	movs	r3, #1
 8005274:	e7f2      	b.n	800525c <_printf_float+0x1a4>
 8005276:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800527a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527c:	4299      	cmp	r1, r3
 800527e:	db05      	blt.n	800528c <_printf_float+0x1d4>
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	6121      	str	r1, [r4, #16]
 8005284:	07d8      	lsls	r0, r3, #31
 8005286:	d5ea      	bpl.n	800525e <_printf_float+0x1a6>
 8005288:	1c4b      	adds	r3, r1, #1
 800528a:	e7e7      	b.n	800525c <_printf_float+0x1a4>
 800528c:	2900      	cmp	r1, #0
 800528e:	bfd4      	ite	le
 8005290:	f1c1 0202 	rsble	r2, r1, #2
 8005294:	2201      	movgt	r2, #1
 8005296:	4413      	add	r3, r2
 8005298:	e7e0      	b.n	800525c <_printf_float+0x1a4>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	055a      	lsls	r2, r3, #21
 800529e:	d407      	bmi.n	80052b0 <_printf_float+0x1f8>
 80052a0:	6923      	ldr	r3, [r4, #16]
 80052a2:	4642      	mov	r2, r8
 80052a4:	4631      	mov	r1, r6
 80052a6:	4628      	mov	r0, r5
 80052a8:	47b8      	blx	r7
 80052aa:	3001      	adds	r0, #1
 80052ac:	d12c      	bne.n	8005308 <_printf_float+0x250>
 80052ae:	e764      	b.n	800517a <_printf_float+0xc2>
 80052b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80052b4:	f240 80e0 	bls.w	8005478 <_printf_float+0x3c0>
 80052b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052bc:	2200      	movs	r2, #0
 80052be:	2300      	movs	r3, #0
 80052c0:	f7fb fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d034      	beq.n	8005332 <_printf_float+0x27a>
 80052c8:	4a37      	ldr	r2, [pc, #220]	; (80053a8 <_printf_float+0x2f0>)
 80052ca:	2301      	movs	r3, #1
 80052cc:	4631      	mov	r1, r6
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f af51 	beq.w	800517a <_printf_float+0xc2>
 80052d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052dc:	429a      	cmp	r2, r3
 80052de:	db02      	blt.n	80052e6 <_printf_float+0x22e>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	07d8      	lsls	r0, r3, #31
 80052e4:	d510      	bpl.n	8005308 <_printf_float+0x250>
 80052e6:	ee18 3a10 	vmov	r3, s16
 80052ea:	4652      	mov	r2, sl
 80052ec:	4631      	mov	r1, r6
 80052ee:	4628      	mov	r0, r5
 80052f0:	47b8      	blx	r7
 80052f2:	3001      	adds	r0, #1
 80052f4:	f43f af41 	beq.w	800517a <_printf_float+0xc2>
 80052f8:	f04f 0800 	mov.w	r8, #0
 80052fc:	f104 091a 	add.w	r9, r4, #26
 8005300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005302:	3b01      	subs	r3, #1
 8005304:	4543      	cmp	r3, r8
 8005306:	dc09      	bgt.n	800531c <_printf_float+0x264>
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	079b      	lsls	r3, r3, #30
 800530c:	f100 8105 	bmi.w	800551a <_printf_float+0x462>
 8005310:	68e0      	ldr	r0, [r4, #12]
 8005312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005314:	4298      	cmp	r0, r3
 8005316:	bfb8      	it	lt
 8005318:	4618      	movlt	r0, r3
 800531a:	e730      	b.n	800517e <_printf_float+0xc6>
 800531c:	2301      	movs	r3, #1
 800531e:	464a      	mov	r2, r9
 8005320:	4631      	mov	r1, r6
 8005322:	4628      	mov	r0, r5
 8005324:	47b8      	blx	r7
 8005326:	3001      	adds	r0, #1
 8005328:	f43f af27 	beq.w	800517a <_printf_float+0xc2>
 800532c:	f108 0801 	add.w	r8, r8, #1
 8005330:	e7e6      	b.n	8005300 <_printf_float+0x248>
 8005332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	dc39      	bgt.n	80053ac <_printf_float+0x2f4>
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <_printf_float+0x2f0>)
 800533a:	2301      	movs	r3, #1
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	47b8      	blx	r7
 8005342:	3001      	adds	r0, #1
 8005344:	f43f af19 	beq.w	800517a <_printf_float+0xc2>
 8005348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800534c:	4313      	orrs	r3, r2
 800534e:	d102      	bne.n	8005356 <_printf_float+0x29e>
 8005350:	6823      	ldr	r3, [r4, #0]
 8005352:	07d9      	lsls	r1, r3, #31
 8005354:	d5d8      	bpl.n	8005308 <_printf_float+0x250>
 8005356:	ee18 3a10 	vmov	r3, s16
 800535a:	4652      	mov	r2, sl
 800535c:	4631      	mov	r1, r6
 800535e:	4628      	mov	r0, r5
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	f43f af09 	beq.w	800517a <_printf_float+0xc2>
 8005368:	f04f 0900 	mov.w	r9, #0
 800536c:	f104 0a1a 	add.w	sl, r4, #26
 8005370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005372:	425b      	negs	r3, r3
 8005374:	454b      	cmp	r3, r9
 8005376:	dc01      	bgt.n	800537c <_printf_float+0x2c4>
 8005378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800537a:	e792      	b.n	80052a2 <_printf_float+0x1ea>
 800537c:	2301      	movs	r3, #1
 800537e:	4652      	mov	r2, sl
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f aef7 	beq.w	800517a <_printf_float+0xc2>
 800538c:	f109 0901 	add.w	r9, r9, #1
 8005390:	e7ee      	b.n	8005370 <_printf_float+0x2b8>
 8005392:	bf00      	nop
 8005394:	7fefffff 	.word	0x7fefffff
 8005398:	0800c708 	.word	0x0800c708
 800539c:	0800c70c 	.word	0x0800c70c
 80053a0:	0800c714 	.word	0x0800c714
 80053a4:	0800c710 	.word	0x0800c710
 80053a8:	0800c718 	.word	0x0800c718
 80053ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053b0:	429a      	cmp	r2, r3
 80053b2:	bfa8      	it	ge
 80053b4:	461a      	movge	r2, r3
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	4691      	mov	r9, r2
 80053ba:	dc37      	bgt.n	800542c <_printf_float+0x374>
 80053bc:	f04f 0b00 	mov.w	fp, #0
 80053c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053c4:	f104 021a 	add.w	r2, r4, #26
 80053c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	eba3 0309 	sub.w	r3, r3, r9
 80053d0:	455b      	cmp	r3, fp
 80053d2:	dc33      	bgt.n	800543c <_printf_float+0x384>
 80053d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053d8:	429a      	cmp	r2, r3
 80053da:	db3b      	blt.n	8005454 <_printf_float+0x39c>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07da      	lsls	r2, r3, #31
 80053e0:	d438      	bmi.n	8005454 <_printf_float+0x39c>
 80053e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e4:	9a05      	ldr	r2, [sp, #20]
 80053e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053e8:	1a9a      	subs	r2, r3, r2
 80053ea:	eba3 0901 	sub.w	r9, r3, r1
 80053ee:	4591      	cmp	r9, r2
 80053f0:	bfa8      	it	ge
 80053f2:	4691      	movge	r9, r2
 80053f4:	f1b9 0f00 	cmp.w	r9, #0
 80053f8:	dc35      	bgt.n	8005466 <_printf_float+0x3ae>
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005402:	f104 0a1a 	add.w	sl, r4, #26
 8005406:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800540a:	1a9b      	subs	r3, r3, r2
 800540c:	eba3 0309 	sub.w	r3, r3, r9
 8005410:	4543      	cmp	r3, r8
 8005412:	f77f af79 	ble.w	8005308 <_printf_float+0x250>
 8005416:	2301      	movs	r3, #1
 8005418:	4652      	mov	r2, sl
 800541a:	4631      	mov	r1, r6
 800541c:	4628      	mov	r0, r5
 800541e:	47b8      	blx	r7
 8005420:	3001      	adds	r0, #1
 8005422:	f43f aeaa 	beq.w	800517a <_printf_float+0xc2>
 8005426:	f108 0801 	add.w	r8, r8, #1
 800542a:	e7ec      	b.n	8005406 <_printf_float+0x34e>
 800542c:	4613      	mov	r3, r2
 800542e:	4631      	mov	r1, r6
 8005430:	4642      	mov	r2, r8
 8005432:	4628      	mov	r0, r5
 8005434:	47b8      	blx	r7
 8005436:	3001      	adds	r0, #1
 8005438:	d1c0      	bne.n	80053bc <_printf_float+0x304>
 800543a:	e69e      	b.n	800517a <_printf_float+0xc2>
 800543c:	2301      	movs	r3, #1
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	9205      	str	r2, [sp, #20]
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	f43f ae97 	beq.w	800517a <_printf_float+0xc2>
 800544c:	9a05      	ldr	r2, [sp, #20]
 800544e:	f10b 0b01 	add.w	fp, fp, #1
 8005452:	e7b9      	b.n	80053c8 <_printf_float+0x310>
 8005454:	ee18 3a10 	vmov	r3, s16
 8005458:	4652      	mov	r2, sl
 800545a:	4631      	mov	r1, r6
 800545c:	4628      	mov	r0, r5
 800545e:	47b8      	blx	r7
 8005460:	3001      	adds	r0, #1
 8005462:	d1be      	bne.n	80053e2 <_printf_float+0x32a>
 8005464:	e689      	b.n	800517a <_printf_float+0xc2>
 8005466:	9a05      	ldr	r2, [sp, #20]
 8005468:	464b      	mov	r3, r9
 800546a:	4442      	add	r2, r8
 800546c:	4631      	mov	r1, r6
 800546e:	4628      	mov	r0, r5
 8005470:	47b8      	blx	r7
 8005472:	3001      	adds	r0, #1
 8005474:	d1c1      	bne.n	80053fa <_printf_float+0x342>
 8005476:	e680      	b.n	800517a <_printf_float+0xc2>
 8005478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800547a:	2a01      	cmp	r2, #1
 800547c:	dc01      	bgt.n	8005482 <_printf_float+0x3ca>
 800547e:	07db      	lsls	r3, r3, #31
 8005480:	d538      	bpl.n	80054f4 <_printf_float+0x43c>
 8005482:	2301      	movs	r3, #1
 8005484:	4642      	mov	r2, r8
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f ae74 	beq.w	800517a <_printf_float+0xc2>
 8005492:	ee18 3a10 	vmov	r3, s16
 8005496:	4652      	mov	r2, sl
 8005498:	4631      	mov	r1, r6
 800549a:	4628      	mov	r0, r5
 800549c:	47b8      	blx	r7
 800549e:	3001      	adds	r0, #1
 80054a0:	f43f ae6b 	beq.w	800517a <_printf_float+0xc2>
 80054a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054a8:	2200      	movs	r2, #0
 80054aa:	2300      	movs	r3, #0
 80054ac:	f7fb fb2c 	bl	8000b08 <__aeabi_dcmpeq>
 80054b0:	b9d8      	cbnz	r0, 80054ea <_printf_float+0x432>
 80054b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054b4:	f108 0201 	add.w	r2, r8, #1
 80054b8:	3b01      	subs	r3, #1
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	d10e      	bne.n	80054e2 <_printf_float+0x42a>
 80054c4:	e659      	b.n	800517a <_printf_float+0xc2>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4631      	mov	r1, r6
 80054cc:	4628      	mov	r0, r5
 80054ce:	47b8      	blx	r7
 80054d0:	3001      	adds	r0, #1
 80054d2:	f43f ae52 	beq.w	800517a <_printf_float+0xc2>
 80054d6:	f108 0801 	add.w	r8, r8, #1
 80054da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	4543      	cmp	r3, r8
 80054e0:	dcf1      	bgt.n	80054c6 <_printf_float+0x40e>
 80054e2:	464b      	mov	r3, r9
 80054e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054e8:	e6dc      	b.n	80052a4 <_printf_float+0x1ec>
 80054ea:	f04f 0800 	mov.w	r8, #0
 80054ee:	f104 0a1a 	add.w	sl, r4, #26
 80054f2:	e7f2      	b.n	80054da <_printf_float+0x422>
 80054f4:	2301      	movs	r3, #1
 80054f6:	4642      	mov	r2, r8
 80054f8:	e7df      	b.n	80054ba <_printf_float+0x402>
 80054fa:	2301      	movs	r3, #1
 80054fc:	464a      	mov	r2, r9
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	47b8      	blx	r7
 8005504:	3001      	adds	r0, #1
 8005506:	f43f ae38 	beq.w	800517a <_printf_float+0xc2>
 800550a:	f108 0801 	add.w	r8, r8, #1
 800550e:	68e3      	ldr	r3, [r4, #12]
 8005510:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005512:	1a5b      	subs	r3, r3, r1
 8005514:	4543      	cmp	r3, r8
 8005516:	dcf0      	bgt.n	80054fa <_printf_float+0x442>
 8005518:	e6fa      	b.n	8005310 <_printf_float+0x258>
 800551a:	f04f 0800 	mov.w	r8, #0
 800551e:	f104 0919 	add.w	r9, r4, #25
 8005522:	e7f4      	b.n	800550e <_printf_float+0x456>

08005524 <_printf_common>:
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005528:	4616      	mov	r6, r2
 800552a:	4699      	mov	r9, r3
 800552c:	688a      	ldr	r2, [r1, #8]
 800552e:	690b      	ldr	r3, [r1, #16]
 8005530:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005534:	4293      	cmp	r3, r2
 8005536:	bfb8      	it	lt
 8005538:	4613      	movlt	r3, r2
 800553a:	6033      	str	r3, [r6, #0]
 800553c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005540:	4607      	mov	r7, r0
 8005542:	460c      	mov	r4, r1
 8005544:	b10a      	cbz	r2, 800554a <_printf_common+0x26>
 8005546:	3301      	adds	r3, #1
 8005548:	6033      	str	r3, [r6, #0]
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	0699      	lsls	r1, r3, #26
 800554e:	bf42      	ittt	mi
 8005550:	6833      	ldrmi	r3, [r6, #0]
 8005552:	3302      	addmi	r3, #2
 8005554:	6033      	strmi	r3, [r6, #0]
 8005556:	6825      	ldr	r5, [r4, #0]
 8005558:	f015 0506 	ands.w	r5, r5, #6
 800555c:	d106      	bne.n	800556c <_printf_common+0x48>
 800555e:	f104 0a19 	add.w	sl, r4, #25
 8005562:	68e3      	ldr	r3, [r4, #12]
 8005564:	6832      	ldr	r2, [r6, #0]
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	42ab      	cmp	r3, r5
 800556a:	dc26      	bgt.n	80055ba <_printf_common+0x96>
 800556c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005570:	1e13      	subs	r3, r2, #0
 8005572:	6822      	ldr	r2, [r4, #0]
 8005574:	bf18      	it	ne
 8005576:	2301      	movne	r3, #1
 8005578:	0692      	lsls	r2, r2, #26
 800557a:	d42b      	bmi.n	80055d4 <_printf_common+0xb0>
 800557c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005580:	4649      	mov	r1, r9
 8005582:	4638      	mov	r0, r7
 8005584:	47c0      	blx	r8
 8005586:	3001      	adds	r0, #1
 8005588:	d01e      	beq.n	80055c8 <_printf_common+0xa4>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	68e5      	ldr	r5, [r4, #12]
 800558e:	6832      	ldr	r2, [r6, #0]
 8005590:	f003 0306 	and.w	r3, r3, #6
 8005594:	2b04      	cmp	r3, #4
 8005596:	bf08      	it	eq
 8005598:	1aad      	subeq	r5, r5, r2
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	bf0c      	ite	eq
 80055a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a4:	2500      	movne	r5, #0
 80055a6:	4293      	cmp	r3, r2
 80055a8:	bfc4      	itt	gt
 80055aa:	1a9b      	subgt	r3, r3, r2
 80055ac:	18ed      	addgt	r5, r5, r3
 80055ae:	2600      	movs	r6, #0
 80055b0:	341a      	adds	r4, #26
 80055b2:	42b5      	cmp	r5, r6
 80055b4:	d11a      	bne.n	80055ec <_printf_common+0xc8>
 80055b6:	2000      	movs	r0, #0
 80055b8:	e008      	b.n	80055cc <_printf_common+0xa8>
 80055ba:	2301      	movs	r3, #1
 80055bc:	4652      	mov	r2, sl
 80055be:	4649      	mov	r1, r9
 80055c0:	4638      	mov	r0, r7
 80055c2:	47c0      	blx	r8
 80055c4:	3001      	adds	r0, #1
 80055c6:	d103      	bne.n	80055d0 <_printf_common+0xac>
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7c6      	b.n	8005562 <_printf_common+0x3e>
 80055d4:	18e1      	adds	r1, r4, r3
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	2030      	movs	r0, #48	; 0x30
 80055da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055de:	4422      	add	r2, r4
 80055e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e8:	3302      	adds	r3, #2
 80055ea:	e7c7      	b.n	800557c <_printf_common+0x58>
 80055ec:	2301      	movs	r3, #1
 80055ee:	4622      	mov	r2, r4
 80055f0:	4649      	mov	r1, r9
 80055f2:	4638      	mov	r0, r7
 80055f4:	47c0      	blx	r8
 80055f6:	3001      	adds	r0, #1
 80055f8:	d0e6      	beq.n	80055c8 <_printf_common+0xa4>
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7d9      	b.n	80055b2 <_printf_common+0x8e>
	...

08005600 <_printf_i>:
 8005600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005604:	7e0f      	ldrb	r7, [r1, #24]
 8005606:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005608:	2f78      	cmp	r7, #120	; 0x78
 800560a:	4691      	mov	r9, r2
 800560c:	4680      	mov	r8, r0
 800560e:	460c      	mov	r4, r1
 8005610:	469a      	mov	sl, r3
 8005612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005616:	d807      	bhi.n	8005628 <_printf_i+0x28>
 8005618:	2f62      	cmp	r7, #98	; 0x62
 800561a:	d80a      	bhi.n	8005632 <_printf_i+0x32>
 800561c:	2f00      	cmp	r7, #0
 800561e:	f000 80d8 	beq.w	80057d2 <_printf_i+0x1d2>
 8005622:	2f58      	cmp	r7, #88	; 0x58
 8005624:	f000 80a3 	beq.w	800576e <_printf_i+0x16e>
 8005628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800562c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005630:	e03a      	b.n	80056a8 <_printf_i+0xa8>
 8005632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005636:	2b15      	cmp	r3, #21
 8005638:	d8f6      	bhi.n	8005628 <_printf_i+0x28>
 800563a:	a101      	add	r1, pc, #4	; (adr r1, 8005640 <_printf_i+0x40>)
 800563c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005640:	08005699 	.word	0x08005699
 8005644:	080056ad 	.word	0x080056ad
 8005648:	08005629 	.word	0x08005629
 800564c:	08005629 	.word	0x08005629
 8005650:	08005629 	.word	0x08005629
 8005654:	08005629 	.word	0x08005629
 8005658:	080056ad 	.word	0x080056ad
 800565c:	08005629 	.word	0x08005629
 8005660:	08005629 	.word	0x08005629
 8005664:	08005629 	.word	0x08005629
 8005668:	08005629 	.word	0x08005629
 800566c:	080057b9 	.word	0x080057b9
 8005670:	080056dd 	.word	0x080056dd
 8005674:	0800579b 	.word	0x0800579b
 8005678:	08005629 	.word	0x08005629
 800567c:	08005629 	.word	0x08005629
 8005680:	080057db 	.word	0x080057db
 8005684:	08005629 	.word	0x08005629
 8005688:	080056dd 	.word	0x080056dd
 800568c:	08005629 	.word	0x08005629
 8005690:	08005629 	.word	0x08005629
 8005694:	080057a3 	.word	0x080057a3
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	602a      	str	r2, [r5, #0]
 80056a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a3      	b.n	80057f4 <_printf_i+0x1f4>
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	6829      	ldr	r1, [r5, #0]
 80056b0:	0606      	lsls	r6, r0, #24
 80056b2:	f101 0304 	add.w	r3, r1, #4
 80056b6:	d50a      	bpl.n	80056ce <_printf_i+0xce>
 80056b8:	680e      	ldr	r6, [r1, #0]
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	2e00      	cmp	r6, #0
 80056be:	da03      	bge.n	80056c8 <_printf_i+0xc8>
 80056c0:	232d      	movs	r3, #45	; 0x2d
 80056c2:	4276      	negs	r6, r6
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c8:	485e      	ldr	r0, [pc, #376]	; (8005844 <_printf_i+0x244>)
 80056ca:	230a      	movs	r3, #10
 80056cc:	e019      	b.n	8005702 <_printf_i+0x102>
 80056ce:	680e      	ldr	r6, [r1, #0]
 80056d0:	602b      	str	r3, [r5, #0]
 80056d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056d6:	bf18      	it	ne
 80056d8:	b236      	sxthne	r6, r6
 80056da:	e7ef      	b.n	80056bc <_printf_i+0xbc>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	6820      	ldr	r0, [r4, #0]
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	6029      	str	r1, [r5, #0]
 80056e4:	0601      	lsls	r1, r0, #24
 80056e6:	d501      	bpl.n	80056ec <_printf_i+0xec>
 80056e8:	681e      	ldr	r6, [r3, #0]
 80056ea:	e002      	b.n	80056f2 <_printf_i+0xf2>
 80056ec:	0646      	lsls	r6, r0, #25
 80056ee:	d5fb      	bpl.n	80056e8 <_printf_i+0xe8>
 80056f0:	881e      	ldrh	r6, [r3, #0]
 80056f2:	4854      	ldr	r0, [pc, #336]	; (8005844 <_printf_i+0x244>)
 80056f4:	2f6f      	cmp	r7, #111	; 0x6f
 80056f6:	bf0c      	ite	eq
 80056f8:	2308      	moveq	r3, #8
 80056fa:	230a      	movne	r3, #10
 80056fc:	2100      	movs	r1, #0
 80056fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005702:	6865      	ldr	r5, [r4, #4]
 8005704:	60a5      	str	r5, [r4, #8]
 8005706:	2d00      	cmp	r5, #0
 8005708:	bfa2      	ittt	ge
 800570a:	6821      	ldrge	r1, [r4, #0]
 800570c:	f021 0104 	bicge.w	r1, r1, #4
 8005710:	6021      	strge	r1, [r4, #0]
 8005712:	b90e      	cbnz	r6, 8005718 <_printf_i+0x118>
 8005714:	2d00      	cmp	r5, #0
 8005716:	d04d      	beq.n	80057b4 <_printf_i+0x1b4>
 8005718:	4615      	mov	r5, r2
 800571a:	fbb6 f1f3 	udiv	r1, r6, r3
 800571e:	fb03 6711 	mls	r7, r3, r1, r6
 8005722:	5dc7      	ldrb	r7, [r0, r7]
 8005724:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005728:	4637      	mov	r7, r6
 800572a:	42bb      	cmp	r3, r7
 800572c:	460e      	mov	r6, r1
 800572e:	d9f4      	bls.n	800571a <_printf_i+0x11a>
 8005730:	2b08      	cmp	r3, #8
 8005732:	d10b      	bne.n	800574c <_printf_i+0x14c>
 8005734:	6823      	ldr	r3, [r4, #0]
 8005736:	07de      	lsls	r6, r3, #31
 8005738:	d508      	bpl.n	800574c <_printf_i+0x14c>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	6861      	ldr	r1, [r4, #4]
 800573e:	4299      	cmp	r1, r3
 8005740:	bfde      	ittt	le
 8005742:	2330      	movle	r3, #48	; 0x30
 8005744:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005748:	f105 35ff 	addle.w	r5, r5, #4294967295
 800574c:	1b52      	subs	r2, r2, r5
 800574e:	6122      	str	r2, [r4, #16]
 8005750:	f8cd a000 	str.w	sl, [sp]
 8005754:	464b      	mov	r3, r9
 8005756:	aa03      	add	r2, sp, #12
 8005758:	4621      	mov	r1, r4
 800575a:	4640      	mov	r0, r8
 800575c:	f7ff fee2 	bl	8005524 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	d14c      	bne.n	80057fe <_printf_i+0x1fe>
 8005764:	f04f 30ff 	mov.w	r0, #4294967295
 8005768:	b004      	add	sp, #16
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	4835      	ldr	r0, [pc, #212]	; (8005844 <_printf_i+0x244>)
 8005770:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005774:	6829      	ldr	r1, [r5, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	f851 6b04 	ldr.w	r6, [r1], #4
 800577c:	6029      	str	r1, [r5, #0]
 800577e:	061d      	lsls	r5, r3, #24
 8005780:	d514      	bpl.n	80057ac <_printf_i+0x1ac>
 8005782:	07df      	lsls	r7, r3, #31
 8005784:	bf44      	itt	mi
 8005786:	f043 0320 	orrmi.w	r3, r3, #32
 800578a:	6023      	strmi	r3, [r4, #0]
 800578c:	b91e      	cbnz	r6, 8005796 <_printf_i+0x196>
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	f023 0320 	bic.w	r3, r3, #32
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	2310      	movs	r3, #16
 8005798:	e7b0      	b.n	80056fc <_printf_i+0xfc>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	f043 0320 	orr.w	r3, r3, #32
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	2378      	movs	r3, #120	; 0x78
 80057a4:	4828      	ldr	r0, [pc, #160]	; (8005848 <_printf_i+0x248>)
 80057a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057aa:	e7e3      	b.n	8005774 <_printf_i+0x174>
 80057ac:	0659      	lsls	r1, r3, #25
 80057ae:	bf48      	it	mi
 80057b0:	b2b6      	uxthmi	r6, r6
 80057b2:	e7e6      	b.n	8005782 <_printf_i+0x182>
 80057b4:	4615      	mov	r5, r2
 80057b6:	e7bb      	b.n	8005730 <_printf_i+0x130>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	6826      	ldr	r6, [r4, #0]
 80057bc:	6961      	ldr	r1, [r4, #20]
 80057be:	1d18      	adds	r0, r3, #4
 80057c0:	6028      	str	r0, [r5, #0]
 80057c2:	0635      	lsls	r5, r6, #24
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	d501      	bpl.n	80057cc <_printf_i+0x1cc>
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	e002      	b.n	80057d2 <_printf_i+0x1d2>
 80057cc:	0670      	lsls	r0, r6, #25
 80057ce:	d5fb      	bpl.n	80057c8 <_printf_i+0x1c8>
 80057d0:	8019      	strh	r1, [r3, #0]
 80057d2:	2300      	movs	r3, #0
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	4615      	mov	r5, r2
 80057d8:	e7ba      	b.n	8005750 <_printf_i+0x150>
 80057da:	682b      	ldr	r3, [r5, #0]
 80057dc:	1d1a      	adds	r2, r3, #4
 80057de:	602a      	str	r2, [r5, #0]
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	6862      	ldr	r2, [r4, #4]
 80057e4:	2100      	movs	r1, #0
 80057e6:	4628      	mov	r0, r5
 80057e8:	f7fa fd1a 	bl	8000220 <memchr>
 80057ec:	b108      	cbz	r0, 80057f2 <_printf_i+0x1f2>
 80057ee:	1b40      	subs	r0, r0, r5
 80057f0:	6060      	str	r0, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	2300      	movs	r3, #0
 80057f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fc:	e7a8      	b.n	8005750 <_printf_i+0x150>
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	462a      	mov	r2, r5
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d0ab      	beq.n	8005764 <_printf_i+0x164>
 800580c:	6823      	ldr	r3, [r4, #0]
 800580e:	079b      	lsls	r3, r3, #30
 8005810:	d413      	bmi.n	800583a <_printf_i+0x23a>
 8005812:	68e0      	ldr	r0, [r4, #12]
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	4298      	cmp	r0, r3
 8005818:	bfb8      	it	lt
 800581a:	4618      	movlt	r0, r3
 800581c:	e7a4      	b.n	8005768 <_printf_i+0x168>
 800581e:	2301      	movs	r3, #1
 8005820:	4632      	mov	r2, r6
 8005822:	4649      	mov	r1, r9
 8005824:	4640      	mov	r0, r8
 8005826:	47d0      	blx	sl
 8005828:	3001      	adds	r0, #1
 800582a:	d09b      	beq.n	8005764 <_printf_i+0x164>
 800582c:	3501      	adds	r5, #1
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	9903      	ldr	r1, [sp, #12]
 8005832:	1a5b      	subs	r3, r3, r1
 8005834:	42ab      	cmp	r3, r5
 8005836:	dcf2      	bgt.n	800581e <_printf_i+0x21e>
 8005838:	e7eb      	b.n	8005812 <_printf_i+0x212>
 800583a:	2500      	movs	r5, #0
 800583c:	f104 0619 	add.w	r6, r4, #25
 8005840:	e7f5      	b.n	800582e <_printf_i+0x22e>
 8005842:	bf00      	nop
 8005844:	0800c71a 	.word	0x0800c71a
 8005848:	0800c72b 	.word	0x0800c72b

0800584c <iprintf>:
 800584c:	b40f      	push	{r0, r1, r2, r3}
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <iprintf+0x2c>)
 8005850:	b513      	push	{r0, r1, r4, lr}
 8005852:	681c      	ldr	r4, [r3, #0]
 8005854:	b124      	cbz	r4, 8005860 <iprintf+0x14>
 8005856:	69a3      	ldr	r3, [r4, #24]
 8005858:	b913      	cbnz	r3, 8005860 <iprintf+0x14>
 800585a:	4620      	mov	r0, r4
 800585c:	f001 f874 	bl	8006948 <__sinit>
 8005860:	ab05      	add	r3, sp, #20
 8005862:	9a04      	ldr	r2, [sp, #16]
 8005864:	68a1      	ldr	r1, [r4, #8]
 8005866:	9301      	str	r3, [sp, #4]
 8005868:	4620      	mov	r0, r4
 800586a:	f001 fd47 	bl	80072fc <_vfiprintf_r>
 800586e:	b002      	add	sp, #8
 8005870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005874:	b004      	add	sp, #16
 8005876:	4770      	bx	lr
 8005878:	2000000c 	.word	0x2000000c

0800587c <_sbrk_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d06      	ldr	r5, [pc, #24]	; (8005898 <_sbrk_r+0x1c>)
 8005880:	2300      	movs	r3, #0
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	602b      	str	r3, [r5, #0]
 8005888:	f7fc fc06 	bl	8002098 <_sbrk>
 800588c:	1c43      	adds	r3, r0, #1
 800588e:	d102      	bne.n	8005896 <_sbrk_r+0x1a>
 8005890:	682b      	ldr	r3, [r5, #0]
 8005892:	b103      	cbz	r3, 8005896 <_sbrk_r+0x1a>
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	bd38      	pop	{r3, r4, r5, pc}
 8005898:	20000480 	.word	0x20000480

0800589c <__swbuf_r>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	460e      	mov	r6, r1
 80058a0:	4614      	mov	r4, r2
 80058a2:	4605      	mov	r5, r0
 80058a4:	b118      	cbz	r0, 80058ae <__swbuf_r+0x12>
 80058a6:	6983      	ldr	r3, [r0, #24]
 80058a8:	b90b      	cbnz	r3, 80058ae <__swbuf_r+0x12>
 80058aa:	f001 f84d 	bl	8006948 <__sinit>
 80058ae:	4b21      	ldr	r3, [pc, #132]	; (8005934 <__swbuf_r+0x98>)
 80058b0:	429c      	cmp	r4, r3
 80058b2:	d12b      	bne.n	800590c <__swbuf_r+0x70>
 80058b4:	686c      	ldr	r4, [r5, #4]
 80058b6:	69a3      	ldr	r3, [r4, #24]
 80058b8:	60a3      	str	r3, [r4, #8]
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	071a      	lsls	r2, r3, #28
 80058be:	d52f      	bpl.n	8005920 <__swbuf_r+0x84>
 80058c0:	6923      	ldr	r3, [r4, #16]
 80058c2:	b36b      	cbz	r3, 8005920 <__swbuf_r+0x84>
 80058c4:	6923      	ldr	r3, [r4, #16]
 80058c6:	6820      	ldr	r0, [r4, #0]
 80058c8:	1ac0      	subs	r0, r0, r3
 80058ca:	6963      	ldr	r3, [r4, #20]
 80058cc:	b2f6      	uxtb	r6, r6
 80058ce:	4283      	cmp	r3, r0
 80058d0:	4637      	mov	r7, r6
 80058d2:	dc04      	bgt.n	80058de <__swbuf_r+0x42>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 ffa2 	bl	8006820 <_fflush_r>
 80058dc:	bb30      	cbnz	r0, 800592c <__swbuf_r+0x90>
 80058de:	68a3      	ldr	r3, [r4, #8]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	6823      	ldr	r3, [r4, #0]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	6022      	str	r2, [r4, #0]
 80058ea:	701e      	strb	r6, [r3, #0]
 80058ec:	6963      	ldr	r3, [r4, #20]
 80058ee:	3001      	adds	r0, #1
 80058f0:	4283      	cmp	r3, r0
 80058f2:	d004      	beq.n	80058fe <__swbuf_r+0x62>
 80058f4:	89a3      	ldrh	r3, [r4, #12]
 80058f6:	07db      	lsls	r3, r3, #31
 80058f8:	d506      	bpl.n	8005908 <__swbuf_r+0x6c>
 80058fa:	2e0a      	cmp	r6, #10
 80058fc:	d104      	bne.n	8005908 <__swbuf_r+0x6c>
 80058fe:	4621      	mov	r1, r4
 8005900:	4628      	mov	r0, r5
 8005902:	f000 ff8d 	bl	8006820 <_fflush_r>
 8005906:	b988      	cbnz	r0, 800592c <__swbuf_r+0x90>
 8005908:	4638      	mov	r0, r7
 800590a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <__swbuf_r+0x9c>)
 800590e:	429c      	cmp	r4, r3
 8005910:	d101      	bne.n	8005916 <__swbuf_r+0x7a>
 8005912:	68ac      	ldr	r4, [r5, #8]
 8005914:	e7cf      	b.n	80058b6 <__swbuf_r+0x1a>
 8005916:	4b09      	ldr	r3, [pc, #36]	; (800593c <__swbuf_r+0xa0>)
 8005918:	429c      	cmp	r4, r3
 800591a:	bf08      	it	eq
 800591c:	68ec      	ldreq	r4, [r5, #12]
 800591e:	e7ca      	b.n	80058b6 <__swbuf_r+0x1a>
 8005920:	4621      	mov	r1, r4
 8005922:	4628      	mov	r0, r5
 8005924:	f000 f80c 	bl	8005940 <__swsetup_r>
 8005928:	2800      	cmp	r0, #0
 800592a:	d0cb      	beq.n	80058c4 <__swbuf_r+0x28>
 800592c:	f04f 37ff 	mov.w	r7, #4294967295
 8005930:	e7ea      	b.n	8005908 <__swbuf_r+0x6c>
 8005932:	bf00      	nop
 8005934:	0800c7ec 	.word	0x0800c7ec
 8005938:	0800c80c 	.word	0x0800c80c
 800593c:	0800c7cc 	.word	0x0800c7cc

08005940 <__swsetup_r>:
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <__swsetup_r+0xcc>)
 8005942:	b570      	push	{r4, r5, r6, lr}
 8005944:	681d      	ldr	r5, [r3, #0]
 8005946:	4606      	mov	r6, r0
 8005948:	460c      	mov	r4, r1
 800594a:	b125      	cbz	r5, 8005956 <__swsetup_r+0x16>
 800594c:	69ab      	ldr	r3, [r5, #24]
 800594e:	b913      	cbnz	r3, 8005956 <__swsetup_r+0x16>
 8005950:	4628      	mov	r0, r5
 8005952:	f000 fff9 	bl	8006948 <__sinit>
 8005956:	4b2e      	ldr	r3, [pc, #184]	; (8005a10 <__swsetup_r+0xd0>)
 8005958:	429c      	cmp	r4, r3
 800595a:	d10f      	bne.n	800597c <__swsetup_r+0x3c>
 800595c:	686c      	ldr	r4, [r5, #4]
 800595e:	89a3      	ldrh	r3, [r4, #12]
 8005960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005964:	0719      	lsls	r1, r3, #28
 8005966:	d42c      	bmi.n	80059c2 <__swsetup_r+0x82>
 8005968:	06dd      	lsls	r5, r3, #27
 800596a:	d411      	bmi.n	8005990 <__swsetup_r+0x50>
 800596c:	2309      	movs	r3, #9
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005974:	81a3      	strh	r3, [r4, #12]
 8005976:	f04f 30ff 	mov.w	r0, #4294967295
 800597a:	e03e      	b.n	80059fa <__swsetup_r+0xba>
 800597c:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <__swsetup_r+0xd4>)
 800597e:	429c      	cmp	r4, r3
 8005980:	d101      	bne.n	8005986 <__swsetup_r+0x46>
 8005982:	68ac      	ldr	r4, [r5, #8]
 8005984:	e7eb      	b.n	800595e <__swsetup_r+0x1e>
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <__swsetup_r+0xd8>)
 8005988:	429c      	cmp	r4, r3
 800598a:	bf08      	it	eq
 800598c:	68ec      	ldreq	r4, [r5, #12]
 800598e:	e7e6      	b.n	800595e <__swsetup_r+0x1e>
 8005990:	0758      	lsls	r0, r3, #29
 8005992:	d512      	bpl.n	80059ba <__swsetup_r+0x7a>
 8005994:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005996:	b141      	cbz	r1, 80059aa <__swsetup_r+0x6a>
 8005998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800599c:	4299      	cmp	r1, r3
 800599e:	d002      	beq.n	80059a6 <__swsetup_r+0x66>
 80059a0:	4630      	mov	r0, r6
 80059a2:	f7ff fa09 	bl	8004db8 <_free_r>
 80059a6:	2300      	movs	r3, #0
 80059a8:	6363      	str	r3, [r4, #52]	; 0x34
 80059aa:	89a3      	ldrh	r3, [r4, #12]
 80059ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059b0:	81a3      	strh	r3, [r4, #12]
 80059b2:	2300      	movs	r3, #0
 80059b4:	6063      	str	r3, [r4, #4]
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0308 	orr.w	r3, r3, #8
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	6923      	ldr	r3, [r4, #16]
 80059c4:	b94b      	cbnz	r3, 80059da <__swsetup_r+0x9a>
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d0:	d003      	beq.n	80059da <__swsetup_r+0x9a>
 80059d2:	4621      	mov	r1, r4
 80059d4:	4630      	mov	r0, r6
 80059d6:	f001 f881 	bl	8006adc <__smakebuf_r>
 80059da:	89a0      	ldrh	r0, [r4, #12]
 80059dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059e0:	f010 0301 	ands.w	r3, r0, #1
 80059e4:	d00a      	beq.n	80059fc <__swsetup_r+0xbc>
 80059e6:	2300      	movs	r3, #0
 80059e8:	60a3      	str	r3, [r4, #8]
 80059ea:	6963      	ldr	r3, [r4, #20]
 80059ec:	425b      	negs	r3, r3
 80059ee:	61a3      	str	r3, [r4, #24]
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	b943      	cbnz	r3, 8005a06 <__swsetup_r+0xc6>
 80059f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80059f8:	d1ba      	bne.n	8005970 <__swsetup_r+0x30>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	0781      	lsls	r1, r0, #30
 80059fe:	bf58      	it	pl
 8005a00:	6963      	ldrpl	r3, [r4, #20]
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	e7f4      	b.n	80059f0 <__swsetup_r+0xb0>
 8005a06:	2000      	movs	r0, #0
 8005a08:	e7f7      	b.n	80059fa <__swsetup_r+0xba>
 8005a0a:	bf00      	nop
 8005a0c:	2000000c 	.word	0x2000000c
 8005a10:	0800c7ec 	.word	0x0800c7ec
 8005a14:	0800c80c 	.word	0x0800c80c
 8005a18:	0800c7cc 	.word	0x0800c7cc

08005a1c <quorem>:
 8005a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	6903      	ldr	r3, [r0, #16]
 8005a22:	690c      	ldr	r4, [r1, #16]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	4607      	mov	r7, r0
 8005a28:	f2c0 8081 	blt.w	8005b2e <quorem+0x112>
 8005a2c:	3c01      	subs	r4, #1
 8005a2e:	f101 0814 	add.w	r8, r1, #20
 8005a32:	f100 0514 	add.w	r5, r0, #20
 8005a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a3a:	9301      	str	r3, [sp, #4]
 8005a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a44:	3301      	adds	r3, #1
 8005a46:	429a      	cmp	r2, r3
 8005a48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a54:	d331      	bcc.n	8005aba <quorem+0x9e>
 8005a56:	f04f 0e00 	mov.w	lr, #0
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	46ac      	mov	ip, r5
 8005a5e:	46f2      	mov	sl, lr
 8005a60:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a64:	b293      	uxth	r3, r2
 8005a66:	fb06 e303 	mla	r3, r6, r3, lr
 8005a6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	ebaa 0303 	sub.w	r3, sl, r3
 8005a74:	f8dc a000 	ldr.w	sl, [ip]
 8005a78:	0c12      	lsrs	r2, r2, #16
 8005a7a:	fa13 f38a 	uxtah	r3, r3, sl
 8005a7e:	fb06 e202 	mla	r2, r6, r2, lr
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	9b00      	ldr	r3, [sp, #0]
 8005a86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a94:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a98:	4581      	cmp	r9, r0
 8005a9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9e:	f84c 3b04 	str.w	r3, [ip], #4
 8005aa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005aa6:	d2db      	bcs.n	8005a60 <quorem+0x44>
 8005aa8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005aac:	b92b      	cbnz	r3, 8005aba <quorem+0x9e>
 8005aae:	9b01      	ldr	r3, [sp, #4]
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	429d      	cmp	r5, r3
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	d32e      	bcc.n	8005b16 <quorem+0xfa>
 8005ab8:	613c      	str	r4, [r7, #16]
 8005aba:	4638      	mov	r0, r7
 8005abc:	f001 fadc 	bl	8007078 <__mcmp>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	db24      	blt.n	8005b0e <quorem+0xf2>
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f04f 0c00 	mov.w	ip, #0
 8005acc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ad0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ad4:	b293      	uxth	r3, r2
 8005ad6:	ebac 0303 	sub.w	r3, ip, r3
 8005ada:	0c12      	lsrs	r2, r2, #16
 8005adc:	fa13 f38e 	uxtah	r3, r3, lr
 8005ae0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005ae4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aee:	45c1      	cmp	r9, r8
 8005af0:	f840 3b04 	str.w	r3, [r0], #4
 8005af4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005af8:	d2e8      	bcs.n	8005acc <quorem+0xb0>
 8005afa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005afe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b02:	b922      	cbnz	r2, 8005b0e <quorem+0xf2>
 8005b04:	3b04      	subs	r3, #4
 8005b06:	429d      	cmp	r5, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	d30a      	bcc.n	8005b22 <quorem+0x106>
 8005b0c:	613c      	str	r4, [r7, #16]
 8005b0e:	4630      	mov	r0, r6
 8005b10:	b003      	add	sp, #12
 8005b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	3b04      	subs	r3, #4
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d1cc      	bne.n	8005ab8 <quorem+0x9c>
 8005b1e:	3c01      	subs	r4, #1
 8005b20:	e7c7      	b.n	8005ab2 <quorem+0x96>
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	3b04      	subs	r3, #4
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d1f0      	bne.n	8005b0c <quorem+0xf0>
 8005b2a:	3c01      	subs	r4, #1
 8005b2c:	e7eb      	b.n	8005b06 <quorem+0xea>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	e7ee      	b.n	8005b10 <quorem+0xf4>
 8005b32:	0000      	movs	r0, r0
 8005b34:	0000      	movs	r0, r0
	...

08005b38 <_dtoa_r>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	ed2d 8b04 	vpush	{d8-d9}
 8005b40:	ec57 6b10 	vmov	r6, r7, d0
 8005b44:	b093      	sub	sp, #76	; 0x4c
 8005b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b4c:	9106      	str	r1, [sp, #24]
 8005b4e:	ee10 aa10 	vmov	sl, s0
 8005b52:	4604      	mov	r4, r0
 8005b54:	9209      	str	r2, [sp, #36]	; 0x24
 8005b56:	930c      	str	r3, [sp, #48]	; 0x30
 8005b58:	46bb      	mov	fp, r7
 8005b5a:	b975      	cbnz	r5, 8005b7a <_dtoa_r+0x42>
 8005b5c:	2010      	movs	r0, #16
 8005b5e:	f7ff f90d 	bl	8004d7c <malloc>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6260      	str	r0, [r4, #36]	; 0x24
 8005b66:	b920      	cbnz	r0, 8005b72 <_dtoa_r+0x3a>
 8005b68:	4ba7      	ldr	r3, [pc, #668]	; (8005e08 <_dtoa_r+0x2d0>)
 8005b6a:	21ea      	movs	r1, #234	; 0xea
 8005b6c:	48a7      	ldr	r0, [pc, #668]	; (8005e0c <_dtoa_r+0x2d4>)
 8005b6e:	f001 fd4b 	bl	8007608 <__assert_func>
 8005b72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b76:	6005      	str	r5, [r0, #0]
 8005b78:	60c5      	str	r5, [r0, #12]
 8005b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	b151      	cbz	r1, 8005b96 <_dtoa_r+0x5e>
 8005b80:	685a      	ldr	r2, [r3, #4]
 8005b82:	604a      	str	r2, [r1, #4]
 8005b84:	2301      	movs	r3, #1
 8005b86:	4093      	lsls	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	f001 f832 	bl	8006bf4 <_Bfree>
 8005b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	1e3b      	subs	r3, r7, #0
 8005b98:	bfaa      	itet	ge
 8005b9a:	2300      	movge	r3, #0
 8005b9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005ba0:	f8c8 3000 	strge.w	r3, [r8]
 8005ba4:	4b9a      	ldr	r3, [pc, #616]	; (8005e10 <_dtoa_r+0x2d8>)
 8005ba6:	bfbc      	itt	lt
 8005ba8:	2201      	movlt	r2, #1
 8005baa:	f8c8 2000 	strlt.w	r2, [r8]
 8005bae:	ea33 030b 	bics.w	r3, r3, fp
 8005bb2:	d11b      	bne.n	8005bec <_dtoa_r+0xb4>
 8005bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bb6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bc0:	4333      	orrs	r3, r6
 8005bc2:	f000 8592 	beq.w	80066ea <_dtoa_r+0xbb2>
 8005bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bc8:	b963      	cbnz	r3, 8005be4 <_dtoa_r+0xac>
 8005bca:	4b92      	ldr	r3, [pc, #584]	; (8005e14 <_dtoa_r+0x2dc>)
 8005bcc:	e022      	b.n	8005c14 <_dtoa_r+0xdc>
 8005bce:	4b92      	ldr	r3, [pc, #584]	; (8005e18 <_dtoa_r+0x2e0>)
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	9801      	ldr	r0, [sp, #4]
 8005bda:	b013      	add	sp, #76	; 0x4c
 8005bdc:	ecbd 8b04 	vpop	{d8-d9}
 8005be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be4:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <_dtoa_r+0x2dc>)
 8005be6:	9301      	str	r3, [sp, #4]
 8005be8:	3303      	adds	r3, #3
 8005bea:	e7f3      	b.n	8005bd4 <_dtoa_r+0x9c>
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	4650      	mov	r0, sl
 8005bf2:	4659      	mov	r1, fp
 8005bf4:	f7fa ff88 	bl	8000b08 <__aeabi_dcmpeq>
 8005bf8:	ec4b ab19 	vmov	d9, sl, fp
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	b158      	cbz	r0, 8005c18 <_dtoa_r+0xe0>
 8005c00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c02:	2301      	movs	r3, #1
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 856b 	beq.w	80066e4 <_dtoa_r+0xbac>
 8005c0e:	4883      	ldr	r0, [pc, #524]	; (8005e1c <_dtoa_r+0x2e4>)
 8005c10:	6018      	str	r0, [r3, #0]
 8005c12:	1e43      	subs	r3, r0, #1
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	e7df      	b.n	8005bd8 <_dtoa_r+0xa0>
 8005c18:	ec4b ab10 	vmov	d0, sl, fp
 8005c1c:	aa10      	add	r2, sp, #64	; 0x40
 8005c1e:	a911      	add	r1, sp, #68	; 0x44
 8005c20:	4620      	mov	r0, r4
 8005c22:	f001 facf 	bl	80071c4 <__d2b>
 8005c26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c2a:	ee08 0a10 	vmov	s16, r0
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	f000 8084 	beq.w	8005d3c <_dtoa_r+0x204>
 8005c34:	ee19 3a90 	vmov	r3, s19
 8005c38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005c40:	4656      	mov	r6, sl
 8005c42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005c4e:	4b74      	ldr	r3, [pc, #464]	; (8005e20 <_dtoa_r+0x2e8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	4630      	mov	r0, r6
 8005c54:	4639      	mov	r1, r7
 8005c56:	f7fa fb37 	bl	80002c8 <__aeabi_dsub>
 8005c5a:	a365      	add	r3, pc, #404	; (adr r3, 8005df0 <_dtoa_r+0x2b8>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fcea 	bl	8000638 <__aeabi_dmul>
 8005c64:	a364      	add	r3, pc, #400	; (adr r3, 8005df8 <_dtoa_r+0x2c0>)
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f7fa fb2f 	bl	80002cc <__adddf3>
 8005c6e:	4606      	mov	r6, r0
 8005c70:	4628      	mov	r0, r5
 8005c72:	460f      	mov	r7, r1
 8005c74:	f7fa fc76 	bl	8000564 <__aeabi_i2d>
 8005c78:	a361      	add	r3, pc, #388	; (adr r3, 8005e00 <_dtoa_r+0x2c8>)
 8005c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7e:	f7fa fcdb 	bl	8000638 <__aeabi_dmul>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	4630      	mov	r0, r6
 8005c88:	4639      	mov	r1, r7
 8005c8a:	f7fa fb1f 	bl	80002cc <__adddf3>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	f7fa ff81 	bl	8000b98 <__aeabi_d2iz>
 8005c96:	2200      	movs	r2, #0
 8005c98:	9000      	str	r0, [sp, #0]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	f7fa ff3c 	bl	8000b1c <__aeabi_dcmplt>
 8005ca4:	b150      	cbz	r0, 8005cbc <_dtoa_r+0x184>
 8005ca6:	9800      	ldr	r0, [sp, #0]
 8005ca8:	f7fa fc5c 	bl	8000564 <__aeabi_i2d>
 8005cac:	4632      	mov	r2, r6
 8005cae:	463b      	mov	r3, r7
 8005cb0:	f7fa ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 8005cb4:	b910      	cbnz	r0, 8005cbc <_dtoa_r+0x184>
 8005cb6:	9b00      	ldr	r3, [sp, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	9300      	str	r3, [sp, #0]
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	2b16      	cmp	r3, #22
 8005cc0:	d85a      	bhi.n	8005d78 <_dtoa_r+0x240>
 8005cc2:	9a00      	ldr	r2, [sp, #0]
 8005cc4:	4b57      	ldr	r3, [pc, #348]	; (8005e24 <_dtoa_r+0x2ec>)
 8005cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	ec51 0b19 	vmov	r0, r1, d9
 8005cd2:	f7fa ff23 	bl	8000b1c <__aeabi_dcmplt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d050      	beq.n	8005d7c <_dtoa_r+0x244>
 8005cda:	9b00      	ldr	r3, [sp, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ce6:	1b5d      	subs	r5, r3, r5
 8005ce8:	1e6b      	subs	r3, r5, #1
 8005cea:	9305      	str	r3, [sp, #20]
 8005cec:	bf45      	ittet	mi
 8005cee:	f1c5 0301 	rsbmi	r3, r5, #1
 8005cf2:	9304      	strmi	r3, [sp, #16]
 8005cf4:	2300      	movpl	r3, #0
 8005cf6:	2300      	movmi	r3, #0
 8005cf8:	bf4c      	ite	mi
 8005cfa:	9305      	strmi	r3, [sp, #20]
 8005cfc:	9304      	strpl	r3, [sp, #16]
 8005cfe:	9b00      	ldr	r3, [sp, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	db3d      	blt.n	8005d80 <_dtoa_r+0x248>
 8005d04:	9b05      	ldr	r3, [sp, #20]
 8005d06:	9a00      	ldr	r2, [sp, #0]
 8005d08:	920a      	str	r2, [sp, #40]	; 0x28
 8005d0a:	4413      	add	r3, r2
 8005d0c:	9305      	str	r3, [sp, #20]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9307      	str	r3, [sp, #28]
 8005d12:	9b06      	ldr	r3, [sp, #24]
 8005d14:	2b09      	cmp	r3, #9
 8005d16:	f200 8089 	bhi.w	8005e2c <_dtoa_r+0x2f4>
 8005d1a:	2b05      	cmp	r3, #5
 8005d1c:	bfc4      	itt	gt
 8005d1e:	3b04      	subgt	r3, #4
 8005d20:	9306      	strgt	r3, [sp, #24]
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	f1a3 0302 	sub.w	r3, r3, #2
 8005d28:	bfcc      	ite	gt
 8005d2a:	2500      	movgt	r5, #0
 8005d2c:	2501      	movle	r5, #1
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	f200 8087 	bhi.w	8005e42 <_dtoa_r+0x30a>
 8005d34:	e8df f003 	tbb	[pc, r3]
 8005d38:	59383a2d 	.word	0x59383a2d
 8005d3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d40:	441d      	add	r5, r3
 8005d42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	bfc1      	itttt	gt
 8005d4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d52:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d5a:	bfda      	itte	le
 8005d5c:	f1c3 0320 	rsble	r3, r3, #32
 8005d60:	fa06 f003 	lslle.w	r0, r6, r3
 8005d64:	4318      	orrgt	r0, r3
 8005d66:	f7fa fbed 	bl	8000544 <__aeabi_ui2d>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d72:	3d01      	subs	r5, #1
 8005d74:	930e      	str	r3, [sp, #56]	; 0x38
 8005d76:	e76a      	b.n	8005c4e <_dtoa_r+0x116>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e7b2      	b.n	8005ce2 <_dtoa_r+0x1aa>
 8005d7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d7e:	e7b1      	b.n	8005ce4 <_dtoa_r+0x1ac>
 8005d80:	9b04      	ldr	r3, [sp, #16]
 8005d82:	9a00      	ldr	r2, [sp, #0]
 8005d84:	1a9b      	subs	r3, r3, r2
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	4253      	negs	r3, r2
 8005d8a:	9307      	str	r3, [sp, #28]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d90:	e7bf      	b.n	8005d12 <_dtoa_r+0x1da>
 8005d92:	2300      	movs	r3, #0
 8005d94:	9308      	str	r3, [sp, #32]
 8005d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	dc55      	bgt.n	8005e48 <_dtoa_r+0x310>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005da2:	461a      	mov	r2, r3
 8005da4:	9209      	str	r2, [sp, #36]	; 0x24
 8005da6:	e00c      	b.n	8005dc2 <_dtoa_r+0x28a>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e7f3      	b.n	8005d94 <_dtoa_r+0x25c>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db0:	9308      	str	r3, [sp, #32]
 8005db2:	9b00      	ldr	r3, [sp, #0]
 8005db4:	4413      	add	r3, r2
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	3301      	adds	r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	bfb8      	it	lt
 8005dc0:	2301      	movlt	r3, #1
 8005dc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	6042      	str	r2, [r0, #4]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	f102 0614 	add.w	r6, r2, #20
 8005dce:	429e      	cmp	r6, r3
 8005dd0:	6841      	ldr	r1, [r0, #4]
 8005dd2:	d93d      	bls.n	8005e50 <_dtoa_r+0x318>
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f000 fecd 	bl	8006b74 <_Balloc>
 8005dda:	9001      	str	r0, [sp, #4]
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d13b      	bne.n	8005e58 <_dtoa_r+0x320>
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <_dtoa_r+0x2f0>)
 8005de2:	4602      	mov	r2, r0
 8005de4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005de8:	e6c0      	b.n	8005b6c <_dtoa_r+0x34>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7df      	b.n	8005dae <_dtoa_r+0x276>
 8005dee:	bf00      	nop
 8005df0:	636f4361 	.word	0x636f4361
 8005df4:	3fd287a7 	.word	0x3fd287a7
 8005df8:	8b60c8b3 	.word	0x8b60c8b3
 8005dfc:	3fc68a28 	.word	0x3fc68a28
 8005e00:	509f79fb 	.word	0x509f79fb
 8005e04:	3fd34413 	.word	0x3fd34413
 8005e08:	0800c749 	.word	0x0800c749
 8005e0c:	0800c760 	.word	0x0800c760
 8005e10:	7ff00000 	.word	0x7ff00000
 8005e14:	0800c745 	.word	0x0800c745
 8005e18:	0800c73c 	.word	0x0800c73c
 8005e1c:	0800c719 	.word	0x0800c719
 8005e20:	3ff80000 	.word	0x3ff80000
 8005e24:	0800c8b0 	.word	0x0800c8b0
 8005e28:	0800c7bb 	.word	0x0800c7bb
 8005e2c:	2501      	movs	r5, #1
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9306      	str	r3, [sp, #24]
 8005e32:	9508      	str	r5, [sp, #32]
 8005e34:	f04f 33ff 	mov.w	r3, #4294967295
 8005e38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2312      	movs	r3, #18
 8005e40:	e7b0      	b.n	8005da4 <_dtoa_r+0x26c>
 8005e42:	2301      	movs	r3, #1
 8005e44:	9308      	str	r3, [sp, #32]
 8005e46:	e7f5      	b.n	8005e34 <_dtoa_r+0x2fc>
 8005e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e4e:	e7b8      	b.n	8005dc2 <_dtoa_r+0x28a>
 8005e50:	3101      	adds	r1, #1
 8005e52:	6041      	str	r1, [r0, #4]
 8005e54:	0052      	lsls	r2, r2, #1
 8005e56:	e7b8      	b.n	8005dca <_dtoa_r+0x292>
 8005e58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e5a:	9a01      	ldr	r2, [sp, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	2b0e      	cmp	r3, #14
 8005e62:	f200 809d 	bhi.w	8005fa0 <_dtoa_r+0x468>
 8005e66:	2d00      	cmp	r5, #0
 8005e68:	f000 809a 	beq.w	8005fa0 <_dtoa_r+0x468>
 8005e6c:	9b00      	ldr	r3, [sp, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dd32      	ble.n	8005ed8 <_dtoa_r+0x3a0>
 8005e72:	4ab7      	ldr	r2, [pc, #732]	; (8006150 <_dtoa_r+0x618>)
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e80:	9b00      	ldr	r3, [sp, #0]
 8005e82:	05d8      	lsls	r0, r3, #23
 8005e84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e88:	d516      	bpl.n	8005eb8 <_dtoa_r+0x380>
 8005e8a:	4bb2      	ldr	r3, [pc, #712]	; (8006154 <_dtoa_r+0x61c>)
 8005e8c:	ec51 0b19 	vmov	r0, r1, d9
 8005e90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e94:	f7fa fcfa 	bl	800088c <__aeabi_ddiv>
 8005e98:	f007 070f 	and.w	r7, r7, #15
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	468b      	mov	fp, r1
 8005ea0:	2503      	movs	r5, #3
 8005ea2:	4eac      	ldr	r6, [pc, #688]	; (8006154 <_dtoa_r+0x61c>)
 8005ea4:	b957      	cbnz	r7, 8005ebc <_dtoa_r+0x384>
 8005ea6:	4642      	mov	r2, r8
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	4650      	mov	r0, sl
 8005eac:	4659      	mov	r1, fp
 8005eae:	f7fa fced 	bl	800088c <__aeabi_ddiv>
 8005eb2:	4682      	mov	sl, r0
 8005eb4:	468b      	mov	fp, r1
 8005eb6:	e028      	b.n	8005f0a <_dtoa_r+0x3d2>
 8005eb8:	2502      	movs	r5, #2
 8005eba:	e7f2      	b.n	8005ea2 <_dtoa_r+0x36a>
 8005ebc:	07f9      	lsls	r1, r7, #31
 8005ebe:	d508      	bpl.n	8005ed2 <_dtoa_r+0x39a>
 8005ec0:	4640      	mov	r0, r8
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ec8:	f7fa fbb6 	bl	8000638 <__aeabi_dmul>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	4680      	mov	r8, r0
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	107f      	asrs	r7, r7, #1
 8005ed4:	3608      	adds	r6, #8
 8005ed6:	e7e5      	b.n	8005ea4 <_dtoa_r+0x36c>
 8005ed8:	f000 809b 	beq.w	8006012 <_dtoa_r+0x4da>
 8005edc:	9b00      	ldr	r3, [sp, #0]
 8005ede:	4f9d      	ldr	r7, [pc, #628]	; (8006154 <_dtoa_r+0x61c>)
 8005ee0:	425e      	negs	r6, r3
 8005ee2:	4b9b      	ldr	r3, [pc, #620]	; (8006150 <_dtoa_r+0x618>)
 8005ee4:	f006 020f 	and.w	r2, r6, #15
 8005ee8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	ec51 0b19 	vmov	r0, r1, d9
 8005ef4:	f7fa fba0 	bl	8000638 <__aeabi_dmul>
 8005ef8:	1136      	asrs	r6, r6, #4
 8005efa:	4682      	mov	sl, r0
 8005efc:	468b      	mov	fp, r1
 8005efe:	2300      	movs	r3, #0
 8005f00:	2502      	movs	r5, #2
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	d17a      	bne.n	8005ffc <_dtoa_r+0x4c4>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1d3      	bne.n	8005eb2 <_dtoa_r+0x37a>
 8005f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8082 	beq.w	8006016 <_dtoa_r+0x4de>
 8005f12:	4b91      	ldr	r3, [pc, #580]	; (8006158 <_dtoa_r+0x620>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	4650      	mov	r0, sl
 8005f18:	4659      	mov	r1, fp
 8005f1a:	f7fa fdff 	bl	8000b1c <__aeabi_dcmplt>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d079      	beq.n	8006016 <_dtoa_r+0x4de>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d076      	beq.n	8006016 <_dtoa_r+0x4de>
 8005f28:	9b02      	ldr	r3, [sp, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	dd36      	ble.n	8005f9c <_dtoa_r+0x464>
 8005f2e:	9b00      	ldr	r3, [sp, #0]
 8005f30:	4650      	mov	r0, sl
 8005f32:	4659      	mov	r1, fp
 8005f34:	1e5f      	subs	r7, r3, #1
 8005f36:	2200      	movs	r2, #0
 8005f38:	4b88      	ldr	r3, [pc, #544]	; (800615c <_dtoa_r+0x624>)
 8005f3a:	f7fa fb7d 	bl	8000638 <__aeabi_dmul>
 8005f3e:	9e02      	ldr	r6, [sp, #8]
 8005f40:	4682      	mov	sl, r0
 8005f42:	468b      	mov	fp, r1
 8005f44:	3501      	adds	r5, #1
 8005f46:	4628      	mov	r0, r5
 8005f48:	f7fa fb0c 	bl	8000564 <__aeabi_i2d>
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	465b      	mov	r3, fp
 8005f50:	f7fa fb72 	bl	8000638 <__aeabi_dmul>
 8005f54:	4b82      	ldr	r3, [pc, #520]	; (8006160 <_dtoa_r+0x628>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	f7fa f9b8 	bl	80002cc <__adddf3>
 8005f5c:	46d0      	mov	r8, sl
 8005f5e:	46d9      	mov	r9, fp
 8005f60:	4682      	mov	sl, r0
 8005f62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f66:	2e00      	cmp	r6, #0
 8005f68:	d158      	bne.n	800601c <_dtoa_r+0x4e4>
 8005f6a:	4b7e      	ldr	r3, [pc, #504]	; (8006164 <_dtoa_r+0x62c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa f9a9 	bl	80002c8 <__aeabi_dsub>
 8005f76:	4652      	mov	r2, sl
 8005f78:	465b      	mov	r3, fp
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	f7fa fdeb 	bl	8000b58 <__aeabi_dcmpgt>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	f040 8295 	bne.w	80064b2 <_dtoa_r+0x97a>
 8005f88:	4652      	mov	r2, sl
 8005f8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f8e:	4640      	mov	r0, r8
 8005f90:	4649      	mov	r1, r9
 8005f92:	f7fa fdc3 	bl	8000b1c <__aeabi_dcmplt>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	f040 8289 	bne.w	80064ae <_dtoa_r+0x976>
 8005f9c:	ec5b ab19 	vmov	sl, fp, d9
 8005fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f2c0 8148 	blt.w	8006238 <_dtoa_r+0x700>
 8005fa8:	9a00      	ldr	r2, [sp, #0]
 8005faa:	2a0e      	cmp	r2, #14
 8005fac:	f300 8144 	bgt.w	8006238 <_dtoa_r+0x700>
 8005fb0:	4b67      	ldr	r3, [pc, #412]	; (8006150 <_dtoa_r+0x618>)
 8005fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f280 80d5 	bge.w	800616c <_dtoa_r+0x634>
 8005fc2:	9b03      	ldr	r3, [sp, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f300 80d1 	bgt.w	800616c <_dtoa_r+0x634>
 8005fca:	f040 826f 	bne.w	80064ac <_dtoa_r+0x974>
 8005fce:	4b65      	ldr	r3, [pc, #404]	; (8006164 <_dtoa_r+0x62c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	4649      	mov	r1, r9
 8005fd6:	f7fa fb2f 	bl	8000638 <__aeabi_dmul>
 8005fda:	4652      	mov	r2, sl
 8005fdc:	465b      	mov	r3, fp
 8005fde:	f7fa fdb1 	bl	8000b44 <__aeabi_dcmpge>
 8005fe2:	9e03      	ldr	r6, [sp, #12]
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f040 8245 	bne.w	8006476 <_dtoa_r+0x93e>
 8005fec:	9d01      	ldr	r5, [sp, #4]
 8005fee:	2331      	movs	r3, #49	; 0x31
 8005ff0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ff4:	9b00      	ldr	r3, [sp, #0]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	e240      	b.n	800647e <_dtoa_r+0x946>
 8005ffc:	07f2      	lsls	r2, r6, #31
 8005ffe:	d505      	bpl.n	800600c <_dtoa_r+0x4d4>
 8006000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006004:	f7fa fb18 	bl	8000638 <__aeabi_dmul>
 8006008:	3501      	adds	r5, #1
 800600a:	2301      	movs	r3, #1
 800600c:	1076      	asrs	r6, r6, #1
 800600e:	3708      	adds	r7, #8
 8006010:	e777      	b.n	8005f02 <_dtoa_r+0x3ca>
 8006012:	2502      	movs	r5, #2
 8006014:	e779      	b.n	8005f0a <_dtoa_r+0x3d2>
 8006016:	9f00      	ldr	r7, [sp, #0]
 8006018:	9e03      	ldr	r6, [sp, #12]
 800601a:	e794      	b.n	8005f46 <_dtoa_r+0x40e>
 800601c:	9901      	ldr	r1, [sp, #4]
 800601e:	4b4c      	ldr	r3, [pc, #304]	; (8006150 <_dtoa_r+0x618>)
 8006020:	4431      	add	r1, r6
 8006022:	910d      	str	r1, [sp, #52]	; 0x34
 8006024:	9908      	ldr	r1, [sp, #32]
 8006026:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800602a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800602e:	2900      	cmp	r1, #0
 8006030:	d043      	beq.n	80060ba <_dtoa_r+0x582>
 8006032:	494d      	ldr	r1, [pc, #308]	; (8006168 <_dtoa_r+0x630>)
 8006034:	2000      	movs	r0, #0
 8006036:	f7fa fc29 	bl	800088c <__aeabi_ddiv>
 800603a:	4652      	mov	r2, sl
 800603c:	465b      	mov	r3, fp
 800603e:	f7fa f943 	bl	80002c8 <__aeabi_dsub>
 8006042:	9d01      	ldr	r5, [sp, #4]
 8006044:	4682      	mov	sl, r0
 8006046:	468b      	mov	fp, r1
 8006048:	4649      	mov	r1, r9
 800604a:	4640      	mov	r0, r8
 800604c:	f7fa fda4 	bl	8000b98 <__aeabi_d2iz>
 8006050:	4606      	mov	r6, r0
 8006052:	f7fa fa87 	bl	8000564 <__aeabi_i2d>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4640      	mov	r0, r8
 800605c:	4649      	mov	r1, r9
 800605e:	f7fa f933 	bl	80002c8 <__aeabi_dsub>
 8006062:	3630      	adds	r6, #48	; 0x30
 8006064:	f805 6b01 	strb.w	r6, [r5], #1
 8006068:	4652      	mov	r2, sl
 800606a:	465b      	mov	r3, fp
 800606c:	4680      	mov	r8, r0
 800606e:	4689      	mov	r9, r1
 8006070:	f7fa fd54 	bl	8000b1c <__aeabi_dcmplt>
 8006074:	2800      	cmp	r0, #0
 8006076:	d163      	bne.n	8006140 <_dtoa_r+0x608>
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	4936      	ldr	r1, [pc, #216]	; (8006158 <_dtoa_r+0x620>)
 800607e:	2000      	movs	r0, #0
 8006080:	f7fa f922 	bl	80002c8 <__aeabi_dsub>
 8006084:	4652      	mov	r2, sl
 8006086:	465b      	mov	r3, fp
 8006088:	f7fa fd48 	bl	8000b1c <__aeabi_dcmplt>
 800608c:	2800      	cmp	r0, #0
 800608e:	f040 80b5 	bne.w	80061fc <_dtoa_r+0x6c4>
 8006092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006094:	429d      	cmp	r5, r3
 8006096:	d081      	beq.n	8005f9c <_dtoa_r+0x464>
 8006098:	4b30      	ldr	r3, [pc, #192]	; (800615c <_dtoa_r+0x624>)
 800609a:	2200      	movs	r2, #0
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa faca 	bl	8000638 <__aeabi_dmul>
 80060a4:	4b2d      	ldr	r3, [pc, #180]	; (800615c <_dtoa_r+0x624>)
 80060a6:	4682      	mov	sl, r0
 80060a8:	468b      	mov	fp, r1
 80060aa:	4640      	mov	r0, r8
 80060ac:	4649      	mov	r1, r9
 80060ae:	2200      	movs	r2, #0
 80060b0:	f7fa fac2 	bl	8000638 <__aeabi_dmul>
 80060b4:	4680      	mov	r8, r0
 80060b6:	4689      	mov	r9, r1
 80060b8:	e7c6      	b.n	8006048 <_dtoa_r+0x510>
 80060ba:	4650      	mov	r0, sl
 80060bc:	4659      	mov	r1, fp
 80060be:	f7fa fabb 	bl	8000638 <__aeabi_dmul>
 80060c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c4:	9d01      	ldr	r5, [sp, #4]
 80060c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060c8:	4682      	mov	sl, r0
 80060ca:	468b      	mov	fp, r1
 80060cc:	4649      	mov	r1, r9
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7fa fd62 	bl	8000b98 <__aeabi_d2iz>
 80060d4:	4606      	mov	r6, r0
 80060d6:	f7fa fa45 	bl	8000564 <__aeabi_i2d>
 80060da:	3630      	adds	r6, #48	; 0x30
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4640      	mov	r0, r8
 80060e2:	4649      	mov	r1, r9
 80060e4:	f7fa f8f0 	bl	80002c8 <__aeabi_dsub>
 80060e8:	f805 6b01 	strb.w	r6, [r5], #1
 80060ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ee:	429d      	cmp	r5, r3
 80060f0:	4680      	mov	r8, r0
 80060f2:	4689      	mov	r9, r1
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	d124      	bne.n	8006144 <_dtoa_r+0x60c>
 80060fa:	4b1b      	ldr	r3, [pc, #108]	; (8006168 <_dtoa_r+0x630>)
 80060fc:	4650      	mov	r0, sl
 80060fe:	4659      	mov	r1, fp
 8006100:	f7fa f8e4 	bl	80002cc <__adddf3>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa fd24 	bl	8000b58 <__aeabi_dcmpgt>
 8006110:	2800      	cmp	r0, #0
 8006112:	d173      	bne.n	80061fc <_dtoa_r+0x6c4>
 8006114:	4652      	mov	r2, sl
 8006116:	465b      	mov	r3, fp
 8006118:	4913      	ldr	r1, [pc, #76]	; (8006168 <_dtoa_r+0x630>)
 800611a:	2000      	movs	r0, #0
 800611c:	f7fa f8d4 	bl	80002c8 <__aeabi_dsub>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4640      	mov	r0, r8
 8006126:	4649      	mov	r1, r9
 8006128:	f7fa fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800612c:	2800      	cmp	r0, #0
 800612e:	f43f af35 	beq.w	8005f9c <_dtoa_r+0x464>
 8006132:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006134:	1e6b      	subs	r3, r5, #1
 8006136:	930f      	str	r3, [sp, #60]	; 0x3c
 8006138:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800613c:	2b30      	cmp	r3, #48	; 0x30
 800613e:	d0f8      	beq.n	8006132 <_dtoa_r+0x5fa>
 8006140:	9700      	str	r7, [sp, #0]
 8006142:	e049      	b.n	80061d8 <_dtoa_r+0x6a0>
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <_dtoa_r+0x624>)
 8006146:	f7fa fa77 	bl	8000638 <__aeabi_dmul>
 800614a:	4680      	mov	r8, r0
 800614c:	4689      	mov	r9, r1
 800614e:	e7bd      	b.n	80060cc <_dtoa_r+0x594>
 8006150:	0800c8b0 	.word	0x0800c8b0
 8006154:	0800c888 	.word	0x0800c888
 8006158:	3ff00000 	.word	0x3ff00000
 800615c:	40240000 	.word	0x40240000
 8006160:	401c0000 	.word	0x401c0000
 8006164:	40140000 	.word	0x40140000
 8006168:	3fe00000 	.word	0x3fe00000
 800616c:	9d01      	ldr	r5, [sp, #4]
 800616e:	4656      	mov	r6, sl
 8006170:	465f      	mov	r7, fp
 8006172:	4642      	mov	r2, r8
 8006174:	464b      	mov	r3, r9
 8006176:	4630      	mov	r0, r6
 8006178:	4639      	mov	r1, r7
 800617a:	f7fa fb87 	bl	800088c <__aeabi_ddiv>
 800617e:	f7fa fd0b 	bl	8000b98 <__aeabi_d2iz>
 8006182:	4682      	mov	sl, r0
 8006184:	f7fa f9ee 	bl	8000564 <__aeabi_i2d>
 8006188:	4642      	mov	r2, r8
 800618a:	464b      	mov	r3, r9
 800618c:	f7fa fa54 	bl	8000638 <__aeabi_dmul>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4630      	mov	r0, r6
 8006196:	4639      	mov	r1, r7
 8006198:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800619c:	f7fa f894 	bl	80002c8 <__aeabi_dsub>
 80061a0:	f805 6b01 	strb.w	r6, [r5], #1
 80061a4:	9e01      	ldr	r6, [sp, #4]
 80061a6:	9f03      	ldr	r7, [sp, #12]
 80061a8:	1bae      	subs	r6, r5, r6
 80061aa:	42b7      	cmp	r7, r6
 80061ac:	4602      	mov	r2, r0
 80061ae:	460b      	mov	r3, r1
 80061b0:	d135      	bne.n	800621e <_dtoa_r+0x6e6>
 80061b2:	f7fa f88b 	bl	80002cc <__adddf3>
 80061b6:	4642      	mov	r2, r8
 80061b8:	464b      	mov	r3, r9
 80061ba:	4606      	mov	r6, r0
 80061bc:	460f      	mov	r7, r1
 80061be:	f7fa fccb 	bl	8000b58 <__aeabi_dcmpgt>
 80061c2:	b9d0      	cbnz	r0, 80061fa <_dtoa_r+0x6c2>
 80061c4:	4642      	mov	r2, r8
 80061c6:	464b      	mov	r3, r9
 80061c8:	4630      	mov	r0, r6
 80061ca:	4639      	mov	r1, r7
 80061cc:	f7fa fc9c 	bl	8000b08 <__aeabi_dcmpeq>
 80061d0:	b110      	cbz	r0, 80061d8 <_dtoa_r+0x6a0>
 80061d2:	f01a 0f01 	tst.w	sl, #1
 80061d6:	d110      	bne.n	80061fa <_dtoa_r+0x6c2>
 80061d8:	4620      	mov	r0, r4
 80061da:	ee18 1a10 	vmov	r1, s16
 80061de:	f000 fd09 	bl	8006bf4 <_Bfree>
 80061e2:	2300      	movs	r3, #0
 80061e4:	9800      	ldr	r0, [sp, #0]
 80061e6:	702b      	strb	r3, [r5, #0]
 80061e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ea:	3001      	adds	r0, #1
 80061ec:	6018      	str	r0, [r3, #0]
 80061ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f acf1 	beq.w	8005bd8 <_dtoa_r+0xa0>
 80061f6:	601d      	str	r5, [r3, #0]
 80061f8:	e4ee      	b.n	8005bd8 <_dtoa_r+0xa0>
 80061fa:	9f00      	ldr	r7, [sp, #0]
 80061fc:	462b      	mov	r3, r5
 80061fe:	461d      	mov	r5, r3
 8006200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006204:	2a39      	cmp	r2, #57	; 0x39
 8006206:	d106      	bne.n	8006216 <_dtoa_r+0x6de>
 8006208:	9a01      	ldr	r2, [sp, #4]
 800620a:	429a      	cmp	r2, r3
 800620c:	d1f7      	bne.n	80061fe <_dtoa_r+0x6c6>
 800620e:	9901      	ldr	r1, [sp, #4]
 8006210:	2230      	movs	r2, #48	; 0x30
 8006212:	3701      	adds	r7, #1
 8006214:	700a      	strb	r2, [r1, #0]
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	3201      	adds	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e790      	b.n	8006140 <_dtoa_r+0x608>
 800621e:	4ba6      	ldr	r3, [pc, #664]	; (80064b8 <_dtoa_r+0x980>)
 8006220:	2200      	movs	r2, #0
 8006222:	f7fa fa09 	bl	8000638 <__aeabi_dmul>
 8006226:	2200      	movs	r2, #0
 8006228:	2300      	movs	r3, #0
 800622a:	4606      	mov	r6, r0
 800622c:	460f      	mov	r7, r1
 800622e:	f7fa fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 8006232:	2800      	cmp	r0, #0
 8006234:	d09d      	beq.n	8006172 <_dtoa_r+0x63a>
 8006236:	e7cf      	b.n	80061d8 <_dtoa_r+0x6a0>
 8006238:	9a08      	ldr	r2, [sp, #32]
 800623a:	2a00      	cmp	r2, #0
 800623c:	f000 80d7 	beq.w	80063ee <_dtoa_r+0x8b6>
 8006240:	9a06      	ldr	r2, [sp, #24]
 8006242:	2a01      	cmp	r2, #1
 8006244:	f300 80ba 	bgt.w	80063bc <_dtoa_r+0x884>
 8006248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800624a:	2a00      	cmp	r2, #0
 800624c:	f000 80b2 	beq.w	80063b4 <_dtoa_r+0x87c>
 8006250:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006254:	9e07      	ldr	r6, [sp, #28]
 8006256:	9d04      	ldr	r5, [sp, #16]
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	441a      	add	r2, r3
 800625c:	9204      	str	r2, [sp, #16]
 800625e:	9a05      	ldr	r2, [sp, #20]
 8006260:	2101      	movs	r1, #1
 8006262:	441a      	add	r2, r3
 8006264:	4620      	mov	r0, r4
 8006266:	9205      	str	r2, [sp, #20]
 8006268:	f000 fd7c 	bl	8006d64 <__i2b>
 800626c:	4607      	mov	r7, r0
 800626e:	2d00      	cmp	r5, #0
 8006270:	dd0c      	ble.n	800628c <_dtoa_r+0x754>
 8006272:	9b05      	ldr	r3, [sp, #20]
 8006274:	2b00      	cmp	r3, #0
 8006276:	dd09      	ble.n	800628c <_dtoa_r+0x754>
 8006278:	42ab      	cmp	r3, r5
 800627a:	9a04      	ldr	r2, [sp, #16]
 800627c:	bfa8      	it	ge
 800627e:	462b      	movge	r3, r5
 8006280:	1ad2      	subs	r2, r2, r3
 8006282:	9204      	str	r2, [sp, #16]
 8006284:	9a05      	ldr	r2, [sp, #20]
 8006286:	1aed      	subs	r5, r5, r3
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	9305      	str	r3, [sp, #20]
 800628c:	9b07      	ldr	r3, [sp, #28]
 800628e:	b31b      	cbz	r3, 80062d8 <_dtoa_r+0x7a0>
 8006290:	9b08      	ldr	r3, [sp, #32]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80af 	beq.w	80063f6 <_dtoa_r+0x8be>
 8006298:	2e00      	cmp	r6, #0
 800629a:	dd13      	ble.n	80062c4 <_dtoa_r+0x78c>
 800629c:	4639      	mov	r1, r7
 800629e:	4632      	mov	r2, r6
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 fe1f 	bl	8006ee4 <__pow5mult>
 80062a6:	ee18 2a10 	vmov	r2, s16
 80062aa:	4601      	mov	r1, r0
 80062ac:	4607      	mov	r7, r0
 80062ae:	4620      	mov	r0, r4
 80062b0:	f000 fd6e 	bl	8006d90 <__multiply>
 80062b4:	ee18 1a10 	vmov	r1, s16
 80062b8:	4680      	mov	r8, r0
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 fc9a 	bl	8006bf4 <_Bfree>
 80062c0:	ee08 8a10 	vmov	s16, r8
 80062c4:	9b07      	ldr	r3, [sp, #28]
 80062c6:	1b9a      	subs	r2, r3, r6
 80062c8:	d006      	beq.n	80062d8 <_dtoa_r+0x7a0>
 80062ca:	ee18 1a10 	vmov	r1, s16
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fe08 	bl	8006ee4 <__pow5mult>
 80062d4:	ee08 0a10 	vmov	s16, r0
 80062d8:	2101      	movs	r1, #1
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 fd42 	bl	8006d64 <__i2b>
 80062e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	4606      	mov	r6, r0
 80062e6:	f340 8088 	ble.w	80063fa <_dtoa_r+0x8c2>
 80062ea:	461a      	mov	r2, r3
 80062ec:	4601      	mov	r1, r0
 80062ee:	4620      	mov	r0, r4
 80062f0:	f000 fdf8 	bl	8006ee4 <__pow5mult>
 80062f4:	9b06      	ldr	r3, [sp, #24]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	4606      	mov	r6, r0
 80062fa:	f340 8081 	ble.w	8006400 <_dtoa_r+0x8c8>
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	6933      	ldr	r3, [r6, #16]
 8006304:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006308:	6918      	ldr	r0, [r3, #16]
 800630a:	f000 fcdb 	bl	8006cc4 <__hi0bits>
 800630e:	f1c0 0020 	rsb	r0, r0, #32
 8006312:	9b05      	ldr	r3, [sp, #20]
 8006314:	4418      	add	r0, r3
 8006316:	f010 001f 	ands.w	r0, r0, #31
 800631a:	f000 8092 	beq.w	8006442 <_dtoa_r+0x90a>
 800631e:	f1c0 0320 	rsb	r3, r0, #32
 8006322:	2b04      	cmp	r3, #4
 8006324:	f340 808a 	ble.w	800643c <_dtoa_r+0x904>
 8006328:	f1c0 001c 	rsb	r0, r0, #28
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	4403      	add	r3, r0
 8006330:	9304      	str	r3, [sp, #16]
 8006332:	9b05      	ldr	r3, [sp, #20]
 8006334:	4403      	add	r3, r0
 8006336:	4405      	add	r5, r0
 8006338:	9305      	str	r3, [sp, #20]
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	dd07      	ble.n	8006350 <_dtoa_r+0x818>
 8006340:	ee18 1a10 	vmov	r1, s16
 8006344:	461a      	mov	r2, r3
 8006346:	4620      	mov	r0, r4
 8006348:	f000 fe26 	bl	8006f98 <__lshift>
 800634c:	ee08 0a10 	vmov	s16, r0
 8006350:	9b05      	ldr	r3, [sp, #20]
 8006352:	2b00      	cmp	r3, #0
 8006354:	dd05      	ble.n	8006362 <_dtoa_r+0x82a>
 8006356:	4631      	mov	r1, r6
 8006358:	461a      	mov	r2, r3
 800635a:	4620      	mov	r0, r4
 800635c:	f000 fe1c 	bl	8006f98 <__lshift>
 8006360:	4606      	mov	r6, r0
 8006362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d06e      	beq.n	8006446 <_dtoa_r+0x90e>
 8006368:	ee18 0a10 	vmov	r0, s16
 800636c:	4631      	mov	r1, r6
 800636e:	f000 fe83 	bl	8007078 <__mcmp>
 8006372:	2800      	cmp	r0, #0
 8006374:	da67      	bge.n	8006446 <_dtoa_r+0x90e>
 8006376:	9b00      	ldr	r3, [sp, #0]
 8006378:	3b01      	subs	r3, #1
 800637a:	ee18 1a10 	vmov	r1, s16
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	220a      	movs	r2, #10
 8006382:	2300      	movs	r3, #0
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fc57 	bl	8006c38 <__multadd>
 800638a:	9b08      	ldr	r3, [sp, #32]
 800638c:	ee08 0a10 	vmov	s16, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 81b1 	beq.w	80066f8 <_dtoa_r+0xbc0>
 8006396:	2300      	movs	r3, #0
 8006398:	4639      	mov	r1, r7
 800639a:	220a      	movs	r2, #10
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fc4b 	bl	8006c38 <__multadd>
 80063a2:	9b02      	ldr	r3, [sp, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	4607      	mov	r7, r0
 80063a8:	f300 808e 	bgt.w	80064c8 <_dtoa_r+0x990>
 80063ac:	9b06      	ldr	r3, [sp, #24]
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	dc51      	bgt.n	8006456 <_dtoa_r+0x91e>
 80063b2:	e089      	b.n	80064c8 <_dtoa_r+0x990>
 80063b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ba:	e74b      	b.n	8006254 <_dtoa_r+0x71c>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	1e5e      	subs	r6, r3, #1
 80063c0:	9b07      	ldr	r3, [sp, #28]
 80063c2:	42b3      	cmp	r3, r6
 80063c4:	bfbf      	itttt	lt
 80063c6:	9b07      	ldrlt	r3, [sp, #28]
 80063c8:	9607      	strlt	r6, [sp, #28]
 80063ca:	1af2      	sublt	r2, r6, r3
 80063cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063ce:	bfb6      	itet	lt
 80063d0:	189b      	addlt	r3, r3, r2
 80063d2:	1b9e      	subge	r6, r3, r6
 80063d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	bfb8      	it	lt
 80063da:	2600      	movlt	r6, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bfb7      	itett	lt
 80063e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80063e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80063e8:	1a9d      	sublt	r5, r3, r2
 80063ea:	2300      	movlt	r3, #0
 80063ec:	e734      	b.n	8006258 <_dtoa_r+0x720>
 80063ee:	9e07      	ldr	r6, [sp, #28]
 80063f0:	9d04      	ldr	r5, [sp, #16]
 80063f2:	9f08      	ldr	r7, [sp, #32]
 80063f4:	e73b      	b.n	800626e <_dtoa_r+0x736>
 80063f6:	9a07      	ldr	r2, [sp, #28]
 80063f8:	e767      	b.n	80062ca <_dtoa_r+0x792>
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	dc18      	bgt.n	8006432 <_dtoa_r+0x8fa>
 8006400:	f1ba 0f00 	cmp.w	sl, #0
 8006404:	d115      	bne.n	8006432 <_dtoa_r+0x8fa>
 8006406:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800640a:	b993      	cbnz	r3, 8006432 <_dtoa_r+0x8fa>
 800640c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006410:	0d1b      	lsrs	r3, r3, #20
 8006412:	051b      	lsls	r3, r3, #20
 8006414:	b183      	cbz	r3, 8006438 <_dtoa_r+0x900>
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	3301      	adds	r3, #1
 800641a:	9304      	str	r3, [sp, #16]
 800641c:	9b05      	ldr	r3, [sp, #20]
 800641e:	3301      	adds	r3, #1
 8006420:	9305      	str	r3, [sp, #20]
 8006422:	f04f 0801 	mov.w	r8, #1
 8006426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f af6a 	bne.w	8006302 <_dtoa_r+0x7ca>
 800642e:	2001      	movs	r0, #1
 8006430:	e76f      	b.n	8006312 <_dtoa_r+0x7da>
 8006432:	f04f 0800 	mov.w	r8, #0
 8006436:	e7f6      	b.n	8006426 <_dtoa_r+0x8ee>
 8006438:	4698      	mov	r8, r3
 800643a:	e7f4      	b.n	8006426 <_dtoa_r+0x8ee>
 800643c:	f43f af7d 	beq.w	800633a <_dtoa_r+0x802>
 8006440:	4618      	mov	r0, r3
 8006442:	301c      	adds	r0, #28
 8006444:	e772      	b.n	800632c <_dtoa_r+0x7f4>
 8006446:	9b03      	ldr	r3, [sp, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dc37      	bgt.n	80064bc <_dtoa_r+0x984>
 800644c:	9b06      	ldr	r3, [sp, #24]
 800644e:	2b02      	cmp	r3, #2
 8006450:	dd34      	ble.n	80064bc <_dtoa_r+0x984>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	9b02      	ldr	r3, [sp, #8]
 8006458:	b96b      	cbnz	r3, 8006476 <_dtoa_r+0x93e>
 800645a:	4631      	mov	r1, r6
 800645c:	2205      	movs	r2, #5
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fbea 	bl	8006c38 <__multadd>
 8006464:	4601      	mov	r1, r0
 8006466:	4606      	mov	r6, r0
 8006468:	ee18 0a10 	vmov	r0, s16
 800646c:	f000 fe04 	bl	8007078 <__mcmp>
 8006470:	2800      	cmp	r0, #0
 8006472:	f73f adbb 	bgt.w	8005fec <_dtoa_r+0x4b4>
 8006476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006478:	9d01      	ldr	r5, [sp, #4]
 800647a:	43db      	mvns	r3, r3
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	f04f 0800 	mov.w	r8, #0
 8006482:	4631      	mov	r1, r6
 8006484:	4620      	mov	r0, r4
 8006486:	f000 fbb5 	bl	8006bf4 <_Bfree>
 800648a:	2f00      	cmp	r7, #0
 800648c:	f43f aea4 	beq.w	80061d8 <_dtoa_r+0x6a0>
 8006490:	f1b8 0f00 	cmp.w	r8, #0
 8006494:	d005      	beq.n	80064a2 <_dtoa_r+0x96a>
 8006496:	45b8      	cmp	r8, r7
 8006498:	d003      	beq.n	80064a2 <_dtoa_r+0x96a>
 800649a:	4641      	mov	r1, r8
 800649c:	4620      	mov	r0, r4
 800649e:	f000 fba9 	bl	8006bf4 <_Bfree>
 80064a2:	4639      	mov	r1, r7
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fba5 	bl	8006bf4 <_Bfree>
 80064aa:	e695      	b.n	80061d8 <_dtoa_r+0x6a0>
 80064ac:	2600      	movs	r6, #0
 80064ae:	4637      	mov	r7, r6
 80064b0:	e7e1      	b.n	8006476 <_dtoa_r+0x93e>
 80064b2:	9700      	str	r7, [sp, #0]
 80064b4:	4637      	mov	r7, r6
 80064b6:	e599      	b.n	8005fec <_dtoa_r+0x4b4>
 80064b8:	40240000 	.word	0x40240000
 80064bc:	9b08      	ldr	r3, [sp, #32]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80ca 	beq.w	8006658 <_dtoa_r+0xb20>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	9302      	str	r3, [sp, #8]
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	dd05      	ble.n	80064d8 <_dtoa_r+0x9a0>
 80064cc:	4639      	mov	r1, r7
 80064ce:	462a      	mov	r2, r5
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fd61 	bl	8006f98 <__lshift>
 80064d6:	4607      	mov	r7, r0
 80064d8:	f1b8 0f00 	cmp.w	r8, #0
 80064dc:	d05b      	beq.n	8006596 <_dtoa_r+0xa5e>
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fb47 	bl	8006b74 <_Balloc>
 80064e6:	4605      	mov	r5, r0
 80064e8:	b928      	cbnz	r0, 80064f6 <_dtoa_r+0x9be>
 80064ea:	4b87      	ldr	r3, [pc, #540]	; (8006708 <_dtoa_r+0xbd0>)
 80064ec:	4602      	mov	r2, r0
 80064ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80064f2:	f7ff bb3b 	b.w	8005b6c <_dtoa_r+0x34>
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	3202      	adds	r2, #2
 80064fa:	0092      	lsls	r2, r2, #2
 80064fc:	f107 010c 	add.w	r1, r7, #12
 8006500:	300c      	adds	r0, #12
 8006502:	f7fe fc43 	bl	8004d8c <memcpy>
 8006506:	2201      	movs	r2, #1
 8006508:	4629      	mov	r1, r5
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fd44 	bl	8006f98 <__lshift>
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	f103 0901 	add.w	r9, r3, #1
 8006516:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800651a:	4413      	add	r3, r2
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	f00a 0301 	and.w	r3, sl, #1
 8006522:	46b8      	mov	r8, r7
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	4607      	mov	r7, r0
 8006528:	4631      	mov	r1, r6
 800652a:	ee18 0a10 	vmov	r0, s16
 800652e:	f7ff fa75 	bl	8005a1c <quorem>
 8006532:	4641      	mov	r1, r8
 8006534:	9002      	str	r0, [sp, #8]
 8006536:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800653a:	ee18 0a10 	vmov	r0, s16
 800653e:	f000 fd9b 	bl	8007078 <__mcmp>
 8006542:	463a      	mov	r2, r7
 8006544:	9003      	str	r0, [sp, #12]
 8006546:	4631      	mov	r1, r6
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fdb1 	bl	80070b0 <__mdiff>
 800654e:	68c2      	ldr	r2, [r0, #12]
 8006550:	f109 3bff 	add.w	fp, r9, #4294967295
 8006554:	4605      	mov	r5, r0
 8006556:	bb02      	cbnz	r2, 800659a <_dtoa_r+0xa62>
 8006558:	4601      	mov	r1, r0
 800655a:	ee18 0a10 	vmov	r0, s16
 800655e:	f000 fd8b 	bl	8007078 <__mcmp>
 8006562:	4602      	mov	r2, r0
 8006564:	4629      	mov	r1, r5
 8006566:	4620      	mov	r0, r4
 8006568:	9207      	str	r2, [sp, #28]
 800656a:	f000 fb43 	bl	8006bf4 <_Bfree>
 800656e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006572:	ea43 0102 	orr.w	r1, r3, r2
 8006576:	9b04      	ldr	r3, [sp, #16]
 8006578:	430b      	orrs	r3, r1
 800657a:	464d      	mov	r5, r9
 800657c:	d10f      	bne.n	800659e <_dtoa_r+0xa66>
 800657e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006582:	d02a      	beq.n	80065da <_dtoa_r+0xaa2>
 8006584:	9b03      	ldr	r3, [sp, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	dd02      	ble.n	8006590 <_dtoa_r+0xa58>
 800658a:	9b02      	ldr	r3, [sp, #8]
 800658c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006590:	f88b a000 	strb.w	sl, [fp]
 8006594:	e775      	b.n	8006482 <_dtoa_r+0x94a>
 8006596:	4638      	mov	r0, r7
 8006598:	e7ba      	b.n	8006510 <_dtoa_r+0x9d8>
 800659a:	2201      	movs	r2, #1
 800659c:	e7e2      	b.n	8006564 <_dtoa_r+0xa2c>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db04      	blt.n	80065ae <_dtoa_r+0xa76>
 80065a4:	9906      	ldr	r1, [sp, #24]
 80065a6:	430b      	orrs	r3, r1
 80065a8:	9904      	ldr	r1, [sp, #16]
 80065aa:	430b      	orrs	r3, r1
 80065ac:	d122      	bne.n	80065f4 <_dtoa_r+0xabc>
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	ddee      	ble.n	8006590 <_dtoa_r+0xa58>
 80065b2:	ee18 1a10 	vmov	r1, s16
 80065b6:	2201      	movs	r2, #1
 80065b8:	4620      	mov	r0, r4
 80065ba:	f000 fced 	bl	8006f98 <__lshift>
 80065be:	4631      	mov	r1, r6
 80065c0:	ee08 0a10 	vmov	s16, r0
 80065c4:	f000 fd58 	bl	8007078 <__mcmp>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dc03      	bgt.n	80065d4 <_dtoa_r+0xa9c>
 80065cc:	d1e0      	bne.n	8006590 <_dtoa_r+0xa58>
 80065ce:	f01a 0f01 	tst.w	sl, #1
 80065d2:	d0dd      	beq.n	8006590 <_dtoa_r+0xa58>
 80065d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065d8:	d1d7      	bne.n	800658a <_dtoa_r+0xa52>
 80065da:	2339      	movs	r3, #57	; 0x39
 80065dc:	f88b 3000 	strb.w	r3, [fp]
 80065e0:	462b      	mov	r3, r5
 80065e2:	461d      	mov	r5, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065ea:	2a39      	cmp	r2, #57	; 0x39
 80065ec:	d071      	beq.n	80066d2 <_dtoa_r+0xb9a>
 80065ee:	3201      	adds	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]
 80065f2:	e746      	b.n	8006482 <_dtoa_r+0x94a>
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	dd07      	ble.n	8006608 <_dtoa_r+0xad0>
 80065f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065fc:	d0ed      	beq.n	80065da <_dtoa_r+0xaa2>
 80065fe:	f10a 0301 	add.w	r3, sl, #1
 8006602:	f88b 3000 	strb.w	r3, [fp]
 8006606:	e73c      	b.n	8006482 <_dtoa_r+0x94a>
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800660e:	4599      	cmp	r9, r3
 8006610:	d047      	beq.n	80066a2 <_dtoa_r+0xb6a>
 8006612:	ee18 1a10 	vmov	r1, s16
 8006616:	2300      	movs	r3, #0
 8006618:	220a      	movs	r2, #10
 800661a:	4620      	mov	r0, r4
 800661c:	f000 fb0c 	bl	8006c38 <__multadd>
 8006620:	45b8      	cmp	r8, r7
 8006622:	ee08 0a10 	vmov	s16, r0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	f04f 020a 	mov.w	r2, #10
 800662e:	4641      	mov	r1, r8
 8006630:	4620      	mov	r0, r4
 8006632:	d106      	bne.n	8006642 <_dtoa_r+0xb0a>
 8006634:	f000 fb00 	bl	8006c38 <__multadd>
 8006638:	4680      	mov	r8, r0
 800663a:	4607      	mov	r7, r0
 800663c:	f109 0901 	add.w	r9, r9, #1
 8006640:	e772      	b.n	8006528 <_dtoa_r+0x9f0>
 8006642:	f000 faf9 	bl	8006c38 <__multadd>
 8006646:	4639      	mov	r1, r7
 8006648:	4680      	mov	r8, r0
 800664a:	2300      	movs	r3, #0
 800664c:	220a      	movs	r2, #10
 800664e:	4620      	mov	r0, r4
 8006650:	f000 faf2 	bl	8006c38 <__multadd>
 8006654:	4607      	mov	r7, r0
 8006656:	e7f1      	b.n	800663c <_dtoa_r+0xb04>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	9d01      	ldr	r5, [sp, #4]
 800665e:	ee18 0a10 	vmov	r0, s16
 8006662:	4631      	mov	r1, r6
 8006664:	f7ff f9da 	bl	8005a1c <quorem>
 8006668:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800666c:	9b01      	ldr	r3, [sp, #4]
 800666e:	f805 ab01 	strb.w	sl, [r5], #1
 8006672:	1aea      	subs	r2, r5, r3
 8006674:	9b02      	ldr	r3, [sp, #8]
 8006676:	4293      	cmp	r3, r2
 8006678:	dd09      	ble.n	800668e <_dtoa_r+0xb56>
 800667a:	ee18 1a10 	vmov	r1, s16
 800667e:	2300      	movs	r3, #0
 8006680:	220a      	movs	r2, #10
 8006682:	4620      	mov	r0, r4
 8006684:	f000 fad8 	bl	8006c38 <__multadd>
 8006688:	ee08 0a10 	vmov	s16, r0
 800668c:	e7e7      	b.n	800665e <_dtoa_r+0xb26>
 800668e:	9b02      	ldr	r3, [sp, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	bfc8      	it	gt
 8006694:	461d      	movgt	r5, r3
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	bfd8      	it	le
 800669a:	2501      	movle	r5, #1
 800669c:	441d      	add	r5, r3
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	ee18 1a10 	vmov	r1, s16
 80066a6:	2201      	movs	r2, #1
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fc75 	bl	8006f98 <__lshift>
 80066ae:	4631      	mov	r1, r6
 80066b0:	ee08 0a10 	vmov	s16, r0
 80066b4:	f000 fce0 	bl	8007078 <__mcmp>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	dc91      	bgt.n	80065e0 <_dtoa_r+0xaa8>
 80066bc:	d102      	bne.n	80066c4 <_dtoa_r+0xb8c>
 80066be:	f01a 0f01 	tst.w	sl, #1
 80066c2:	d18d      	bne.n	80065e0 <_dtoa_r+0xaa8>
 80066c4:	462b      	mov	r3, r5
 80066c6:	461d      	mov	r5, r3
 80066c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066cc:	2a30      	cmp	r2, #48	; 0x30
 80066ce:	d0fa      	beq.n	80066c6 <_dtoa_r+0xb8e>
 80066d0:	e6d7      	b.n	8006482 <_dtoa_r+0x94a>
 80066d2:	9a01      	ldr	r2, [sp, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d184      	bne.n	80065e2 <_dtoa_r+0xaaa>
 80066d8:	9b00      	ldr	r3, [sp, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	2331      	movs	r3, #49	; 0x31
 80066e0:	7013      	strb	r3, [r2, #0]
 80066e2:	e6ce      	b.n	8006482 <_dtoa_r+0x94a>
 80066e4:	4b09      	ldr	r3, [pc, #36]	; (800670c <_dtoa_r+0xbd4>)
 80066e6:	f7ff ba95 	b.w	8005c14 <_dtoa_r+0xdc>
 80066ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f47f aa6e 	bne.w	8005bce <_dtoa_r+0x96>
 80066f2:	4b07      	ldr	r3, [pc, #28]	; (8006710 <_dtoa_r+0xbd8>)
 80066f4:	f7ff ba8e 	b.w	8005c14 <_dtoa_r+0xdc>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dcae      	bgt.n	800665c <_dtoa_r+0xb24>
 80066fe:	9b06      	ldr	r3, [sp, #24]
 8006700:	2b02      	cmp	r3, #2
 8006702:	f73f aea8 	bgt.w	8006456 <_dtoa_r+0x91e>
 8006706:	e7a9      	b.n	800665c <_dtoa_r+0xb24>
 8006708:	0800c7bb 	.word	0x0800c7bb
 800670c:	0800c718 	.word	0x0800c718
 8006710:	0800c73c 	.word	0x0800c73c

08006714 <__sflush_r>:
 8006714:	898a      	ldrh	r2, [r1, #12]
 8006716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671a:	4605      	mov	r5, r0
 800671c:	0710      	lsls	r0, r2, #28
 800671e:	460c      	mov	r4, r1
 8006720:	d458      	bmi.n	80067d4 <__sflush_r+0xc0>
 8006722:	684b      	ldr	r3, [r1, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc05      	bgt.n	8006734 <__sflush_r+0x20>
 8006728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	dc02      	bgt.n	8006734 <__sflush_r+0x20>
 800672e:	2000      	movs	r0, #0
 8006730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006736:	2e00      	cmp	r6, #0
 8006738:	d0f9      	beq.n	800672e <__sflush_r+0x1a>
 800673a:	2300      	movs	r3, #0
 800673c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006740:	682f      	ldr	r7, [r5, #0]
 8006742:	602b      	str	r3, [r5, #0]
 8006744:	d032      	beq.n	80067ac <__sflush_r+0x98>
 8006746:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006748:	89a3      	ldrh	r3, [r4, #12]
 800674a:	075a      	lsls	r2, r3, #29
 800674c:	d505      	bpl.n	800675a <__sflush_r+0x46>
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	1ac0      	subs	r0, r0, r3
 8006752:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006754:	b10b      	cbz	r3, 800675a <__sflush_r+0x46>
 8006756:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006758:	1ac0      	subs	r0, r0, r3
 800675a:	2300      	movs	r3, #0
 800675c:	4602      	mov	r2, r0
 800675e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006760:	6a21      	ldr	r1, [r4, #32]
 8006762:	4628      	mov	r0, r5
 8006764:	47b0      	blx	r6
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	d106      	bne.n	800677a <__sflush_r+0x66>
 800676c:	6829      	ldr	r1, [r5, #0]
 800676e:	291d      	cmp	r1, #29
 8006770:	d82c      	bhi.n	80067cc <__sflush_r+0xb8>
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <__sflush_r+0x108>)
 8006774:	40ca      	lsrs	r2, r1
 8006776:	07d6      	lsls	r6, r2, #31
 8006778:	d528      	bpl.n	80067cc <__sflush_r+0xb8>
 800677a:	2200      	movs	r2, #0
 800677c:	6062      	str	r2, [r4, #4]
 800677e:	04d9      	lsls	r1, r3, #19
 8006780:	6922      	ldr	r2, [r4, #16]
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	d504      	bpl.n	8006790 <__sflush_r+0x7c>
 8006786:	1c42      	adds	r2, r0, #1
 8006788:	d101      	bne.n	800678e <__sflush_r+0x7a>
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	b903      	cbnz	r3, 8006790 <__sflush_r+0x7c>
 800678e:	6560      	str	r0, [r4, #84]	; 0x54
 8006790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006792:	602f      	str	r7, [r5, #0]
 8006794:	2900      	cmp	r1, #0
 8006796:	d0ca      	beq.n	800672e <__sflush_r+0x1a>
 8006798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800679c:	4299      	cmp	r1, r3
 800679e:	d002      	beq.n	80067a6 <__sflush_r+0x92>
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7fe fb09 	bl	8004db8 <_free_r>
 80067a6:	2000      	movs	r0, #0
 80067a8:	6360      	str	r0, [r4, #52]	; 0x34
 80067aa:	e7c1      	b.n	8006730 <__sflush_r+0x1c>
 80067ac:	6a21      	ldr	r1, [r4, #32]
 80067ae:	2301      	movs	r3, #1
 80067b0:	4628      	mov	r0, r5
 80067b2:	47b0      	blx	r6
 80067b4:	1c41      	adds	r1, r0, #1
 80067b6:	d1c7      	bne.n	8006748 <__sflush_r+0x34>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c4      	beq.n	8006748 <__sflush_r+0x34>
 80067be:	2b1d      	cmp	r3, #29
 80067c0:	d001      	beq.n	80067c6 <__sflush_r+0xb2>
 80067c2:	2b16      	cmp	r3, #22
 80067c4:	d101      	bne.n	80067ca <__sflush_r+0xb6>
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	e7b1      	b.n	800672e <__sflush_r+0x1a>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7ad      	b.n	8006730 <__sflush_r+0x1c>
 80067d4:	690f      	ldr	r7, [r1, #16]
 80067d6:	2f00      	cmp	r7, #0
 80067d8:	d0a9      	beq.n	800672e <__sflush_r+0x1a>
 80067da:	0793      	lsls	r3, r2, #30
 80067dc:	680e      	ldr	r6, [r1, #0]
 80067de:	bf08      	it	eq
 80067e0:	694b      	ldreq	r3, [r1, #20]
 80067e2:	600f      	str	r7, [r1, #0]
 80067e4:	bf18      	it	ne
 80067e6:	2300      	movne	r3, #0
 80067e8:	eba6 0807 	sub.w	r8, r6, r7
 80067ec:	608b      	str	r3, [r1, #8]
 80067ee:	f1b8 0f00 	cmp.w	r8, #0
 80067f2:	dd9c      	ble.n	800672e <__sflush_r+0x1a>
 80067f4:	6a21      	ldr	r1, [r4, #32]
 80067f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80067f8:	4643      	mov	r3, r8
 80067fa:	463a      	mov	r2, r7
 80067fc:	4628      	mov	r0, r5
 80067fe:	47b0      	blx	r6
 8006800:	2800      	cmp	r0, #0
 8006802:	dc06      	bgt.n	8006812 <__sflush_r+0xfe>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800680a:	81a3      	strh	r3, [r4, #12]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	e78e      	b.n	8006730 <__sflush_r+0x1c>
 8006812:	4407      	add	r7, r0
 8006814:	eba8 0800 	sub.w	r8, r8, r0
 8006818:	e7e9      	b.n	80067ee <__sflush_r+0xda>
 800681a:	bf00      	nop
 800681c:	20400001 	.word	0x20400001

08006820 <_fflush_r>:
 8006820:	b538      	push	{r3, r4, r5, lr}
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	4605      	mov	r5, r0
 8006826:	460c      	mov	r4, r1
 8006828:	b913      	cbnz	r3, 8006830 <_fflush_r+0x10>
 800682a:	2500      	movs	r5, #0
 800682c:	4628      	mov	r0, r5
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	b118      	cbz	r0, 800683a <_fflush_r+0x1a>
 8006832:	6983      	ldr	r3, [r0, #24]
 8006834:	b90b      	cbnz	r3, 800683a <_fflush_r+0x1a>
 8006836:	f000 f887 	bl	8006948 <__sinit>
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <_fflush_r+0x6c>)
 800683c:	429c      	cmp	r4, r3
 800683e:	d11b      	bne.n	8006878 <_fflush_r+0x58>
 8006840:	686c      	ldr	r4, [r5, #4]
 8006842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0ef      	beq.n	800682a <_fflush_r+0xa>
 800684a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800684c:	07d0      	lsls	r0, r2, #31
 800684e:	d404      	bmi.n	800685a <_fflush_r+0x3a>
 8006850:	0599      	lsls	r1, r3, #22
 8006852:	d402      	bmi.n	800685a <_fflush_r+0x3a>
 8006854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006856:	f000 f91a 	bl	8006a8e <__retarget_lock_acquire_recursive>
 800685a:	4628      	mov	r0, r5
 800685c:	4621      	mov	r1, r4
 800685e:	f7ff ff59 	bl	8006714 <__sflush_r>
 8006862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006864:	07da      	lsls	r2, r3, #31
 8006866:	4605      	mov	r5, r0
 8006868:	d4e0      	bmi.n	800682c <_fflush_r+0xc>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	059b      	lsls	r3, r3, #22
 800686e:	d4dd      	bmi.n	800682c <_fflush_r+0xc>
 8006870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006872:	f000 f90d 	bl	8006a90 <__retarget_lock_release_recursive>
 8006876:	e7d9      	b.n	800682c <_fflush_r+0xc>
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <_fflush_r+0x70>)
 800687a:	429c      	cmp	r4, r3
 800687c:	d101      	bne.n	8006882 <_fflush_r+0x62>
 800687e:	68ac      	ldr	r4, [r5, #8]
 8006880:	e7df      	b.n	8006842 <_fflush_r+0x22>
 8006882:	4b04      	ldr	r3, [pc, #16]	; (8006894 <_fflush_r+0x74>)
 8006884:	429c      	cmp	r4, r3
 8006886:	bf08      	it	eq
 8006888:	68ec      	ldreq	r4, [r5, #12]
 800688a:	e7da      	b.n	8006842 <_fflush_r+0x22>
 800688c:	0800c7ec 	.word	0x0800c7ec
 8006890:	0800c80c 	.word	0x0800c80c
 8006894:	0800c7cc 	.word	0x0800c7cc

08006898 <std>:
 8006898:	2300      	movs	r3, #0
 800689a:	b510      	push	{r4, lr}
 800689c:	4604      	mov	r4, r0
 800689e:	e9c0 3300 	strd	r3, r3, [r0]
 80068a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068a6:	6083      	str	r3, [r0, #8]
 80068a8:	8181      	strh	r1, [r0, #12]
 80068aa:	6643      	str	r3, [r0, #100]	; 0x64
 80068ac:	81c2      	strh	r2, [r0, #14]
 80068ae:	6183      	str	r3, [r0, #24]
 80068b0:	4619      	mov	r1, r3
 80068b2:	2208      	movs	r2, #8
 80068b4:	305c      	adds	r0, #92	; 0x5c
 80068b6:	f7fe fa77 	bl	8004da8 <memset>
 80068ba:	4b05      	ldr	r3, [pc, #20]	; (80068d0 <std+0x38>)
 80068bc:	6263      	str	r3, [r4, #36]	; 0x24
 80068be:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <std+0x3c>)
 80068c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <std+0x40>)
 80068c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <std+0x44>)
 80068c8:	6224      	str	r4, [r4, #32]
 80068ca:	6323      	str	r3, [r4, #48]	; 0x30
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	0800755d 	.word	0x0800755d
 80068d4:	0800757f 	.word	0x0800757f
 80068d8:	080075b7 	.word	0x080075b7
 80068dc:	080075db 	.word	0x080075db

080068e0 <_cleanup_r>:
 80068e0:	4901      	ldr	r1, [pc, #4]	; (80068e8 <_cleanup_r+0x8>)
 80068e2:	f000 b8af 	b.w	8006a44 <_fwalk_reent>
 80068e6:	bf00      	nop
 80068e8:	08006821 	.word	0x08006821

080068ec <__sfmoreglue>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	2268      	movs	r2, #104	; 0x68
 80068f0:	1e4d      	subs	r5, r1, #1
 80068f2:	4355      	muls	r5, r2
 80068f4:	460e      	mov	r6, r1
 80068f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068fa:	f7fe fac9 	bl	8004e90 <_malloc_r>
 80068fe:	4604      	mov	r4, r0
 8006900:	b140      	cbz	r0, 8006914 <__sfmoreglue+0x28>
 8006902:	2100      	movs	r1, #0
 8006904:	e9c0 1600 	strd	r1, r6, [r0]
 8006908:	300c      	adds	r0, #12
 800690a:	60a0      	str	r0, [r4, #8]
 800690c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006910:	f7fe fa4a 	bl	8004da8 <memset>
 8006914:	4620      	mov	r0, r4
 8006916:	bd70      	pop	{r4, r5, r6, pc}

08006918 <__sfp_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	; (8006920 <__sfp_lock_acquire+0x8>)
 800691a:	f000 b8b8 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	2000047d 	.word	0x2000047d

08006924 <__sfp_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	; (800692c <__sfp_lock_release+0x8>)
 8006926:	f000 b8b3 	b.w	8006a90 <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	2000047d 	.word	0x2000047d

08006930 <__sinit_lock_acquire>:
 8006930:	4801      	ldr	r0, [pc, #4]	; (8006938 <__sinit_lock_acquire+0x8>)
 8006932:	f000 b8ac 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 8006936:	bf00      	nop
 8006938:	2000047e 	.word	0x2000047e

0800693c <__sinit_lock_release>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__sinit_lock_release+0x8>)
 800693e:	f000 b8a7 	b.w	8006a90 <__retarget_lock_release_recursive>
 8006942:	bf00      	nop
 8006944:	2000047e 	.word	0x2000047e

08006948 <__sinit>:
 8006948:	b510      	push	{r4, lr}
 800694a:	4604      	mov	r4, r0
 800694c:	f7ff fff0 	bl	8006930 <__sinit_lock_acquire>
 8006950:	69a3      	ldr	r3, [r4, #24]
 8006952:	b11b      	cbz	r3, 800695c <__sinit+0x14>
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f7ff bff0 	b.w	800693c <__sinit_lock_release>
 800695c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006960:	6523      	str	r3, [r4, #80]	; 0x50
 8006962:	4b13      	ldr	r3, [pc, #76]	; (80069b0 <__sinit+0x68>)
 8006964:	4a13      	ldr	r2, [pc, #76]	; (80069b4 <__sinit+0x6c>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	62a2      	str	r2, [r4, #40]	; 0x28
 800696a:	42a3      	cmp	r3, r4
 800696c:	bf04      	itt	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	61a3      	streq	r3, [r4, #24]
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f820 	bl	80069b8 <__sfp>
 8006978:	6060      	str	r0, [r4, #4]
 800697a:	4620      	mov	r0, r4
 800697c:	f000 f81c 	bl	80069b8 <__sfp>
 8006980:	60a0      	str	r0, [r4, #8]
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f818 	bl	80069b8 <__sfp>
 8006988:	2200      	movs	r2, #0
 800698a:	60e0      	str	r0, [r4, #12]
 800698c:	2104      	movs	r1, #4
 800698e:	6860      	ldr	r0, [r4, #4]
 8006990:	f7ff ff82 	bl	8006898 <std>
 8006994:	68a0      	ldr	r0, [r4, #8]
 8006996:	2201      	movs	r2, #1
 8006998:	2109      	movs	r1, #9
 800699a:	f7ff ff7d 	bl	8006898 <std>
 800699e:	68e0      	ldr	r0, [r4, #12]
 80069a0:	2202      	movs	r2, #2
 80069a2:	2112      	movs	r1, #18
 80069a4:	f7ff ff78 	bl	8006898 <std>
 80069a8:	2301      	movs	r3, #1
 80069aa:	61a3      	str	r3, [r4, #24]
 80069ac:	e7d2      	b.n	8006954 <__sinit+0xc>
 80069ae:	bf00      	nop
 80069b0:	0800c704 	.word	0x0800c704
 80069b4:	080068e1 	.word	0x080068e1

080069b8 <__sfp>:
 80069b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ba:	4607      	mov	r7, r0
 80069bc:	f7ff ffac 	bl	8006918 <__sfp_lock_acquire>
 80069c0:	4b1e      	ldr	r3, [pc, #120]	; (8006a3c <__sfp+0x84>)
 80069c2:	681e      	ldr	r6, [r3, #0]
 80069c4:	69b3      	ldr	r3, [r6, #24]
 80069c6:	b913      	cbnz	r3, 80069ce <__sfp+0x16>
 80069c8:	4630      	mov	r0, r6
 80069ca:	f7ff ffbd 	bl	8006948 <__sinit>
 80069ce:	3648      	adds	r6, #72	; 0x48
 80069d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069d4:	3b01      	subs	r3, #1
 80069d6:	d503      	bpl.n	80069e0 <__sfp+0x28>
 80069d8:	6833      	ldr	r3, [r6, #0]
 80069da:	b30b      	cbz	r3, 8006a20 <__sfp+0x68>
 80069dc:	6836      	ldr	r6, [r6, #0]
 80069de:	e7f7      	b.n	80069d0 <__sfp+0x18>
 80069e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069e4:	b9d5      	cbnz	r5, 8006a1c <__sfp+0x64>
 80069e6:	4b16      	ldr	r3, [pc, #88]	; (8006a40 <__sfp+0x88>)
 80069e8:	60e3      	str	r3, [r4, #12]
 80069ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ee:	6665      	str	r5, [r4, #100]	; 0x64
 80069f0:	f000 f84c 	bl	8006a8c <__retarget_lock_init_recursive>
 80069f4:	f7ff ff96 	bl	8006924 <__sfp_lock_release>
 80069f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a00:	6025      	str	r5, [r4, #0]
 8006a02:	61a5      	str	r5, [r4, #24]
 8006a04:	2208      	movs	r2, #8
 8006a06:	4629      	mov	r1, r5
 8006a08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a0c:	f7fe f9cc 	bl	8004da8 <memset>
 8006a10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a18:	4620      	mov	r0, r4
 8006a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a1c:	3468      	adds	r4, #104	; 0x68
 8006a1e:	e7d9      	b.n	80069d4 <__sfp+0x1c>
 8006a20:	2104      	movs	r1, #4
 8006a22:	4638      	mov	r0, r7
 8006a24:	f7ff ff62 	bl	80068ec <__sfmoreglue>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	6030      	str	r0, [r6, #0]
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d1d5      	bne.n	80069dc <__sfp+0x24>
 8006a30:	f7ff ff78 	bl	8006924 <__sfp_lock_release>
 8006a34:	230c      	movs	r3, #12
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	e7ee      	b.n	8006a18 <__sfp+0x60>
 8006a3a:	bf00      	nop
 8006a3c:	0800c704 	.word	0x0800c704
 8006a40:	ffff0001 	.word	0xffff0001

08006a44 <_fwalk_reent>:
 8006a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a48:	4606      	mov	r6, r0
 8006a4a:	4688      	mov	r8, r1
 8006a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a50:	2700      	movs	r7, #0
 8006a52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a56:	f1b9 0901 	subs.w	r9, r9, #1
 8006a5a:	d505      	bpl.n	8006a68 <_fwalk_reent+0x24>
 8006a5c:	6824      	ldr	r4, [r4, #0]
 8006a5e:	2c00      	cmp	r4, #0
 8006a60:	d1f7      	bne.n	8006a52 <_fwalk_reent+0xe>
 8006a62:	4638      	mov	r0, r7
 8006a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a68:	89ab      	ldrh	r3, [r5, #12]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d907      	bls.n	8006a7e <_fwalk_reent+0x3a>
 8006a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a72:	3301      	adds	r3, #1
 8006a74:	d003      	beq.n	8006a7e <_fwalk_reent+0x3a>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4630      	mov	r0, r6
 8006a7a:	47c0      	blx	r8
 8006a7c:	4307      	orrs	r7, r0
 8006a7e:	3568      	adds	r5, #104	; 0x68
 8006a80:	e7e9      	b.n	8006a56 <_fwalk_reent+0x12>
	...

08006a84 <_localeconv_r>:
 8006a84:	4800      	ldr	r0, [pc, #0]	; (8006a88 <_localeconv_r+0x4>)
 8006a86:	4770      	bx	lr
 8006a88:	20000160 	.word	0x20000160

08006a8c <__retarget_lock_init_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_acquire_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_release_recursive>:
 8006a90:	4770      	bx	lr

08006a92 <__swhatbuf_r>:
 8006a92:	b570      	push	{r4, r5, r6, lr}
 8006a94:	460e      	mov	r6, r1
 8006a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a9a:	2900      	cmp	r1, #0
 8006a9c:	b096      	sub	sp, #88	; 0x58
 8006a9e:	4614      	mov	r4, r2
 8006aa0:	461d      	mov	r5, r3
 8006aa2:	da08      	bge.n	8006ab6 <__swhatbuf_r+0x24>
 8006aa4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	602a      	str	r2, [r5, #0]
 8006aac:	061a      	lsls	r2, r3, #24
 8006aae:	d410      	bmi.n	8006ad2 <__swhatbuf_r+0x40>
 8006ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ab4:	e00e      	b.n	8006ad4 <__swhatbuf_r+0x42>
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f000 fde6 	bl	8007688 <_fstat_r>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	dbf1      	blt.n	8006aa4 <__swhatbuf_r+0x12>
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ac6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aca:	425a      	negs	r2, r3
 8006acc:	415a      	adcs	r2, r3
 8006ace:	602a      	str	r2, [r5, #0]
 8006ad0:	e7ee      	b.n	8006ab0 <__swhatbuf_r+0x1e>
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	6023      	str	r3, [r4, #0]
 8006ad8:	b016      	add	sp, #88	; 0x58
 8006ada:	bd70      	pop	{r4, r5, r6, pc}

08006adc <__smakebuf_r>:
 8006adc:	898b      	ldrh	r3, [r1, #12]
 8006ade:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ae0:	079d      	lsls	r5, r3, #30
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	d507      	bpl.n	8006af8 <__smakebuf_r+0x1c>
 8006ae8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	6123      	str	r3, [r4, #16]
 8006af0:	2301      	movs	r3, #1
 8006af2:	6163      	str	r3, [r4, #20]
 8006af4:	b002      	add	sp, #8
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	ab01      	add	r3, sp, #4
 8006afa:	466a      	mov	r2, sp
 8006afc:	f7ff ffc9 	bl	8006a92 <__swhatbuf_r>
 8006b00:	9900      	ldr	r1, [sp, #0]
 8006b02:	4605      	mov	r5, r0
 8006b04:	4630      	mov	r0, r6
 8006b06:	f7fe f9c3 	bl	8004e90 <_malloc_r>
 8006b0a:	b948      	cbnz	r0, 8006b20 <__smakebuf_r+0x44>
 8006b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b10:	059a      	lsls	r2, r3, #22
 8006b12:	d4ef      	bmi.n	8006af4 <__smakebuf_r+0x18>
 8006b14:	f023 0303 	bic.w	r3, r3, #3
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	e7e3      	b.n	8006ae8 <__smakebuf_r+0xc>
 8006b20:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <__smakebuf_r+0x7c>)
 8006b22:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	6020      	str	r0, [r4, #0]
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	81a3      	strh	r3, [r4, #12]
 8006b2e:	9b00      	ldr	r3, [sp, #0]
 8006b30:	6163      	str	r3, [r4, #20]
 8006b32:	9b01      	ldr	r3, [sp, #4]
 8006b34:	6120      	str	r0, [r4, #16]
 8006b36:	b15b      	cbz	r3, 8006b50 <__smakebuf_r+0x74>
 8006b38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	f000 fdb5 	bl	80076ac <_isatty_r>
 8006b42:	b128      	cbz	r0, 8006b50 <__smakebuf_r+0x74>
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	89a0      	ldrh	r0, [r4, #12]
 8006b52:	4305      	orrs	r5, r0
 8006b54:	81a5      	strh	r5, [r4, #12]
 8006b56:	e7cd      	b.n	8006af4 <__smakebuf_r+0x18>
 8006b58:	080068e1 	.word	0x080068e1

08006b5c <__malloc_lock>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__malloc_lock+0x8>)
 8006b5e:	f7ff bf96 	b.w	8006a8e <__retarget_lock_acquire_recursive>
 8006b62:	bf00      	nop
 8006b64:	2000047c 	.word	0x2000047c

08006b68 <__malloc_unlock>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__malloc_unlock+0x8>)
 8006b6a:	f7ff bf91 	b.w	8006a90 <__retarget_lock_release_recursive>
 8006b6e:	bf00      	nop
 8006b70:	2000047c 	.word	0x2000047c

08006b74 <_Balloc>:
 8006b74:	b570      	push	{r4, r5, r6, lr}
 8006b76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b78:	4604      	mov	r4, r0
 8006b7a:	460d      	mov	r5, r1
 8006b7c:	b976      	cbnz	r6, 8006b9c <_Balloc+0x28>
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f7fe f8fc 	bl	8004d7c <malloc>
 8006b84:	4602      	mov	r2, r0
 8006b86:	6260      	str	r0, [r4, #36]	; 0x24
 8006b88:	b920      	cbnz	r0, 8006b94 <_Balloc+0x20>
 8006b8a:	4b18      	ldr	r3, [pc, #96]	; (8006bec <_Balloc+0x78>)
 8006b8c:	4818      	ldr	r0, [pc, #96]	; (8006bf0 <_Balloc+0x7c>)
 8006b8e:	2166      	movs	r1, #102	; 0x66
 8006b90:	f000 fd3a 	bl	8007608 <__assert_func>
 8006b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b98:	6006      	str	r6, [r0, #0]
 8006b9a:	60c6      	str	r6, [r0, #12]
 8006b9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b9e:	68f3      	ldr	r3, [r6, #12]
 8006ba0:	b183      	cbz	r3, 8006bc4 <_Balloc+0x50>
 8006ba2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006baa:	b9b8      	cbnz	r0, 8006bdc <_Balloc+0x68>
 8006bac:	2101      	movs	r1, #1
 8006bae:	fa01 f605 	lsl.w	r6, r1, r5
 8006bb2:	1d72      	adds	r2, r6, #5
 8006bb4:	0092      	lsls	r2, r2, #2
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 fb60 	bl	800727c <_calloc_r>
 8006bbc:	b160      	cbz	r0, 8006bd8 <_Balloc+0x64>
 8006bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bc2:	e00e      	b.n	8006be2 <_Balloc+0x6e>
 8006bc4:	2221      	movs	r2, #33	; 0x21
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb57 	bl	800727c <_calloc_r>
 8006bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd0:	60f0      	str	r0, [r6, #12]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1e4      	bne.n	8006ba2 <_Balloc+0x2e>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	6802      	ldr	r2, [r0, #0]
 8006bde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006be2:	2300      	movs	r3, #0
 8006be4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006be8:	e7f7      	b.n	8006bda <_Balloc+0x66>
 8006bea:	bf00      	nop
 8006bec:	0800c749 	.word	0x0800c749
 8006bf0:	0800c82c 	.word	0x0800c82c

08006bf4 <_Bfree>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b976      	cbnz	r6, 8006c1c <_Bfree+0x28>
 8006bfe:	2010      	movs	r0, #16
 8006c00:	f7fe f8bc 	bl	8004d7c <malloc>
 8006c04:	4602      	mov	r2, r0
 8006c06:	6268      	str	r0, [r5, #36]	; 0x24
 8006c08:	b920      	cbnz	r0, 8006c14 <_Bfree+0x20>
 8006c0a:	4b09      	ldr	r3, [pc, #36]	; (8006c30 <_Bfree+0x3c>)
 8006c0c:	4809      	ldr	r0, [pc, #36]	; (8006c34 <_Bfree+0x40>)
 8006c0e:	218a      	movs	r1, #138	; 0x8a
 8006c10:	f000 fcfa 	bl	8007608 <__assert_func>
 8006c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c18:	6006      	str	r6, [r0, #0]
 8006c1a:	60c6      	str	r6, [r0, #12]
 8006c1c:	b13c      	cbz	r4, 8006c2e <_Bfree+0x3a>
 8006c1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c20:	6862      	ldr	r2, [r4, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c28:	6021      	str	r1, [r4, #0]
 8006c2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	0800c749 	.word	0x0800c749
 8006c34:	0800c82c 	.word	0x0800c82c

08006c38 <__multadd>:
 8006c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3c:	690d      	ldr	r5, [r1, #16]
 8006c3e:	4607      	mov	r7, r0
 8006c40:	460c      	mov	r4, r1
 8006c42:	461e      	mov	r6, r3
 8006c44:	f101 0c14 	add.w	ip, r1, #20
 8006c48:	2000      	movs	r0, #0
 8006c4a:	f8dc 3000 	ldr.w	r3, [ip]
 8006c4e:	b299      	uxth	r1, r3
 8006c50:	fb02 6101 	mla	r1, r2, r1, r6
 8006c54:	0c1e      	lsrs	r6, r3, #16
 8006c56:	0c0b      	lsrs	r3, r1, #16
 8006c58:	fb02 3306 	mla	r3, r2, r6, r3
 8006c5c:	b289      	uxth	r1, r1
 8006c5e:	3001      	adds	r0, #1
 8006c60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c64:	4285      	cmp	r5, r0
 8006c66:	f84c 1b04 	str.w	r1, [ip], #4
 8006c6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c6e:	dcec      	bgt.n	8006c4a <__multadd+0x12>
 8006c70:	b30e      	cbz	r6, 8006cb6 <__multadd+0x7e>
 8006c72:	68a3      	ldr	r3, [r4, #8]
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dc19      	bgt.n	8006cac <__multadd+0x74>
 8006c78:	6861      	ldr	r1, [r4, #4]
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	3101      	adds	r1, #1
 8006c7e:	f7ff ff79 	bl	8006b74 <_Balloc>
 8006c82:	4680      	mov	r8, r0
 8006c84:	b928      	cbnz	r0, 8006c92 <__multadd+0x5a>
 8006c86:	4602      	mov	r2, r0
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <__multadd+0x84>)
 8006c8a:	480d      	ldr	r0, [pc, #52]	; (8006cc0 <__multadd+0x88>)
 8006c8c:	21b5      	movs	r1, #181	; 0xb5
 8006c8e:	f000 fcbb 	bl	8007608 <__assert_func>
 8006c92:	6922      	ldr	r2, [r4, #16]
 8006c94:	3202      	adds	r2, #2
 8006c96:	f104 010c 	add.w	r1, r4, #12
 8006c9a:	0092      	lsls	r2, r2, #2
 8006c9c:	300c      	adds	r0, #12
 8006c9e:	f7fe f875 	bl	8004d8c <memcpy>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f7ff ffa5 	bl	8006bf4 <_Bfree>
 8006caa:	4644      	mov	r4, r8
 8006cac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb0:	3501      	adds	r5, #1
 8006cb2:	615e      	str	r6, [r3, #20]
 8006cb4:	6125      	str	r5, [r4, #16]
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cbc:	0800c7bb 	.word	0x0800c7bb
 8006cc0:	0800c82c 	.word	0x0800c82c

08006cc4 <__hi0bits>:
 8006cc4:	0c03      	lsrs	r3, r0, #16
 8006cc6:	041b      	lsls	r3, r3, #16
 8006cc8:	b9d3      	cbnz	r3, 8006d00 <__hi0bits+0x3c>
 8006cca:	0400      	lsls	r0, r0, #16
 8006ccc:	2310      	movs	r3, #16
 8006cce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cd2:	bf04      	itt	eq
 8006cd4:	0200      	lsleq	r0, r0, #8
 8006cd6:	3308      	addeq	r3, #8
 8006cd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006cdc:	bf04      	itt	eq
 8006cde:	0100      	lsleq	r0, r0, #4
 8006ce0:	3304      	addeq	r3, #4
 8006ce2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006ce6:	bf04      	itt	eq
 8006ce8:	0080      	lsleq	r0, r0, #2
 8006cea:	3302      	addeq	r3, #2
 8006cec:	2800      	cmp	r0, #0
 8006cee:	db05      	blt.n	8006cfc <__hi0bits+0x38>
 8006cf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cf4:	f103 0301 	add.w	r3, r3, #1
 8006cf8:	bf08      	it	eq
 8006cfa:	2320      	moveq	r3, #32
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	4770      	bx	lr
 8006d00:	2300      	movs	r3, #0
 8006d02:	e7e4      	b.n	8006cce <__hi0bits+0xa>

08006d04 <__lo0bits>:
 8006d04:	6803      	ldr	r3, [r0, #0]
 8006d06:	f013 0207 	ands.w	r2, r3, #7
 8006d0a:	4601      	mov	r1, r0
 8006d0c:	d00b      	beq.n	8006d26 <__lo0bits+0x22>
 8006d0e:	07da      	lsls	r2, r3, #31
 8006d10:	d423      	bmi.n	8006d5a <__lo0bits+0x56>
 8006d12:	0798      	lsls	r0, r3, #30
 8006d14:	bf49      	itett	mi
 8006d16:	085b      	lsrmi	r3, r3, #1
 8006d18:	089b      	lsrpl	r3, r3, #2
 8006d1a:	2001      	movmi	r0, #1
 8006d1c:	600b      	strmi	r3, [r1, #0]
 8006d1e:	bf5c      	itt	pl
 8006d20:	600b      	strpl	r3, [r1, #0]
 8006d22:	2002      	movpl	r0, #2
 8006d24:	4770      	bx	lr
 8006d26:	b298      	uxth	r0, r3
 8006d28:	b9a8      	cbnz	r0, 8006d56 <__lo0bits+0x52>
 8006d2a:	0c1b      	lsrs	r3, r3, #16
 8006d2c:	2010      	movs	r0, #16
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	b90a      	cbnz	r2, 8006d36 <__lo0bits+0x32>
 8006d32:	3008      	adds	r0, #8
 8006d34:	0a1b      	lsrs	r3, r3, #8
 8006d36:	071a      	lsls	r2, r3, #28
 8006d38:	bf04      	itt	eq
 8006d3a:	091b      	lsreq	r3, r3, #4
 8006d3c:	3004      	addeq	r0, #4
 8006d3e:	079a      	lsls	r2, r3, #30
 8006d40:	bf04      	itt	eq
 8006d42:	089b      	lsreq	r3, r3, #2
 8006d44:	3002      	addeq	r0, #2
 8006d46:	07da      	lsls	r2, r3, #31
 8006d48:	d403      	bmi.n	8006d52 <__lo0bits+0x4e>
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	f100 0001 	add.w	r0, r0, #1
 8006d50:	d005      	beq.n	8006d5e <__lo0bits+0x5a>
 8006d52:	600b      	str	r3, [r1, #0]
 8006d54:	4770      	bx	lr
 8006d56:	4610      	mov	r0, r2
 8006d58:	e7e9      	b.n	8006d2e <__lo0bits+0x2a>
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	4770      	bx	lr
 8006d5e:	2020      	movs	r0, #32
 8006d60:	4770      	bx	lr
	...

08006d64 <__i2b>:
 8006d64:	b510      	push	{r4, lr}
 8006d66:	460c      	mov	r4, r1
 8006d68:	2101      	movs	r1, #1
 8006d6a:	f7ff ff03 	bl	8006b74 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__i2b+0x1a>
 8006d72:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <__i2b+0x24>)
 8006d74:	4805      	ldr	r0, [pc, #20]	; (8006d8c <__i2b+0x28>)
 8006d76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d7a:	f000 fc45 	bl	8007608 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	6144      	str	r4, [r0, #20]
 8006d82:	6103      	str	r3, [r0, #16]
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	bf00      	nop
 8006d88:	0800c7bb 	.word	0x0800c7bb
 8006d8c:	0800c82c 	.word	0x0800c82c

08006d90 <__multiply>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	4691      	mov	r9, r2
 8006d96:	690a      	ldr	r2, [r1, #16]
 8006d98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	bfb8      	it	lt
 8006da0:	460b      	movlt	r3, r1
 8006da2:	460c      	mov	r4, r1
 8006da4:	bfbc      	itt	lt
 8006da6:	464c      	movlt	r4, r9
 8006da8:	4699      	movlt	r9, r3
 8006daa:	6927      	ldr	r7, [r4, #16]
 8006dac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	6861      	ldr	r1, [r4, #4]
 8006db4:	eb07 060a 	add.w	r6, r7, sl
 8006db8:	42b3      	cmp	r3, r6
 8006dba:	b085      	sub	sp, #20
 8006dbc:	bfb8      	it	lt
 8006dbe:	3101      	addlt	r1, #1
 8006dc0:	f7ff fed8 	bl	8006b74 <_Balloc>
 8006dc4:	b930      	cbnz	r0, 8006dd4 <__multiply+0x44>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4b44      	ldr	r3, [pc, #272]	; (8006edc <__multiply+0x14c>)
 8006dca:	4845      	ldr	r0, [pc, #276]	; (8006ee0 <__multiply+0x150>)
 8006dcc:	f240 115d 	movw	r1, #349	; 0x15d
 8006dd0:	f000 fc1a 	bl	8007608 <__assert_func>
 8006dd4:	f100 0514 	add.w	r5, r0, #20
 8006dd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ddc:	462b      	mov	r3, r5
 8006dde:	2200      	movs	r2, #0
 8006de0:	4543      	cmp	r3, r8
 8006de2:	d321      	bcc.n	8006e28 <__multiply+0x98>
 8006de4:	f104 0314 	add.w	r3, r4, #20
 8006de8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006dec:	f109 0314 	add.w	r3, r9, #20
 8006df0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006df4:	9202      	str	r2, [sp, #8]
 8006df6:	1b3a      	subs	r2, r7, r4
 8006df8:	3a15      	subs	r2, #21
 8006dfa:	f022 0203 	bic.w	r2, r2, #3
 8006dfe:	3204      	adds	r2, #4
 8006e00:	f104 0115 	add.w	r1, r4, #21
 8006e04:	428f      	cmp	r7, r1
 8006e06:	bf38      	it	cc
 8006e08:	2204      	movcc	r2, #4
 8006e0a:	9201      	str	r2, [sp, #4]
 8006e0c:	9a02      	ldr	r2, [sp, #8]
 8006e0e:	9303      	str	r3, [sp, #12]
 8006e10:	429a      	cmp	r2, r3
 8006e12:	d80c      	bhi.n	8006e2e <__multiply+0x9e>
 8006e14:	2e00      	cmp	r6, #0
 8006e16:	dd03      	ble.n	8006e20 <__multiply+0x90>
 8006e18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05a      	beq.n	8006ed6 <__multiply+0x146>
 8006e20:	6106      	str	r6, [r0, #16]
 8006e22:	b005      	add	sp, #20
 8006e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e28:	f843 2b04 	str.w	r2, [r3], #4
 8006e2c:	e7d8      	b.n	8006de0 <__multiply+0x50>
 8006e2e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e32:	f1ba 0f00 	cmp.w	sl, #0
 8006e36:	d024      	beq.n	8006e82 <__multiply+0xf2>
 8006e38:	f104 0e14 	add.w	lr, r4, #20
 8006e3c:	46a9      	mov	r9, r5
 8006e3e:	f04f 0c00 	mov.w	ip, #0
 8006e42:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e46:	f8d9 1000 	ldr.w	r1, [r9]
 8006e4a:	fa1f fb82 	uxth.w	fp, r2
 8006e4e:	b289      	uxth	r1, r1
 8006e50:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e58:	f8d9 2000 	ldr.w	r2, [r9]
 8006e5c:	4461      	add	r1, ip
 8006e5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e62:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e6a:	b289      	uxth	r1, r1
 8006e6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e70:	4577      	cmp	r7, lr
 8006e72:	f849 1b04 	str.w	r1, [r9], #4
 8006e76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e7a:	d8e2      	bhi.n	8006e42 <__multiply+0xb2>
 8006e7c:	9a01      	ldr	r2, [sp, #4]
 8006e7e:	f845 c002 	str.w	ip, [r5, r2]
 8006e82:	9a03      	ldr	r2, [sp, #12]
 8006e84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d020      	beq.n	8006ed2 <__multiply+0x142>
 8006e90:	6829      	ldr	r1, [r5, #0]
 8006e92:	f104 0c14 	add.w	ip, r4, #20
 8006e96:	46ae      	mov	lr, r5
 8006e98:	f04f 0a00 	mov.w	sl, #0
 8006e9c:	f8bc b000 	ldrh.w	fp, [ip]
 8006ea0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ea4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ea8:	4492      	add	sl, r2
 8006eaa:	b289      	uxth	r1, r1
 8006eac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006eb0:	f84e 1b04 	str.w	r1, [lr], #4
 8006eb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006eb8:	f8be 1000 	ldrh.w	r1, [lr]
 8006ebc:	0c12      	lsrs	r2, r2, #16
 8006ebe:	fb09 1102 	mla	r1, r9, r2, r1
 8006ec2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ec6:	4567      	cmp	r7, ip
 8006ec8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ecc:	d8e6      	bhi.n	8006e9c <__multiply+0x10c>
 8006ece:	9a01      	ldr	r2, [sp, #4]
 8006ed0:	50a9      	str	r1, [r5, r2]
 8006ed2:	3504      	adds	r5, #4
 8006ed4:	e79a      	b.n	8006e0c <__multiply+0x7c>
 8006ed6:	3e01      	subs	r6, #1
 8006ed8:	e79c      	b.n	8006e14 <__multiply+0x84>
 8006eda:	bf00      	nop
 8006edc:	0800c7bb 	.word	0x0800c7bb
 8006ee0:	0800c82c 	.word	0x0800c82c

08006ee4 <__pow5mult>:
 8006ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee8:	4615      	mov	r5, r2
 8006eea:	f012 0203 	ands.w	r2, r2, #3
 8006eee:	4606      	mov	r6, r0
 8006ef0:	460f      	mov	r7, r1
 8006ef2:	d007      	beq.n	8006f04 <__pow5mult+0x20>
 8006ef4:	4c25      	ldr	r4, [pc, #148]	; (8006f8c <__pow5mult+0xa8>)
 8006ef6:	3a01      	subs	r2, #1
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006efe:	f7ff fe9b 	bl	8006c38 <__multadd>
 8006f02:	4607      	mov	r7, r0
 8006f04:	10ad      	asrs	r5, r5, #2
 8006f06:	d03d      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f0a:	b97c      	cbnz	r4, 8006f2c <__pow5mult+0x48>
 8006f0c:	2010      	movs	r0, #16
 8006f0e:	f7fd ff35 	bl	8004d7c <malloc>
 8006f12:	4602      	mov	r2, r0
 8006f14:	6270      	str	r0, [r6, #36]	; 0x24
 8006f16:	b928      	cbnz	r0, 8006f24 <__pow5mult+0x40>
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <__pow5mult+0xac>)
 8006f1a:	481e      	ldr	r0, [pc, #120]	; (8006f94 <__pow5mult+0xb0>)
 8006f1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f20:	f000 fb72 	bl	8007608 <__assert_func>
 8006f24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f28:	6004      	str	r4, [r0, #0]
 8006f2a:	60c4      	str	r4, [r0, #12]
 8006f2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f34:	b94c      	cbnz	r4, 8006f4a <__pow5mult+0x66>
 8006f36:	f240 2171 	movw	r1, #625	; 0x271
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f7ff ff12 	bl	8006d64 <__i2b>
 8006f40:	2300      	movs	r3, #0
 8006f42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f46:	4604      	mov	r4, r0
 8006f48:	6003      	str	r3, [r0, #0]
 8006f4a:	f04f 0900 	mov.w	r9, #0
 8006f4e:	07eb      	lsls	r3, r5, #31
 8006f50:	d50a      	bpl.n	8006f68 <__pow5mult+0x84>
 8006f52:	4639      	mov	r1, r7
 8006f54:	4622      	mov	r2, r4
 8006f56:	4630      	mov	r0, r6
 8006f58:	f7ff ff1a 	bl	8006d90 <__multiply>
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	4680      	mov	r8, r0
 8006f60:	4630      	mov	r0, r6
 8006f62:	f7ff fe47 	bl	8006bf4 <_Bfree>
 8006f66:	4647      	mov	r7, r8
 8006f68:	106d      	asrs	r5, r5, #1
 8006f6a:	d00b      	beq.n	8006f84 <__pow5mult+0xa0>
 8006f6c:	6820      	ldr	r0, [r4, #0]
 8006f6e:	b938      	cbnz	r0, 8006f80 <__pow5mult+0x9c>
 8006f70:	4622      	mov	r2, r4
 8006f72:	4621      	mov	r1, r4
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff ff0b 	bl	8006d90 <__multiply>
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	f8c0 9000 	str.w	r9, [r0]
 8006f80:	4604      	mov	r4, r0
 8006f82:	e7e4      	b.n	8006f4e <__pow5mult+0x6a>
 8006f84:	4638      	mov	r0, r7
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	bf00      	nop
 8006f8c:	0800c978 	.word	0x0800c978
 8006f90:	0800c749 	.word	0x0800c749
 8006f94:	0800c82c 	.word	0x0800c82c

08006f98 <__lshift>:
 8006f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	6849      	ldr	r1, [r1, #4]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fa6:	68a3      	ldr	r3, [r4, #8]
 8006fa8:	4607      	mov	r7, r0
 8006faa:	4691      	mov	r9, r2
 8006fac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fb0:	f108 0601 	add.w	r6, r8, #1
 8006fb4:	42b3      	cmp	r3, r6
 8006fb6:	db0b      	blt.n	8006fd0 <__lshift+0x38>
 8006fb8:	4638      	mov	r0, r7
 8006fba:	f7ff fddb 	bl	8006b74 <_Balloc>
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	b948      	cbnz	r0, 8006fd6 <__lshift+0x3e>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	4b2a      	ldr	r3, [pc, #168]	; (8007070 <__lshift+0xd8>)
 8006fc6:	482b      	ldr	r0, [pc, #172]	; (8007074 <__lshift+0xdc>)
 8006fc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fcc:	f000 fb1c 	bl	8007608 <__assert_func>
 8006fd0:	3101      	adds	r1, #1
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	e7ee      	b.n	8006fb4 <__lshift+0x1c>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f100 0114 	add.w	r1, r0, #20
 8006fdc:	f100 0210 	add.w	r2, r0, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	4553      	cmp	r3, sl
 8006fe4:	db37      	blt.n	8007056 <__lshift+0xbe>
 8006fe6:	6920      	ldr	r0, [r4, #16]
 8006fe8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fec:	f104 0314 	add.w	r3, r4, #20
 8006ff0:	f019 091f 	ands.w	r9, r9, #31
 8006ff4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ff8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ffc:	d02f      	beq.n	800705e <__lshift+0xc6>
 8006ffe:	f1c9 0e20 	rsb	lr, r9, #32
 8007002:	468a      	mov	sl, r1
 8007004:	f04f 0c00 	mov.w	ip, #0
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	fa02 f209 	lsl.w	r2, r2, r9
 800700e:	ea42 020c 	orr.w	r2, r2, ip
 8007012:	f84a 2b04 	str.w	r2, [sl], #4
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	4298      	cmp	r0, r3
 800701c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007020:	d8f2      	bhi.n	8007008 <__lshift+0x70>
 8007022:	1b03      	subs	r3, r0, r4
 8007024:	3b15      	subs	r3, #21
 8007026:	f023 0303 	bic.w	r3, r3, #3
 800702a:	3304      	adds	r3, #4
 800702c:	f104 0215 	add.w	r2, r4, #21
 8007030:	4290      	cmp	r0, r2
 8007032:	bf38      	it	cc
 8007034:	2304      	movcc	r3, #4
 8007036:	f841 c003 	str.w	ip, [r1, r3]
 800703a:	f1bc 0f00 	cmp.w	ip, #0
 800703e:	d001      	beq.n	8007044 <__lshift+0xac>
 8007040:	f108 0602 	add.w	r6, r8, #2
 8007044:	3e01      	subs	r6, #1
 8007046:	4638      	mov	r0, r7
 8007048:	612e      	str	r6, [r5, #16]
 800704a:	4621      	mov	r1, r4
 800704c:	f7ff fdd2 	bl	8006bf4 <_Bfree>
 8007050:	4628      	mov	r0, r5
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	f842 0f04 	str.w	r0, [r2, #4]!
 800705a:	3301      	adds	r3, #1
 800705c:	e7c1      	b.n	8006fe2 <__lshift+0x4a>
 800705e:	3904      	subs	r1, #4
 8007060:	f853 2b04 	ldr.w	r2, [r3], #4
 8007064:	f841 2f04 	str.w	r2, [r1, #4]!
 8007068:	4298      	cmp	r0, r3
 800706a:	d8f9      	bhi.n	8007060 <__lshift+0xc8>
 800706c:	e7ea      	b.n	8007044 <__lshift+0xac>
 800706e:	bf00      	nop
 8007070:	0800c7bb 	.word	0x0800c7bb
 8007074:	0800c82c 	.word	0x0800c82c

08007078 <__mcmp>:
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	6902      	ldr	r2, [r0, #16]
 800707c:	690c      	ldr	r4, [r1, #16]
 800707e:	1b12      	subs	r2, r2, r4
 8007080:	d10e      	bne.n	80070a0 <__mcmp+0x28>
 8007082:	f100 0314 	add.w	r3, r0, #20
 8007086:	3114      	adds	r1, #20
 8007088:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800708c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007090:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007094:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007098:	42a5      	cmp	r5, r4
 800709a:	d003      	beq.n	80070a4 <__mcmp+0x2c>
 800709c:	d305      	bcc.n	80070aa <__mcmp+0x32>
 800709e:	2201      	movs	r2, #1
 80070a0:	4610      	mov	r0, r2
 80070a2:	bd30      	pop	{r4, r5, pc}
 80070a4:	4283      	cmp	r3, r0
 80070a6:	d3f3      	bcc.n	8007090 <__mcmp+0x18>
 80070a8:	e7fa      	b.n	80070a0 <__mcmp+0x28>
 80070aa:	f04f 32ff 	mov.w	r2, #4294967295
 80070ae:	e7f7      	b.n	80070a0 <__mcmp+0x28>

080070b0 <__mdiff>:
 80070b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	460c      	mov	r4, r1
 80070b6:	4606      	mov	r6, r0
 80070b8:	4611      	mov	r1, r2
 80070ba:	4620      	mov	r0, r4
 80070bc:	4690      	mov	r8, r2
 80070be:	f7ff ffdb 	bl	8007078 <__mcmp>
 80070c2:	1e05      	subs	r5, r0, #0
 80070c4:	d110      	bne.n	80070e8 <__mdiff+0x38>
 80070c6:	4629      	mov	r1, r5
 80070c8:	4630      	mov	r0, r6
 80070ca:	f7ff fd53 	bl	8006b74 <_Balloc>
 80070ce:	b930      	cbnz	r0, 80070de <__mdiff+0x2e>
 80070d0:	4b3a      	ldr	r3, [pc, #232]	; (80071bc <__mdiff+0x10c>)
 80070d2:	4602      	mov	r2, r0
 80070d4:	f240 2132 	movw	r1, #562	; 0x232
 80070d8:	4839      	ldr	r0, [pc, #228]	; (80071c0 <__mdiff+0x110>)
 80070da:	f000 fa95 	bl	8007608 <__assert_func>
 80070de:	2301      	movs	r3, #1
 80070e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e8:	bfa4      	itt	ge
 80070ea:	4643      	movge	r3, r8
 80070ec:	46a0      	movge	r8, r4
 80070ee:	4630      	mov	r0, r6
 80070f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070f4:	bfa6      	itte	ge
 80070f6:	461c      	movge	r4, r3
 80070f8:	2500      	movge	r5, #0
 80070fa:	2501      	movlt	r5, #1
 80070fc:	f7ff fd3a 	bl	8006b74 <_Balloc>
 8007100:	b920      	cbnz	r0, 800710c <__mdiff+0x5c>
 8007102:	4b2e      	ldr	r3, [pc, #184]	; (80071bc <__mdiff+0x10c>)
 8007104:	4602      	mov	r2, r0
 8007106:	f44f 7110 	mov.w	r1, #576	; 0x240
 800710a:	e7e5      	b.n	80070d8 <__mdiff+0x28>
 800710c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007110:	6926      	ldr	r6, [r4, #16]
 8007112:	60c5      	str	r5, [r0, #12]
 8007114:	f104 0914 	add.w	r9, r4, #20
 8007118:	f108 0514 	add.w	r5, r8, #20
 800711c:	f100 0e14 	add.w	lr, r0, #20
 8007120:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007124:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007128:	f108 0210 	add.w	r2, r8, #16
 800712c:	46f2      	mov	sl, lr
 800712e:	2100      	movs	r1, #0
 8007130:	f859 3b04 	ldr.w	r3, [r9], #4
 8007134:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007138:	fa1f f883 	uxth.w	r8, r3
 800713c:	fa11 f18b 	uxtah	r1, r1, fp
 8007140:	0c1b      	lsrs	r3, r3, #16
 8007142:	eba1 0808 	sub.w	r8, r1, r8
 8007146:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800714a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800714e:	fa1f f888 	uxth.w	r8, r8
 8007152:	1419      	asrs	r1, r3, #16
 8007154:	454e      	cmp	r6, r9
 8007156:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800715a:	f84a 3b04 	str.w	r3, [sl], #4
 800715e:	d8e7      	bhi.n	8007130 <__mdiff+0x80>
 8007160:	1b33      	subs	r3, r6, r4
 8007162:	3b15      	subs	r3, #21
 8007164:	f023 0303 	bic.w	r3, r3, #3
 8007168:	3304      	adds	r3, #4
 800716a:	3415      	adds	r4, #21
 800716c:	42a6      	cmp	r6, r4
 800716e:	bf38      	it	cc
 8007170:	2304      	movcc	r3, #4
 8007172:	441d      	add	r5, r3
 8007174:	4473      	add	r3, lr
 8007176:	469e      	mov	lr, r3
 8007178:	462e      	mov	r6, r5
 800717a:	4566      	cmp	r6, ip
 800717c:	d30e      	bcc.n	800719c <__mdiff+0xec>
 800717e:	f10c 0203 	add.w	r2, ip, #3
 8007182:	1b52      	subs	r2, r2, r5
 8007184:	f022 0203 	bic.w	r2, r2, #3
 8007188:	3d03      	subs	r5, #3
 800718a:	45ac      	cmp	ip, r5
 800718c:	bf38      	it	cc
 800718e:	2200      	movcc	r2, #0
 8007190:	441a      	add	r2, r3
 8007192:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007196:	b17b      	cbz	r3, 80071b8 <__mdiff+0x108>
 8007198:	6107      	str	r7, [r0, #16]
 800719a:	e7a3      	b.n	80070e4 <__mdiff+0x34>
 800719c:	f856 8b04 	ldr.w	r8, [r6], #4
 80071a0:	fa11 f288 	uxtah	r2, r1, r8
 80071a4:	1414      	asrs	r4, r2, #16
 80071a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071aa:	b292      	uxth	r2, r2
 80071ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071b0:	f84e 2b04 	str.w	r2, [lr], #4
 80071b4:	1421      	asrs	r1, r4, #16
 80071b6:	e7e0      	b.n	800717a <__mdiff+0xca>
 80071b8:	3f01      	subs	r7, #1
 80071ba:	e7ea      	b.n	8007192 <__mdiff+0xe2>
 80071bc:	0800c7bb 	.word	0x0800c7bb
 80071c0:	0800c82c 	.word	0x0800c82c

080071c4 <__d2b>:
 80071c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071c8:	4689      	mov	r9, r1
 80071ca:	2101      	movs	r1, #1
 80071cc:	ec57 6b10 	vmov	r6, r7, d0
 80071d0:	4690      	mov	r8, r2
 80071d2:	f7ff fccf 	bl	8006b74 <_Balloc>
 80071d6:	4604      	mov	r4, r0
 80071d8:	b930      	cbnz	r0, 80071e8 <__d2b+0x24>
 80071da:	4602      	mov	r2, r0
 80071dc:	4b25      	ldr	r3, [pc, #148]	; (8007274 <__d2b+0xb0>)
 80071de:	4826      	ldr	r0, [pc, #152]	; (8007278 <__d2b+0xb4>)
 80071e0:	f240 310a 	movw	r1, #778	; 0x30a
 80071e4:	f000 fa10 	bl	8007608 <__assert_func>
 80071e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80071ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071f0:	bb35      	cbnz	r5, 8007240 <__d2b+0x7c>
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	d028      	beq.n	800724a <__d2b+0x86>
 80071f8:	4668      	mov	r0, sp
 80071fa:	9600      	str	r6, [sp, #0]
 80071fc:	f7ff fd82 	bl	8006d04 <__lo0bits>
 8007200:	9900      	ldr	r1, [sp, #0]
 8007202:	b300      	cbz	r0, 8007246 <__d2b+0x82>
 8007204:	9a01      	ldr	r2, [sp, #4]
 8007206:	f1c0 0320 	rsb	r3, r0, #32
 800720a:	fa02 f303 	lsl.w	r3, r2, r3
 800720e:	430b      	orrs	r3, r1
 8007210:	40c2      	lsrs	r2, r0
 8007212:	6163      	str	r3, [r4, #20]
 8007214:	9201      	str	r2, [sp, #4]
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	61a3      	str	r3, [r4, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bf14      	ite	ne
 800721e:	2202      	movne	r2, #2
 8007220:	2201      	moveq	r2, #1
 8007222:	6122      	str	r2, [r4, #16]
 8007224:	b1d5      	cbz	r5, 800725c <__d2b+0x98>
 8007226:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800722a:	4405      	add	r5, r0
 800722c:	f8c9 5000 	str.w	r5, [r9]
 8007230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007234:	f8c8 0000 	str.w	r0, [r8]
 8007238:	4620      	mov	r0, r4
 800723a:	b003      	add	sp, #12
 800723c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007244:	e7d5      	b.n	80071f2 <__d2b+0x2e>
 8007246:	6161      	str	r1, [r4, #20]
 8007248:	e7e5      	b.n	8007216 <__d2b+0x52>
 800724a:	a801      	add	r0, sp, #4
 800724c:	f7ff fd5a 	bl	8006d04 <__lo0bits>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	6163      	str	r3, [r4, #20]
 8007254:	2201      	movs	r2, #1
 8007256:	6122      	str	r2, [r4, #16]
 8007258:	3020      	adds	r0, #32
 800725a:	e7e3      	b.n	8007224 <__d2b+0x60>
 800725c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007260:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007264:	f8c9 0000 	str.w	r0, [r9]
 8007268:	6918      	ldr	r0, [r3, #16]
 800726a:	f7ff fd2b 	bl	8006cc4 <__hi0bits>
 800726e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007272:	e7df      	b.n	8007234 <__d2b+0x70>
 8007274:	0800c7bb 	.word	0x0800c7bb
 8007278:	0800c82c 	.word	0x0800c82c

0800727c <_calloc_r>:
 800727c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800727e:	fba1 2402 	umull	r2, r4, r1, r2
 8007282:	b94c      	cbnz	r4, 8007298 <_calloc_r+0x1c>
 8007284:	4611      	mov	r1, r2
 8007286:	9201      	str	r2, [sp, #4]
 8007288:	f7fd fe02 	bl	8004e90 <_malloc_r>
 800728c:	9a01      	ldr	r2, [sp, #4]
 800728e:	4605      	mov	r5, r0
 8007290:	b930      	cbnz	r0, 80072a0 <_calloc_r+0x24>
 8007292:	4628      	mov	r0, r5
 8007294:	b003      	add	sp, #12
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	220c      	movs	r2, #12
 800729a:	6002      	str	r2, [r0, #0]
 800729c:	2500      	movs	r5, #0
 800729e:	e7f8      	b.n	8007292 <_calloc_r+0x16>
 80072a0:	4621      	mov	r1, r4
 80072a2:	f7fd fd81 	bl	8004da8 <memset>
 80072a6:	e7f4      	b.n	8007292 <_calloc_r+0x16>

080072a8 <__sfputc_r>:
 80072a8:	6893      	ldr	r3, [r2, #8]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	b410      	push	{r4}
 80072b0:	6093      	str	r3, [r2, #8]
 80072b2:	da08      	bge.n	80072c6 <__sfputc_r+0x1e>
 80072b4:	6994      	ldr	r4, [r2, #24]
 80072b6:	42a3      	cmp	r3, r4
 80072b8:	db01      	blt.n	80072be <__sfputc_r+0x16>
 80072ba:	290a      	cmp	r1, #10
 80072bc:	d103      	bne.n	80072c6 <__sfputc_r+0x1e>
 80072be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c2:	f7fe baeb 	b.w	800589c <__swbuf_r>
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	1c58      	adds	r0, r3, #1
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	7019      	strb	r1, [r3, #0]
 80072ce:	4608      	mov	r0, r1
 80072d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072d4:	4770      	bx	lr

080072d6 <__sfputs_r>:
 80072d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d8:	4606      	mov	r6, r0
 80072da:	460f      	mov	r7, r1
 80072dc:	4614      	mov	r4, r2
 80072de:	18d5      	adds	r5, r2, r3
 80072e0:	42ac      	cmp	r4, r5
 80072e2:	d101      	bne.n	80072e8 <__sfputs_r+0x12>
 80072e4:	2000      	movs	r0, #0
 80072e6:	e007      	b.n	80072f8 <__sfputs_r+0x22>
 80072e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ec:	463a      	mov	r2, r7
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ffda 	bl	80072a8 <__sfputc_r>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d1f3      	bne.n	80072e0 <__sfputs_r+0xa>
 80072f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072fc <_vfiprintf_r>:
 80072fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007300:	460d      	mov	r5, r1
 8007302:	b09d      	sub	sp, #116	; 0x74
 8007304:	4614      	mov	r4, r2
 8007306:	4698      	mov	r8, r3
 8007308:	4606      	mov	r6, r0
 800730a:	b118      	cbz	r0, 8007314 <_vfiprintf_r+0x18>
 800730c:	6983      	ldr	r3, [r0, #24]
 800730e:	b90b      	cbnz	r3, 8007314 <_vfiprintf_r+0x18>
 8007310:	f7ff fb1a 	bl	8006948 <__sinit>
 8007314:	4b89      	ldr	r3, [pc, #548]	; (800753c <_vfiprintf_r+0x240>)
 8007316:	429d      	cmp	r5, r3
 8007318:	d11b      	bne.n	8007352 <_vfiprintf_r+0x56>
 800731a:	6875      	ldr	r5, [r6, #4]
 800731c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	d405      	bmi.n	800732e <_vfiprintf_r+0x32>
 8007322:	89ab      	ldrh	r3, [r5, #12]
 8007324:	059a      	lsls	r2, r3, #22
 8007326:	d402      	bmi.n	800732e <_vfiprintf_r+0x32>
 8007328:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800732a:	f7ff fbb0 	bl	8006a8e <__retarget_lock_acquire_recursive>
 800732e:	89ab      	ldrh	r3, [r5, #12]
 8007330:	071b      	lsls	r3, r3, #28
 8007332:	d501      	bpl.n	8007338 <_vfiprintf_r+0x3c>
 8007334:	692b      	ldr	r3, [r5, #16]
 8007336:	b9eb      	cbnz	r3, 8007374 <_vfiprintf_r+0x78>
 8007338:	4629      	mov	r1, r5
 800733a:	4630      	mov	r0, r6
 800733c:	f7fe fb00 	bl	8005940 <__swsetup_r>
 8007340:	b1c0      	cbz	r0, 8007374 <_vfiprintf_r+0x78>
 8007342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007344:	07dc      	lsls	r4, r3, #31
 8007346:	d50e      	bpl.n	8007366 <_vfiprintf_r+0x6a>
 8007348:	f04f 30ff 	mov.w	r0, #4294967295
 800734c:	b01d      	add	sp, #116	; 0x74
 800734e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007352:	4b7b      	ldr	r3, [pc, #492]	; (8007540 <_vfiprintf_r+0x244>)
 8007354:	429d      	cmp	r5, r3
 8007356:	d101      	bne.n	800735c <_vfiprintf_r+0x60>
 8007358:	68b5      	ldr	r5, [r6, #8]
 800735a:	e7df      	b.n	800731c <_vfiprintf_r+0x20>
 800735c:	4b79      	ldr	r3, [pc, #484]	; (8007544 <_vfiprintf_r+0x248>)
 800735e:	429d      	cmp	r5, r3
 8007360:	bf08      	it	eq
 8007362:	68f5      	ldreq	r5, [r6, #12]
 8007364:	e7da      	b.n	800731c <_vfiprintf_r+0x20>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	0598      	lsls	r0, r3, #22
 800736a:	d4ed      	bmi.n	8007348 <_vfiprintf_r+0x4c>
 800736c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800736e:	f7ff fb8f 	bl	8006a90 <__retarget_lock_release_recursive>
 8007372:	e7e9      	b.n	8007348 <_vfiprintf_r+0x4c>
 8007374:	2300      	movs	r3, #0
 8007376:	9309      	str	r3, [sp, #36]	; 0x24
 8007378:	2320      	movs	r3, #32
 800737a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800737e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007382:	2330      	movs	r3, #48	; 0x30
 8007384:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007548 <_vfiprintf_r+0x24c>
 8007388:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800738c:	f04f 0901 	mov.w	r9, #1
 8007390:	4623      	mov	r3, r4
 8007392:	469a      	mov	sl, r3
 8007394:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007398:	b10a      	cbz	r2, 800739e <_vfiprintf_r+0xa2>
 800739a:	2a25      	cmp	r2, #37	; 0x25
 800739c:	d1f9      	bne.n	8007392 <_vfiprintf_r+0x96>
 800739e:	ebba 0b04 	subs.w	fp, sl, r4
 80073a2:	d00b      	beq.n	80073bc <_vfiprintf_r+0xc0>
 80073a4:	465b      	mov	r3, fp
 80073a6:	4622      	mov	r2, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	4630      	mov	r0, r6
 80073ac:	f7ff ff93 	bl	80072d6 <__sfputs_r>
 80073b0:	3001      	adds	r0, #1
 80073b2:	f000 80aa 	beq.w	800750a <_vfiprintf_r+0x20e>
 80073b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b8:	445a      	add	r2, fp
 80073ba:	9209      	str	r2, [sp, #36]	; 0x24
 80073bc:	f89a 3000 	ldrb.w	r3, [sl]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 80a2 	beq.w	800750a <_vfiprintf_r+0x20e>
 80073c6:	2300      	movs	r3, #0
 80073c8:	f04f 32ff 	mov.w	r2, #4294967295
 80073cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073d0:	f10a 0a01 	add.w	sl, sl, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	9307      	str	r3, [sp, #28]
 80073d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073dc:	931a      	str	r3, [sp, #104]	; 0x68
 80073de:	4654      	mov	r4, sl
 80073e0:	2205      	movs	r2, #5
 80073e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e6:	4858      	ldr	r0, [pc, #352]	; (8007548 <_vfiprintf_r+0x24c>)
 80073e8:	f7f8 ff1a 	bl	8000220 <memchr>
 80073ec:	9a04      	ldr	r2, [sp, #16]
 80073ee:	b9d8      	cbnz	r0, 8007428 <_vfiprintf_r+0x12c>
 80073f0:	06d1      	lsls	r1, r2, #27
 80073f2:	bf44      	itt	mi
 80073f4:	2320      	movmi	r3, #32
 80073f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fa:	0713      	lsls	r3, r2, #28
 80073fc:	bf44      	itt	mi
 80073fe:	232b      	movmi	r3, #43	; 0x2b
 8007400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007404:	f89a 3000 	ldrb.w	r3, [sl]
 8007408:	2b2a      	cmp	r3, #42	; 0x2a
 800740a:	d015      	beq.n	8007438 <_vfiprintf_r+0x13c>
 800740c:	9a07      	ldr	r2, [sp, #28]
 800740e:	4654      	mov	r4, sl
 8007410:	2000      	movs	r0, #0
 8007412:	f04f 0c0a 	mov.w	ip, #10
 8007416:	4621      	mov	r1, r4
 8007418:	f811 3b01 	ldrb.w	r3, [r1], #1
 800741c:	3b30      	subs	r3, #48	; 0x30
 800741e:	2b09      	cmp	r3, #9
 8007420:	d94e      	bls.n	80074c0 <_vfiprintf_r+0x1c4>
 8007422:	b1b0      	cbz	r0, 8007452 <_vfiprintf_r+0x156>
 8007424:	9207      	str	r2, [sp, #28]
 8007426:	e014      	b.n	8007452 <_vfiprintf_r+0x156>
 8007428:	eba0 0308 	sub.w	r3, r0, r8
 800742c:	fa09 f303 	lsl.w	r3, r9, r3
 8007430:	4313      	orrs	r3, r2
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	46a2      	mov	sl, r4
 8007436:	e7d2      	b.n	80073de <_vfiprintf_r+0xe2>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	1d19      	adds	r1, r3, #4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	9103      	str	r1, [sp, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	bfbb      	ittet	lt
 8007444:	425b      	neglt	r3, r3
 8007446:	f042 0202 	orrlt.w	r2, r2, #2
 800744a:	9307      	strge	r3, [sp, #28]
 800744c:	9307      	strlt	r3, [sp, #28]
 800744e:	bfb8      	it	lt
 8007450:	9204      	strlt	r2, [sp, #16]
 8007452:	7823      	ldrb	r3, [r4, #0]
 8007454:	2b2e      	cmp	r3, #46	; 0x2e
 8007456:	d10c      	bne.n	8007472 <_vfiprintf_r+0x176>
 8007458:	7863      	ldrb	r3, [r4, #1]
 800745a:	2b2a      	cmp	r3, #42	; 0x2a
 800745c:	d135      	bne.n	80074ca <_vfiprintf_r+0x1ce>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	1d1a      	adds	r2, r3, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	9203      	str	r2, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfb8      	it	lt
 800746a:	f04f 33ff 	movlt.w	r3, #4294967295
 800746e:	3402      	adds	r4, #2
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007558 <_vfiprintf_r+0x25c>
 8007476:	7821      	ldrb	r1, [r4, #0]
 8007478:	2203      	movs	r2, #3
 800747a:	4650      	mov	r0, sl
 800747c:	f7f8 fed0 	bl	8000220 <memchr>
 8007480:	b140      	cbz	r0, 8007494 <_vfiprintf_r+0x198>
 8007482:	2340      	movs	r3, #64	; 0x40
 8007484:	eba0 000a 	sub.w	r0, r0, sl
 8007488:	fa03 f000 	lsl.w	r0, r3, r0
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	4303      	orrs	r3, r0
 8007490:	3401      	adds	r4, #1
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007498:	482c      	ldr	r0, [pc, #176]	; (800754c <_vfiprintf_r+0x250>)
 800749a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800749e:	2206      	movs	r2, #6
 80074a0:	f7f8 febe 	bl	8000220 <memchr>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d03f      	beq.n	8007528 <_vfiprintf_r+0x22c>
 80074a8:	4b29      	ldr	r3, [pc, #164]	; (8007550 <_vfiprintf_r+0x254>)
 80074aa:	bb1b      	cbnz	r3, 80074f4 <_vfiprintf_r+0x1f8>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	3307      	adds	r3, #7
 80074b0:	f023 0307 	bic.w	r3, r3, #7
 80074b4:	3308      	adds	r3, #8
 80074b6:	9303      	str	r3, [sp, #12]
 80074b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ba:	443b      	add	r3, r7
 80074bc:	9309      	str	r3, [sp, #36]	; 0x24
 80074be:	e767      	b.n	8007390 <_vfiprintf_r+0x94>
 80074c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c4:	460c      	mov	r4, r1
 80074c6:	2001      	movs	r0, #1
 80074c8:	e7a5      	b.n	8007416 <_vfiprintf_r+0x11a>
 80074ca:	2300      	movs	r3, #0
 80074cc:	3401      	adds	r4, #1
 80074ce:	9305      	str	r3, [sp, #20]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f04f 0c0a 	mov.w	ip, #10
 80074d6:	4620      	mov	r0, r4
 80074d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074dc:	3a30      	subs	r2, #48	; 0x30
 80074de:	2a09      	cmp	r2, #9
 80074e0:	d903      	bls.n	80074ea <_vfiprintf_r+0x1ee>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0c5      	beq.n	8007472 <_vfiprintf_r+0x176>
 80074e6:	9105      	str	r1, [sp, #20]
 80074e8:	e7c3      	b.n	8007472 <_vfiprintf_r+0x176>
 80074ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ee:	4604      	mov	r4, r0
 80074f0:	2301      	movs	r3, #1
 80074f2:	e7f0      	b.n	80074d6 <_vfiprintf_r+0x1da>
 80074f4:	ab03      	add	r3, sp, #12
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	462a      	mov	r2, r5
 80074fa:	4b16      	ldr	r3, [pc, #88]	; (8007554 <_vfiprintf_r+0x258>)
 80074fc:	a904      	add	r1, sp, #16
 80074fe:	4630      	mov	r0, r6
 8007500:	f7fd fdda 	bl	80050b8 <_printf_float>
 8007504:	4607      	mov	r7, r0
 8007506:	1c78      	adds	r0, r7, #1
 8007508:	d1d6      	bne.n	80074b8 <_vfiprintf_r+0x1bc>
 800750a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800750c:	07d9      	lsls	r1, r3, #31
 800750e:	d405      	bmi.n	800751c <_vfiprintf_r+0x220>
 8007510:	89ab      	ldrh	r3, [r5, #12]
 8007512:	059a      	lsls	r2, r3, #22
 8007514:	d402      	bmi.n	800751c <_vfiprintf_r+0x220>
 8007516:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007518:	f7ff faba 	bl	8006a90 <__retarget_lock_release_recursive>
 800751c:	89ab      	ldrh	r3, [r5, #12]
 800751e:	065b      	lsls	r3, r3, #25
 8007520:	f53f af12 	bmi.w	8007348 <_vfiprintf_r+0x4c>
 8007524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007526:	e711      	b.n	800734c <_vfiprintf_r+0x50>
 8007528:	ab03      	add	r3, sp, #12
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	462a      	mov	r2, r5
 800752e:	4b09      	ldr	r3, [pc, #36]	; (8007554 <_vfiprintf_r+0x258>)
 8007530:	a904      	add	r1, sp, #16
 8007532:	4630      	mov	r0, r6
 8007534:	f7fe f864 	bl	8005600 <_printf_i>
 8007538:	e7e4      	b.n	8007504 <_vfiprintf_r+0x208>
 800753a:	bf00      	nop
 800753c:	0800c7ec 	.word	0x0800c7ec
 8007540:	0800c80c 	.word	0x0800c80c
 8007544:	0800c7cc 	.word	0x0800c7cc
 8007548:	0800c984 	.word	0x0800c984
 800754c:	0800c98e 	.word	0x0800c98e
 8007550:	080050b9 	.word	0x080050b9
 8007554:	080072d7 	.word	0x080072d7
 8007558:	0800c98a 	.word	0x0800c98a

0800755c <__sread>:
 800755c:	b510      	push	{r4, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007564:	f000 f8d6 	bl	8007714 <_read_r>
 8007568:	2800      	cmp	r0, #0
 800756a:	bfab      	itete	ge
 800756c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800756e:	89a3      	ldrhlt	r3, [r4, #12]
 8007570:	181b      	addge	r3, r3, r0
 8007572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007576:	bfac      	ite	ge
 8007578:	6563      	strge	r3, [r4, #84]	; 0x54
 800757a:	81a3      	strhlt	r3, [r4, #12]
 800757c:	bd10      	pop	{r4, pc}

0800757e <__swrite>:
 800757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007582:	461f      	mov	r7, r3
 8007584:	898b      	ldrh	r3, [r1, #12]
 8007586:	05db      	lsls	r3, r3, #23
 8007588:	4605      	mov	r5, r0
 800758a:	460c      	mov	r4, r1
 800758c:	4616      	mov	r6, r2
 800758e:	d505      	bpl.n	800759c <__swrite+0x1e>
 8007590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007594:	2302      	movs	r3, #2
 8007596:	2200      	movs	r2, #0
 8007598:	f000 f898 	bl	80076cc <_lseek_r>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	4632      	mov	r2, r6
 80075aa:	463b      	mov	r3, r7
 80075ac:	4628      	mov	r0, r5
 80075ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	f000 b817 	b.w	80075e4 <_write_r>

080075b6 <__sseek>:
 80075b6:	b510      	push	{r4, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 f885 	bl	80076cc <_lseek_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	bf15      	itete	ne
 80075c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80075ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075d2:	81a3      	strheq	r3, [r4, #12]
 80075d4:	bf18      	it	ne
 80075d6:	81a3      	strhne	r3, [r4, #12]
 80075d8:	bd10      	pop	{r4, pc}

080075da <__sclose>:
 80075da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075de:	f000 b831 	b.w	8007644 <_close_r>
	...

080075e4 <_write_r>:
 80075e4:	b538      	push	{r3, r4, r5, lr}
 80075e6:	4d07      	ldr	r5, [pc, #28]	; (8007604 <_write_r+0x20>)
 80075e8:	4604      	mov	r4, r0
 80075ea:	4608      	mov	r0, r1
 80075ec:	4611      	mov	r1, r2
 80075ee:	2200      	movs	r2, #0
 80075f0:	602a      	str	r2, [r5, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f7fa fcff 	bl	8001ff6 <_write>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_write_r+0x1e>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_write_r+0x1e>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000480 	.word	0x20000480

08007608 <__assert_func>:
 8007608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760a:	4614      	mov	r4, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <__assert_func+0x2c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4605      	mov	r5, r0
 8007614:	68d8      	ldr	r0, [r3, #12]
 8007616:	b14c      	cbz	r4, 800762c <__assert_func+0x24>
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <__assert_func+0x30>)
 800761a:	9100      	str	r1, [sp, #0]
 800761c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007620:	4906      	ldr	r1, [pc, #24]	; (800763c <__assert_func+0x34>)
 8007622:	462b      	mov	r3, r5
 8007624:	f000 f81e 	bl	8007664 <fiprintf>
 8007628:	f000 f893 	bl	8007752 <abort>
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <__assert_func+0x38>)
 800762e:	461c      	mov	r4, r3
 8007630:	e7f3      	b.n	800761a <__assert_func+0x12>
 8007632:	bf00      	nop
 8007634:	2000000c 	.word	0x2000000c
 8007638:	0800c995 	.word	0x0800c995
 800763c:	0800c9a2 	.word	0x0800c9a2
 8007640:	0800c9d0 	.word	0x0800c9d0

08007644 <_close_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4d06      	ldr	r5, [pc, #24]	; (8007660 <_close_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7fa fced 	bl	800202e <_close>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_close_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_close_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000480 	.word	0x20000480

08007664 <fiprintf>:
 8007664:	b40e      	push	{r1, r2, r3}
 8007666:	b503      	push	{r0, r1, lr}
 8007668:	4601      	mov	r1, r0
 800766a:	ab03      	add	r3, sp, #12
 800766c:	4805      	ldr	r0, [pc, #20]	; (8007684 <fiprintf+0x20>)
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	f7ff fe41 	bl	80072fc <_vfiprintf_r>
 800767a:	b002      	add	sp, #8
 800767c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007680:	b003      	add	sp, #12
 8007682:	4770      	bx	lr
 8007684:	2000000c 	.word	0x2000000c

08007688 <_fstat_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d07      	ldr	r5, [pc, #28]	; (80076a8 <_fstat_r+0x20>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	602b      	str	r3, [r5, #0]
 8007696:	f7fa fcd6 	bl	8002046 <_fstat>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d102      	bne.n	80076a4 <_fstat_r+0x1c>
 800769e:	682b      	ldr	r3, [r5, #0]
 80076a0:	b103      	cbz	r3, 80076a4 <_fstat_r+0x1c>
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	bd38      	pop	{r3, r4, r5, pc}
 80076a6:	bf00      	nop
 80076a8:	20000480 	.word	0x20000480

080076ac <_isatty_r>:
 80076ac:	b538      	push	{r3, r4, r5, lr}
 80076ae:	4d06      	ldr	r5, [pc, #24]	; (80076c8 <_isatty_r+0x1c>)
 80076b0:	2300      	movs	r3, #0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4608      	mov	r0, r1
 80076b6:	602b      	str	r3, [r5, #0]
 80076b8:	f7fa fcd5 	bl	8002066 <_isatty>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_isatty_r+0x1a>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_isatty_r+0x1a>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20000480 	.word	0x20000480

080076cc <_lseek_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	; (80076ec <_lseek_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7fa fcce 	bl	800207c <_lseek>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_lseek_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_lseek_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20000480 	.word	0x20000480

080076f0 <__ascii_mbtowc>:
 80076f0:	b082      	sub	sp, #8
 80076f2:	b901      	cbnz	r1, 80076f6 <__ascii_mbtowc+0x6>
 80076f4:	a901      	add	r1, sp, #4
 80076f6:	b142      	cbz	r2, 800770a <__ascii_mbtowc+0x1a>
 80076f8:	b14b      	cbz	r3, 800770e <__ascii_mbtowc+0x1e>
 80076fa:	7813      	ldrb	r3, [r2, #0]
 80076fc:	600b      	str	r3, [r1, #0]
 80076fe:	7812      	ldrb	r2, [r2, #0]
 8007700:	1e10      	subs	r0, r2, #0
 8007702:	bf18      	it	ne
 8007704:	2001      	movne	r0, #1
 8007706:	b002      	add	sp, #8
 8007708:	4770      	bx	lr
 800770a:	4610      	mov	r0, r2
 800770c:	e7fb      	b.n	8007706 <__ascii_mbtowc+0x16>
 800770e:	f06f 0001 	mvn.w	r0, #1
 8007712:	e7f8      	b.n	8007706 <__ascii_mbtowc+0x16>

08007714 <_read_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	; (8007734 <_read_r+0x20>)
 8007718:	4604      	mov	r4, r0
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	2200      	movs	r2, #0
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7fa fc4a 	bl	8001fbc <_read>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_read_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_read_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	20000480 	.word	0x20000480

08007738 <__ascii_wctomb>:
 8007738:	b149      	cbz	r1, 800774e <__ascii_wctomb+0x16>
 800773a:	2aff      	cmp	r2, #255	; 0xff
 800773c:	bf85      	ittet	hi
 800773e:	238a      	movhi	r3, #138	; 0x8a
 8007740:	6003      	strhi	r3, [r0, #0]
 8007742:	700a      	strbls	r2, [r1, #0]
 8007744:	f04f 30ff 	movhi.w	r0, #4294967295
 8007748:	bf98      	it	ls
 800774a:	2001      	movls	r0, #1
 800774c:	4770      	bx	lr
 800774e:	4608      	mov	r0, r1
 8007750:	4770      	bx	lr

08007752 <abort>:
 8007752:	b508      	push	{r3, lr}
 8007754:	2006      	movs	r0, #6
 8007756:	f000 f82b 	bl	80077b0 <raise>
 800775a:	2001      	movs	r0, #1
 800775c:	f7fa fc24 	bl	8001fa8 <_exit>

08007760 <_raise_r>:
 8007760:	291f      	cmp	r1, #31
 8007762:	b538      	push	{r3, r4, r5, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	460d      	mov	r5, r1
 8007768:	d904      	bls.n	8007774 <_raise_r+0x14>
 800776a:	2316      	movs	r3, #22
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	f04f 30ff 	mov.w	r0, #4294967295
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007776:	b112      	cbz	r2, 800777e <_raise_r+0x1e>
 8007778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800777c:	b94b      	cbnz	r3, 8007792 <_raise_r+0x32>
 800777e:	4620      	mov	r0, r4
 8007780:	f000 f830 	bl	80077e4 <_getpid_r>
 8007784:	462a      	mov	r2, r5
 8007786:	4601      	mov	r1, r0
 8007788:	4620      	mov	r0, r4
 800778a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800778e:	f000 b817 	b.w	80077c0 <_kill_r>
 8007792:	2b01      	cmp	r3, #1
 8007794:	d00a      	beq.n	80077ac <_raise_r+0x4c>
 8007796:	1c59      	adds	r1, r3, #1
 8007798:	d103      	bne.n	80077a2 <_raise_r+0x42>
 800779a:	2316      	movs	r3, #22
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	2001      	movs	r0, #1
 80077a0:	e7e7      	b.n	8007772 <_raise_r+0x12>
 80077a2:	2400      	movs	r4, #0
 80077a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077a8:	4628      	mov	r0, r5
 80077aa:	4798      	blx	r3
 80077ac:	2000      	movs	r0, #0
 80077ae:	e7e0      	b.n	8007772 <_raise_r+0x12>

080077b0 <raise>:
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <raise+0xc>)
 80077b2:	4601      	mov	r1, r0
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f7ff bfd3 	b.w	8007760 <_raise_r>
 80077ba:	bf00      	nop
 80077bc:	2000000c 	.word	0x2000000c

080077c0 <_kill_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	; (80077e0 <_kill_r+0x20>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	f7fa fbdb 	bl	8001f88 <_kill>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d102      	bne.n	80077dc <_kill_r+0x1c>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	b103      	cbz	r3, 80077dc <_kill_r+0x1c>
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	bd38      	pop	{r3, r4, r5, pc}
 80077de:	bf00      	nop
 80077e0:	20000480 	.word	0x20000480

080077e4 <_getpid_r>:
 80077e4:	f7fa bbc8 	b.w	8001f78 <_getpid>

080077e8 <_init>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr

080077f4 <_fini>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr
